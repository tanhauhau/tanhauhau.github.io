import{S as Tf,i as Af,s as Sf,C as Mk,w as If,x as Df,y as Cf,z as Pf,A as _u,q as Of,o as Mf,B as Nf,r as Lf,Y as bu,e as a,t as n,k as i,c as t,a as e,h as r,d as o,m as p,b as l,X as Eu,f as T,g as m,H as s,J as jf}from"../../chunks/vendor-da4388d4.js";import{B as Hf}from"../../chunks/BlogLayout-14cfab6f.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var Rf="https://lihautan.com/_app/assets/ast-html-a25befbf.webp",Bf="https://lihautan.com/_app/assets/ast-html-8602ae18.webp",Vf="https://lihautan.com/_app/assets/ast-html-55ab8bab.png",Tu="https://lihautan.com/_app/assets/ast-html-c202466b.png",Ff="https://lihautan.com/_app/assets/ast-explorer-3303bf2e.gif",Au="https://lihautan.com/_app/assets/ast-explorer-83dba005.gif",Jf="https://lihautan.com/_app/assets/hero-twitter-07ce19e8.jpg";function zf(jo){let f,os,H,Os,_,I,Ho,Kn,Ro,Qn,Xn,_n,Bo,Zn,bn,xs,A,sr,Ms,or,ar,Ns,tr,er,Ls,nr,rr,js,lr,ir,Hs,pr,cr,Rs,hr,kr,vr,bt,yr,En,u,Et,Bs,dr,ur,Tt,fr,xr,Vs,gr,Fs,mr,wr,_r,At,is,R,Nk,br,L,Er,St,Tr,Ar,Js,Sr,Ir,zs,Dr,Cr,Ws,Pr,Or,Mr,It,ps,Vo,Dt,B,Lk,Nr,cs,Lr,Fo,jr,Hr,Jo,Rr,Br,Vr,qs,Gs,Ct,W,Pt,Fr,Jr,Ot,zr,Wr,Mt,zo,qr,Gr,Nt,Wo,Ur,Yr,D,q,Lt,$r,Kr,jt,qo,Qr,Xr,Ht,Go,Uo,Zr,sl,Rt,Yo,$o,ol,al,G,Bt,tl,el,Vt,Ko,nl,rl,Ft,Qo,Xo,ll,il,Jt,Zo,sa,pl,cl,U,zt,hl,kl,Wt,oa,vl,yl,qt,aa,ta,dl,ul,Gt,ea,na,fl,xl,Y,Ut,gl,ml,Yt,ra,wl,_l,$t,la,ia,bl,El,Kt,pa,ca,Tl,Al,$,Qt,Sl,Il,Xt,ha,Dl,Cl,Zt,ka,va,Pl,Ol,se,ya,da,Ml,Nl,K,oe,Ll,jl,ae,ua,Hl,Rl,te,fa,xa,Bl,Vl,ee,ga,ma,Fl,Jl,ne,zl,Wl,re,ql,Gl,wa,Iu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/code&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parserMethod</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the magical transform function</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// usually not a pure function</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transform</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generatorMethod</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/output&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> output</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ul,le,Yl,$l,_a,Du=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lang1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/code&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parserMethodLang1</span><span style="color: var(--shiki-color-text)">(lang1);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the magical transform function</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// usually not a pure function</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transformLang1ToLang2</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lang2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generatorMethodLang2</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/output&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> lang2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Kl,hs,Ql,ie,Xl,Zl,pe,si,oi,Tn,k,ce,Us,ai,ti,ks,ei,he,ni,ri,ke,li,ii,pi,as,Ys,ci,hi,$s,ki,vi,Ks,yi,di,ui,ve,fi,xi,ba,Cu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO: do something with this node</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// could be an array of nodes or just a node</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child[j]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// probably need more check,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for example,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if the node contains certain properties</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gi,Qs,mi,Ea,wi,_i,bi,vs,Ei,ye,Ti,Ai,de,Si,Ii,Di,Ta,Pu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast[key];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// probably need more check,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for example,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if the node contains certain properties</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ci,Xs,Pi,Aa,Oi,Mi,Ni,Sa,Ou=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(htmlAst</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlAstNode </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/*...*/</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(cssAst</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cssAstNode </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/*...*/</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Li,ue,ji,Hi,Ia,Mu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(node);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> node[key];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ri,Zs,Bi,Da,Vi,Fi,Ji,Ca,Nu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">someCondition</span><span style="color: var(--shiki-color-text)">(node)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span></span></code></pre>`,zi,Pa,Wi,so,qi,Oa,Gi,Ui,Yi,fe,$i,Ki,Ma,Lu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nodeType</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getNodeType</span><span style="color: var(--shiki-color-text)">(node);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nodeType </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      callbackMap[nodeType](node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)</span></span></code></pre>`,Qi,oo,Xi,xe,Zi,sp,op,ge,ap,An,ts,me,ao,tp,ep,we,np,rp,ys,_e,lp,ip,be,pp,cp,Ee,hp,Sn,E,Te,to,kp,vp,Ae,yp,dp,Na,ju=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,up,Se,fp,xp,La,Hu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gp,Ie,mp,wp,ja,Ru=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as first sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.unshift</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as last sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as next sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as prev sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,In,O,De,eo,_p,bp,Ce,Ep,Tp,Ha,Bu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updatedNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ap,Pe,Sp,Ip,Ra,Vu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key][index] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updatedNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Dn,h,Oe,no,Dp,Cp,Me,Pp,Op,Ba,Fu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">delete</span><span style="color: var(--shiki-color-text)"> parent[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mp,Ne,Np,Lp,Va,Ju=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jp,Le,Q,Hp,je,Rp,Bp,He,Vp,Fp,Re,Jp,zp,Wp,ro,qp,Be,Gp,Up,Yp,ds,$p,Ve,Kp,Qp,Fe,Xp,Zp,sc,Je,oc,ac,Fa,zu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">()) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// offset the index</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          j</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tc,ze,ec,nc,lo,rc,Ja,lc,ic,pc,io,cc,za,hc,kc,vc,Wa,Wu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// proceed to remove current node</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> result </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _hasRemoved;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// reset back</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// function _visit(...) &#123; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">()) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...somewhere in your visitCallback</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,yc,j,dc,qa,uc,fc,Ga,xc,gc,Ua,mc,wc,Ya,_c,bc,Ec,$a,qu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// don&#39;t need to take in &#96;node&#96; and &#96;parent&#96;,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// because it know exactly what they are</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// proceed to remove current node</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nodeType </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      callbackMap[nodeType]</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(_this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...somewhere in your visitCallback</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.remove</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Tc,We,Ac,Sc,X,Ic,Ka,Dc,Cc,po,Pc,Oc,co,Mc,Nc,Lc,qe,jc,Hc,ho,Qa,Ge,Rc,Bc,Vc,Xa,Ue,Fc,Jc,zc,Ye,Wc,Cn,b,$e,ko,qc,Gc,vo,Uc,Za,Yc,$c,Kc,C,Qc,st,Xc,Zc,ot,sh,oh,at,ah,th,tt,eh,nh,yo,rh,lh,ih,et,Gu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">figure</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">img</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;foo&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">figcaption</span><span style="color: var(--shiki-color-text)">&gt;lorem ipsum&lt;/</span><span style="color: var(--shiki-token-string-expression)">figcaption</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">figure</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ph,Ke,ch,hh,nt,Uu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 1. is node &lt;figure&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figure&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 2. is node contain class &#96;foo&#96; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">attribs</span><span style="color: var(--shiki-color-text)">.class </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 3. is node children contain &lt;img&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;img&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 4. is node children contain &lt;figcaption&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figcaption&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kh,Qe,vh,yh,rt,Yu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasAttr</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.attribs[key] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(fn) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 1. is node &lt;figure&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figure&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 2. is node contain class &#96;foo&#96; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasAttr</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;class&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 3. is node children contain &lt;img&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;img&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 4. is node children contain &lt;figcaption&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figcaption&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Pn,g,Xe,uo,dh,uh,Ze,fh,xh,fo,gh,sn,mh,wh,_h,lt,$u=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,bh,xo,Eh,go,Th,Ah,Sh,it,Ku=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.functionDeclaration</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">)]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.expressionStatement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.memberExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        [</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">)]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.returnStatement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ih,on,Dh,Ch,us,Ph,pt,Oh,Mh,ct,Nh,Lh,jh,ht,Qu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babelParser</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  function bar(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    console.log(foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return foo;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssTree</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  .foo &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    color: red;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#123; context</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;rule&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Hh,fs,Rh,mo,Bh,Vh,wo,Fh,Jh,zh,kt,Xu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode4</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">statement</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  console.log(foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// placeholder can be an AST node or string</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode5</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">statement</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  function bar(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">newNode4</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    alert(&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-string-expression)">&#39;hello world&#39;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;)</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return foo;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,On,V,an,_o,Wh,qh,tn,Gh,Uh,Z,en,Yh,$h,nn,Kh,Qh,rn,Xh,Zh,ln,sk,ok,ss,pn,cn,ak,tk,bo,ek,Eo,nk,rk,lk,hn,ik,pk,kn,vn,To,ck,Mn,es,yn,Ao,hk,kk,gs,So,vk,yk,Io,dk,uk,fk,P,dn,Do,xk,gk,un,Co,mk,wk,fn,Po,_k,bk,xn,Oo,Ek,Tk,gn,Mo,Ak,Sk,mn,No,Ik;return{c(){f=a("p"),os=n("Previously, I've talked about "),H=a("a"),Os=n("how to write a babel transformation"),_=n(", and I went one step deeper into "),I=a("a"),Ho=n("Babel"),Kn=n(", by "),Ro=a("a"),Qn=n("showing how you can create a custom JavaScript syntax"),Xn=n(", I demonstrated how Babel parses your code into AST, transforms it and generates back into code."),_n=i(),Bo=a("p"),Zn=n("Armed with the knowledge and experience of playing the JavaScript AST with Babel, let's take a look at how we can generalize this knowledge into other languages as well."),bn=i(),xs=a("blockquote"),A=a("p"),sr=n('When I refer to "other languages", I am actually referring to popular frontend languages, for example: '),Ms=a("a"),or=n("JavaScript"),ar=n(", "),Ns=a("a"),tr=n("TypeScript"),er=n(", "),Ls=a("a"),nr=n("Sass"),rr=n(", "),js=a("a"),lr=n("CSS"),ir=n(", "),Hs=a("a"),pr=n("HTML"),cr=n(", "),Rs=a("a"),hr=n("markdown"),kr=n("..."),vr=i(),bt=a("p"),yr=n("Of course, it does not limit to just frontend languages. It's just that it's easier to find a parser for these languages written in JavaScript than other languages, say C++ or Java."),En=i(),u=a("section"),Et=a("h2"),Bs=a("a"),dr=n("The parsers"),ur=i(),Tt=a("p"),fr=n("Like how we use Babel to do parsing and generating JavaScript, there are other libraries out there to help us with parsing and generating our language."),xr=i(),Vs=a("p"),gr=n("One easy trick to find these libraries is through "),Fs=a("a"),mr=n("https://astexplorer.net/"),wr=n("."),_r=i(),At=a("p"),is=a("span"),R=a("img"),br=i(),L=a("p"),Er=n("After you choose a language, you would see a list of parsers you can use to parse your language. For example, if you choose "),St=a("strong"),Tr=n("HTML"),Ar=n(", there's "),Js=a("a"),Sr=n("htmlparser2"),Ir=n(", "),zs=a("a"),Dr=n("hyntax"),Cr=n(", "),Ws=a("a"),Pr=n("parse5"),Or=n("... And when you choose one of the parsers, you can immediately see how the AST looks like on the right panel and the Github link to the parser on the top right."),Mr=i(),It=a("p"),ps=a("span"),Vo=a("picture"),Dt=a("source"),B=a("img"),Nr=i(),cs=a("p"),Lr=n("Here is a un-exhaustive list of parsers, and it's "),Fo=a("code"),jr=n("parse"),Hr=n(" and "),Jo=a("code"),Rr=n("generate"),Br=n(" methods:"),Vr=i(),qs=a("div"),Gs=a("table"),Ct=a("thead"),W=a("tr"),Pt=a("th"),Fr=n("Language"),Jr=i(),Ot=a("th"),zr=n("Parser"),Wr=i(),Mt=a("th"),zo=a("code"),qr=n("parse"),Gr=i(),Nt=a("th"),Wo=a("code"),Ur=n("generate"),Yr=i(),D=a("tbody"),q=a("tr"),Lt=a("td"),$r=n("HTML"),Kr=i(),jt=a("td"),qo=a("a"),Qr=n("parse5"),Xr=i(),Ht=a("td"),Go=a("a"),Uo=a("code"),Zr=n("parse5.parse(str)"),sl=i(),Rt=a("td"),Yo=a("a"),$o=a("code"),ol=n("parse5.serialize(ast)"),al=i(),G=a("tr"),Bt=a("td"),tl=n("Markdown"),el=i(),Vt=a("td"),Ko=a("a"),nl=n("remark"),rl=i(),Ft=a("td"),Qo=a("a"),Xo=a("code"),ll=n("unified().use(remarkParse)"),il=i(),Jt=a("td"),Zo=a("a"),sa=a("code"),pl=n("unified().use(remarkStringify)"),cl=i(),U=a("tr"),zt=a("td"),hl=n("CSS"),kl=i(),Wt=a("td"),oa=a("a"),vl=n("css-tree"),yl=i(),qt=a("td"),aa=a("a"),ta=a("code"),dl=n("csstree.parse(str)"),ul=i(),Gt=a("td"),ea=a("a"),na=a("code"),fl=n("csstree.generate(ast)"),xl=i(),Y=a("tr"),Ut=a("td"),gl=n("Sass"),ml=i(),Yt=a("td"),ra=a("a"),wl=n("sast"),_l=i(),$t=a("td"),la=a("a"),ia=a("code"),bl=n("sast.parse(str)"),El=i(),Kt=a("td"),pa=a("a"),ca=a("code"),Tl=n("sast.stringify(ast)"),Al=i(),$=a("tr"),Qt=a("td"),Sl=n("JavaScript"),Il=i(),Xt=a("td"),ha=a("a"),Dl=n("babel"),Cl=i(),Zt=a("td"),ka=a("a"),va=a("code"),Pl=n("babel.parse(str)"),Ol=i(),se=a("td"),ya=a("a"),da=a("code"),Ml=n("babel.generate(ast)"),Nl=i(),K=a("tr"),oe=a("td"),Ll=n("TypeScript"),jl=i(),ae=a("td"),ua=a("a"),Hl=n("TypeScript"),Rl=i(),te=a("td"),fa=a("a"),xa=a("code"),Bl=n("ts.createSourceFile(str)"),Vl=i(),ee=a("td"),ga=a("a"),ma=a("code"),Fl=n("ts.createPrinter().printFile(ast)"),Jl=i(),ne=a("p"),zl=n("As you can see most parsers provide both parsing and generating methods."),Wl=i(),re=a("p"),ql=n("So in general, you can have the following as a template to write your code transformation code:"),Gl=i(),wa=a("div"),Ul=i(),le=a("p"),Yl=n("You can, of course, transforming AST of one language to AST of another language, for example: Sass \u27A1\uFE0F CSS, Markdown \u27A1\uFE0F HTML, and use the generator of another language to generate out the code."),$l=i(),_a=a("div"),Kl=i(),hs=a("p"),Ql=n("Now armed with this template, let's talk about the more "),ie=a("em"),Xl=n("magical"),Zl=n(" stuff, "),pe=a("em"),si=n("the transform function"),oi=n("."),Tn=i(),k=a("section"),ce=a("h2"),Us=a("a"),ai=n("Traversing an AST"),ti=i(),ks=a("p"),ei=n("As the name AST suggests, AST uses a tree data structure. To hone the skills of manipulating AST, we need to recall our long distant memory of "),he=a("em"),ni=n('"Algorithm 101"'),ri=n(", the "),ke=a("strong"),li=n("depth-first search (DFS)"),ii=n(" tree traversal algorithm."),pi=i(),as=a("p"),Ys=a("a"),ci=n("Vaidehi Joshi"),hi=n(" wrote an amazing article on "),$s=a("a"),ki=n("demystifying Depth-First Search"),vi=n(", I don't think I can explain any better, so if you want to recap on depth-first search, please go and read "),Ks=a("a"),yi=n("her article"),di=n(" before we continue."),ui=i(),ve=a("p"),fi=n("Now you have a clearer idea of how depth-first search works, a depth-first search on an AST would look something like this:"),xi=i(),ba=a("div"),gi=i(),Qs=a("p"),mi=n("We can then fill up the "),Ea=a("code"),wi=n("TODO"),_i=n(" with our manipulation code."),bi=i(),vs=a("p"),Ei=n("If we find ourselves needing to do multiple traversals, with different AST manipulation, we would soon realize that mixing AST manipulation code with the traversal code is "),ye=a("em"),Ti=n("not clean enough"),Ai=n(". Naturally, you would realize "),de=a("em"),Si=n("it is cleaner"),Ii=n(" to pass in a callback function that gets called every time we visit a node:"),Di=i(),Ta=a("div"),Ci=i(),Xs=a("p"),Pi=n("The "),Aa=a("code"),Oi=n("visit"),Mi=n(" function is now generic enough that you can use it for any AST:"),Ni=i(),Sa=a("div"),Li=i(),ue=a("p"),ji=n("Naturally, you would think that having the information of the parent node, and the key / index of the current node would be useful to have in the callback function:"),Hi=i(),Ia=a("div"),Ri=i(),Zs=a("p"),Bi=n("Now, we might think to ourselves, I dont want to get callback for every node visited, I just need callback for a certain node. You might be tempted to add a condition in the "),Da=a("code"),Vi=n("visit"),Fi=n(" function:"),Ji=i(),Ca=a("div"),zi=i(),Pa=a("p"),Wi=n("But you think twice: "),so=a("em"),qi=n("what if someone else wants to use "),Oa=a("code"),Gi=n("visit"),Ui=n(" but with a different condition for callback?"),Yi=i(),fe=a("p"),$i=n("For most of the time, you want to callback only to a certain types of node. In that case, instead of passing in a callback function, you can pass in a map of node type to their respective callback functions:"),Ki=i(),Ma=a("div"),Qi=i(),oo=a("p"),Xi=n("At this point, you maybe realize, "),xe=a("em"),Zi=n("hey, this looks so much like one of those AST traversing libraries!"),sp=n(" And yes, this is how they get implemented."),op=i(),ge=a("p"),ap=n("Now we can traverse the AST, and find the node that we are interested in, so the next step is to manipulate them."),An=i(),ts=a("section"),me=a("h2"),ao=a("a"),tp=n("Manipulating AST"),ep=i(),we=a("p"),np=n("Manipulating the AST can be categorized into 3 different operations:"),rp=i(),ys=a("ul"),_e=a("li"),lp=n("Adding a node"),ip=i(),be=a("li"),pp=n("Replacing a node"),cp=i(),Ee=a("li"),hp=n("Removing a node"),Sn=i(),E=a("section"),Te=a("h3"),to=a("a"),kp=n("Adding a node"),vp=i(),Ae=a("p"),yp=n("To add a node, you can assign it to a keyed property of your node:"),dp=i(),Na=a("div"),up=i(),Se=a("p"),fp=n("or push the new node, if the keyed property is an array:"),xp=i(),La=a("div"),gp=i(),Ie=a("p"),mp=n("To add a node as a sibling, you may need to access the node's parent:"),wp=i(),ja=a("div"),In=i(),O=a("section"),De=a("h3"),eo=a("a"),_p=n("Replacing a node"),bp=i(),Ce=a("p"),Ep=n("To replace the current node to another node, update the key property of the current node's parent:"),Tp=i(),Ha=a("div"),Ap=i(),Pe=a("p"),Sp=n("If the key property of the parent is an array:"),Ip=i(),Ra=a("div"),Dn=i(),h=a("section"),Oe=a("h3"),no=a("a"),Dp=n("Removing a node"),Cp=i(),Me=a("p"),Pp=n("To remove the current node, delete the key property of the current node's parent:"),Op=i(),Ba=a("div"),Mp=i(),Ne=a("p"),Np=n("If the key property of the parent is an array:"),Lp=i(),Va=a("div"),jp=i(),Le=a("blockquote"),Q=a("p"),Hp=n("The operations of "),je=a("strong"),Rp=n("adding"),Bp=n(", "),He=a("strong"),Vp=n("replacing"),Fp=n(", and "),Re=a("strong"),Jp=n("removing"),zp=n(" nodes are so common that, they are usually implemented as a util function."),Wp=i(),ro=a("p"),qp=n("However, there's "),Be=a("strong"),Gp=n("one important step"),Up=n(" that I did not cover: after you mutate the node, you need to make sure that the traversal still works fine."),Yp=i(),ds=a("p"),$p=n("For a node that is a property of a key of its parent, adding, replacing and removing them are usually fine. Except for the replace operation, you might need to revisit the "),Ve=a("em"),Kp=n('"current node"'),Qp=n(", which is the "),Fe=a("em"),Xp=n("new replacing node"),Zp=n("."),sc=i(),Je=a("p"),oc=n("However, for node that are in an array, you need to take special care to update the array index of the loop:"),ac=i(),Fa=a("div"),tc=i(),ze=a("p"),ec=n("But how do you know that the current node was removed?"),nc=i(),lo=a("p"),rc=n("Well, knowing when a node got removed is sometimes a secret that lies within the "),Ja=a("code"),lc=n("remove"),ic=n(" util function from the tree traversal library."),pc=i(),io=a("p"),cc=n("It could be as simple as setting a flag when you call "),za=a("code"),hc=n("remove"),kc=n(":"),vc=i(),Wa=a("div"),yc=i(),j=a("p"),dc=n("But sometimes, instead of having to import the "),qa=a("code"),uc=n("remove"),fc=n(" util from the tree traversal library, the "),Ga=a("code"),xc=n("remove"),gc=n(" function is available in "),Ua=a("code"),mc=n("this"),wc=n(" of the "),Ya=a("code"),_c=n("visitCallback"),bc=n(":"),Ec=i(),$a=a("div"),Tc=i(),We=a("p"),Ac=n("Now you learned the 3 basic operations of manipulating the AST, you maybe wonder how exactly is to use these basic operations to write a codemod or an AST transform plugin?"),Sc=i(),X=a("p"),Ic=n("Well, in my "),Ka=a("a"),Dc=n("step-by-step guide"),Cc=n(", I've explained that, you can use AST explorer like "),po=a("a"),Pc=n("http://astexplorer.net/"),Oc=n(" or "),co=a("a"),Mc=n("Babel AST Explorer"),Nc=n(" to help you."),Lc=i(),qe=a("p"),jc=n("You need to:"),Hc=i(),ho=a("ul"),Qa=a("li"),Ge=a("strong"),Rc=n("Know how the part of the code you want to change look like in the AST"),Bc=n(", so you can target the specific type of the node, and"),Vc=i(),Xa=a("li"),Ue=a("strong"),Fc=n("Know how does the final output you wish to see look like in the AST"),Jc=n(", so you know what nodes to create, update or remove."),zc=i(),Ye=a("p"),Wc=n("So we are going to elaborate more on these 2 steps specifically."),Cn=i(),b=a("section"),$e=a("h2"),ko=a("a"),qc=n("Targeting a node"),Gc=i(),vo=a("p"),Uc=n("Node targeting, most of the times, is just a lot of "),Za=a("code"),Yc=n("==="),$c=n("."),Kc=i(),C=a("p"),Qc=n("For example, if you want to target a "),st=a("code"),Xc=n("<figure>"),Zc=n(" with a class "),ot=a("code"),sh=n("foo"),oh=n(" that contains an "),at=a("code"),ah=n("<img>"),th=n(" and a "),tt=a("code"),eh=n("<figcaption>"),nh=n(" in "),yo=a("a"),rh=n("htmlparser2"),lh=n(":"),ih=i(),et=a("div"),ph=i(),Ke=a("p"),ch=n("You need to check:"),hh=i(),nt=a("div"),kh=i(),Qe=a("p"),vh=n("To make it less verbose, we can refactor each check into reusable functions:"),yh=i(),rt=a("div"),Pn=i(),g=a("section"),Xe=a("h2"),uo=a("a"),dh=n("Creating a node"),uh=i(),Ze=a("p"),fh=n("There are a few ways you can create an AST node."),xh=i(),fo=a("p"),gh=n("The simplest and crudest way is to "),sn=a("strong"),mh=n("manually create the node object"),wh=n(". Most of the time, the node object is a JavaScript object. So you can just create them manually:"),_h=i(),lt=a("div"),bh=i(),xo=a("p"),Eh=n("It may become unwieldy when creating large, complex AST nodes, so sometimes library decides to provide builder functions, like "),go=a("a"),Th=n("@babel/types"),Ah=n(" to simplify node creation and provide default values:"),Sh=i(),it=a("div"),Ih=i(),on=a("p"),Dh=n("It looked more concise and tidier, but it is hard to comprehend and grasp what node it is creating."),Ch=i(),us=a("p"),Ph=n("So, a better way of creating complex AST node, is to use the "),pt=a("code"),Oh=n("parse"),Mh=n(" function + "),ct=a("code"),Nh=n("string"),Lh=n(":"),jh=i(),ht=a("div"),Hh=i(),fs=a("p"),Rh=n("For Babel, there's an amazing util called "),mo=a("a"),Bh=n("@babel/template"),Vh=n(", where you can use "),wo=a("a"),Fh=n("template literals"),Jh=n(" to create AST node:"),zh=i(),kt=a("div"),On=i(),V=a("section"),an=a("h2"),_o=a("a"),Wh=n("Summary"),qh=i(),tn=a("p"),Gh=n("We've gone through:"),Uh=i(),Z=a("ul"),en=a("li"),Yh=n("How to traverse an AST, using depth-first search algorithm,"),$h=i(),nn=a("li"),Kh=n("The 3 basic AST manipulations, addition, replacement, and removal,"),Qh=i(),rn=a("li"),Xh=n("How to target a node in AST, and"),Zh=i(),ln=a("li"),sk=n("How to create an AST node"),ok=i(),ss=a("blockquote"),pn=a("p"),cn=a("strong"),ak=n("Manipulating AST with JavaScript using Babel"),tk=i(),bo=a("p"),ek=n("If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),Eo=a("a"),nk=n("video course"),rk=n(", showing you step-by-step, how to write a babel plugin and codemod."),lk=i(),hn=a("p"),ik=n("In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),pk=i(),kn=a("p"),vn=a("strong"),To=a("a"),ck=n("Sounds interesting, let's take a look at the video course"),Mn=i(),es=a("section"),yn=a("h2"),Ao=a("a"),hk=n("Further Readings"),kk=i(),gs=a("p"),So=a("a"),vk=n("Dinesh (@flexdinesh)"),yk=i(),Io=a("a"),dk=n("tweeted"),uk=n(" his pocket collection of AST resources:"),fk=i(),P=a("ul"),dn=a("li"),Do=a("a"),xk=n("Code Transformation and Linting with ASTs"),gk=i(),un=a("li"),Co=a("a"),mk=n("Write your own code transform for fun and profit"),wk=i(),fn=a("li"),Po=a("a"),_k=n("Understanding ASTs by Building Your Own Babel Plugin"),bk=i(),xn=a("li"),Oo=a("a"),Ek=n("Writing your first Babel Plugin"),Tk=i(),gn=a("li"),Mo=a("a"),Ak=n("This is how I build Babel plug-ins"),Sk=i(),mn=a("li"),No=a("a"),Ik=n("Writing My First Babel Plugin"),this.h()},l(c){f=t(c,"P",{});var d=e(f);os=r(d,"Previously, I've talked about "),H=t(d,"A",{href:!0});var jk=e(H);Os=r(jk,"how to write a babel transformation"),jk.forEach(o),_=r(d,", and I went one step deeper into "),I=t(d,"A",{href:!0,rel:!0});var Hk=e(I);Ho=r(Hk,"Babel"),Hk.forEach(o),Kn=r(d,", by "),Ro=t(d,"A",{href:!0});var Rk=e(Ro);Qn=r(Rk,"showing how you can create a custom JavaScript syntax"),Rk.forEach(o),Xn=r(d,", I demonstrated how Babel parses your code into AST, transforms it and generates back into code."),d.forEach(o),_n=p(c),Bo=t(c,"P",{});var Bk=e(Bo);Zn=r(Bk,"Armed with the knowledge and experience of playing the JavaScript AST with Babel, let's take a look at how we can generalize this knowledge into other languages as well."),Bk.forEach(o),bn=p(c),xs=t(c,"BLOCKQUOTE",{});var Nn=e(xs);A=t(Nn,"P",{});var M=e(A);sr=r(M,'When I refer to "other languages", I am actually referring to popular frontend languages, for example: '),Ms=t(M,"A",{href:!0,rel:!0});var Vk=e(Ms);or=r(Vk,"JavaScript"),Vk.forEach(o),ar=r(M,", "),Ns=t(M,"A",{href:!0,rel:!0});var Fk=e(Ns);tr=r(Fk,"TypeScript"),Fk.forEach(o),er=r(M,", "),Ls=t(M,"A",{href:!0,rel:!0});var Jk=e(Ls);nr=r(Jk,"Sass"),Jk.forEach(o),rr=r(M,", "),js=t(M,"A",{href:!0,rel:!0});var zk=e(js);lr=r(zk,"CSS"),zk.forEach(o),ir=r(M,", "),Hs=t(M,"A",{href:!0,rel:!0});var Wk=e(Hs);pr=r(Wk,"HTML"),Wk.forEach(o),cr=r(M,", "),Rs=t(M,"A",{href:!0,rel:!0});var qk=e(Rs);hr=r(qk,"markdown"),qk.forEach(o),kr=r(M,"..."),M.forEach(o),vr=p(Nn),bt=t(Nn,"P",{});var Gk=e(bt);yr=r(Gk,"Of course, it does not limit to just frontend languages. It's just that it's easier to find a parser for these languages written in JavaScript than other languages, say C++ or Java."),Gk.forEach(o),Nn.forEach(o),En=p(c),u=t(c,"SECTION",{});var x=e(u);Et=t(x,"H2",{});var Uk=e(Et);Bs=t(Uk,"A",{href:!0,id:!0});var Yk=e(Bs);dr=r(Yk,"The parsers"),Yk.forEach(o),Uk.forEach(o),ur=p(x),Tt=t(x,"P",{});var $k=e(Tt);fr=r($k,"Like how we use Babel to do parsing and generating JavaScript, there are other libraries out there to help us with parsing and generating our language."),$k.forEach(o),xr=p(x),Vs=t(x,"P",{});var Ln=e(Vs);gr=r(Ln,"One easy trick to find these libraries is through "),Fs=t(Ln,"A",{href:!0,rel:!0});var Kk=e(Fs);mr=r(Kk,"https://astexplorer.net/"),Kk.forEach(o),wr=r(Ln,"."),Ln.forEach(o),_r=p(x),At=t(x,"P",{});var Qk=e(At);is=t(Qk,"SPAN",{style:!0});var Xk=e(is);R=t(Xk,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Xk.forEach(o),Qk.forEach(o),br=p(x),L=t(x,"P",{});var ns=e(L);Er=r(ns,"After you choose a language, you would see a list of parsers you can use to parse your language. For example, if you choose "),St=t(ns,"STRONG",{});var Zk=e(St);Tr=r(Zk,"HTML"),Zk.forEach(o),Ar=r(ns,", there's "),Js=t(ns,"A",{href:!0,rel:!0});var sv=e(Js);Sr=r(sv,"htmlparser2"),sv.forEach(o),Ir=r(ns,", "),zs=t(ns,"A",{href:!0,rel:!0});var ov=e(zs);Dr=r(ov,"hyntax"),ov.forEach(o),Cr=r(ns,", "),Ws=t(ns,"A",{href:!0,rel:!0});var av=e(Ws);Pr=r(av,"parse5"),av.forEach(o),Or=r(ns,"... And when you choose one of the parsers, you can immediately see how the AST looks like on the right panel and the Github link to the parser on the top right."),ns.forEach(o),Mr=p(x),It=t(x,"P",{});var tv=e(It);ps=t(tv,"SPAN",{style:!0});var ev=e(ps);Vo=t(ev,"PICTURE",{});var Dk=e(Vo);Dt=t(Dk,"SOURCE",{type:!0,srcset:!0}),B=t(Dk,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Dk.forEach(o),ev.forEach(o),tv.forEach(o),Nr=p(x),cs=t(x,"P",{});var vt=e(cs);Lr=r(vt,"Here is a un-exhaustive list of parsers, and it's "),Fo=t(vt,"CODE",{class:!0});var nv=e(Fo);jr=r(nv,"parse"),nv.forEach(o),Hr=r(vt," and "),Jo=t(vt,"CODE",{class:!0});var rv=e(Jo);Rr=r(rv,"generate"),rv.forEach(o),Br=r(vt," methods:"),vt.forEach(o),Vr=p(x),qs=t(x,"DIV",{style:!0});var lv=e(qs);Gs=t(lv,"TABLE",{});var jn=e(Gs);Ct=t(jn,"THEAD",{});var iv=e(Ct);W=t(iv,"TR",{});var ms=e(W);Pt=t(ms,"TH",{});var pv=e(Pt);Fr=r(pv,"Language"),pv.forEach(o),Jr=p(ms),Ot=t(ms,"TH",{});var cv=e(Ot);zr=r(cv,"Parser"),cv.forEach(o),Wr=p(ms),Mt=t(ms,"TH",{});var hv=e(Mt);zo=t(hv,"CODE",{class:!0});var kv=e(zo);qr=r(kv,"parse"),kv.forEach(o),hv.forEach(o),Gr=p(ms),Nt=t(ms,"TH",{});var vv=e(Nt);Wo=t(vv,"CODE",{class:!0});var yv=e(Wo);Ur=r(yv,"generate"),yv.forEach(o),vv.forEach(o),ms.forEach(o),iv.forEach(o),Yr=p(jn),D=t(jn,"TBODY",{});var F=e(D);q=t(F,"TR",{});var ws=e(q);Lt=t(ws,"TD",{});var dv=e(Lt);$r=r(dv,"HTML"),dv.forEach(o),Kr=p(ws),jt=t(ws,"TD",{});var uv=e(jt);qo=t(uv,"A",{href:!0});var fv=e(qo);Qr=r(fv,"parse5"),fv.forEach(o),uv.forEach(o),Xr=p(ws),Ht=t(ws,"TD",{});var xv=e(Ht);Go=t(xv,"A",{href:!0});var gv=e(Go);Uo=t(gv,"CODE",{class:!0});var mv=e(Uo);Zr=r(mv,"parse5.parse(str)"),mv.forEach(o),gv.forEach(o),xv.forEach(o),sl=p(ws),Rt=t(ws,"TD",{});var wv=e(Rt);Yo=t(wv,"A",{href:!0});var _v=e(Yo);$o=t(_v,"CODE",{class:!0});var bv=e($o);ol=r(bv,"parse5.serialize(ast)"),bv.forEach(o),_v.forEach(o),wv.forEach(o),ws.forEach(o),al=p(F),G=t(F,"TR",{});var _s=e(G);Bt=t(_s,"TD",{});var Ev=e(Bt);tl=r(Ev,"Markdown"),Ev.forEach(o),el=p(_s),Vt=t(_s,"TD",{});var Tv=e(Vt);Ko=t(Tv,"A",{href:!0});var Av=e(Ko);nl=r(Av,"remark"),Av.forEach(o),Tv.forEach(o),rl=p(_s),Ft=t(_s,"TD",{});var Sv=e(Ft);Qo=t(Sv,"A",{href:!0});var Iv=e(Qo);Xo=t(Iv,"CODE",{class:!0});var Dv=e(Xo);ll=r(Dv,"unified().use(remarkParse)"),Dv.forEach(o),Iv.forEach(o),Sv.forEach(o),il=p(_s),Jt=t(_s,"TD",{});var Cv=e(Jt);Zo=t(Cv,"A",{href:!0});var Pv=e(Zo);sa=t(Pv,"CODE",{class:!0});var Ov=e(sa);pl=r(Ov,"unified().use(remarkStringify)"),Ov.forEach(o),Pv.forEach(o),Cv.forEach(o),_s.forEach(o),cl=p(F),U=t(F,"TR",{});var bs=e(U);zt=t(bs,"TD",{});var Mv=e(zt);hl=r(Mv,"CSS"),Mv.forEach(o),kl=p(bs),Wt=t(bs,"TD",{});var Nv=e(Wt);oa=t(Nv,"A",{href:!0});var Lv=e(oa);vl=r(Lv,"css-tree"),Lv.forEach(o),Nv.forEach(o),yl=p(bs),qt=t(bs,"TD",{});var jv=e(qt);aa=t(jv,"A",{href:!0});var Hv=e(aa);ta=t(Hv,"CODE",{class:!0});var Rv=e(ta);dl=r(Rv,"csstree.parse(str)"),Rv.forEach(o),Hv.forEach(o),jv.forEach(o),ul=p(bs),Gt=t(bs,"TD",{});var Bv=e(Gt);ea=t(Bv,"A",{href:!0});var Vv=e(ea);na=t(Vv,"CODE",{class:!0});var Fv=e(na);fl=r(Fv,"csstree.generate(ast)"),Fv.forEach(o),Vv.forEach(o),Bv.forEach(o),bs.forEach(o),xl=p(F),Y=t(F,"TR",{});var Es=e(Y);Ut=t(Es,"TD",{});var Jv=e(Ut);gl=r(Jv,"Sass"),Jv.forEach(o),ml=p(Es),Yt=t(Es,"TD",{});var zv=e(Yt);ra=t(zv,"A",{href:!0});var Wv=e(ra);wl=r(Wv,"sast"),Wv.forEach(o),zv.forEach(o),_l=p(Es),$t=t(Es,"TD",{});var qv=e($t);la=t(qv,"A",{href:!0});var Gv=e(la);ia=t(Gv,"CODE",{class:!0});var Uv=e(ia);bl=r(Uv,"sast.parse(str)"),Uv.forEach(o),Gv.forEach(o),qv.forEach(o),El=p(Es),Kt=t(Es,"TD",{});var Yv=e(Kt);pa=t(Yv,"A",{href:!0});var $v=e(pa);ca=t($v,"CODE",{class:!0});var Kv=e(ca);Tl=r(Kv,"sast.stringify(ast)"),Kv.forEach(o),$v.forEach(o),Yv.forEach(o),Es.forEach(o),Al=p(F),$=t(F,"TR",{});var Ts=e($);Qt=t(Ts,"TD",{});var Qv=e(Qt);Sl=r(Qv,"JavaScript"),Qv.forEach(o),Il=p(Ts),Xt=t(Ts,"TD",{});var Xv=e(Xt);ha=t(Xv,"A",{href:!0});var Zv=e(ha);Dl=r(Zv,"babel"),Zv.forEach(o),Xv.forEach(o),Cl=p(Ts),Zt=t(Ts,"TD",{});var sy=e(Zt);ka=t(sy,"A",{href:!0});var oy=e(ka);va=t(oy,"CODE",{class:!0});var ay=e(va);Pl=r(ay,"babel.parse(str)"),ay.forEach(o),oy.forEach(o),sy.forEach(o),Ol=p(Ts),se=t(Ts,"TD",{});var ty=e(se);ya=t(ty,"A",{href:!0});var ey=e(ya);da=t(ey,"CODE",{class:!0});var ny=e(da);Ml=r(ny,"babel.generate(ast)"),ny.forEach(o),ey.forEach(o),ty.forEach(o),Ts.forEach(o),Nl=p(F),K=t(F,"TR",{});var As=e(K);oe=t(As,"TD",{});var ry=e(oe);Ll=r(ry,"TypeScript"),ry.forEach(o),jl=p(As),ae=t(As,"TD",{});var ly=e(ae);ua=t(ly,"A",{href:!0});var iy=e(ua);Hl=r(iy,"TypeScript"),iy.forEach(o),ly.forEach(o),Rl=p(As),te=t(As,"TD",{});var py=e(te);fa=t(py,"A",{href:!0});var cy=e(fa);xa=t(cy,"CODE",{class:!0});var hy=e(xa);Bl=r(hy,"ts.createSourceFile(str)"),hy.forEach(o),cy.forEach(o),py.forEach(o),Vl=p(As),ee=t(As,"TD",{});var ky=e(ee);ga=t(ky,"A",{href:!0});var vy=e(ga);ma=t(vy,"CODE",{class:!0});var yy=e(ma);Fl=r(yy,"ts.createPrinter().printFile(ast)"),yy.forEach(o),vy.forEach(o),ky.forEach(o),As.forEach(o),F.forEach(o),jn.forEach(o),lv.forEach(o),Jl=p(x),ne=t(x,"P",{});var dy=e(ne);zl=r(dy,"As you can see most parsers provide both parsing and generating methods."),dy.forEach(o),Wl=p(x),re=t(x,"P",{});var uy=e(re);ql=r(uy,"So in general, you can have the following as a template to write your code transformation code:"),uy.forEach(o),Gl=p(x),wa=t(x,"DIV",{class:!0});var Zu=e(wa);Zu.forEach(o),Ul=p(x),le=t(x,"P",{});var fy=e(le);Yl=r(fy,"You can, of course, transforming AST of one language to AST of another language, for example: Sass \u27A1\uFE0F CSS, Markdown \u27A1\uFE0F HTML, and use the generator of another language to generate out the code."),fy.forEach(o),$l=p(x),_a=t(x,"DIV",{class:!0});var sf=e(_a);sf.forEach(o),Kl=p(x),hs=t(x,"P",{});var yt=e(hs);Ql=r(yt,"Now armed with this template, let's talk about the more "),ie=t(yt,"EM",{});var xy=e(ie);Xl=r(xy,"magical"),xy.forEach(o),Zl=r(yt," stuff, "),pe=t(yt,"EM",{});var gy=e(pe);si=r(gy,"the transform function"),gy.forEach(o),oi=r(yt,"."),yt.forEach(o),x.forEach(o),Tn=p(c),k=t(c,"SECTION",{});var y=e(k);ce=t(y,"H2",{});var my=e(ce);Us=t(my,"A",{href:!0,id:!0});var wy=e(Us);ai=r(wy,"Traversing an AST"),wy.forEach(o),my.forEach(o),ti=p(y),ks=t(y,"P",{});var dt=e(ks);ei=r(dt,"As the name AST suggests, AST uses a tree data structure. To hone the skills of manipulating AST, we need to recall our long distant memory of "),he=t(dt,"EM",{});var _y=e(he);ni=r(_y,'"Algorithm 101"'),_y.forEach(o),ri=r(dt,", the "),ke=t(dt,"STRONG",{});var by=e(ke);li=r(by,"depth-first search (DFS)"),by.forEach(o),ii=r(dt," tree traversal algorithm."),dt.forEach(o),pi=p(y),as=t(y,"P",{});var Lo=e(as);Ys=t(Lo,"A",{href:!0,rel:!0});var Ey=e(Ys);ci=r(Ey,"Vaidehi Joshi"),Ey.forEach(o),hi=r(Lo," wrote an amazing article on "),$s=t(Lo,"A",{href:!0,rel:!0});var Ty=e($s);ki=r(Ty,"demystifying Depth-First Search"),Ty.forEach(o),vi=r(Lo,", I don't think I can explain any better, so if you want to recap on depth-first search, please go and read "),Ks=t(Lo,"A",{href:!0,rel:!0});var Ay=e(Ks);yi=r(Ay,"her article"),Ay.forEach(o),di=r(Lo," before we continue."),Lo.forEach(o),ui=p(y),ve=t(y,"P",{});var Sy=e(ve);fi=r(Sy,"Now you have a clearer idea of how depth-first search works, a depth-first search on an AST would look something like this:"),Sy.forEach(o),xi=p(y),ba=t(y,"DIV",{class:!0});var of=e(ba);of.forEach(o),gi=p(y),Qs=t(y,"P",{});var Hn=e(Qs);mi=r(Hn,"We can then fill up the "),Ea=t(Hn,"CODE",{class:!0});var Iy=e(Ea);wi=r(Iy,"TODO"),Iy.forEach(o),_i=r(Hn," with our manipulation code."),Hn.forEach(o),bi=p(y),vs=t(y,"P",{});var ut=e(vs);Ei=r(ut,"If we find ourselves needing to do multiple traversals, with different AST manipulation, we would soon realize that mixing AST manipulation code with the traversal code is "),ye=t(ut,"EM",{});var Dy=e(ye);Ti=r(Dy,"not clean enough"),Dy.forEach(o),Ai=r(ut,". Naturally, you would realize "),de=t(ut,"EM",{});var Cy=e(de);Si=r(Cy,"it is cleaner"),Cy.forEach(o),Ii=r(ut," to pass in a callback function that gets called every time we visit a node:"),ut.forEach(o),Di=p(y),Ta=t(y,"DIV",{class:!0});var af=e(Ta);af.forEach(o),Ci=p(y),Xs=t(y,"P",{});var Rn=e(Xs);Pi=r(Rn,"The "),Aa=t(Rn,"CODE",{class:!0});var Py=e(Aa);Oi=r(Py,"visit"),Py.forEach(o),Mi=r(Rn," function is now generic enough that you can use it for any AST:"),Rn.forEach(o),Ni=p(y),Sa=t(y,"DIV",{class:!0});var tf=e(Sa);tf.forEach(o),Li=p(y),ue=t(y,"P",{});var Oy=e(ue);ji=r(Oy,"Naturally, you would think that having the information of the parent node, and the key / index of the current node would be useful to have in the callback function:"),Oy.forEach(o),Hi=p(y),Ia=t(y,"DIV",{class:!0});var ef=e(Ia);ef.forEach(o),Ri=p(y),Zs=t(y,"P",{});var Bn=e(Zs);Bi=r(Bn,"Now, we might think to ourselves, I dont want to get callback for every node visited, I just need callback for a certain node. You might be tempted to add a condition in the "),Da=t(Bn,"CODE",{class:!0});var My=e(Da);Vi=r(My,"visit"),My.forEach(o),Fi=r(Bn," function:"),Bn.forEach(o),Ji=p(y),Ca=t(y,"DIV",{class:!0});var nf=e(Ca);nf.forEach(o),zi=p(y),Pa=t(y,"P",{});var Ck=e(Pa);Wi=r(Ck,"But you think twice: "),so=t(Ck,"EM",{});var Vn=e(so);qi=r(Vn,"what if someone else wants to use "),Oa=t(Vn,"CODE",{class:!0});var Ny=e(Oa);Gi=r(Ny,"visit"),Ny.forEach(o),Ui=r(Vn," but with a different condition for callback?"),Vn.forEach(o),Ck.forEach(o),Yi=p(y),fe=t(y,"P",{});var Ly=e(fe);$i=r(Ly,"For most of the time, you want to callback only to a certain types of node. In that case, instead of passing in a callback function, you can pass in a map of node type to their respective callback functions:"),Ly.forEach(o),Ki=p(y),Ma=t(y,"DIV",{class:!0});var rf=e(Ma);rf.forEach(o),Qi=p(y),oo=t(y,"P",{});var Fn=e(oo);Xi=r(Fn,"At this point, you maybe realize, "),xe=t(Fn,"EM",{});var jy=e(xe);Zi=r(jy,"hey, this looks so much like one of those AST traversing libraries!"),jy.forEach(o),sp=r(Fn," And yes, this is how they get implemented."),Fn.forEach(o),op=p(y),ge=t(y,"P",{});var Hy=e(ge);ap=r(Hy,"Now we can traverse the AST, and find the node that we are interested in, so the next step is to manipulate them."),Hy.forEach(o),y.forEach(o),An=p(c),ts=t(c,"SECTION",{});var ft=e(ts);me=t(ft,"H2",{});var Ry=e(me);ao=t(Ry,"A",{href:!0,id:!0});var By=e(ao);tp=r(By,"Manipulating AST"),By.forEach(o),Ry.forEach(o),ep=p(ft),we=t(ft,"P",{});var Vy=e(we);np=r(Vy,"Manipulating the AST can be categorized into 3 different operations:"),Vy.forEach(o),rp=p(ft),ys=t(ft,"UL",{});var xt=e(ys);_e=t(xt,"LI",{});var Fy=e(_e);lp=r(Fy,"Adding a node"),Fy.forEach(o),ip=p(xt),be=t(xt,"LI",{});var Jy=e(be);pp=r(Jy,"Replacing a node"),Jy.forEach(o),cp=p(xt),Ee=t(xt,"LI",{});var zy=e(Ee);hp=r(zy,"Removing a node"),zy.forEach(o),xt.forEach(o),ft.forEach(o),Sn=p(c),E=t(c,"SECTION",{});var N=e(E);Te=t(N,"H3",{});var Wy=e(Te);to=t(Wy,"A",{href:!0,id:!0});var qy=e(to);kp=r(qy,"Adding a node"),qy.forEach(o),Wy.forEach(o),vp=p(N),Ae=t(N,"P",{});var Gy=e(Ae);yp=r(Gy,"To add a node, you can assign it to a keyed property of your node:"),Gy.forEach(o),dp=p(N),Na=t(N,"DIV",{class:!0});var lf=e(Na);lf.forEach(o),up=p(N),Se=t(N,"P",{});var Uy=e(Se);fp=r(Uy,"or push the new node, if the keyed property is an array:"),Uy.forEach(o),xp=p(N),La=t(N,"DIV",{class:!0});var pf=e(La);pf.forEach(o),gp=p(N),Ie=t(N,"P",{});var Yy=e(Ie);mp=r(Yy,"To add a node as a sibling, you may need to access the node's parent:"),Yy.forEach(o),wp=p(N),ja=t(N,"DIV",{class:!0});var cf=e(ja);cf.forEach(o),N.forEach(o),In=p(c),O=t(c,"SECTION",{});var rs=e(O);De=t(rs,"H3",{});var $y=e(De);eo=t($y,"A",{href:!0,id:!0});var Ky=e(eo);_p=r(Ky,"Replacing a node"),Ky.forEach(o),$y.forEach(o),bp=p(rs),Ce=t(rs,"P",{});var Qy=e(Ce);Ep=r(Qy,"To replace the current node to another node, update the key property of the current node's parent:"),Qy.forEach(o),Tp=p(rs),Ha=t(rs,"DIV",{class:!0});var hf=e(Ha);hf.forEach(o),Ap=p(rs),Pe=t(rs,"P",{});var Xy=e(Pe);Sp=r(Xy,"If the key property of the parent is an array:"),Xy.forEach(o),Ip=p(rs),Ra=t(rs,"DIV",{class:!0});var kf=e(Ra);kf.forEach(o),rs.forEach(o),Dn=p(c),h=t(c,"SECTION",{});var v=e(h);Oe=t(v,"H3",{});var Zy=e(Oe);no=t(Zy,"A",{href:!0,id:!0});var sd=e(no);Dp=r(sd,"Removing a node"),sd.forEach(o),Zy.forEach(o),Cp=p(v),Me=t(v,"P",{});var od=e(Me);Pp=r(od,"To remove the current node, delete the key property of the current node's parent:"),od.forEach(o),Op=p(v),Ba=t(v,"DIV",{class:!0});var vf=e(Ba);vf.forEach(o),Mp=p(v),Ne=t(v,"P",{});var ad=e(Ne);Np=r(ad,"If the key property of the parent is an array:"),ad.forEach(o),Lp=p(v),Va=t(v,"DIV",{class:!0});var yf=e(Va);yf.forEach(o),jp=p(v),Le=t(v,"BLOCKQUOTE",{});var td=e(Le);Q=t(td,"P",{});var Ss=e(Q);Hp=r(Ss,"The operations of "),je=t(Ss,"STRONG",{});var ed=e(je);Rp=r(ed,"adding"),ed.forEach(o),Bp=r(Ss,", "),He=t(Ss,"STRONG",{});var nd=e(He);Vp=r(nd,"replacing"),nd.forEach(o),Fp=r(Ss,", and "),Re=t(Ss,"STRONG",{});var rd=e(Re);Jp=r(rd,"removing"),rd.forEach(o),zp=r(Ss," nodes are so common that, they are usually implemented as a util function."),Ss.forEach(o),td.forEach(o),Wp=p(v),ro=t(v,"P",{});var Jn=e(ro);qp=r(Jn,"However, there's "),Be=t(Jn,"STRONG",{});var ld=e(Be);Gp=r(ld,"one important step"),ld.forEach(o),Up=r(Jn," that I did not cover: after you mutate the node, you need to make sure that the traversal still works fine."),Jn.forEach(o),Yp=p(v),ds=t(v,"P",{});var gt=e(ds);$p=r(gt,"For a node that is a property of a key of its parent, adding, replacing and removing them are usually fine. Except for the replace operation, you might need to revisit the "),Ve=t(gt,"EM",{});var id=e(Ve);Kp=r(id,'"current node"'),id.forEach(o),Qp=r(gt,", which is the "),Fe=t(gt,"EM",{});var pd=e(Fe);Xp=r(pd,"new replacing node"),pd.forEach(o),Zp=r(gt,"."),gt.forEach(o),sc=p(v),Je=t(v,"P",{});var cd=e(Je);oc=r(cd,"However, for node that are in an array, you need to take special care to update the array index of the loop:"),cd.forEach(o),ac=p(v),Fa=t(v,"DIV",{class:!0});var df=e(Fa);df.forEach(o),tc=p(v),ze=t(v,"P",{});var hd=e(ze);ec=r(hd,"But how do you know that the current node was removed?"),hd.forEach(o),nc=p(v),lo=t(v,"P",{});var zn=e(lo);rc=r(zn,"Well, knowing when a node got removed is sometimes a secret that lies within the "),Ja=t(zn,"CODE",{class:!0});var kd=e(Ja);lc=r(kd,"remove"),kd.forEach(o),ic=r(zn," util function from the tree traversal library."),zn.forEach(o),pc=p(v),io=t(v,"P",{});var Wn=e(io);cc=r(Wn,"It could be as simple as setting a flag when you call "),za=t(Wn,"CODE",{class:!0});var vd=e(za);hc=r(vd,"remove"),vd.forEach(o),kc=r(Wn,":"),Wn.forEach(o),vc=p(v),Wa=t(v,"DIV",{class:!0});var uf=e(Wa);uf.forEach(o),yc=p(v),j=t(v,"P",{});var ls=e(j);dc=r(ls,"But sometimes, instead of having to import the "),qa=t(ls,"CODE",{class:!0});var yd=e(qa);uc=r(yd,"remove"),yd.forEach(o),fc=r(ls," util from the tree traversal library, the "),Ga=t(ls,"CODE",{class:!0});var dd=e(Ga);xc=r(dd,"remove"),dd.forEach(o),gc=r(ls," function is available in "),Ua=t(ls,"CODE",{class:!0});var ud=e(Ua);mc=r(ud,"this"),ud.forEach(o),wc=r(ls," of the "),Ya=t(ls,"CODE",{class:!0});var fd=e(Ya);_c=r(fd,"visitCallback"),fd.forEach(o),bc=r(ls,":"),ls.forEach(o),Ec=p(v),$a=t(v,"DIV",{class:!0});var ff=e($a);ff.forEach(o),Tc=p(v),We=t(v,"P",{});var xd=e(We);Ac=r(xd,"Now you learned the 3 basic operations of manipulating the AST, you maybe wonder how exactly is to use these basic operations to write a codemod or an AST transform plugin?"),xd.forEach(o),Sc=p(v),X=t(v,"P",{});var Is=e(X);Ic=r(Is,"Well, in my "),Ka=t(Is,"A",{href:!0});var gd=e(Ka);Dc=r(gd,"step-by-step guide"),gd.forEach(o),Cc=r(Is,", I've explained that, you can use AST explorer like "),po=t(Is,"A",{href:!0,rel:!0});var md=e(po);Pc=r(md,"http://astexplorer.net/"),md.forEach(o),Oc=r(Is," or "),co=t(Is,"A",{href:!0,rel:!0});var wd=e(co);Mc=r(wd,"Babel AST Explorer"),wd.forEach(o),Nc=r(Is," to help you."),Is.forEach(o),Lc=p(v),qe=t(v,"P",{});var _d=e(qe);jc=r(_d,"You need to:"),_d.forEach(o),Hc=p(v),ho=t(v,"UL",{});var qn=e(ho);Qa=t(qn,"LI",{});var Pk=e(Qa);Ge=t(Pk,"STRONG",{});var bd=e(Ge);Rc=r(bd,"Know how the part of the code you want to change look like in the AST"),bd.forEach(o),Bc=r(Pk,", so you can target the specific type of the node, and"),Pk.forEach(o),Vc=p(qn),Xa=t(qn,"LI",{});var Ok=e(Xa);Ue=t(Ok,"STRONG",{});var Ed=e(Ue);Fc=r(Ed,"Know how does the final output you wish to see look like in the AST"),Ed.forEach(o),Jc=r(Ok,", so you know what nodes to create, update or remove."),Ok.forEach(o),qn.forEach(o),zc=p(v),Ye=t(v,"P",{});var Td=e(Ye);Wc=r(Td,"So we are going to elaborate more on these 2 steps specifically."),Td.forEach(o),v.forEach(o),Cn=p(c),b=t(c,"SECTION",{});var S=e(b);$e=t(S,"H2",{});var Ad=e($e);ko=t(Ad,"A",{href:!0,id:!0});var Sd=e(ko);qc=r(Sd,"Targeting a node"),Sd.forEach(o),Ad.forEach(o),Gc=p(S),vo=t(S,"P",{});var Gn=e(vo);Uc=r(Gn,"Node targeting, most of the times, is just a lot of "),Za=t(Gn,"CODE",{class:!0});var Id=e(Za);Yc=r(Id,"==="),Id.forEach(o),$c=r(Gn,"."),Gn.forEach(o),Kc=p(S),C=t(S,"P",{});var J=e(C);Qc=r(J,"For example, if you want to target a "),st=t(J,"CODE",{class:!0});var Dd=e(st);Xc=r(Dd,"<figure>"),Dd.forEach(o),Zc=r(J," with a class "),ot=t(J,"CODE",{class:!0});var Cd=e(ot);sh=r(Cd,"foo"),Cd.forEach(o),oh=r(J," that contains an "),at=t(J,"CODE",{class:!0});var Pd=e(at);ah=r(Pd,"<img>"),Pd.forEach(o),th=r(J," and a "),tt=t(J,"CODE",{class:!0});var Od=e(tt);eh=r(Od,"<figcaption>"),Od.forEach(o),nh=r(J," in "),yo=t(J,"A",{href:!0,rel:!0});var Md=e(yo);rh=r(Md,"htmlparser2"),Md.forEach(o),lh=r(J,":"),J.forEach(o),ih=p(S),et=t(S,"DIV",{class:!0});var xf=e(et);xf.forEach(o),ph=p(S),Ke=t(S,"P",{});var Nd=e(Ke);ch=r(Nd,"You need to check:"),Nd.forEach(o),hh=p(S),nt=t(S,"DIV",{class:!0});var gf=e(nt);gf.forEach(o),kh=p(S),Qe=t(S,"P",{});var Ld=e(Qe);vh=r(Ld,"To make it less verbose, we can refactor each check into reusable functions:"),Ld.forEach(o),yh=p(S),rt=t(S,"DIV",{class:!0});var mf=e(rt);mf.forEach(o),S.forEach(o),Pn=p(c),g=t(c,"SECTION",{});var w=e(g);Xe=t(w,"H2",{});var jd=e(Xe);uo=t(jd,"A",{href:!0,id:!0});var Hd=e(uo);dh=r(Hd,"Creating a node"),Hd.forEach(o),jd.forEach(o),uh=p(w),Ze=t(w,"P",{});var Rd=e(Ze);fh=r(Rd,"There are a few ways you can create an AST node."),Rd.forEach(o),xh=p(w),fo=t(w,"P",{});var Un=e(fo);gh=r(Un,"The simplest and crudest way is to "),sn=t(Un,"STRONG",{});var Bd=e(sn);mh=r(Bd,"manually create the node object"),Bd.forEach(o),wh=r(Un,". Most of the time, the node object is a JavaScript object. So you can just create them manually:"),Un.forEach(o),_h=p(w),lt=t(w,"DIV",{class:!0});var wf=e(lt);wf.forEach(o),bh=p(w),xo=t(w,"P",{});var Yn=e(xo);Eh=r(Yn,"It may become unwieldy when creating large, complex AST nodes, so sometimes library decides to provide builder functions, like "),go=t(Yn,"A",{href:!0,rel:!0});var Vd=e(go);Th=r(Vd,"@babel/types"),Vd.forEach(o),Ah=r(Yn," to simplify node creation and provide default values:"),Yn.forEach(o),Sh=p(w),it=t(w,"DIV",{class:!0});var _f=e(it);_f.forEach(o),Ih=p(w),on=t(w,"P",{});var Fd=e(on);Dh=r(Fd,"It looked more concise and tidier, but it is hard to comprehend and grasp what node it is creating."),Fd.forEach(o),Ch=p(w),us=t(w,"P",{});var mt=e(us);Ph=r(mt,"So, a better way of creating complex AST node, is to use the "),pt=t(mt,"CODE",{class:!0});var Jd=e(pt);Oh=r(Jd,"parse"),Jd.forEach(o),Mh=r(mt," function + "),ct=t(mt,"CODE",{class:!0});var zd=e(ct);Nh=r(zd,"string"),zd.forEach(o),Lh=r(mt,":"),mt.forEach(o),jh=p(w),ht=t(w,"DIV",{class:!0});var bf=e(ht);bf.forEach(o),Hh=p(w),fs=t(w,"P",{});var wt=e(fs);Rh=r(wt,"For Babel, there's an amazing util called "),mo=t(wt,"A",{href:!0,rel:!0});var Wd=e(mo);Bh=r(Wd,"@babel/template"),Wd.forEach(o),Vh=r(wt,", where you can use "),wo=t(wt,"A",{href:!0,rel:!0});var qd=e(wo);Fh=r(qd,"template literals"),qd.forEach(o),Jh=r(wt," to create AST node:"),wt.forEach(o),zh=p(w),kt=t(w,"DIV",{class:!0});var Ef=e(kt);Ef.forEach(o),w.forEach(o),On=p(c),V=t(c,"SECTION",{});var Ds=e(V);an=t(Ds,"H2",{});var Gd=e(an);_o=t(Gd,"A",{href:!0,id:!0});var Ud=e(_o);Wh=r(Ud,"Summary"),Ud.forEach(o),Gd.forEach(o),qh=p(Ds),tn=t(Ds,"P",{});var Yd=e(tn);Gh=r(Yd,"We've gone through:"),Yd.forEach(o),Uh=p(Ds),Z=t(Ds,"UL",{});var Cs=e(Z);en=t(Cs,"LI",{});var $d=e(en);Yh=r($d,"How to traverse an AST, using depth-first search algorithm,"),$d.forEach(o),$h=p(Cs),nn=t(Cs,"LI",{});var Kd=e(nn);Kh=r(Kd,"The 3 basic AST manipulations, addition, replacement, and removal,"),Kd.forEach(o),Qh=p(Cs),rn=t(Cs,"LI",{});var Qd=e(rn);Xh=r(Qd,"How to target a node in AST, and"),Qd.forEach(o),Zh=p(Cs),ln=t(Cs,"LI",{});var Xd=e(ln);sk=r(Xd,"How to create an AST node"),Xd.forEach(o),Cs.forEach(o),ok=p(Ds),ss=t(Ds,"BLOCKQUOTE",{});var Ps=e(ss);pn=t(Ps,"P",{});var Zd=e(pn);cn=t(Zd,"STRONG",{});var su=e(cn);ak=r(su,"Manipulating AST with JavaScript using Babel"),su.forEach(o),Zd.forEach(o),tk=p(Ps),bo=t(Ps,"P",{});var $n=e(bo);ek=r($n,"If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),Eo=t($n,"A",{href:!0,rel:!0});var ou=e(Eo);nk=r(ou,"video course"),ou.forEach(o),rk=r($n,", showing you step-by-step, how to write a babel plugin and codemod."),$n.forEach(o),lk=p(Ps),hn=t(Ps,"P",{});var au=e(hn);ik=r(au,"In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),au.forEach(o),pk=p(Ps),kn=t(Ps,"P",{});var tu=e(kn);vn=t(tu,"STRONG",{});var eu=e(vn);To=t(eu,"A",{href:!0,rel:!0});var nu=e(To);ck=r(nu,"Sounds interesting, let's take a look at the video course"),nu.forEach(o),eu.forEach(o),tu.forEach(o),Ps.forEach(o),Ds.forEach(o),Mn=p(c),es=t(c,"SECTION",{});var _t=e(es);yn=t(_t,"H2",{});var ru=e(yn);Ao=t(ru,"A",{href:!0,id:!0});var lu=e(Ao);hk=r(lu,"Further Readings"),lu.forEach(o),ru.forEach(o),kk=p(_t),gs=t(_t,"P",{});var wn=e(gs);So=t(wn,"A",{href:!0,rel:!0});var iu=e(So);vk=r(iu,"Dinesh (@flexdinesh)"),iu.forEach(o),yk=p(wn),Io=t(wn,"A",{href:!0,rel:!0});var pu=e(Io);dk=r(pu,"tweeted"),pu.forEach(o),uk=r(wn," his pocket collection of AST resources:"),wn.forEach(o),fk=p(_t),P=t(_t,"UL",{});var z=e(P);dn=t(z,"LI",{});var cu=e(dn);Do=t(cu,"A",{href:!0,rel:!0});var hu=e(Do);xk=r(hu,"Code Transformation and Linting with ASTs"),hu.forEach(o),cu.forEach(o),gk=p(z),un=t(z,"LI",{});var ku=e(un);Co=t(ku,"A",{href:!0,rel:!0});var vu=e(Co);mk=r(vu,"Write your own code transform for fun and profit"),vu.forEach(o),ku.forEach(o),wk=p(z),fn=t(z,"LI",{});var yu=e(fn);Po=t(yu,"A",{href:!0,rel:!0});var du=e(Po);_k=r(du,"Understanding ASTs by Building Your Own Babel Plugin"),du.forEach(o),yu.forEach(o),bk=p(z),xn=t(z,"LI",{});var uu=e(xn);Oo=t(uu,"A",{href:!0,rel:!0});var fu=e(Oo);Ek=r(fu,"Writing your first Babel Plugin"),fu.forEach(o),uu.forEach(o),Tk=p(z),gn=t(z,"LI",{});var xu=e(gn);Mo=t(xu,"A",{href:!0,rel:!0});var gu=e(Mo);Ak=r(gu,"This is how I build Babel plug-ins"),gu.forEach(o),xu.forEach(o),Sk=p(z),mn=t(z,"LI",{});var mu=e(mn);No=t(mu,"A",{href:!0,rel:!0});var wu=e(No);Ik=r(wu,"Writing My First Babel Plugin"),wu.forEach(o),mu.forEach(o),z.forEach(o),_t.forEach(o),this.h()},h(){l(H,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(I,"href","https://babeljs.io/"),l(I,"rel","nofollow"),l(Ro,"href","/creating-custom-javascript-syntax-with-babel"),l(Ms,"href","https://www.ecma-international.org/publications/standards/Ecma-262.htm"),l(Ms,"rel","nofollow"),l(Ns,"href","http://typescriptlang.org/"),l(Ns,"rel","nofollow"),l(Ls,"href","https://sass-lang.com/"),l(Ls,"rel","nofollow"),l(js,"href","https://www.w3.org/Style/CSS/"),l(js,"rel","nofollow"),l(Hs,"href","https://www.w3.org/html/"),l(Hs,"rel","nofollow"),l(Rs,"href","https://en.wikipedia.org/wiki/Markdown"),l(Rs,"rel","nofollow"),l(Bs,"href","#the-parsers"),l(Bs,"id","the-parsers"),l(Fs,"href","https://astexplorer.net/"),l(Fs,"rel","nofollow"),Eu(R.src,Nk=Au)||l(R,"src",Nk),l(R,"srcset",Au+", "+Ff+" 2x"),l(R,"loading","lazy"),T(R,"position","absolute"),T(R,"top","0"),T(R,"width","100%"),T(R,"height","100%"),l(R,"alt","ast explorer"),T(is,"display","block"),T(is,"position","relative"),T(is,"padding-top","54.000%"),T(is,"width","100%"),l(Js,"href","https://github.com/fb55/htmlparser2"),l(Js,"rel","nofollow"),l(zs,"href","https://github.com/nik-garmash/hyntax"),l(zs,"rel","nofollow"),l(Ws,"href","https://github.com/inikulin/parse5"),l(Ws,"rel","nofollow"),l(Dt,"type","image/webp"),l(Dt,"srcset",Bf+", "+Rf+" 2x"),Eu(B.src,Lk=Tu)||l(B,"src",Lk),l(B,"srcset",Tu+", "+Vf+" 2x"),l(B,"loading","lazy"),T(B,"position","absolute"),T(B,"top","0"),T(B,"width","100%"),T(B,"height","100%"),l(B,"alt","ast explorer"),T(ps,"display","block"),T(ps,"position","relative"),T(ps,"padding-top","39.844%"),T(ps,"width","100%"),l(Fo,"class","inline"),l(Jo,"class","inline"),l(zo,"class","language-text"),l(Wo,"class","language-text"),l(qo,"href","https://github.com/inikulin/parse5/tree/master/packages/parse5"),l(Uo,"class","language-text"),l(Go,"href","https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#parse"),l($o,"class","language-text"),l(Yo,"href","https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#serialize"),l(Ko,"href","https://github.com/remarkjs/remark"),l(Xo,"class","language-text"),l(Qo,"href","https://github.com/remarkjs/remark/tree/master/packages/remark-parse"),l(sa,"class","language-text"),l(Zo,"href","https://github.com/remarkjs/remark/tree/master/packages/remark-stringify"),l(oa,"href","https://github.com/csstree/csstree"),l(ta,"class","language-text"),l(aa,"href","https://github.com/csstree/csstree/blob/master/docs/parsing.md"),l(na,"class","language-text"),l(ea,"href","https://github.com/csstree/csstree/blob/master/docs/generate.md"),l(ra,"href","https://github.com/shawnbot/sast"),l(ia,"class","language-text"),l(la,"href","https://github.com/shawnbot/sast#sastparsesource--options-"),l(ca,"class","language-text"),l(pa,"href","https://github.com/shawnbot/sast#saststringifynode-"),l(ha,"href","https://babeljs.io/"),l(va,"class","language-text"),l(ka,"href","https://babeljs.io/docs/en/babel-parser#babelparserparsecode-options"),l(da,"class","language-text"),l(ya,"href","https://babeljs.io/docs/en/babel-generator"),l(ua,"href","http://typescriptlang.org/"),l(xa,"class","language-text"),l(fa,"href","https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"),l(ma,"class","language-text"),l(ga,"href","https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"),T(qs,"overflow","auto"),T(qs,"margin-bottom","2em"),l(wa,"class","code-section"),l(_a,"class","code-section"),l(Us,"href","#traversing-an-ast"),l(Us,"id","traversing-an-ast"),l(Ys,"href","https://twitter.com/vaidehijoshi"),l(Ys,"rel","nofollow"),l($s,"href","https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056"),l($s,"rel","nofollow"),l(Ks,"href","https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056"),l(Ks,"rel","nofollow"),l(ba,"class","code-section"),l(Ea,"class","inline"),l(Ta,"class","code-section"),l(Aa,"class","inline"),l(Sa,"class","code-section"),l(Ia,"class","code-section"),l(Da,"class","inline"),l(Ca,"class","code-section"),l(Oa,"class","inline"),l(Ma,"class","code-section"),l(ao,"href","#manipulating-ast"),l(ao,"id","manipulating-ast"),l(to,"href","#adding-a-node"),l(to,"id","adding-a-node"),l(Na,"class","code-section"),l(La,"class","code-section"),l(ja,"class","code-section"),l(eo,"href","#replacing-a-node"),l(eo,"id","replacing-a-node"),l(Ha,"class","code-section"),l(Ra,"class","code-section"),l(no,"href","#removing-a-node"),l(no,"id","removing-a-node"),l(Ba,"class","code-section"),l(Va,"class","code-section"),l(Fa,"class","code-section"),l(Ja,"class","inline"),l(za,"class","inline"),l(Wa,"class","code-section"),l(qa,"class","inline"),l(Ga,"class","inline"),l(Ua,"class","inline"),l(Ya,"class","inline"),l($a,"class","code-section"),l(Ka,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(po,"href","http://astexplorer.net/"),l(po,"rel","nofollow"),l(co,"href","https://lihautan.com/babel-ast-explorer"),l(co,"rel","nofollow"),l(ko,"href","#targeting-a-node"),l(ko,"id","targeting-a-node"),l(Za,"class","inline"),l(st,"class","inline"),l(ot,"class","inline"),l(at,"class","inline"),l(tt,"class","inline"),l(yo,"href","https://github.com/fb55/htmlparser2"),l(yo,"rel","nofollow"),l(et,"class","code-section"),l(nt,"class","code-section"),l(rt,"class","code-section"),l(uo,"href","#creating-a-node"),l(uo,"id","creating-a-node"),l(lt,"class","code-section"),l(go,"href","https://babeljs.io/docs/en/babel-types"),l(go,"rel","nofollow"),l(it,"class","code-section"),l(pt,"class","inline"),l(ct,"class","inline"),l(ht,"class","code-section"),l(mo,"href","https://babeljs.io/docs/en/babel-template"),l(mo,"rel","nofollow"),l(wo,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"),l(wo,"rel","nofollow"),l(kt,"class","code-section"),l(_o,"href","#summary"),l(_o,"id","summary"),l(Eo,"href","https://gum.co/manipulating-ast-with-javascript"),l(Eo,"rel","nofollow"),l(To,"href","https://gum.co/manipulating-ast-with-javascript"),l(To,"rel","nofollow"),l(Ao,"href","#further-readings"),l(Ao,"id","further-readings"),l(So,"href","https://twitter.com/flexdinesh"),l(So,"rel","nofollow"),l(Io,"href","https://twitter.com/flexdinesh/status/1196680010343432192"),l(Io,"rel","nofollow"),l(Do,"href","https://frontendmasters.com/courses/linting-asts/"),l(Do,"rel","nofollow"),l(Co,"href","https://kentcdodds.com/blog/write-your-own-code-transform/"),l(Co,"rel","nofollow"),l(Po,"href","https://www.sitepoint.com/understanding-asts-building-babel-plugin/"),l(Po,"rel","nofollow"),l(Oo,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-writing-your-first-babel-plugin"),l(Oo,"rel","nofollow"),l(Mo,"href","https://medium.com/the-guild/this-is-how-i-build-babel-plug-ins-b0a13dcd0352"),l(Mo,"rel","nofollow"),l(No,"href","https://varunzxzx.github.io/blog/writing-babel-plugin"),l(No,"rel","nofollow")},m(c,d){m(c,f,d),s(f,os),s(f,H),s(H,Os),s(f,_),s(f,I),s(I,Ho),s(f,Kn),s(f,Ro),s(Ro,Qn),s(f,Xn),m(c,_n,d),m(c,Bo,d),s(Bo,Zn),m(c,bn,d),m(c,xs,d),s(xs,A),s(A,sr),s(A,Ms),s(Ms,or),s(A,ar),s(A,Ns),s(Ns,tr),s(A,er),s(A,Ls),s(Ls,nr),s(A,rr),s(A,js),s(js,lr),s(A,ir),s(A,Hs),s(Hs,pr),s(A,cr),s(A,Rs),s(Rs,hr),s(A,kr),s(xs,vr),s(xs,bt),s(bt,yr),m(c,En,d),m(c,u,d),s(u,Et),s(Et,Bs),s(Bs,dr),s(u,ur),s(u,Tt),s(Tt,fr),s(u,xr),s(u,Vs),s(Vs,gr),s(Vs,Fs),s(Fs,mr),s(Vs,wr),s(u,_r),s(u,At),s(At,is),s(is,R),s(u,br),s(u,L),s(L,Er),s(L,St),s(St,Tr),s(L,Ar),s(L,Js),s(Js,Sr),s(L,Ir),s(L,zs),s(zs,Dr),s(L,Cr),s(L,Ws),s(Ws,Pr),s(L,Or),s(u,Mr),s(u,It),s(It,ps),s(ps,Vo),s(Vo,Dt),s(Vo,B),s(u,Nr),s(u,cs),s(cs,Lr),s(cs,Fo),s(Fo,jr),s(cs,Hr),s(cs,Jo),s(Jo,Rr),s(cs,Br),s(u,Vr),s(u,qs),s(qs,Gs),s(Gs,Ct),s(Ct,W),s(W,Pt),s(Pt,Fr),s(W,Jr),s(W,Ot),s(Ot,zr),s(W,Wr),s(W,Mt),s(Mt,zo),s(zo,qr),s(W,Gr),s(W,Nt),s(Nt,Wo),s(Wo,Ur),s(Gs,Yr),s(Gs,D),s(D,q),s(q,Lt),s(Lt,$r),s(q,Kr),s(q,jt),s(jt,qo),s(qo,Qr),s(q,Xr),s(q,Ht),s(Ht,Go),s(Go,Uo),s(Uo,Zr),s(q,sl),s(q,Rt),s(Rt,Yo),s(Yo,$o),s($o,ol),s(D,al),s(D,G),s(G,Bt),s(Bt,tl),s(G,el),s(G,Vt),s(Vt,Ko),s(Ko,nl),s(G,rl),s(G,Ft),s(Ft,Qo),s(Qo,Xo),s(Xo,ll),s(G,il),s(G,Jt),s(Jt,Zo),s(Zo,sa),s(sa,pl),s(D,cl),s(D,U),s(U,zt),s(zt,hl),s(U,kl),s(U,Wt),s(Wt,oa),s(oa,vl),s(U,yl),s(U,qt),s(qt,aa),s(aa,ta),s(ta,dl),s(U,ul),s(U,Gt),s(Gt,ea),s(ea,na),s(na,fl),s(D,xl),s(D,Y),s(Y,Ut),s(Ut,gl),s(Y,ml),s(Y,Yt),s(Yt,ra),s(ra,wl),s(Y,_l),s(Y,$t),s($t,la),s(la,ia),s(ia,bl),s(Y,El),s(Y,Kt),s(Kt,pa),s(pa,ca),s(ca,Tl),s(D,Al),s(D,$),s($,Qt),s(Qt,Sl),s($,Il),s($,Xt),s(Xt,ha),s(ha,Dl),s($,Cl),s($,Zt),s(Zt,ka),s(ka,va),s(va,Pl),s($,Ol),s($,se),s(se,ya),s(ya,da),s(da,Ml),s(D,Nl),s(D,K),s(K,oe),s(oe,Ll),s(K,jl),s(K,ae),s(ae,ua),s(ua,Hl),s(K,Rl),s(K,te),s(te,fa),s(fa,xa),s(xa,Bl),s(K,Vl),s(K,ee),s(ee,ga),s(ga,ma),s(ma,Fl),s(u,Jl),s(u,ne),s(ne,zl),s(u,Wl),s(u,re),s(re,ql),s(u,Gl),s(u,wa),wa.innerHTML=Iu,s(u,Ul),s(u,le),s(le,Yl),s(u,$l),s(u,_a),_a.innerHTML=Du,s(u,Kl),s(u,hs),s(hs,Ql),s(hs,ie),s(ie,Xl),s(hs,Zl),s(hs,pe),s(pe,si),s(hs,oi),m(c,Tn,d),m(c,k,d),s(k,ce),s(ce,Us),s(Us,ai),s(k,ti),s(k,ks),s(ks,ei),s(ks,he),s(he,ni),s(ks,ri),s(ks,ke),s(ke,li),s(ks,ii),s(k,pi),s(k,as),s(as,Ys),s(Ys,ci),s(as,hi),s(as,$s),s($s,ki),s(as,vi),s(as,Ks),s(Ks,yi),s(as,di),s(k,ui),s(k,ve),s(ve,fi),s(k,xi),s(k,ba),ba.innerHTML=Cu,s(k,gi),s(k,Qs),s(Qs,mi),s(Qs,Ea),s(Ea,wi),s(Qs,_i),s(k,bi),s(k,vs),s(vs,Ei),s(vs,ye),s(ye,Ti),s(vs,Ai),s(vs,de),s(de,Si),s(vs,Ii),s(k,Di),s(k,Ta),Ta.innerHTML=Pu,s(k,Ci),s(k,Xs),s(Xs,Pi),s(Xs,Aa),s(Aa,Oi),s(Xs,Mi),s(k,Ni),s(k,Sa),Sa.innerHTML=Ou,s(k,Li),s(k,ue),s(ue,ji),s(k,Hi),s(k,Ia),Ia.innerHTML=Mu,s(k,Ri),s(k,Zs),s(Zs,Bi),s(Zs,Da),s(Da,Vi),s(Zs,Fi),s(k,Ji),s(k,Ca),Ca.innerHTML=Nu,s(k,zi),s(k,Pa),s(Pa,Wi),s(Pa,so),s(so,qi),s(so,Oa),s(Oa,Gi),s(so,Ui),s(k,Yi),s(k,fe),s(fe,$i),s(k,Ki),s(k,Ma),Ma.innerHTML=Lu,s(k,Qi),s(k,oo),s(oo,Xi),s(oo,xe),s(xe,Zi),s(oo,sp),s(k,op),s(k,ge),s(ge,ap),m(c,An,d),m(c,ts,d),s(ts,me),s(me,ao),s(ao,tp),s(ts,ep),s(ts,we),s(we,np),s(ts,rp),s(ts,ys),s(ys,_e),s(_e,lp),s(ys,ip),s(ys,be),s(be,pp),s(ys,cp),s(ys,Ee),s(Ee,hp),m(c,Sn,d),m(c,E,d),s(E,Te),s(Te,to),s(to,kp),s(E,vp),s(E,Ae),s(Ae,yp),s(E,dp),s(E,Na),Na.innerHTML=ju,s(E,up),s(E,Se),s(Se,fp),s(E,xp),s(E,La),La.innerHTML=Hu,s(E,gp),s(E,Ie),s(Ie,mp),s(E,wp),s(E,ja),ja.innerHTML=Ru,m(c,In,d),m(c,O,d),s(O,De),s(De,eo),s(eo,_p),s(O,bp),s(O,Ce),s(Ce,Ep),s(O,Tp),s(O,Ha),Ha.innerHTML=Bu,s(O,Ap),s(O,Pe),s(Pe,Sp),s(O,Ip),s(O,Ra),Ra.innerHTML=Vu,m(c,Dn,d),m(c,h,d),s(h,Oe),s(Oe,no),s(no,Dp),s(h,Cp),s(h,Me),s(Me,Pp),s(h,Op),s(h,Ba),Ba.innerHTML=Fu,s(h,Mp),s(h,Ne),s(Ne,Np),s(h,Lp),s(h,Va),Va.innerHTML=Ju,s(h,jp),s(h,Le),s(Le,Q),s(Q,Hp),s(Q,je),s(je,Rp),s(Q,Bp),s(Q,He),s(He,Vp),s(Q,Fp),s(Q,Re),s(Re,Jp),s(Q,zp),s(h,Wp),s(h,ro),s(ro,qp),s(ro,Be),s(Be,Gp),s(ro,Up),s(h,Yp),s(h,ds),s(ds,$p),s(ds,Ve),s(Ve,Kp),s(ds,Qp),s(ds,Fe),s(Fe,Xp),s(ds,Zp),s(h,sc),s(h,Je),s(Je,oc),s(h,ac),s(h,Fa),Fa.innerHTML=zu,s(h,tc),s(h,ze),s(ze,ec),s(h,nc),s(h,lo),s(lo,rc),s(lo,Ja),s(Ja,lc),s(lo,ic),s(h,pc),s(h,io),s(io,cc),s(io,za),s(za,hc),s(io,kc),s(h,vc),s(h,Wa),Wa.innerHTML=Wu,s(h,yc),s(h,j),s(j,dc),s(j,qa),s(qa,uc),s(j,fc),s(j,Ga),s(Ga,xc),s(j,gc),s(j,Ua),s(Ua,mc),s(j,wc),s(j,Ya),s(Ya,_c),s(j,bc),s(h,Ec),s(h,$a),$a.innerHTML=qu,s(h,Tc),s(h,We),s(We,Ac),s(h,Sc),s(h,X),s(X,Ic),s(X,Ka),s(Ka,Dc),s(X,Cc),s(X,po),s(po,Pc),s(X,Oc),s(X,co),s(co,Mc),s(X,Nc),s(h,Lc),s(h,qe),s(qe,jc),s(h,Hc),s(h,ho),s(ho,Qa),s(Qa,Ge),s(Ge,Rc),s(Qa,Bc),s(ho,Vc),s(ho,Xa),s(Xa,Ue),s(Ue,Fc),s(Xa,Jc),s(h,zc),s(h,Ye),s(Ye,Wc),m(c,Cn,d),m(c,b,d),s(b,$e),s($e,ko),s(ko,qc),s(b,Gc),s(b,vo),s(vo,Uc),s(vo,Za),s(Za,Yc),s(vo,$c),s(b,Kc),s(b,C),s(C,Qc),s(C,st),s(st,Xc),s(C,Zc),s(C,ot),s(ot,sh),s(C,oh),s(C,at),s(at,ah),s(C,th),s(C,tt),s(tt,eh),s(C,nh),s(C,yo),s(yo,rh),s(C,lh),s(b,ih),s(b,et),et.innerHTML=Gu,s(b,ph),s(b,Ke),s(Ke,ch),s(b,hh),s(b,nt),nt.innerHTML=Uu,s(b,kh),s(b,Qe),s(Qe,vh),s(b,yh),s(b,rt),rt.innerHTML=Yu,m(c,Pn,d),m(c,g,d),s(g,Xe),s(Xe,uo),s(uo,dh),s(g,uh),s(g,Ze),s(Ze,fh),s(g,xh),s(g,fo),s(fo,gh),s(fo,sn),s(sn,mh),s(fo,wh),s(g,_h),s(g,lt),lt.innerHTML=$u,s(g,bh),s(g,xo),s(xo,Eh),s(xo,go),s(go,Th),s(xo,Ah),s(g,Sh),s(g,it),it.innerHTML=Ku,s(g,Ih),s(g,on),s(on,Dh),s(g,Ch),s(g,us),s(us,Ph),s(us,pt),s(pt,Oh),s(us,Mh),s(us,ct),s(ct,Nh),s(us,Lh),s(g,jh),s(g,ht),ht.innerHTML=Qu,s(g,Hh),s(g,fs),s(fs,Rh),s(fs,mo),s(mo,Bh),s(fs,Vh),s(fs,wo),s(wo,Fh),s(fs,Jh),s(g,zh),s(g,kt),kt.innerHTML=Xu,m(c,On,d),m(c,V,d),s(V,an),s(an,_o),s(_o,Wh),s(V,qh),s(V,tn),s(tn,Gh),s(V,Uh),s(V,Z),s(Z,en),s(en,Yh),s(Z,$h),s(Z,nn),s(nn,Kh),s(Z,Qh),s(Z,rn),s(rn,Xh),s(Z,Zh),s(Z,ln),s(ln,sk),s(V,ok),s(V,ss),s(ss,pn),s(pn,cn),s(cn,ak),s(ss,tk),s(ss,bo),s(bo,ek),s(bo,Eo),s(Eo,nk),s(bo,rk),s(ss,lk),s(ss,hn),s(hn,ik),s(ss,pk),s(ss,kn),s(kn,vn),s(vn,To),s(To,ck),m(c,Mn,d),m(c,es,d),s(es,yn),s(yn,Ao),s(Ao,hk),s(es,kk),s(es,gs),s(gs,So),s(So,vk),s(gs,yk),s(gs,Io),s(Io,dk),s(gs,uk),s(es,fk),s(es,P),s(P,dn),s(dn,Do),s(Do,xk),s(P,gk),s(P,un),s(un,Co),s(Co,mk),s(P,wk),s(P,fn),s(fn,Po),s(Po,_k),s(P,bk),s(P,xn),s(xn,Oo),s(Oo,Ek),s(P,Tk),s(P,gn),s(gn,Mo),s(Mo,Ak),s(P,Sk),s(P,mn),s(mn,No),s(No,Ik)},p:jf,d(c){c&&o(f),c&&o(_n),c&&o(Bo),c&&o(bn),c&&o(xs),c&&o(En),c&&o(u),c&&o(Tn),c&&o(k),c&&o(An),c&&o(ts),c&&o(Sn),c&&o(E),c&&o(In),c&&o(O),c&&o(Dn),c&&o(h),c&&o(Cn),c&&o(b),c&&o(Pn),c&&o(g),c&&o(On),c&&o(V),c&&o(Mn),c&&o(es)}}}function Wf(jo){let f,os;const H=[jo[0],Su];let Os={$$slots:{default:[zf]},$$scope:{ctx:jo}};for(let _=0;_<H.length;_+=1)Os=Mk(Os,H[_]);return f=new Hf({props:Os}),{c(){If(f.$$.fragment)},l(_){Df(f.$$.fragment,_)},m(_,I){Cf(f,_,I),os=!0},p(_,[I]){const Ho=I&1?Pf(H,[I&1&&_u(_[0]),I&0&&_u(Su)]):{};I&2&&(Ho.$$scope={dirty:I,ctx:_}),f.$set(Ho)},i(_){os||(Of(f.$$.fragment,_),os=!0)},o(_){Mf(f.$$.fragment,_),os=!1},d(_){Nf(f,_)}}}const Su={title:"Manipulating AST with JavaScript",date:"2019-11-22T08:00:00Z",description:"Manipulating AST is not that hard anyway",tags:["JavaScript","AST","transform","depth-first-search"],series:"AST",label:"blog",tableOfContents:[{link:"the-parsers",title:"The parsers"},{link:"traversing-an-ast",title:"Traversing an AST"},{link:"manipulating-ast",title:"Manipulating AST",nested:[{link:"adding-a-node",title:"Adding a node"},{link:"replacing-a-node",title:"Replacing a node"},{link:"removing-a-node",title:"Removing a node"}]},{link:"targeting-a-node",title:"Targeting a node"},{link:"creating-a-node",title:"Creating a node"},{link:"summary",title:"Summary"},{link:"further-readings",title:"Further Readings"}]};function qf(jo,f,os){return Lf("blog",{image:Jf}),jo.$$set=H=>{os(0,f=Mk(Mk({},f),bu(H)))},f=bu(f),[f]}class Qf extends Tf{constructor(f){super();Af(this,f,qf,Wf,Sf,{})}}export{Qf as default,Su as metadata};
