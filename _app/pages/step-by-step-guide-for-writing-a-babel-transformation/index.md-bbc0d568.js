import{S as df,i as vf,s as yf,C as td,w as uf,x as ff,y as bf,z as xf,A as Iu,q as wf,o as mf,B as gf,r as _f,Y as Au,e as a,t as s,k as i,c as n,a as l,h as t,d as o,m as c,b as r,X as sd,f as g,g as w,H as e,J as Ef}from"../../chunks/vendor-da4388d4.js";import{B as Sf}from"../../chunks/BlogLayout-14cfab6f.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var If="https://lihautan.com/_app/assets/member-expression-f5fd3f3a.webp",Af="https://lihautan.com/_app/assets/member-expression-3b771379.webp",Tf="https://lihautan.com/_app/assets/member-expression-9d5f51a8.png",Tu="https://lihautan.com/_app/assets/member-expression-6f106139.png",Cf="https://lihautan.com/_app/assets/output-c89c6fe4.webp",Of="https://lihautan.com/_app/assets/output-563200b8.webp",Df="https://lihautan.com/_app/assets/output-428f0fce.png",Cu="https://lihautan.com/_app/assets/output-7756fc06.png",Lf="https://lihautan.com/_app/assets/targeting-e35ae87a.webp",Pf="https://lihautan.com/_app/assets/targeting-908f9668.webp",Hf="https://lihautan.com/_app/assets/targeting-4a770337.png",Ou="https://lihautan.com/_app/assets/targeting-25308288.png",Wf="https://lihautan.com/_app/assets/hero-twitter-9356c385.jpg";function Vf(Xs){let x,ie,M,He,E,q,N,qo,We,Vn,jn,Ie,Ve,Jn,Bn,je,Gn,Rn,Mn,Je,Nn,Be,Zn,Un,on,O,zo,Ge,Kn,Fn,Qo,Yn,Xn,ye,ue,Re,qn,zn,Me,Qn,$n,$o,el,sl,qs,tl,Ne,ol,al,Ze,Ue,nl,ll,Ke,rl,il,Fe,cl,Ye,pl,hl,kl,Xe,dl,qe,vl,yl,ul,ea,fl,an,f,sa,ze,bl,xl,ta,wl,ml,zs,Lu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; parse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/parser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> traverse </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/traverse&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> generate </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/generator&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// parse the code -&gt; ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// transform the ast</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">traverse</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">enter</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// generate code &lt;- ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generate</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> code);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`,gl,oa,C,_l,Qe,El,Sl,Qs,Il,Al,$s,Tl,Cl,et,Ol,Dl,st,Ll,Pl,tt,Hl,Wl,Vl,aa,jl,Jl,ot,Pu='<pre class="prism language-"><code><span class="line">code -&gt; AST -&gt; transformed AST -&gt; transformed code</span></code></pre>',Bl,$e,Gl,at,Rl,Ml,Nl,nt,Hu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> babel </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// your first babel plugin \u{1F60E}\u{1F60E}</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`,Zl,ae,Ul,es,Kl,Fl,lt,Yl,Xl,rt,ql,zl,Ql,na,fe,$l,it,er,sr,ss,tr,or,ar,ts,nr,la,lr,rr,ir,ra,cr,nn,T,ia,os,pr,hr,ca,kr,dr,as,pa,vr,yr,ha,ur,fr,ct,Wu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,br,ka,xr,wr,pt,Vu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;H&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;e&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;o&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;t&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,mr,Ae,gr,ht,_r,Er,da,Sr,ln,D,va,ns,Ir,Ar,ls,Tr,rs,Cr,Or,Dr,ya,be,kt,ua,Z,od,Lr,fa,Pr,Hr,ba,Wr,Vr,is,dt,xa,jr,Jr,Br,vt,wa,Gr,Rr,rn,J,ma,cs,Mr,Nr,ps,Zr,hs,Ur,Kr,Fr,ga,xe,yt,_a,U,ad,Yr,Ea,Xr,qr,ne,zr,ut,Qr,$r,ft,ei,si,bt,ti,oi,cn,k,Sa,ks,ai,ni,Ia,li,ri,xt,ju=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ii,ds,ci,vs,pi,hi,ki,ys,di,us,vi,yi,ui,fs,fi,wt,bi,xi,wi,mt,Ju=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;identifier&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;string literal&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,mi,Aa,gi,_i,gt,Bu=`<pre class="prism language-"><code><span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span></code></pre>`,Ei,Si,Ii,W,Ai,_t,Ti,Ci,Et,Oi,Di,St,Li,Pi,It,Hi,Wi,At,Vi,ji,Ji,_,Bi,Tt,Gi,Ri,Ct,Mi,Ni,Ot,Zi,Ui,Dt,Ki,Fi,Lt,Yi,Xi,Pt,qi,zi,Ht,Qi,$i,Wt,ec,sc,Vt,tc,oc,ac,Ta,ce,nc,jt,lc,rc,bs,ic,cc,xs,pc,hc,kc,dc,Ca,vc,pn,h,Oa,ws,yc,uc,K,fc,ms,bc,xc,Jt,wc,mc,Bt,gc,_c,Gt,Ec,Sc,Ic,Rt,Gu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ac,Da,Tc,Cc,Mt,Ru=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">elosnoc</span><span style="color: var(--shiki-token-function)">.gol</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,Oc,gs,Dc,Nt,Lc,Pc,Hc,La,Wc,Vc,Pa,we,Zt,Ha,z,nd,jc,L,Ut,Jc,Bc,Kt,Gc,Rc,Ft,Mc,Nc,Yt,Zc,Uc,Xt,Kc,Fc,qt,Yc,Xc,qc,me,zc,zt,Qc,$c,Qt,ep,sp,tp,$t,Mu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,op,Wa,ap,np,eo,Nu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,lp,F,rp,so,ip,cp,to,pp,hp,oo,kp,dp,ao,vp,yp,up,ge,fp,no,bp,xp,lo,wp,mp,gp,ro,Zu='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">log</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',_p,Va,I,Ep,io,Sp,Ip,co,Ap,Tp,_s,Cp,Op,po,Dp,Lp,ho,Pp,Hp,ko,Wp,Vp,Es,jp,Jp,hn,v,ja,Ss,Bp,Gp,_e,Rp,vo,Mp,Np,yo,Zp,Up,Kp,Y,Fp,Is,uo,Yp,Xp,fo,qp,zp,bo,Qp,$p,xo,eh,sh,th,wo,Uu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oh,V,ah,mo,nh,lh,go,rh,ih,_o,ch,ph,Eo,hh,kh,So,dh,vh,yh,Ja,uh,fh,Io,Ku='<pre class="prism language-"><code><span class="line">RangeError: Maximum call stack size exceeded</span></code></pre>',bh,Ba,xh,wh,A,mh,Ao,gh,_h,To,Eh,Sh,Co,Ih,Ah,Oo,Th,Ch,Do,Oh,Dh,Lo,Lh,Ph,Po,Hh,Wh,Vh,Ee,jh,Ho,Jh,Bh,Wo,Gh,Rh,Mh,As,Nh,Vo,Zh,Uh,Kh,jo,Fu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fh,Ga,Yh,kn,B,Ra,Ts,Xh,qh,Ma,zh,Qh,Jo,Yu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">function greet(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  return &#39;Hello &#39; + name;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">console.log(greet(&#39;tanhauhau&#39;)); // Hello tanhauhau</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">concat</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(concat);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code);</span></span></code></pre>`,$h,Na,ek,sk,le,Za,tk,ok,Ua,ak,nk,Ka,lk,rk,Fa,ik,dn,Q,Ya,Cs,ck,pk,Os,hk,Ds,kk,dk,vk,j,yk,Ls,uk,fk,Bo,bk,xk,Go,wk,mk,Ps,gk,_k,Hs,Ek,Sk,Ik,re,Xa,qa,Ak,Tk,Ws,Ck,Vs,Ok,Dk,Lk,za,Pk,Hk,Qa,$a,js,Wk,vn,Te,en,Js,Vk,jk,Se,Bs,Gs,Jk,Bk,Rs,Gk,Rk,Ms,Ns,Mk,Nk,Zs,Zk,Uk,Us,Ks,Kk,Fk,Fs,Yk;return{c(){x=a("p"),ie=s("Today, I will share a step-by-step guide for writing a custom "),M=a("a"),He=s("babel"),E=s(" transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),q=i(),N=a("section"),qo=a("h2"),We=a("a"),Vn=s("What is babel?"),jn=i(),Ie=a("p"),Ve=a("a"),Jn=s("Babel"),Bn=s(" is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),je=a("a"),Gn=s("plugin system"),Rn=s(" to do code transformation, so anyone can write their own transformation plugin for babel."),Mn=i(),Je=a("p"),Nn=s("Before you get started writing a transformation plugin for babel, you would need to know what is an "),Be=a("a"),Zn=s("Abstract Syntax Tree (AST)"),Un=s("."),on=i(),O=a("section"),zo=a("h3"),Ge=a("a"),Kn=s("What is Abstract Syntax Tree (AST)?"),Fn=i(),Qo=a("p"),Yn=s("I am not sure I can explain this better than the amazing articles out there on the web:"),Xn=i(),ye=a("ul"),ue=a("li"),Re=a("a"),qn=s("Leveling Up One\u2019s Parsing Game With ASTs"),zn=s(" by "),Me=a("a"),Qn=s("Vaidehi Joshi"),$n=s(" * "),$o=a("em"),el=s("(Highly recommend this one! \u{1F44D})"),sl=i(),qs=a("li"),tl=s("Wikipedia's "),Ne=a("a"),ol=s("Abstract syntax tree"),al=i(),Ze=a("li"),Ue=a("a"),nl=s("What is an Abstract Syntax Tree"),ll=s(" by "),Ke=a("a"),rl=s("Chidume Nnamdi"),il=i(),Fe=a("p"),cl=s("To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),Ye=a("a"),pl=s("estree specification"),hl=s("."),kl=i(),Xe=a("p"),dl=s("AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),qe=a("a"),vl=s("babel"),yl=s(" to understand the code and make specific meaningful transformation to it."),ul=i(),ea=a("p"),fl=s("So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),an=i(),f=a("section"),sa=a("h2"),ze=a("a"),bl=s("How to use babel to transform code"),xl=i(),ta=a("p"),wl=s("The following is the general template of using babel to do code transformation:"),ml=i(),zs=a("div"),gl=i(),oa=a("blockquote"),C=a("p"),_l=s("You would need to install "),Qe=a("a"),El=s("@babel/core"),Sl=s(" to run this. "),Qs=a("code"),Il=s("@babel/parser"),Al=s(", "),$s=a("code"),Tl=s("@babel/traverse"),Cl=s(", "),et=a("code"),Ol=s("@babel/generator"),Dl=s(" are all dependencies of "),st=a("code"),Ll=s("@babel/core"),Pl=s(", so installing "),tt=a("code"),Hl=s("@babel/core"),Wl=s(" would suffice."),Vl=i(),aa=a("p"),jl=s("So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),Jl=i(),ot=a("div"),Bl=i(),$e=a("p"),Gl=s("However, we can use another API from "),at=a("code"),Rl=s("babel"),Ml=s(" to do all the above:"),Nl=i(),nt=a("div"),Zl=i(),ae=a("p"),Ul=s("Now, you have written your first "),es=a("a"),Kl=s("babel transform plugin"),Fl=s(" that replace all variable named "),lt=a("code"),Yl=s("n"),Xl=s(" to "),rt=a("code"),ql=s("x"),zl=s(", how cool is that?!"),Ql=i(),na=a("blockquote"),fe=a("p"),$l=s("Extract out the function "),it=a("code"),er=s("myCustomPlugin"),sr=s(" to a new file and export it. "),ss=a("a"),tr=s("Package and publish your file as a npm package"),or=s(" and you can proudly say you have published a babel plugin! \u{1F389}\u{1F389}"),ar=i(),ts=a("p"),nr=s("At this point, you must have thought: "),la=a("em"),lr=s(`"Yes I've just written a babel plugin, but I have no idea how it works..."`),rr=s(", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),ir=i(),ra=a("p"),cr=s("So, here is the step-by-step guide to do it:"),nn=i(),T=a("section"),ia=a("h3"),os=a("a"),pr=s("1. Have in mind what you want to transform from and transform into"),hr=i(),ca=a("p"),kr=s("In this example, I want to prank my colleague by creating a babel plugin that will:"),dr=i(),as=a("ul"),pa=a("li"),vr=s("reverse all the variables' and functions' names"),yr=i(),ha=a("li"),ur=s("split out string into individual characters"),fr=i(),ct=a("div"),br=i(),ka=a("p"),xr=s("into"),wr=i(),pt=a("div"),mr=i(),Ae=a("p"),gr=s("Well, we have to keep the "),ht=a("code"),_r=s("console.log"),Er=s(", so that even the code is hardly readable, it is still working fine. "),da=a("em"),Sr=s("(I wouldn't want to break the production code!)"),ln=i(),D=a("section"),va=a("h3"),ns=a("a"),Ir=s("2. Know what to target on the AST"),Ar=i(),ls=a("p"),Tr=s("Head down to a "),rs=a("a"),Cr=s("babel AST explorer"),Or=s(", click on different parts of the code and see where / how it is represented on the AST:"),Dr=i(),ya=a("p"),be=a("span"),kt=a("picture"),ua=a("source"),Z=a("img"),Lr=i(),fa=a("p"),Pr=s("If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),Hr=i(),ba=a("p"),Wr=s("So, now we know that we need to target:"),Vr=i(),is=a("ul"),dt=a("li"),xa=a("strong"),jr=s("Identifier"),Jr=s(" for variable and function names"),Br=i(),vt=a("li"),wa=a("strong"),Gr=s("StringLiteral"),Rr=s(" for the string."),rn=i(),J=a("section"),ma=a("h3"),cs=a("a"),Mr=s("3. Know how the transformed AST looks like"),Nr=i(),ps=a("p"),Zr=s("Head down to the "),hs=a("a"),Ur=s("babel AST explorer"),Kr=s(" again, but this time around with the output code you want to generate."),Fr=i(),ga=a("p"),xe=a("span"),yt=a("picture"),_a=a("source"),U=a("img"),Yr=i(),Ea=a("p"),Xr=s("Play around and think how you can transform from the previous AST to the current AST."),qr=i(),ne=a("p"),zr=s("For example, you can see that "),ut=a("code"),Qr=s("'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),$r=s(" is formed by nested "),ft=a("code"),ei=s("BinaryExpression"),si=s(" with "),bt=a("code"),ti=s("StringLiteral"),oi=s("."),cn=i(),k=a("section"),Sa=a("h3"),ks=a("a"),ai=s("4. Write code"),ni=i(),Ia=a("p"),li=s("Now look at our code again:"),ri=i(),xt=a("div"),ii=i(),ds=a("p"),ci=s("The transformation uses "),vs=a("a"),pi=s("the visitor pattern"),hi=s("."),ki=i(),ys=a("p"),di=s("During the traversal phase, babel will do a "),us=a("a"),vi=s("depth-first search traversal"),yi=s(" and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),ui=i(),fs=a("p"),fi=s("In the visitor object, you can specify the name of the node you want to be "),wt=a("code"),bi=s("callback"),xi=s("ed:"),wi=i(),mt=a("div"),mi=i(),Aa=a("p"),gi=s('Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),_i=i(),gt=a("div"),Ei=i(),Si=a("hr"),Ii=i(),W=a("p"),Ai=s("Before we continue, let's look at the parameter of "),_t=a("code"),Ti=s("Identifer(path) {}"),Ci=s(". It says "),Et=a("code"),Oi=s("path"),Di=s(" instead of "),St=a("code"),Li=s("node"),Pi=s(", what is the difference between "),It=a("code"),Hi=s("path"),Wi=s(" and "),At=a("code"),Vi=s("node"),ji=s("? \u{1F937}\u200D"),Ji=i(),_=a("p"),Bi=s("In babel, "),Tt=a("code"),Gi=s("path"),Ri=s(" is an abstraction above "),Ct=a("code"),Mi=s("node"),Ni=s(", it provides the link between nodes, ie the "),Ot=a("code"),Zi=s("parent"),Ui=s(" of the node, as well as information such as the "),Dt=a("code"),Ki=s("scope"),Fi=s(", "),Lt=a("code"),Yi=s("context"),Xi=s(", etc. Besides, the "),Pt=a("code"),qi=s("path"),zi=s(" provides method such as "),Ht=a("code"),Qi=s("replaceWith"),$i=s(", "),Wt=a("code"),ec=s("insertBefore"),sc=s(", "),Vt=a("code"),tc=s("remove"),oc=s(", etc that will update and reflect on the underlying AST node."),ac=i(),Ta=a("blockquote"),ce=a("p"),nc=s("You can read more detail about "),jt=a("code"),lc=s("path"),rc=s(" in "),bs=a("a"),ic=s("Jamie Kyle"),cc=s("'s "),xs=a("a"),pc=s("babel handbook"),hc=i(),kc=a("hr"),dc=i(),Ca=a("p"),vc=s("So let's continue writing our babel plugin."),pn=i(),h=a("section"),Oa=a("h4"),ws=a("a"),yc=s("Transforming variable name"),uc=i(),K=a("p"),fc=s("As we can see from the "),ms=a("a"),bc=s("AST explorer"),xc=s(", the name of the "),Jt=a("code"),wc=s("Identifier"),mc=s(" is stored in the property called "),Bt=a("code"),gc=s("name"),_c=s(", so what we will do is to reverse the "),Gt=a("code"),Ec=s("name"),Sc=s("."),Ic=i(),Rt=a("div"),Ac=i(),Da=a("p"),Tc=s("Run it and you will see:"),Cc=i(),Mt=a("div"),Oc=i(),gs=a("p"),Dc=s("We are almost there, except we've accidentally reversed "),Nt=a("code"),Lc=s("console.log"),Pc=s(" as well. How can we prevent that?"),Hc=i(),La=a("p"),Wc=s("Take a look at the AST again:"),Vc=i(),Pa=a("p"),we=a("span"),Zt=a("picture"),Ha=a("source"),z=a("img"),jc=i(),L=a("p"),Ut=a("code"),Jc=s("console.log"),Bc=s(" is part of the "),Kt=a("code"),Gc=s("MemberExpression"),Rc=s(", with the "),Ft=a("code"),Mc=s("object"),Nc=s(" as "),Yt=a("code"),Zc=s('"console"'),Uc=s(" and "),Xt=a("code"),Kc=s("property"),Fc=s(" as "),qt=a("code"),Yc=s('"log"'),Xc=s("."),qc=i(),me=a("p"),zc=s("So let's check that if our current "),zt=a("code"),Qc=s("Identifier"),$c=s(" is within this "),Qt=a("code"),ep=s("MemberExpression"),sp=s(" and we will not reverse the name:"),tp=i(),$t=a("div"),op=i(),Wa=a("p"),ap=s("And yes, now you get it right!"),np=i(),eo=a("div"),lp=i(),F=a("p"),rp=s("So, why do we have to check whether the "),so=a("code"),ip=s("Identifier"),cp=s("'s parent is not a "),to=a("code"),pp=s("console.log"),hp=i(),oo=a("code"),kp=s("MemberExpression"),dp=s("? Why don't we just compare whether the current "),ao=a("code"),vp=s("Identifier.name === 'console' || Identifier.name === 'log'"),yp=s("?"),up=i(),ge=a("p"),fp=s("You can do that, except that it will not reverse the variable name if it is named "),no=a("code"),bp=s("console"),xp=s(" or "),lo=a("code"),wp=s("log"),mp=s(":"),gp=i(),ro=a("div"),_p=i(),Va=a("blockquote"),I=a("p"),Ep=s("So, how do I know the method "),io=a("code"),Sp=s("isMemberExpression"),Ip=s(" and "),co=a("code"),Ap=s("isIdentifier"),Tp=s("? Well, all the node types specified in the "),_s=a("a"),Cp=s("@babel/types"),Op=s(" have the "),po=a("code"),Dp=s("isXxxx"),Lp=s(" validator function counterpart, eg: "),ho=a("code"),Pp=s("anyTypeAnnotation"),Hp=s(" function will have a "),ko=a("code"),Wp=s("isAnyTypeAnnotation"),Vp=s(" validator. If you want to know the exhaustive list of the validator functions, you can head over "),Es=a("a"),jp=s("to the actual source code"),Jp=s("."),hn=i(),v=a("section"),ja=a("h4"),Ss=a("a"),Bp=s("Transforming strings"),Gp=i(),_e=a("p"),Rp=s("The next step is to generate a nested "),vo=a("code"),Mp=s("BinaryExpression"),Np=s(" out of "),yo=a("code"),Zp=s("StringLiteral"),Up=s("."),Kp=i(),Y=a("p"),Fp=s("To create an AST node, you can use the utility function from "),Is=a("a"),uo=a("code"),Yp=s("@babel/types"),Xp=s(". "),fo=a("code"),qp=s("@babel/types"),zp=s(" is also available via "),bo=a("code"),Qp=s("babel.types"),$p=s(" from "),xo=a("code"),eh=s("@babel/core"),sh=s("."),th=i(),wo=a("div"),oh=i(),V=a("p"),ah=s("So, we split the content of the "),mo=a("code"),nh=s("StringLiteral"),lh=s(", which is in "),go=a("code"),rh=s("path.node.value"),ih=s(", make each character a "),_o=a("code"),ch=s("StringLiteral"),ph=s(", and combine them with "),Eo=a("code"),hh=s("BinaryExpression"),kh=s(". Finally, we replace the "),So=a("code"),dh=s("StringLiteral"),vh=s(" with the newly created node."),yh=i(),Ja=a("p"),uh=s("...And that's it! Except, we ran into Stack Overflow \u{1F605}:"),fh=i(),Io=a("div"),bh=i(),Ba=a("p"),xh=s("Why \u{1F937}\u200D ?"),wh=i(),A=a("p"),mh=s("Well, that's because for each "),Ao=a("code"),gh=s("StringLiteral"),_h=s(" we created more "),To=a("code"),Eh=s("StringLiteral"),Sh=s(", and in each of those "),Co=a("code"),Ih=s("StringLiteral"),Ah=s(', we are "creating" more '),Oo=a("code"),Th=s("StringLiteral"),Ch=s(". Although we will replace a "),Do=a("code"),Oh=s("StringLiteral"),Dh=s(" with another "),Lo=a("code"),Lh=s("StringLiteral"),Ph=s(", babel will treat it as a new node and will visit the newly created "),Po=a("code"),Hh=s("StringLiteral"),Wh=s(", thus the infinite recursive and stack overflow."),Vh=i(),Ee=a("p"),jh=s("So, how do we tell babel that once we replaced the "),Ho=a("code"),Jh=s("StringLiteral"),Bh=s(" with the "),Wo=a("code"),Gh=s("newNode"),Rh=s(", babel can stop and don't have to go down and visit the newly created node anymore?"),Mh=i(),As=a("p"),Nh=s("We can use "),Vo=a("code"),Zh=s("path.skip()"),Uh=s(" to skip traversing the children of the current path:"),Kh=i(),jo=a("div"),Fh=i(),Ga=a("p"),Yh=s("...And yes it works now with now stack overflow!"),kn=i(),B=a("section"),Ra=a("h2"),Ts=a("a"),Xh=s("Summary"),qh=i(),Ma=a("p"),zh=s("So, here we have it, our first code transformation with babel:"),Qh=i(),Jo=a("div"),$h=i(),Na=a("p"),ek=s("A summary of the steps on how we get here:"),sk=i(),le=a("ol"),Za=a("li"),tk=s("Have in mind what you want to transform from and transform into"),ok=i(),Ua=a("li"),ak=s("Know what to target on the AST"),nk=i(),Ka=a("li"),lk=s("Know how the transformed AST looks like"),rk=i(),Fa=a("li"),ik=s("Write code"),dn=i(),Q=a("section"),Ya=a("h2"),Cs=a("a"),ck=s("Further resources"),pk=i(),Os=a("p"),hk=s("If you are interested to learn more, "),Ds=a("a"),kk=s("babel's Github repo"),dk=s(" is always the best place to find out more code examples of writing a babel transformation."),vk=i(),j=a("p"),yk=s("Head down to "),Ls=a("a"),uk=s("https://github.com/babel/babel"),fk=s(", and look for "),Bo=a("code"),bk=s("babel-plugin-transform-*"),xk=s(" or "),Go=a("code"),wk=s("babel-plugin-proposal-*"),mk=s(" folders, they are all babel transformation plugin, where you can find code on how babel "),Ps=a("a"),gk=s("transform the nullish coalescing operator"),_k=s(", "),Hs=a("a"),Ek=s("optional chaining"),Sk=s(" and many more."),Ik=i(),re=a("blockquote"),Xa=a("p"),qa=a("strong"),Ak=s("Manipulating AST with JavaScript using Babel"),Tk=i(),Ws=a("p"),Ck=s("If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),Vs=a("a"),Ok=s("video course"),Dk=s(", showing you step-by-step, how to write a babel plugin and codemod."),Lk=i(),za=a("p"),Pk=s("In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),Hk=i(),Qa=a("p"),$a=a("strong"),js=a("a"),Wk=s("Sounds interesting, let's take a look at the video course"),vn=i(),Te=a("section"),en=a("h2"),Js=a("a"),Vk=s("Reference"),jk=i(),Se=a("ul"),Bs=a("li"),Gs=a("a"),Jk=s("Babel docs"),Bk=s(" & "),Rs=a("a"),Gk=s("Github repo"),Rk=i(),Ms=a("li"),Ns=a("a"),Mk=s("Babel Handbook"),Nk=s(" by "),Zs=a("a"),Zk=s("Jamie Kyle"),Uk=i(),Us=a("li"),Ks=a("a"),Kk=s("Leveling Up One\u2019s Parsing Game With ASTs"),Fk=s(" by "),Fs=a("a"),Yk=s("Vaidehi Joshi"),this.h()},l(p){x=n(p,"P",{});var y=l(x);ie=t(y,"Today, I will share a step-by-step guide for writing a custom "),M=n(y,"A",{href:!0,rel:!0});var ld=l(M);He=t(ld,"babel"),ld.forEach(o),E=t(y," transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),y.forEach(o),q=c(p),N=n(p,"SECTION",{});var Ro=l(N);qo=n(Ro,"H2",{});var rd=l(qo);We=n(rd,"A",{href:!0,id:!0});var id=l(We);Vn=t(id,"What is babel?"),id.forEach(o),rd.forEach(o),jn=c(Ro),Ie=n(Ro,"P",{});var sn=l(Ie);Ve=n(sn,"A",{href:!0,rel:!0});var cd=l(Ve);Jn=t(cd,"Babel"),cd.forEach(o),Bn=t(sn," is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),je=n(sn,"A",{href:!0,rel:!0});var pd=l(je);Gn=t(pd,"plugin system"),pd.forEach(o),Rn=t(sn," to do code transformation, so anyone can write their own transformation plugin for babel."),sn.forEach(o),Mn=c(Ro),Je=n(Ro,"P",{});var yn=l(Je);Nn=t(yn,"Before you get started writing a transformation plugin for babel, you would need to know what is an "),Be=n(yn,"A",{href:!0,rel:!0});var hd=l(Be);Zn=t(hd,"Abstract Syntax Tree (AST)"),hd.forEach(o),Un=t(yn,"."),yn.forEach(o),Ro.forEach(o),on=c(p),O=n(p,"SECTION",{});var $=l(O);zo=n($,"H3",{});var kd=l(zo);Ge=n(kd,"A",{href:!0,id:!0});var dd=l(Ge);Kn=t(dd,"What is Abstract Syntax Tree (AST)?"),dd.forEach(o),kd.forEach(o),Fn=c($),Qo=n($,"P",{});var vd=l(Qo);Yn=t(vd,"I am not sure I can explain this better than the amazing articles out there on the web:"),vd.forEach(o),Xn=c($),ye=n($,"UL",{});var Mo=l(ye);ue=n(Mo,"LI",{});var No=l(ue);Re=n(No,"A",{href:!0,rel:!0});var yd=l(Re);qn=t(yd,"Leveling Up One\u2019s Parsing Game With ASTs"),yd.forEach(o),zn=t(No," by "),Me=n(No,"A",{href:!0,rel:!0});var ud=l(Me);Qn=t(ud,"Vaidehi Joshi"),ud.forEach(o),$n=t(No," * "),$o=n(No,"EM",{});var fd=l($o);el=t(fd,"(Highly recommend this one! \u{1F44D})"),fd.forEach(o),No.forEach(o),sl=c(Mo),qs=n(Mo,"LI",{});var Xk=l(qs);tl=t(Xk,"Wikipedia's "),Ne=n(Xk,"A",{href:!0,rel:!0});var bd=l(Ne);ol=t(bd,"Abstract syntax tree"),bd.forEach(o),Xk.forEach(o),al=c(Mo),Ze=n(Mo,"LI",{});var un=l(Ze);Ue=n(un,"A",{href:!0,rel:!0});var xd=l(Ue);nl=t(xd,"What is an Abstract Syntax Tree"),xd.forEach(o),ll=t(un," by "),Ke=n(un,"A",{href:!0,rel:!0});var wd=l(Ke);rl=t(wd,"Chidume Nnamdi"),wd.forEach(o),un.forEach(o),Mo.forEach(o),il=c($),Fe=n($,"P",{});var fn=l(Fe);cl=t(fn,"To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),Ye=n(fn,"A",{href:!0,rel:!0});var md=l(Ye);pl=t(md,"estree specification"),md.forEach(o),hl=t(fn,"."),fn.forEach(o),kl=c($),Xe=n($,"P",{});var bn=l(Xe);dl=t(bn,"AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),qe=n(bn,"A",{href:!0,rel:!0});var gd=l(qe);vl=t(gd,"babel"),gd.forEach(o),yl=t(bn," to understand the code and make specific meaningful transformation to it."),bn.forEach(o),ul=c($),ea=n($,"P",{});var _d=l(ea);fl=t(_d,"So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),_d.forEach(o),$.forEach(o),an=c(p),f=n(p,"SECTION",{});var m=l(f);sa=n(m,"H2",{});var Ed=l(sa);ze=n(Ed,"A",{href:!0,id:!0});var Sd=l(ze);bl=t(Sd,"How to use babel to transform code"),Sd.forEach(o),Ed.forEach(o),xl=c(m),ta=n(m,"P",{});var Id=l(ta);wl=t(Id,"The following is the general template of using babel to do code transformation:"),Id.forEach(o),ml=c(m),zs=n(m,"DIV",{class:!0});var Xu=l(zs);Xu.forEach(o),gl=c(m),oa=n(m,"BLOCKQUOTE",{});var Ad=l(oa);C=n(Ad,"P",{});var G=l(C);_l=t(G,"You would need to install "),Qe=n(G,"A",{href:!0,rel:!0});var Td=l(Qe);El=t(Td,"@babel/core"),Td.forEach(o),Sl=t(G," to run this. "),Qs=n(G,"CODE",{class:!0});var Cd=l(Qs);Il=t(Cd,"@babel/parser"),Cd.forEach(o),Al=t(G,", "),$s=n(G,"CODE",{class:!0});var Od=l($s);Tl=t(Od,"@babel/traverse"),Od.forEach(o),Cl=t(G,", "),et=n(G,"CODE",{class:!0});var Dd=l(et);Ol=t(Dd,"@babel/generator"),Dd.forEach(o),Dl=t(G," are all dependencies of "),st=n(G,"CODE",{class:!0});var Ld=l(st);Ll=t(Ld,"@babel/core"),Ld.forEach(o),Pl=t(G,", so installing "),tt=n(G,"CODE",{class:!0});var Pd=l(tt);Hl=t(Pd,"@babel/core"),Pd.forEach(o),Wl=t(G," would suffice."),G.forEach(o),Ad.forEach(o),Vl=c(m),aa=n(m,"P",{});var Hd=l(aa);jl=t(Hd,"So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),Hd.forEach(o),Jl=c(m),ot=n(m,"DIV",{class:!0});var qu=l(ot);qu.forEach(o),Bl=c(m),$e=n(m,"P",{});var xn=l($e);Gl=t(xn,"However, we can use another API from "),at=n(xn,"CODE",{class:!0});var Wd=l(at);Rl=t(Wd,"babel"),Wd.forEach(o),Ml=t(xn," to do all the above:"),xn.forEach(o),Nl=c(m),nt=n(m,"DIV",{class:!0});var zu=l(nt);zu.forEach(o),Zl=c(m),ae=n(m,"P",{});var Ce=l(ae);Ul=t(Ce,"Now, you have written your first "),es=n(Ce,"A",{href:!0,rel:!0});var Vd=l(es);Kl=t(Vd,"babel transform plugin"),Vd.forEach(o),Fl=t(Ce," that replace all variable named "),lt=n(Ce,"CODE",{class:!0});var jd=l(lt);Yl=t(jd,"n"),jd.forEach(o),Xl=t(Ce," to "),rt=n(Ce,"CODE",{class:!0});var Jd=l(rt);ql=t(Jd,"x"),Jd.forEach(o),zl=t(Ce,", how cool is that?!"),Ce.forEach(o),Ql=c(m),na=n(m,"BLOCKQUOTE",{});var Bd=l(na);fe=n(Bd,"P",{});var Zo=l(fe);$l=t(Zo,"Extract out the function "),it=n(Zo,"CODE",{class:!0});var Gd=l(it);er=t(Gd,"myCustomPlugin"),Gd.forEach(o),sr=t(Zo," to a new file and export it. "),ss=n(Zo,"A",{href:!0,rel:!0});var Rd=l(ss);tr=t(Rd,"Package and publish your file as a npm package"),Rd.forEach(o),or=t(Zo," and you can proudly say you have published a babel plugin! \u{1F389}\u{1F389}"),Zo.forEach(o),Bd.forEach(o),ar=c(m),ts=n(m,"P",{});var wn=l(ts);nr=t(wn,"At this point, you must have thought: "),la=n(wn,"EM",{});var Md=l(la);lr=t(Md,`"Yes I've just written a babel plugin, but I have no idea how it works..."`),Md.forEach(o),rr=t(wn,", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),wn.forEach(o),ir=c(m),ra=n(m,"P",{});var Nd=l(ra);cr=t(Nd,"So, here is the step-by-step guide to do it:"),Nd.forEach(o),m.forEach(o),nn=c(p),T=n(p,"SECTION",{});var R=l(T);ia=n(R,"H3",{});var Zd=l(ia);os=n(Zd,"A",{href:!0,id:!0});var Ud=l(os);pr=t(Ud,"1. Have in mind what you want to transform from and transform into"),Ud.forEach(o),Zd.forEach(o),hr=c(R),ca=n(R,"P",{});var Kd=l(ca);kr=t(Kd,"In this example, I want to prank my colleague by creating a babel plugin that will:"),Kd.forEach(o),dr=c(R),as=n(R,"UL",{});var mn=l(as);pa=n(mn,"LI",{});var Fd=l(pa);vr=t(Fd,"reverse all the variables' and functions' names"),Fd.forEach(o),yr=c(mn),ha=n(mn,"LI",{});var Yd=l(ha);ur=t(Yd,"split out string into individual characters"),Yd.forEach(o),mn.forEach(o),fr=c(R),ct=n(R,"DIV",{class:!0});var Qu=l(ct);Qu.forEach(o),br=c(R),ka=n(R,"P",{});var Xd=l(ka);xr=t(Xd,"into"),Xd.forEach(o),wr=c(R),pt=n(R,"DIV",{class:!0});var $u=l(pt);$u.forEach(o),mr=c(R),Ae=n(R,"P",{});var tn=l(Ae);gr=t(tn,"Well, we have to keep the "),ht=n(tn,"CODE",{class:!0});var qd=l(ht);_r=t(qd,"console.log"),qd.forEach(o),Er=t(tn,", so that even the code is hardly readable, it is still working fine. "),da=n(tn,"EM",{});var zd=l(da);Sr=t(zd,"(I wouldn't want to break the production code!)"),zd.forEach(o),tn.forEach(o),R.forEach(o),ln=c(p),D=n(p,"SECTION",{});var ee=l(D);va=n(ee,"H3",{});var Qd=l(va);ns=n(Qd,"A",{href:!0,id:!0});var $d=l(ns);Ir=t($d,"2. Know what to target on the AST"),$d.forEach(o),Qd.forEach(o),Ar=c(ee),ls=n(ee,"P",{});var gn=l(ls);Tr=t(gn,"Head down to a "),rs=n(gn,"A",{href:!0,rel:!0});var ev=l(rs);Cr=t(ev,"babel AST explorer"),ev.forEach(o),Or=t(gn,", click on different parts of the code and see where / how it is represented on the AST:"),gn.forEach(o),Dr=c(ee),ya=n(ee,"P",{});var sv=l(ya);be=n(sv,"SPAN",{style:!0});var tv=l(be);kt=n(tv,"PICTURE",{});var qk=l(kt);ua=n(qk,"SOURCE",{type:!0,srcset:!0}),Z=n(qk,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),qk.forEach(o),tv.forEach(o),sv.forEach(o),Lr=c(ee),fa=n(ee,"P",{});var ov=l(fa);Pr=t(ov,"If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),ov.forEach(o),Hr=c(ee),ba=n(ee,"P",{});var av=l(ba);Wr=t(av,"So, now we know that we need to target:"),av.forEach(o),Vr=c(ee),is=n(ee,"UL",{});var _n=l(is);dt=n(_n,"LI",{});var zk=l(dt);xa=n(zk,"STRONG",{});var nv=l(xa);jr=t(nv,"Identifier"),nv.forEach(o),Jr=t(zk," for variable and function names"),zk.forEach(o),Br=c(_n),vt=n(_n,"LI",{});var Qk=l(vt);wa=n(Qk,"STRONG",{});var lv=l(wa);Gr=t(lv,"StringLiteral"),lv.forEach(o),Rr=t(Qk," for the string."),Qk.forEach(o),_n.forEach(o),ee.forEach(o),rn=c(p),J=n(p,"SECTION",{});var pe=l(J);ma=n(pe,"H3",{});var rv=l(ma);cs=n(rv,"A",{href:!0,id:!0});var iv=l(cs);Mr=t(iv,"3. Know how the transformed AST looks like"),iv.forEach(o),rv.forEach(o),Nr=c(pe),ps=n(pe,"P",{});var En=l(ps);Zr=t(En,"Head down to the "),hs=n(En,"A",{href:!0,rel:!0});var cv=l(hs);Ur=t(cv,"babel AST explorer"),cv.forEach(o),Kr=t(En," again, but this time around with the output code you want to generate."),En.forEach(o),Fr=c(pe),ga=n(pe,"P",{});var pv=l(ga);xe=n(pv,"SPAN",{style:!0});var hv=l(xe);yt=n(hv,"PICTURE",{});var $k=l(yt);_a=n($k,"SOURCE",{type:!0,srcset:!0}),U=n($k,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),$k.forEach(o),hv.forEach(o),pv.forEach(o),Yr=c(pe),Ea=n(pe,"P",{});var kv=l(Ea);Xr=t(kv,"Play around and think how you can transform from the previous AST to the current AST."),kv.forEach(o),qr=c(pe),ne=n(pe,"P",{});var Oe=l(ne);zr=t(Oe,"For example, you can see that "),ut=n(Oe,"CODE",{class:!0});var dv=l(ut);Qr=t(dv,"'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),dv.forEach(o),$r=t(Oe," is formed by nested "),ft=n(Oe,"CODE",{class:!0});var vv=l(ft);ei=t(vv,"BinaryExpression"),vv.forEach(o),si=t(Oe," with "),bt=n(Oe,"CODE",{class:!0});var yv=l(bt);ti=t(yv,"StringLiteral"),yv.forEach(o),oi=t(Oe,"."),Oe.forEach(o),pe.forEach(o),cn=c(p),k=n(p,"SECTION",{});var u=l(k);Sa=n(u,"H3",{});var uv=l(Sa);ks=n(uv,"A",{href:!0,id:!0});var fv=l(ks);ai=t(fv,"4. Write code"),fv.forEach(o),uv.forEach(o),ni=c(u),Ia=n(u,"P",{});var bv=l(Ia);li=t(bv,"Now look at our code again:"),bv.forEach(o),ri=c(u),xt=n(u,"DIV",{class:!0});var ef=l(xt);ef.forEach(o),ii=c(u),ds=n(u,"P",{});var Sn=l(ds);ci=t(Sn,"The transformation uses "),vs=n(Sn,"A",{href:!0,rel:!0});var xv=l(vs);pi=t(xv,"the visitor pattern"),xv.forEach(o),hi=t(Sn,"."),Sn.forEach(o),ki=c(u),ys=n(u,"P",{});var In=l(ys);di=t(In,"During the traversal phase, babel will do a "),us=n(In,"A",{href:!0,rel:!0});var wv=l(us);vi=t(wv,"depth-first search traversal"),wv.forEach(o),yi=t(In," and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),In.forEach(o),ui=c(u),fs=n(u,"P",{});var An=l(fs);fi=t(An,"In the visitor object, you can specify the name of the node you want to be "),wt=n(An,"CODE",{class:!0});var mv=l(wt);bi=t(mv,"callback"),mv.forEach(o),xi=t(An,"ed:"),An.forEach(o),wi=c(u),mt=n(u,"DIV",{class:!0});var sf=l(mt);sf.forEach(o),mi=c(u),Aa=n(u,"P",{});var gv=l(Aa);gi=t(gv,'Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),gv.forEach(o),_i=c(u),gt=n(u,"DIV",{class:!0});var tf=l(gt);tf.forEach(o),Ei=c(u),Si=n(u,"HR",{}),Ii=c(u),W=n(u,"P",{});var se=l(W);Ai=t(se,"Before we continue, let's look at the parameter of "),_t=n(se,"CODE",{class:!0});var _v=l(_t);Ti=t(_v,"Identifer(path) {}"),_v.forEach(o),Ci=t(se,". It says "),Et=n(se,"CODE",{class:!0});var Ev=l(Et);Oi=t(Ev,"path"),Ev.forEach(o),Di=t(se," instead of "),St=n(se,"CODE",{class:!0});var Sv=l(St);Li=t(Sv,"node"),Sv.forEach(o),Pi=t(se,", what is the difference between "),It=n(se,"CODE",{class:!0});var Iv=l(It);Hi=t(Iv,"path"),Iv.forEach(o),Wi=t(se," and "),At=n(se,"CODE",{class:!0});var Av=l(At);Vi=t(Av,"node"),Av.forEach(o),ji=t(se,"? \u{1F937}\u200D"),se.forEach(o),Ji=c(u),_=n(u,"P",{});var S=l(_);Bi=t(S,"In babel, "),Tt=n(S,"CODE",{class:!0});var Tv=l(Tt);Gi=t(Tv,"path"),Tv.forEach(o),Ri=t(S," is an abstraction above "),Ct=n(S,"CODE",{class:!0});var Cv=l(Ct);Mi=t(Cv,"node"),Cv.forEach(o),Ni=t(S,", it provides the link between nodes, ie the "),Ot=n(S,"CODE",{class:!0});var Ov=l(Ot);Zi=t(Ov,"parent"),Ov.forEach(o),Ui=t(S," of the node, as well as information such as the "),Dt=n(S,"CODE",{class:!0});var Dv=l(Dt);Ki=t(Dv,"scope"),Dv.forEach(o),Fi=t(S,", "),Lt=n(S,"CODE",{class:!0});var Lv=l(Lt);Yi=t(Lv,"context"),Lv.forEach(o),Xi=t(S,", etc. Besides, the "),Pt=n(S,"CODE",{class:!0});var Pv=l(Pt);qi=t(Pv,"path"),Pv.forEach(o),zi=t(S," provides method such as "),Ht=n(S,"CODE",{class:!0});var Hv=l(Ht);Qi=t(Hv,"replaceWith"),Hv.forEach(o),$i=t(S,", "),Wt=n(S,"CODE",{class:!0});var Wv=l(Wt);ec=t(Wv,"insertBefore"),Wv.forEach(o),sc=t(S,", "),Vt=n(S,"CODE",{class:!0});var Vv=l(Vt);tc=t(Vv,"remove"),Vv.forEach(o),oc=t(S,", etc that will update and reflect on the underlying AST node."),S.forEach(o),ac=c(u),Ta=n(u,"BLOCKQUOTE",{});var jv=l(Ta);ce=n(jv,"P",{});var Ys=l(ce);nc=t(Ys,"You can read more detail about "),jt=n(Ys,"CODE",{class:!0});var Jv=l(jt);lc=t(Jv,"path"),Jv.forEach(o),rc=t(Ys," in "),bs=n(Ys,"A",{href:!0,rel:!0});var Bv=l(bs);ic=t(Bv,"Jamie Kyle"),Bv.forEach(o),cc=t(Ys,"'s "),xs=n(Ys,"A",{href:!0,rel:!0});var Gv=l(xs);pc=t(Gv,"babel handbook"),Gv.forEach(o),Ys.forEach(o),jv.forEach(o),hc=c(u),kc=n(u,"HR",{}),dc=c(u),Ca=n(u,"P",{});var Rv=l(Ca);vc=t(Rv,"So let's continue writing our babel plugin."),Rv.forEach(o),u.forEach(o),pn=c(p),h=n(p,"SECTION",{});var d=l(h);Oa=n(d,"H4",{});var Mv=l(Oa);ws=n(Mv,"A",{href:!0,id:!0});var Nv=l(ws);yc=t(Nv,"Transforming variable name"),Nv.forEach(o),Mv.forEach(o),uc=c(d),K=n(d,"P",{});var he=l(K);fc=t(he,"As we can see from the "),ms=n(he,"A",{href:!0,rel:!0});var Zv=l(ms);bc=t(Zv,"AST explorer"),Zv.forEach(o),xc=t(he,", the name of the "),Jt=n(he,"CODE",{class:!0});var Uv=l(Jt);wc=t(Uv,"Identifier"),Uv.forEach(o),mc=t(he," is stored in the property called "),Bt=n(he,"CODE",{class:!0});var Kv=l(Bt);gc=t(Kv,"name"),Kv.forEach(o),_c=t(he,", so what we will do is to reverse the "),Gt=n(he,"CODE",{class:!0});var Fv=l(Gt);Ec=t(Fv,"name"),Fv.forEach(o),Sc=t(he,"."),he.forEach(o),Ic=c(d),Rt=n(d,"DIV",{class:!0});var of=l(Rt);of.forEach(o),Ac=c(d),Da=n(d,"P",{});var Yv=l(Da);Tc=t(Yv,"Run it and you will see:"),Yv.forEach(o),Cc=c(d),Mt=n(d,"DIV",{class:!0});var af=l(Mt);af.forEach(o),Oc=c(d),gs=n(d,"P",{});var Tn=l(gs);Dc=t(Tn,"We are almost there, except we've accidentally reversed "),Nt=n(Tn,"CODE",{class:!0});var Xv=l(Nt);Lc=t(Xv,"console.log"),Xv.forEach(o),Pc=t(Tn," as well. How can we prevent that?"),Tn.forEach(o),Hc=c(d),La=n(d,"P",{});var qv=l(La);Wc=t(qv,"Take a look at the AST again:"),qv.forEach(o),Vc=c(d),Pa=n(d,"P",{});var zv=l(Pa);we=n(zv,"SPAN",{style:!0});var Qv=l(we);Zt=n(Qv,"PICTURE",{});var ed=l(Zt);Ha=n(ed,"SOURCE",{type:!0,srcset:!0}),z=n(ed,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),ed.forEach(o),Qv.forEach(o),zv.forEach(o),jc=c(d),L=n(d,"P",{});var X=l(L);Ut=n(X,"CODE",{class:!0});var $v=l(Ut);Jc=t($v,"console.log"),$v.forEach(o),Bc=t(X," is part of the "),Kt=n(X,"CODE",{class:!0});var ey=l(Kt);Gc=t(ey,"MemberExpression"),ey.forEach(o),Rc=t(X,", with the "),Ft=n(X,"CODE",{class:!0});var sy=l(Ft);Mc=t(sy,"object"),sy.forEach(o),Nc=t(X," as "),Yt=n(X,"CODE",{class:!0});var ty=l(Yt);Zc=t(ty,'"console"'),ty.forEach(o),Uc=t(X," and "),Xt=n(X,"CODE",{class:!0});var oy=l(Xt);Kc=t(oy,"property"),oy.forEach(o),Fc=t(X," as "),qt=n(X,"CODE",{class:!0});var ay=l(qt);Yc=t(ay,'"log"'),ay.forEach(o),Xc=t(X,"."),X.forEach(o),qc=c(d),me=n(d,"P",{});var Uo=l(me);zc=t(Uo,"So let's check that if our current "),zt=n(Uo,"CODE",{class:!0});var ny=l(zt);Qc=t(ny,"Identifier"),ny.forEach(o),$c=t(Uo," is within this "),Qt=n(Uo,"CODE",{class:!0});var ly=l(Qt);ep=t(ly,"MemberExpression"),ly.forEach(o),sp=t(Uo," and we will not reverse the name:"),Uo.forEach(o),tp=c(d),$t=n(d,"DIV",{class:!0});var nf=l($t);nf.forEach(o),op=c(d),Wa=n(d,"P",{});var ry=l(Wa);ap=t(ry,"And yes, now you get it right!"),ry.forEach(o),np=c(d),eo=n(d,"DIV",{class:!0});var lf=l(eo);lf.forEach(o),lp=c(d),F=n(d,"P",{});var ke=l(F);rp=t(ke,"So, why do we have to check whether the "),so=n(ke,"CODE",{class:!0});var iy=l(so);ip=t(iy,"Identifier"),iy.forEach(o),cp=t(ke,"'s parent is not a "),to=n(ke,"CODE",{class:!0});var cy=l(to);pp=t(cy,"console.log"),cy.forEach(o),hp=c(ke),oo=n(ke,"CODE",{class:!0});var py=l(oo);kp=t(py,"MemberExpression"),py.forEach(o),dp=t(ke,"? Why don't we just compare whether the current "),ao=n(ke,"CODE",{class:!0});var hy=l(ao);vp=t(hy,"Identifier.name === 'console' || Identifier.name === 'log'"),hy.forEach(o),yp=t(ke,"?"),ke.forEach(o),up=c(d),ge=n(d,"P",{});var Ko=l(ge);fp=t(Ko,"You can do that, except that it will not reverse the variable name if it is named "),no=n(Ko,"CODE",{class:!0});var ky=l(no);bp=t(ky,"console"),ky.forEach(o),xp=t(Ko," or "),lo=n(Ko,"CODE",{class:!0});var dy=l(lo);wp=t(dy,"log"),dy.forEach(o),mp=t(Ko,":"),Ko.forEach(o),gp=c(d),ro=n(d,"DIV",{class:!0});var rf=l(ro);rf.forEach(o),_p=c(d),Va=n(d,"BLOCKQUOTE",{});var vy=l(Va);I=n(vy,"P",{});var P=l(I);Ep=t(P,"So, how do I know the method "),io=n(P,"CODE",{class:!0});var yy=l(io);Sp=t(yy,"isMemberExpression"),yy.forEach(o),Ip=t(P," and "),co=n(P,"CODE",{class:!0});var uy=l(co);Ap=t(uy,"isIdentifier"),uy.forEach(o),Tp=t(P,"? Well, all the node types specified in the "),_s=n(P,"A",{href:!0,rel:!0});var fy=l(_s);Cp=t(fy,"@babel/types"),fy.forEach(o),Op=t(P," have the "),po=n(P,"CODE",{class:!0});var by=l(po);Dp=t(by,"isXxxx"),by.forEach(o),Lp=t(P," validator function counterpart, eg: "),ho=n(P,"CODE",{class:!0});var xy=l(ho);Pp=t(xy,"anyTypeAnnotation"),xy.forEach(o),Hp=t(P," function will have a "),ko=n(P,"CODE",{class:!0});var wy=l(ko);Wp=t(wy,"isAnyTypeAnnotation"),wy.forEach(o),Vp=t(P," validator. If you want to know the exhaustive list of the validator functions, you can head over "),Es=n(P,"A",{href:!0,rel:!0});var my=l(Es);jp=t(my,"to the actual source code"),my.forEach(o),Jp=t(P,"."),P.forEach(o),vy.forEach(o),d.forEach(o),hn=c(p),v=n(p,"SECTION",{});var b=l(v);ja=n(b,"H4",{});var gy=l(ja);Ss=n(gy,"A",{href:!0,id:!0});var _y=l(Ss);Bp=t(_y,"Transforming strings"),_y.forEach(o),gy.forEach(o),Gp=c(b),_e=n(b,"P",{});var Fo=l(_e);Rp=t(Fo,"The next step is to generate a nested "),vo=n(Fo,"CODE",{class:!0});var Ey=l(vo);Mp=t(Ey,"BinaryExpression"),Ey.forEach(o),Np=t(Fo," out of "),yo=n(Fo,"CODE",{class:!0});var Sy=l(yo);Zp=t(Sy,"StringLiteral"),Sy.forEach(o),Up=t(Fo,"."),Fo.forEach(o),Kp=c(b),Y=n(b,"P",{});var de=l(Y);Fp=t(de,"To create an AST node, you can use the utility function from "),Is=n(de,"A",{href:!0,rel:!0});var Iy=l(Is);uo=n(Iy,"CODE",{class:!0});var Ay=l(uo);Yp=t(Ay,"@babel/types"),Ay.forEach(o),Iy.forEach(o),Xp=t(de,". "),fo=n(de,"CODE",{class:!0});var Ty=l(fo);qp=t(Ty,"@babel/types"),Ty.forEach(o),zp=t(de," is also available via "),bo=n(de,"CODE",{class:!0});var Cy=l(bo);Qp=t(Cy,"babel.types"),Cy.forEach(o),$p=t(de," from "),xo=n(de,"CODE",{class:!0});var Oy=l(xo);eh=t(Oy,"@babel/core"),Oy.forEach(o),sh=t(de,"."),de.forEach(o),th=c(b),wo=n(b,"DIV",{class:!0});var cf=l(wo);cf.forEach(o),oh=c(b),V=n(b,"P",{});var te=l(V);ah=t(te,"So, we split the content of the "),mo=n(te,"CODE",{class:!0});var Dy=l(mo);nh=t(Dy,"StringLiteral"),Dy.forEach(o),lh=t(te,", which is in "),go=n(te,"CODE",{class:!0});var Ly=l(go);rh=t(Ly,"path.node.value"),Ly.forEach(o),ih=t(te,", make each character a "),_o=n(te,"CODE",{class:!0});var Py=l(_o);ch=t(Py,"StringLiteral"),Py.forEach(o),ph=t(te,", and combine them with "),Eo=n(te,"CODE",{class:!0});var Hy=l(Eo);hh=t(Hy,"BinaryExpression"),Hy.forEach(o),kh=t(te,". Finally, we replace the "),So=n(te,"CODE",{class:!0});var Wy=l(So);dh=t(Wy,"StringLiteral"),Wy.forEach(o),vh=t(te," with the newly created node."),te.forEach(o),yh=c(b),Ja=n(b,"P",{});var Vy=l(Ja);uh=t(Vy,"...And that's it! Except, we ran into Stack Overflow \u{1F605}:"),Vy.forEach(o),fh=c(b),Io=n(b,"DIV",{class:!0});var pf=l(Io);pf.forEach(o),bh=c(b),Ba=n(b,"P",{});var jy=l(Ba);xh=t(jy,"Why \u{1F937}\u200D ?"),jy.forEach(o),wh=c(b),A=n(b,"P",{});var H=l(A);mh=t(H,"Well, that's because for each "),Ao=n(H,"CODE",{class:!0});var Jy=l(Ao);gh=t(Jy,"StringLiteral"),Jy.forEach(o),_h=t(H," we created more "),To=n(H,"CODE",{class:!0});var By=l(To);Eh=t(By,"StringLiteral"),By.forEach(o),Sh=t(H,", and in each of those "),Co=n(H,"CODE",{class:!0});var Gy=l(Co);Ih=t(Gy,"StringLiteral"),Gy.forEach(o),Ah=t(H,', we are "creating" more '),Oo=n(H,"CODE",{class:!0});var Ry=l(Oo);Th=t(Ry,"StringLiteral"),Ry.forEach(o),Ch=t(H,". Although we will replace a "),Do=n(H,"CODE",{class:!0});var My=l(Do);Oh=t(My,"StringLiteral"),My.forEach(o),Dh=t(H," with another "),Lo=n(H,"CODE",{class:!0});var Ny=l(Lo);Lh=t(Ny,"StringLiteral"),Ny.forEach(o),Ph=t(H,", babel will treat it as a new node and will visit the newly created "),Po=n(H,"CODE",{class:!0});var Zy=l(Po);Hh=t(Zy,"StringLiteral"),Zy.forEach(o),Wh=t(H,", thus the infinite recursive and stack overflow."),H.forEach(o),Vh=c(b),Ee=n(b,"P",{});var Yo=l(Ee);jh=t(Yo,"So, how do we tell babel that once we replaced the "),Ho=n(Yo,"CODE",{class:!0});var Uy=l(Ho);Jh=t(Uy,"StringLiteral"),Uy.forEach(o),Bh=t(Yo," with the "),Wo=n(Yo,"CODE",{class:!0});var Ky=l(Wo);Gh=t(Ky,"newNode"),Ky.forEach(o),Rh=t(Yo,", babel can stop and don't have to go down and visit the newly created node anymore?"),Yo.forEach(o),Mh=c(b),As=n(b,"P",{});var Cn=l(As);Nh=t(Cn,"We can use "),Vo=n(Cn,"CODE",{class:!0});var Fy=l(Vo);Zh=t(Fy,"path.skip()"),Fy.forEach(o),Uh=t(Cn," to skip traversing the children of the current path:"),Cn.forEach(o),Kh=c(b),jo=n(b,"DIV",{class:!0});var hf=l(jo);hf.forEach(o),Fh=c(b),Ga=n(b,"P",{});var Yy=l(Ga);Yh=t(Yy,"...And yes it works now with now stack overflow!"),Yy.forEach(o),b.forEach(o),kn=c(p),B=n(p,"SECTION",{});var ve=l(B);Ra=n(ve,"H2",{});var Xy=l(Ra);Ts=n(Xy,"A",{href:!0,id:!0});var qy=l(Ts);Xh=t(qy,"Summary"),qy.forEach(o),Xy.forEach(o),qh=c(ve),Ma=n(ve,"P",{});var zy=l(Ma);zh=t(zy,"So, here we have it, our first code transformation with babel:"),zy.forEach(o),Qh=c(ve),Jo=n(ve,"DIV",{class:!0});var kf=l(Jo);kf.forEach(o),$h=c(ve),Na=n(ve,"P",{});var Qy=l(Na);ek=t(Qy,"A summary of the steps on how we get here:"),Qy.forEach(o),sk=c(ve),le=n(ve,"OL",{});var De=l(le);Za=n(De,"LI",{});var $y=l(Za);tk=t($y,"Have in mind what you want to transform from and transform into"),$y.forEach(o),ok=c(De),Ua=n(De,"LI",{});var eu=l(Ua);ak=t(eu,"Know what to target on the AST"),eu.forEach(o),nk=c(De),Ka=n(De,"LI",{});var su=l(Ka);lk=t(su,"Know how the transformed AST looks like"),su.forEach(o),rk=c(De),Fa=n(De,"LI",{});var tu=l(Fa);ik=t(tu,"Write code"),tu.forEach(o),De.forEach(o),ve.forEach(o),dn=c(p),Q=n(p,"SECTION",{});var Le=l(Q);Ya=n(Le,"H2",{});var ou=l(Ya);Cs=n(ou,"A",{href:!0,id:!0});var au=l(Cs);ck=t(au,"Further resources"),au.forEach(o),ou.forEach(o),pk=c(Le),Os=n(Le,"P",{});var On=l(Os);hk=t(On,"If you are interested to learn more, "),Ds=n(On,"A",{href:!0,rel:!0});var nu=l(Ds);kk=t(nu,"babel's Github repo"),nu.forEach(o),dk=t(On," is always the best place to find out more code examples of writing a babel transformation."),On.forEach(o),vk=c(Le),j=n(Le,"P",{});var oe=l(j);yk=t(oe,"Head down to "),Ls=n(oe,"A",{href:!0,rel:!0});var lu=l(Ls);uk=t(lu,"https://github.com/babel/babel"),lu.forEach(o),fk=t(oe,", and look for "),Bo=n(oe,"CODE",{class:!0});var ru=l(Bo);bk=t(ru,"babel-plugin-transform-*"),ru.forEach(o),xk=t(oe," or "),Go=n(oe,"CODE",{class:!0});var iu=l(Go);wk=t(iu,"babel-plugin-proposal-*"),iu.forEach(o),mk=t(oe," folders, they are all babel transformation plugin, where you can find code on how babel "),Ps=n(oe,"A",{href:!0,rel:!0});var cu=l(Ps);gk=t(cu,"transform the nullish coalescing operator"),cu.forEach(o),_k=t(oe,", "),Hs=n(oe,"A",{href:!0,rel:!0});var pu=l(Hs);Ek=t(pu,"optional chaining"),pu.forEach(o),Sk=t(oe," and many more."),oe.forEach(o),Ik=c(Le),re=n(Le,"BLOCKQUOTE",{});var Pe=l(re);Xa=n(Pe,"P",{});var hu=l(Xa);qa=n(hu,"STRONG",{});var ku=l(qa);Ak=t(ku,"Manipulating AST with JavaScript using Babel"),ku.forEach(o),hu.forEach(o),Tk=c(Pe),Ws=n(Pe,"P",{});var Dn=l(Ws);Ck=t(Dn,"If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),Vs=n(Dn,"A",{href:!0,rel:!0});var du=l(Vs);Ok=t(du,"video course"),du.forEach(o),Dk=t(Dn,", showing you step-by-step, how to write a babel plugin and codemod."),Dn.forEach(o),Lk=c(Pe),za=n(Pe,"P",{});var vu=l(za);Pk=t(vu,"In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),vu.forEach(o),Hk=c(Pe),Qa=n(Pe,"P",{});var yu=l(Qa);$a=n(yu,"STRONG",{});var uu=l($a);js=n(uu,"A",{href:!0,rel:!0});var fu=l(js);Wk=t(fu,"Sounds interesting, let's take a look at the video course"),fu.forEach(o),uu.forEach(o),yu.forEach(o),Pe.forEach(o),Le.forEach(o),vn=c(p),Te=n(p,"SECTION",{});var Ln=l(Te);en=n(Ln,"H2",{});var bu=l(en);Js=n(bu,"A",{href:!0,id:!0});var xu=l(Js);Vk=t(xu,"Reference"),xu.forEach(o),bu.forEach(o),jk=c(Ln),Se=n(Ln,"UL",{});var Xo=l(Se);Bs=n(Xo,"LI",{});var Pn=l(Bs);Gs=n(Pn,"A",{href:!0,rel:!0});var wu=l(Gs);Jk=t(wu,"Babel docs"),wu.forEach(o),Bk=t(Pn," & "),Rs=n(Pn,"A",{href:!0,rel:!0});var mu=l(Rs);Gk=t(mu,"Github repo"),mu.forEach(o),Pn.forEach(o),Rk=c(Xo),Ms=n(Xo,"LI",{});var Hn=l(Ms);Ns=n(Hn,"A",{href:!0,rel:!0});var gu=l(Ns);Mk=t(gu,"Babel Handbook"),gu.forEach(o),Nk=t(Hn," by "),Zs=n(Hn,"A",{href:!0,rel:!0});var _u=l(Zs);Zk=t(_u,"Jamie Kyle"),_u.forEach(o),Hn.forEach(o),Uk=c(Xo),Us=n(Xo,"LI",{});var Wn=l(Us);Ks=n(Wn,"A",{href:!0,rel:!0});var Eu=l(Ks);Kk=t(Eu,"Leveling Up One\u2019s Parsing Game With ASTs"),Eu.forEach(o),Fk=t(Wn," by "),Fs=n(Wn,"A",{href:!0,rel:!0});var Su=l(Fs);Yk=t(Su,"Vaidehi Joshi"),Su.forEach(o),Wn.forEach(o),Xo.forEach(o),Ln.forEach(o),this.h()},h(){r(M,"href","https://babeljs.io/docs/en/babel-core"),r(M,"rel","nofollow"),r(We,"href","#what-is-babel"),r(We,"id","what-is-babel"),r(Ve,"href","https://babeljs.io/docs/en/"),r(Ve,"rel","nofollow"),r(je,"href","https://babeljs.io/docs/en/plugins"),r(je,"rel","nofollow"),r(Be,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),r(Be,"rel","nofollow"),r(Ge,"href","#what-is-abstract-syntax-tree-ast"),r(Ge,"id","what-is-abstract-syntax-tree-ast"),r(Re,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),r(Re,"rel","nofollow"),r(Me,"href","https://twitter.com/vaidehijoshi"),r(Me,"rel","nofollow"),r(Ne,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),r(Ne,"rel","nofollow"),r(Ue,"href","https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27"),r(Ue,"rel","nofollow"),r(Ke,"href","https://twitter.com/ngArchangel"),r(Ke,"rel","nofollow"),r(Ye,"href","https://github.com/estree/estree"),r(Ye,"rel","nofollow"),r(qe,"href","https://babeljs.io"),r(qe,"rel","nofollow"),r(ze,"href","#how-to-use-babel-to-transform-code"),r(ze,"id","how-to-use-babel-to-transform-code"),r(zs,"class","code-section"),r(Qe,"href","https://www.npmjs.com/package/@babel/core"),r(Qe,"rel","nofollow"),r(Qs,"class","inline"),r($s,"class","inline"),r(et,"class","inline"),r(st,"class","inline"),r(tt,"class","inline"),r(ot,"class","code-section"),r(at,"class","inline"),r(nt,"class","code-section"),r(es,"href","https://babeljs.io/docs/en/plugins"),r(es,"rel","nofollow"),r(lt,"class","inline"),r(rt,"class","inline"),r(it,"class","inline"),r(ss,"href","https://medium.com/@bretcameron/how-to-publish-your-first-npm-package-b224296fc57b"),r(ss,"rel","nofollow"),r(os,"href","#1-have-in-mind-what-you-want-to-transform-from-and-transform-into"),r(os,"id","1-have-in-mind-what-you-want-to-transform-from-and-transform-into"),r(ct,"class","code-section"),r(pt,"class","code-section"),r(ht,"class","inline"),r(ns,"href","#2-know-what-to-target-on-the-ast"),r(ns,"id","2-know-what-to-target-on-the-ast"),r(rs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),r(rs,"rel","nofollow"),r(ua,"type","image/webp"),r(ua,"srcset",Pf+", "+Lf+" 2x"),sd(Z.src,od=Ou)||r(Z,"src",od),r(Z,"srcset",Ou+", "+Hf+" 2x"),r(Z,"loading","lazy"),g(Z,"position","absolute"),g(Z,"top","0"),g(Z,"width","100%"),g(Z,"height","100%"),r(Z,"alt","targeting"),r(Z,"title","Selecting the code on the left and see the corresponding part of the AST light up on the right"),g(be,"display","block"),g(be,"position","relative"),g(be,"padding-top","15.703%"),g(be,"width","100%"),r(cs,"href","#3-know-how-the-transformed-ast-looks-like"),r(cs,"id","3-know-how-the-transformed-ast-looks-like"),r(hs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlLCJoaWRlQ29tbWVudHMiOnRydWV9LCJjb2RlIjoiZnVuY3Rpb24gdGVlcmcoZW1hbikge1xuICByZXR1cm4gXCJIXCIgKyBcImVcIiArIFwibFwiICsgXCJsXCIgKyBcIm9cIiArIFwiIFwiICsgZW1hbjtcbn1cblxuY29uc29sZS5sb2codGVlcmcoXCJ0XCIgKyBcImFcIiArIFwiblwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiKSk7IC8vIEhlbGxvIHRhbmhhdWhhdVxuIn0="),r(hs,"rel","nofollow"),r(_a,"type","image/webp"),r(_a,"srcset",Of+", "+Cf+" 2x"),sd(U.src,ad=Cu)||r(U,"src",ad),r(U,"srcset",Cu+", "+Df+" 2x"),r(U,"loading","lazy"),g(U,"position","absolute"),g(U,"top","0"),g(U,"width","100%"),g(U,"height","100%"),r(U,"alt","output"),r(U,"title","You can see that what used to be a `StringLiteral` is now a nested `BinaryExpression`"),g(xe,"display","block"),g(xe,"position","relative"),g(xe,"padding-top","42.782%"),g(xe,"width","100%"),r(ut,"class","inline"),r(ft,"class","inline"),r(bt,"class","inline"),r(ks,"href","#4-write-code"),r(ks,"id","4-write-code"),r(xt,"class","code-section"),r(vs,"href","https://en.wikipedia.org/wiki/Visitor_pattern"),r(vs,"rel","nofollow"),r(us,"href","https://en.wikipedia.org/wiki/Depth-first_search"),r(us,"rel","nofollow"),r(wt,"class","inline"),r(mt,"class","code-section"),r(gt,"class","code-section"),r(_t,"class","inline"),r(Et,"class","inline"),r(St,"class","inline"),r(It,"class","inline"),r(At,"class","inline"),r(Tt,"class","inline"),r(Ct,"class","inline"),r(Ot,"class","inline"),r(Dt,"class","inline"),r(Lt,"class","inline"),r(Pt,"class","inline"),r(Ht,"class","inline"),r(Wt,"class","inline"),r(Vt,"class","inline"),r(jt,"class","inline"),r(bs,"href","https://jamie.build"),r(bs,"rel","nofollow"),r(xs,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#paths"),r(xs,"rel","nofollow"),r(ws,"href","#transforming-variable-name"),r(ws,"id","transforming-variable-name"),r(ms,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),r(ms,"rel","nofollow"),r(Jt,"class","inline"),r(Bt,"class","inline"),r(Gt,"class","inline"),r(Rt,"class","code-section"),r(Mt,"class","code-section"),r(Nt,"class","inline"),r(Ha,"type","image/webp"),r(Ha,"srcset",Af+", "+If+" 2x"),sd(z.src,nd=Tu)||r(z,"src",nd),r(z,"srcset",Tu+", "+Tf+" 2x"),r(z,"loading","lazy"),g(z,"position","absolute"),g(z,"top","0"),g(z,"width","100%"),g(z,"height","100%"),r(z,"alt","member expression"),g(we,"display","block"),g(we,"position","relative"),g(we,"padding-top","18.570%"),g(we,"width","100%"),r(Ut,"class","inline"),r(Kt,"class","inline"),r(Ft,"class","inline"),r(Yt,"class","inline"),r(Xt,"class","inline"),r(qt,"class","inline"),r(zt,"class","inline"),r(Qt,"class","inline"),r($t,"class","code-section"),r(eo,"class","code-section"),r(so,"class","inline"),r(to,"class","inline"),r(oo,"class","inline"),r(ao,"class","inline"),r(no,"class","inline"),r(lo,"class","inline"),r(ro,"class","code-section"),r(io,"class","inline"),r(co,"class","inline"),r(_s,"href","https://babeljs.io/docs/en/babel-types"),r(_s,"rel","nofollow"),r(po,"class","inline"),r(ho,"class","inline"),r(ko,"class","inline"),r(Es,"href","https://github.com/babel/babel/blob/master/packages/babel-types/src/validators/generated/index.js"),r(Es,"rel","nofollow"),r(Ss,"href","#transforming-strings"),r(Ss,"id","transforming-strings"),r(vo,"class","inline"),r(yo,"class","inline"),r(uo,"class","inline"),r(Is,"href","https://babeljs.io/docs/en/babel-types"),r(Is,"rel","nofollow"),r(fo,"class","inline"),r(bo,"class","inline"),r(xo,"class","inline"),r(wo,"class","code-section"),r(mo,"class","inline"),r(go,"class","inline"),r(_o,"class","inline"),r(Eo,"class","inline"),r(So,"class","inline"),r(Io,"class","code-section"),r(Ao,"class","inline"),r(To,"class","inline"),r(Co,"class","inline"),r(Oo,"class","inline"),r(Do,"class","inline"),r(Lo,"class","inline"),r(Po,"class","inline"),r(Ho,"class","inline"),r(Wo,"class","inline"),r(Vo,"class","inline"),r(jo,"class","code-section"),r(Ts,"href","#summary"),r(Ts,"id","summary"),r(Jo,"class","code-section"),r(Cs,"href","#further-resources"),r(Cs,"id","further-resources"),r(Ds,"href","https://github.com/babel/babel/tree/master/packages"),r(Ds,"rel","nofollow"),r(Ls,"href","https://github.com/babel/babel/tree/master/packages"),r(Ls,"rel","nofollow"),r(Bo,"class","inline"),r(Go,"class","inline"),r(Ps,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-nullish-coalescing-operator"),r(Ps,"rel","nofollow"),r(Hs,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-optional-chaining"),r(Hs,"rel","nofollow"),r(Vs,"href","https://gum.co/manipulating-ast-with-javascript"),r(Vs,"rel","nofollow"),r(js,"href","https://gum.co/manipulating-ast-with-javascript"),r(js,"rel","nofollow"),r(Js,"href","#reference"),r(Js,"id","reference"),r(Gs,"href","https://babeljs.io/docs/en/"),r(Gs,"rel","nofollow"),r(Rs,"href","https://github.com/babel/babel"),r(Rs,"rel","nofollow"),r(Ns,"href","https://github.com/jamiebuilds/babel-handbook"),r(Ns,"rel","nofollow"),r(Zs,"href","https://jamie.build/"),r(Zs,"rel","nofollow"),r(Ks,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),r(Ks,"rel","nofollow"),r(Fs,"href","https://twitter.com/vaidehijoshi"),r(Fs,"rel","nofollow")},m(p,y){w(p,x,y),e(x,ie),e(x,M),e(M,He),e(x,E),w(p,q,y),w(p,N,y),e(N,qo),e(qo,We),e(We,Vn),e(N,jn),e(N,Ie),e(Ie,Ve),e(Ve,Jn),e(Ie,Bn),e(Ie,je),e(je,Gn),e(Ie,Rn),e(N,Mn),e(N,Je),e(Je,Nn),e(Je,Be),e(Be,Zn),e(Je,Un),w(p,on,y),w(p,O,y),e(O,zo),e(zo,Ge),e(Ge,Kn),e(O,Fn),e(O,Qo),e(Qo,Yn),e(O,Xn),e(O,ye),e(ye,ue),e(ue,Re),e(Re,qn),e(ue,zn),e(ue,Me),e(Me,Qn),e(ue,$n),e(ue,$o),e($o,el),e(ye,sl),e(ye,qs),e(qs,tl),e(qs,Ne),e(Ne,ol),e(ye,al),e(ye,Ze),e(Ze,Ue),e(Ue,nl),e(Ze,ll),e(Ze,Ke),e(Ke,rl),e(O,il),e(O,Fe),e(Fe,cl),e(Fe,Ye),e(Ye,pl),e(Fe,hl),e(O,kl),e(O,Xe),e(Xe,dl),e(Xe,qe),e(qe,vl),e(Xe,yl),e(O,ul),e(O,ea),e(ea,fl),w(p,an,y),w(p,f,y),e(f,sa),e(sa,ze),e(ze,bl),e(f,xl),e(f,ta),e(ta,wl),e(f,ml),e(f,zs),zs.innerHTML=Lu,e(f,gl),e(f,oa),e(oa,C),e(C,_l),e(C,Qe),e(Qe,El),e(C,Sl),e(C,Qs),e(Qs,Il),e(C,Al),e(C,$s),e($s,Tl),e(C,Cl),e(C,et),e(et,Ol),e(C,Dl),e(C,st),e(st,Ll),e(C,Pl),e(C,tt),e(tt,Hl),e(C,Wl),e(f,Vl),e(f,aa),e(aa,jl),e(f,Jl),e(f,ot),ot.innerHTML=Pu,e(f,Bl),e(f,$e),e($e,Gl),e($e,at),e(at,Rl),e($e,Ml),e(f,Nl),e(f,nt),nt.innerHTML=Hu,e(f,Zl),e(f,ae),e(ae,Ul),e(ae,es),e(es,Kl),e(ae,Fl),e(ae,lt),e(lt,Yl),e(ae,Xl),e(ae,rt),e(rt,ql),e(ae,zl),e(f,Ql),e(f,na),e(na,fe),e(fe,$l),e(fe,it),e(it,er),e(fe,sr),e(fe,ss),e(ss,tr),e(fe,or),e(f,ar),e(f,ts),e(ts,nr),e(ts,la),e(la,lr),e(ts,rr),e(f,ir),e(f,ra),e(ra,cr),w(p,nn,y),w(p,T,y),e(T,ia),e(ia,os),e(os,pr),e(T,hr),e(T,ca),e(ca,kr),e(T,dr),e(T,as),e(as,pa),e(pa,vr),e(as,yr),e(as,ha),e(ha,ur),e(T,fr),e(T,ct),ct.innerHTML=Wu,e(T,br),e(T,ka),e(ka,xr),e(T,wr),e(T,pt),pt.innerHTML=Vu,e(T,mr),e(T,Ae),e(Ae,gr),e(Ae,ht),e(ht,_r),e(Ae,Er),e(Ae,da),e(da,Sr),w(p,ln,y),w(p,D,y),e(D,va),e(va,ns),e(ns,Ir),e(D,Ar),e(D,ls),e(ls,Tr),e(ls,rs),e(rs,Cr),e(ls,Or),e(D,Dr),e(D,ya),e(ya,be),e(be,kt),e(kt,ua),e(kt,Z),e(D,Lr),e(D,fa),e(fa,Pr),e(D,Hr),e(D,ba),e(ba,Wr),e(D,Vr),e(D,is),e(is,dt),e(dt,xa),e(xa,jr),e(dt,Jr),e(is,Br),e(is,vt),e(vt,wa),e(wa,Gr),e(vt,Rr),w(p,rn,y),w(p,J,y),e(J,ma),e(ma,cs),e(cs,Mr),e(J,Nr),e(J,ps),e(ps,Zr),e(ps,hs),e(hs,Ur),e(ps,Kr),e(J,Fr),e(J,ga),e(ga,xe),e(xe,yt),e(yt,_a),e(yt,U),e(J,Yr),e(J,Ea),e(Ea,Xr),e(J,qr),e(J,ne),e(ne,zr),e(ne,ut),e(ut,Qr),e(ne,$r),e(ne,ft),e(ft,ei),e(ne,si),e(ne,bt),e(bt,ti),e(ne,oi),w(p,cn,y),w(p,k,y),e(k,Sa),e(Sa,ks),e(ks,ai),e(k,ni),e(k,Ia),e(Ia,li),e(k,ri),e(k,xt),xt.innerHTML=ju,e(k,ii),e(k,ds),e(ds,ci),e(ds,vs),e(vs,pi),e(ds,hi),e(k,ki),e(k,ys),e(ys,di),e(ys,us),e(us,vi),e(ys,yi),e(k,ui),e(k,fs),e(fs,fi),e(fs,wt),e(wt,bi),e(fs,xi),e(k,wi),e(k,mt),mt.innerHTML=Ju,e(k,mi),e(k,Aa),e(Aa,gi),e(k,_i),e(k,gt),gt.innerHTML=Bu,e(k,Ei),e(k,Si),e(k,Ii),e(k,W),e(W,Ai),e(W,_t),e(_t,Ti),e(W,Ci),e(W,Et),e(Et,Oi),e(W,Di),e(W,St),e(St,Li),e(W,Pi),e(W,It),e(It,Hi),e(W,Wi),e(W,At),e(At,Vi),e(W,ji),e(k,Ji),e(k,_),e(_,Bi),e(_,Tt),e(Tt,Gi),e(_,Ri),e(_,Ct),e(Ct,Mi),e(_,Ni),e(_,Ot),e(Ot,Zi),e(_,Ui),e(_,Dt),e(Dt,Ki),e(_,Fi),e(_,Lt),e(Lt,Yi),e(_,Xi),e(_,Pt),e(Pt,qi),e(_,zi),e(_,Ht),e(Ht,Qi),e(_,$i),e(_,Wt),e(Wt,ec),e(_,sc),e(_,Vt),e(Vt,tc),e(_,oc),e(k,ac),e(k,Ta),e(Ta,ce),e(ce,nc),e(ce,jt),e(jt,lc),e(ce,rc),e(ce,bs),e(bs,ic),e(ce,cc),e(ce,xs),e(xs,pc),e(k,hc),e(k,kc),e(k,dc),e(k,Ca),e(Ca,vc),w(p,pn,y),w(p,h,y),e(h,Oa),e(Oa,ws),e(ws,yc),e(h,uc),e(h,K),e(K,fc),e(K,ms),e(ms,bc),e(K,xc),e(K,Jt),e(Jt,wc),e(K,mc),e(K,Bt),e(Bt,gc),e(K,_c),e(K,Gt),e(Gt,Ec),e(K,Sc),e(h,Ic),e(h,Rt),Rt.innerHTML=Gu,e(h,Ac),e(h,Da),e(Da,Tc),e(h,Cc),e(h,Mt),Mt.innerHTML=Ru,e(h,Oc),e(h,gs),e(gs,Dc),e(gs,Nt),e(Nt,Lc),e(gs,Pc),e(h,Hc),e(h,La),e(La,Wc),e(h,Vc),e(h,Pa),e(Pa,we),e(we,Zt),e(Zt,Ha),e(Zt,z),e(h,jc),e(h,L),e(L,Ut),e(Ut,Jc),e(L,Bc),e(L,Kt),e(Kt,Gc),e(L,Rc),e(L,Ft),e(Ft,Mc),e(L,Nc),e(L,Yt),e(Yt,Zc),e(L,Uc),e(L,Xt),e(Xt,Kc),e(L,Fc),e(L,qt),e(qt,Yc),e(L,Xc),e(h,qc),e(h,me),e(me,zc),e(me,zt),e(zt,Qc),e(me,$c),e(me,Qt),e(Qt,ep),e(me,sp),e(h,tp),e(h,$t),$t.innerHTML=Mu,e(h,op),e(h,Wa),e(Wa,ap),e(h,np),e(h,eo),eo.innerHTML=Nu,e(h,lp),e(h,F),e(F,rp),e(F,so),e(so,ip),e(F,cp),e(F,to),e(to,pp),e(F,hp),e(F,oo),e(oo,kp),e(F,dp),e(F,ao),e(ao,vp),e(F,yp),e(h,up),e(h,ge),e(ge,fp),e(ge,no),e(no,bp),e(ge,xp),e(ge,lo),e(lo,wp),e(ge,mp),e(h,gp),e(h,ro),ro.innerHTML=Zu,e(h,_p),e(h,Va),e(Va,I),e(I,Ep),e(I,io),e(io,Sp),e(I,Ip),e(I,co),e(co,Ap),e(I,Tp),e(I,_s),e(_s,Cp),e(I,Op),e(I,po),e(po,Dp),e(I,Lp),e(I,ho),e(ho,Pp),e(I,Hp),e(I,ko),e(ko,Wp),e(I,Vp),e(I,Es),e(Es,jp),e(I,Jp),w(p,hn,y),w(p,v,y),e(v,ja),e(ja,Ss),e(Ss,Bp),e(v,Gp),e(v,_e),e(_e,Rp),e(_e,vo),e(vo,Mp),e(_e,Np),e(_e,yo),e(yo,Zp),e(_e,Up),e(v,Kp),e(v,Y),e(Y,Fp),e(Y,Is),e(Is,uo),e(uo,Yp),e(Y,Xp),e(Y,fo),e(fo,qp),e(Y,zp),e(Y,bo),e(bo,Qp),e(Y,$p),e(Y,xo),e(xo,eh),e(Y,sh),e(v,th),e(v,wo),wo.innerHTML=Uu,e(v,oh),e(v,V),e(V,ah),e(V,mo),e(mo,nh),e(V,lh),e(V,go),e(go,rh),e(V,ih),e(V,_o),e(_o,ch),e(V,ph),e(V,Eo),e(Eo,hh),e(V,kh),e(V,So),e(So,dh),e(V,vh),e(v,yh),e(v,Ja),e(Ja,uh),e(v,fh),e(v,Io),Io.innerHTML=Ku,e(v,bh),e(v,Ba),e(Ba,xh),e(v,wh),e(v,A),e(A,mh),e(A,Ao),e(Ao,gh),e(A,_h),e(A,To),e(To,Eh),e(A,Sh),e(A,Co),e(Co,Ih),e(A,Ah),e(A,Oo),e(Oo,Th),e(A,Ch),e(A,Do),e(Do,Oh),e(A,Dh),e(A,Lo),e(Lo,Lh),e(A,Ph),e(A,Po),e(Po,Hh),e(A,Wh),e(v,Vh),e(v,Ee),e(Ee,jh),e(Ee,Ho),e(Ho,Jh),e(Ee,Bh),e(Ee,Wo),e(Wo,Gh),e(Ee,Rh),e(v,Mh),e(v,As),e(As,Nh),e(As,Vo),e(Vo,Zh),e(As,Uh),e(v,Kh),e(v,jo),jo.innerHTML=Fu,e(v,Fh),e(v,Ga),e(Ga,Yh),w(p,kn,y),w(p,B,y),e(B,Ra),e(Ra,Ts),e(Ts,Xh),e(B,qh),e(B,Ma),e(Ma,zh),e(B,Qh),e(B,Jo),Jo.innerHTML=Yu,e(B,$h),e(B,Na),e(Na,ek),e(B,sk),e(B,le),e(le,Za),e(Za,tk),e(le,ok),e(le,Ua),e(Ua,ak),e(le,nk),e(le,Ka),e(Ka,lk),e(le,rk),e(le,Fa),e(Fa,ik),w(p,dn,y),w(p,Q,y),e(Q,Ya),e(Ya,Cs),e(Cs,ck),e(Q,pk),e(Q,Os),e(Os,hk),e(Os,Ds),e(Ds,kk),e(Os,dk),e(Q,vk),e(Q,j),e(j,yk),e(j,Ls),e(Ls,uk),e(j,fk),e(j,Bo),e(Bo,bk),e(j,xk),e(j,Go),e(Go,wk),e(j,mk),e(j,Ps),e(Ps,gk),e(j,_k),e(j,Hs),e(Hs,Ek),e(j,Sk),e(Q,Ik),e(Q,re),e(re,Xa),e(Xa,qa),e(qa,Ak),e(re,Tk),e(re,Ws),e(Ws,Ck),e(Ws,Vs),e(Vs,Ok),e(Ws,Dk),e(re,Lk),e(re,za),e(za,Pk),e(re,Hk),e(re,Qa),e(Qa,$a),e($a,js),e(js,Wk),w(p,vn,y),w(p,Te,y),e(Te,en),e(en,Js),e(Js,Vk),e(Te,jk),e(Te,Se),e(Se,Bs),e(Bs,Gs),e(Gs,Jk),e(Bs,Bk),e(Bs,Rs),e(Rs,Gk),e(Se,Rk),e(Se,Ms),e(Ms,Ns),e(Ns,Mk),e(Ms,Nk),e(Ms,Zs),e(Zs,Zk),e(Se,Uk),e(Se,Us),e(Us,Ks),e(Ks,Kk),e(Us,Fk),e(Us,Fs),e(Fs,Yk)},p:Ef,d(p){p&&o(x),p&&o(q),p&&o(N),p&&o(on),p&&o(O),p&&o(an),p&&o(f),p&&o(nn),p&&o(T),p&&o(ln),p&&o(D),p&&o(rn),p&&o(J),p&&o(cn),p&&o(k),p&&o(pn),p&&o(h),p&&o(hn),p&&o(v),p&&o(kn),p&&o(B),p&&o(dn),p&&o(Q),p&&o(vn),p&&o(Te)}}}function jf(Xs){let x,ie;const M=[Xs[0],Du];let He={$$slots:{default:[Vf]},$$scope:{ctx:Xs}};for(let E=0;E<M.length;E+=1)He=td(He,M[E]);return x=new Sf({props:He}),{c(){uf(x.$$.fragment)},l(E){ff(x.$$.fragment,E)},m(E,q){bf(x,E,q),ie=!0},p(E,[q]){const N=q&1?xf(M,[q&1&&Iu(E[0]),q&0&&Iu(Du)]):{};q&2&&(N.$$scope={dirty:q,ctx:E}),x.$set(N)},i(E){ie||(wf(x.$$.fragment,E),ie=!0)},o(E){mf(x.$$.fragment,E),ie=!1},d(E){gf(x,E)}}}const Du={title:"Step-by-step guide for writing a custom babel transformation",date:"2019-09-12T08:00:00Z",tags:["JavaScript","babel","AST","transform"],description:"Writing your first babel plugin",series:"Intermediate Babel",label:"blog",tableOfContents:[{link:"what-is-babel",title:"What is babel?",nested:[{link:"what-is-abstract-syntax-tree-ast",title:"What is Abstract Syntax Tree (AST)?"}]},{link:"how-to-use-babel-to-transform-code",title:"How to use babel to transform code",nested:[{link:"1-have-in-mind-what-you-want-to-transform-from-and-transform-into",title:"1. Have in mind what you want to transform from and transform into"},{link:"2-know-what-to-target-on-the-ast",title:"2. Know what to target on the AST"},{link:"3-know-how-the-transformed-ast-looks-like",title:"3. Know how the transformed AST looks like"},{link:"4-write-code",title:"4. Write code",nested:[{link:"transforming-variable-name",title:"Transforming variable name"},{link:"transforming-strings",title:"Transforming strings"}]}]},{link:"summary",title:"Summary"},{link:"further-resources",title:"Further resources"},{link:"reference",title:"Reference"}]};function Jf(Xs,x,ie){return _f("blog",{image:Wf}),Xs.$$set=M=>{ie(0,x=td(td({},x),Au(M)))},x=Au(x),[x]}class Zf extends df{constructor(x){super();vf(this,x,Jf,jf,yf,{})}}export{Zf as default,Du as metadata};
