import{S as Ta,i as Pa,s as Da,C as Hs,w as Ca,x as La,y as $a,z as Va,A as va,q as Aa,o as Ga,B as Ma,r as Oa,Y as ha,e as t,t as i,k as v,c as e,a as o,h as c,d as n,m as h,b as p,X as ua,f as u,g as Rs,H as s,J as qa}from"../../../chunks/vendor-da4388d4.js";import{B as Ra}from"../../../chunks/BlogLayout-14cfab6f.js";import{_ as Ha}from"../../../chunks/twitter-card-image-a57df29d.js";import"../../../chunks/stores-1fad7c36.js";import"../../../chunks/ldjson-b0805387.js";/* empty css                                   */var ja="https://lihautan.com/_app/assets/feturbulence-f7615c5c.gif",ya="https://lihautan.com/_app/assets/feturbulence-7289ce64.gif",Ba="https://lihautan.com/_app/assets/final-12c57f3e.gif",da="https://lihautan.com/_app/assets/final-a5ca77b5.gif";function Na(L){let r,f,y,F,k,d,x,g,js,as,a,J,T,ts,es,w,os,$,ls,ps,V,rs,is,cs,X,P,ks,vs,Y,b,m,Bs,hs,K,us,ys,Q,ds,fs,A,xa='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> baseFrequency <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> scale <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> id<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feTurbulence</span></div><div class="line">      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turbulence<span class="token punctuation">"</span></span> <span class="token attr-name">numOctaves</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span></div><div class="line">      <span class="token language-javascript"><span class="token punctuation">&#123;</span>baseFrequency<span class="token punctuation">&#125;</span></span></div><div class="line">      <span class="token attr-name">result</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turbulence<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feDisplacementMap</span></div><div class="line">      <span class="token attr-name">in2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turbulence<span class="token punctuation">"</span></span> <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SourceGraphic<span class="token punctuation">"</span></span></div><div class="line">      <span class="token attr-name">xChannelSelector</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>R<span class="token punctuation">"</span></span> <span class="token attr-name">yChannelSelector</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>G<span class="token punctuation">"</span></span></div><div class="line">      <span class="token language-javascript"><span class="token punctuation">&#123;</span>scale<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></div></code></pre>',xs,E,gs,G,ms,_s,M,ws,bs,O,ga='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> _idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token comment">// ...</span></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">wave-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>_idx<span class="token operator">++</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>',Es,D,Ss,q,Is,Fs,Ts,R,ma=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> SvgFilter </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./SvgFilter.svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">wavy</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> params </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> svgFilter;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  		</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;introstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> createIntro);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create SvgFilter</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIntro</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    svgFilter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvgFilter</span><span style="color: var(--shiki-color-text)">(&#123; target</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-color-text)">.body &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.filter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;url(#</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">svgFilter</span><span style="color: var(--shiki-color-text)">.id</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">)&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;introstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> createIntro);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;introend&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cleanup);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">cleanup</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">svgFilter</span><span style="color: var(--shiki-token-function)">.$destroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;introend&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cleanup);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ps,S,Ds,H,Cs,Ls,j,$s,Vs,B,_a=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">wavy</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> params </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> svgFilter;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">params</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">tick</span><span style="color: var(--shiki-color-text)">(t) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// t     0   -&gt; 1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// scale 100 -&gt; 0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (svgFilter) </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">svgFilter</span><span style="color: var(--shiki-token-function)">.$set</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          scale</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> t) </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          baseFrequency</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0.55</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,As,U,Gs,Ms,N,wa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">wavy</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> params </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> svgFilter;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">params</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">css</span><span style="color: var(--shiki-color-text)">(t) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// only fade out in the last quarter of the time</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// t       1 -&gt; 0.25 -&gt; 0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// opactiy 1 -&gt; 1    -&gt; 0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0.25</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;opacity: </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">t </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;opacity: 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">tick</span><span style="color: var(--shiki-color-text)">(t) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// t     0   -&gt; 1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// scale 100 -&gt; 0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (svgFilter) </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">svgFilter</span><span style="color: var(--shiki-token-function)">.$set</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          scale</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> t) </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          baseFrequency</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0.55</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Os,W,C,qs;return{c(){r=t("section"),f=t("h2"),y=t("a"),F=i("The Result"),k=v(),d=t("p"),x=t("span"),g=t("img"),as=v(),a=t("section"),J=t("h2"),T=t("a"),ts=i("Break it down"),es=v(),w=t("p"),os=i("I'm using a combination of SVG filters "),$=t("code"),ls=i("<feTurbulence>"),ps=i(", "),V=t("code"),rs=i("<feDisplacementMap>"),is=i(" to achieve this effect."),cs=v(),X=t("p"),P=t("a"),ks=i("Svelte REPL"),vs=v(),Y=t("p"),b=t("span"),m=t("img"),hs=v(),K=t("p"),us=i("To use this SVG filter, I first created a Svelte component for the filter."),ys=v(),Q=t("p"),ds=i("The idea is to add this render this filter whenever I want to transition, and update the scale and frequency during the transition"),fs=v(),A=t("div"),xs=v(),E=t("p"),gs=i("As I'm going to have multiple instance of the SvgFilter, and I don't want the filter id to be conflict with each other, I generated the "),G=t("code"),ms=i("id"),_s=i(" everytime there's a new instance of "),M=t("code"),ws=i("SvgFilter"),bs=v(),O=t("div"),Es=v(),D=t("p"),Ss=i("I created the "),q=t("code"),Is=i("SvgFilter"),Fs=i(" component as the transition starts and remove it as the transition ends"),Ts=v(),R=t("div"),Ps=v(),S=t("p"),Ds=i("And as the transition ticks by, I set the "),H=t("code"),Cs=i("scale"),Ls=i(" of the SVG filter based on the time, "),j=t("code"),$s=i("t"),Vs=v(),B=t("div"),As=v(),U=t("p"),Gs=i("Add some fade out using the opacity"),Ms=v(),N=t("div"),Os=v(),W=t("p"),C=t("a"),qs=i("Final REPL"),this.h()},l(_){r=e(_,"SECTION",{});var I=o(r);f=e(I,"H2",{});var Ns=o(f);y=e(Ns,"A",{href:!0,id:!0});var zs=o(y);F=c(zs,"The Result"),zs.forEach(n),Ns.forEach(n),k=h(I),d=e(I,"P",{});var Js=o(d);x=e(Js,"SPAN",{style:!0});var Xs=o(x);g=e(Xs,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Xs.forEach(n),Js.forEach(n),I.forEach(n),as=h(_),a=e(_,"SECTION",{});var l=o(a);J=e(l,"H2",{});var Ys=o(J);T=e(Ys,"A",{href:!0,id:!0});var Ks=o(T);ts=c(Ks,"Break it down"),Ks.forEach(n),Ys.forEach(n),es=h(l),w=e(l,"P",{});var z=o(w);os=c(z,"I'm using a combination of SVG filters "),$=e(z,"CODE",{class:!0});var Qs=o($);ls=c(Qs,"<feTurbulence>"),Qs.forEach(n),ps=c(z,", "),V=e(z,"CODE",{class:!0});var Us=o(V);rs=c(Us,"<feDisplacementMap>"),Us.forEach(n),is=c(z," to achieve this effect."),z.forEach(n),cs=h(l),X=e(l,"P",{});var Ws=o(X);P=e(Ws,"A",{href:!0,rel:!0});var Zs=o(P);ks=c(Zs,"Svelte REPL"),Zs.forEach(n),Ws.forEach(n),vs=h(l),Y=e(l,"P",{});var sa=o(Y);b=e(sa,"SPAN",{style:!0});var aa=o(b);m=e(aa,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),aa.forEach(n),sa.forEach(n),hs=h(l),K=e(l,"P",{});var na=o(K);us=c(na,"To use this SVG filter, I first created a Svelte component for the filter."),na.forEach(n),ys=h(l),Q=e(l,"P",{});var ta=o(Q);ds=c(ta,"The idea is to add this render this filter whenever I want to transition, and update the scale and frequency during the transition"),ta.forEach(n),fs=h(l),A=e(l,"DIV",{class:!0});var ba=o(A);ba.forEach(n),xs=h(l),E=e(l,"P",{});var Z=o(E);gs=c(Z,"As I'm going to have multiple instance of the SvgFilter, and I don't want the filter id to be conflict with each other, I generated the "),G=e(Z,"CODE",{class:!0});var ea=o(G);ms=c(ea,"id"),ea.forEach(n),_s=c(Z," everytime there's a new instance of "),M=e(Z,"CODE",{class:!0});var oa=o(M);ws=c(oa,"SvgFilter"),oa.forEach(n),Z.forEach(n),bs=h(l),O=e(l,"DIV",{class:!0});var Ea=o(O);Ea.forEach(n),Es=h(l),D=e(l,"P",{});var ns=o(D);Ss=c(ns,"I created the "),q=e(ns,"CODE",{class:!0});var la=o(q);Is=c(la,"SvgFilter"),la.forEach(n),Fs=c(ns," component as the transition starts and remove it as the transition ends"),ns.forEach(n),Ts=h(l),R=e(l,"DIV",{class:!0});var Sa=o(R);Sa.forEach(n),Ps=h(l),S=e(l,"P",{});var ss=o(S);Ds=c(ss,"And as the transition ticks by, I set the "),H=e(ss,"CODE",{class:!0});var pa=o(H);Cs=c(pa,"scale"),pa.forEach(n),Ls=c(ss," of the SVG filter based on the time, "),j=e(ss,"CODE",{class:!0});var ra=o(j);$s=c(ra,"t"),ra.forEach(n),ss.forEach(n),Vs=h(l),B=e(l,"DIV",{class:!0});var Ia=o(B);Ia.forEach(n),As=h(l),U=e(l,"P",{});var ia=o(U);Gs=c(ia,"Add some fade out using the opacity"),ia.forEach(n),Ms=h(l),N=e(l,"DIV",{class:!0});var Fa=o(N);Fa.forEach(n),Os=h(l),W=e(l,"P",{});var ca=o(W);C=e(ca,"A",{href:!0,rel:!0});var ka=o(C);qs=c(ka,"Final REPL"),ka.forEach(n),ca.forEach(n),l.forEach(n),this.h()},h(){p(y,"href","#the-result"),p(y,"id","the-result"),ua(g.src,js=da)||p(g,"src",js),p(g,"srcset",da+", "+Ba+" 2x"),p(g,"loading","lazy"),u(g,"position","absolute"),u(g,"top","0"),u(g,"width","100%"),u(g,"height","100%"),p(g,"alt","the-result"),u(x,"display","block"),u(x,"position","relative"),u(x,"padding-top","61.571%"),u(x,"width","100%"),p(T,"href","#break-it-down"),p(T,"id","break-it-down"),p($,"class","inline"),p(V,"class","inline"),p(P,"href","https://svelte.dev/repl/fc2c47f30912496eb0b4fe2776345462?version=3.29.4"),p(P,"rel","nofollow"),ua(m.src,Bs=ya)||p(m,"src",Bs),p(m,"srcset",ya+", "+ja+" 2x"),p(m,"loading","lazy"),u(m,"position","absolute"),u(m,"top","0"),u(m,"width","100%"),u(m,"height","100%"),p(m,"alt","feTurbulence"),u(b,"display","block"),u(b,"position","relative"),u(b,"padding-top","65.500%"),u(b,"width","100%"),p(A,"class","code-section"),p(G,"class","inline"),p(M,"class","inline"),p(O,"class","code-section"),p(q,"class","inline"),p(R,"class","code-section"),p(H,"class","inline"),p(j,"class","inline"),p(B,"class","code-section"),p(N,"class","code-section"),p(C,"href","https://svelte.dev/repl/2f3f9b62e1454f2d94729fe242375d43?version=3.29.4"),p(C,"rel","nofollow")},m(_,I){Rs(_,r,I),s(r,f),s(f,y),s(y,F),s(r,k),s(r,d),s(d,x),s(x,g),Rs(_,as,I),Rs(_,a,I),s(a,J),s(J,T),s(T,ts),s(a,es),s(a,w),s(w,os),s(w,$),s($,ls),s(w,ps),s(w,V),s(V,rs),s(w,is),s(a,cs),s(a,X),s(X,P),s(P,ks),s(a,vs),s(a,Y),s(Y,b),s(b,m),s(a,hs),s(a,K),s(K,us),s(a,ys),s(a,Q),s(Q,ds),s(a,fs),s(a,A),A.innerHTML=xa,s(a,xs),s(a,E),s(E,gs),s(E,G),s(G,ms),s(E,_s),s(E,M),s(M,ws),s(a,bs),s(a,O),O.innerHTML=ga,s(a,Es),s(a,D),s(D,Ss),s(D,q),s(q,Is),s(D,Fs),s(a,Ts),s(a,R),R.innerHTML=ma,s(a,Ps),s(a,S),s(S,Ds),s(S,H),s(H,Cs),s(S,Ls),s(S,j),s(j,$s),s(a,Vs),s(a,B),B.innerHTML=_a,s(a,As),s(a,U),s(U,Gs),s(a,Ms),s(a,N),N.innerHTML=wa,s(a,Os),s(a,W),s(W,C),s(C,qs)},p:qa,d(_){_&&n(r),_&&n(as),_&&n(a)}}}function za(L){let r,f;const y=[L[0],fa];let F={$$slots:{default:[Na]},$$scope:{ctx:L}};for(let k=0;k<y.length;k+=1)F=Hs(F,y[k]);return r=new Ra({props:F}),{c(){Ca(r.$$.fragment)},l(k){La(r.$$.fragment,k)},m(k,d){$a(r,k,d),f=!0},p(k,[d]){const x=d&1?Va(y,[d&1&&va(k[0]),d&0&&va(fa)]):{};d&2&&(x.$$scope={dirty:d,ctx:k}),r.$set(x)},i(k){f||(Aa(r.$$.fragment,k),f=!0)},o(k){Ga(r.$$.fragment,k),f=!1},d(k){Ma(r,k)}}}const fa={title:"SVG filter Svelte Transition",tags:["svelte","transition"],description:"The ResultBreak it downI'm using a combination of SVG filters `&lt;feTurbulence&gt;`, `&lt;feDisplacementMap&gt;` to achieve this effect.Svelte REPLTo use this SVG filter, I first created a Svelte component for the filter....",tableOfContents:[{link:"the-result",title:"The Result"},{link:"break-it-down",title:"Break it down"}]};function Ja(L,r,f){return Oa("blog",{image:Ha}),L.$$set=y=>{f(0,r=Hs(Hs({},r),ha(y)))},r=ha(r),[r]}class Za extends Ta{constructor(r){super();Pa(this,r,Ja,za,Da,{})}}export{Za as default,fa as metadata};
