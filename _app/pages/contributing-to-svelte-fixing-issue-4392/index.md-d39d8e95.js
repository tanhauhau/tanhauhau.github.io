import{S as wm,i as _m,s as bm,C as Ly,w as Em,x as Im,y as Om,z as Cm,A as yg,q as Dm,o as Sm,B as Pm,r as Tm,Y as ug,e as o,t as e,k as i,c as n,a as l,h as t,d as a,m as c,b as r,X as Am,f as Ts,g as es,H as s,J as jm}from"../../chunks/vendor-da4388d4.js";import{B as Hm}from"../../chunks/BlogLayout-14cfab6f.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var Lm="https://lihautan.com/_app/assets/fixed-837c06bd.webp",$m="https://lihautan.com/_app/assets/fixed-07cd81e0.webp",qm="https://lihautan.com/_app/assets/fixed-6569dd04.png",fg="https://lihautan.com/_app/assets/fixed-b68d5f00.png",Rm="https://lihautan.com/_app/assets/hero-twitter-e15593c5.jpg";function Mm(He){let d,q,A,As,x,j,Le,vl,Wo,dl,yl,ls,$e,ul,js,fl,xl,No,gl,ml,Bo,wl,_l,Hs,bl,qe,El,Il,Ol,Fo,Cl,Dl,Go,Sl,Pl,Uo,Tl,Al,zo,jl,Ln,g,Yo,Ls,Hl,Ll,$s,$l,qs,ql,Rl,Ml,Vl,Wl,Jo,Re,Nl,Rs,Bl,Fl,Ms,Gl,Me,Ul,zl,Yl,Ve,gg=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div></code></pre>`,Jl,Vs,Ql,Ws,Xl,Zl,Kl,sr,$n,b,Qo,Ns,er,tr,Xo,ar,or,C,nr,We,lr,rr,Ne,ir,cr,Be,pr,kr,Fe,hr,vr,Ge,dr,yr,ur,G,fr,Ue,xr,gr,Zo,mr,wr,ze,_r,br,Er,H,Ir,Bs,Or,Cr,Ko,Dr,Sr,Fs,Pr,Tr,Gs,Ar,jr,Hr,rs,Lr,Us,$r,qr,zs,Rr,Mr,qn,p,sn,Ys,Vr,Wr,en,Nr,Br,D,Fr,Ye,Gr,Ur,Js,zr,Yr,Je,Jr,Qr,Qe,Xr,Zr,Xe,Kr,si,ei,Ze,mg=`<pre class="prism language-"><code><span class="line">- /Projects</span>
<span class="line">  - svelte                &lt;-- cloned from https://github.com/sveltejs/svelte</span>
<span class="line">  - test-svelte           &lt;-- initialised with Svelte Template</span>
<span class="line">    - node_modules/svelte &lt;-- symlink to &#96;/Projects/svelte&#96;</span></code></pre>`,ti,Qs,ai,Ke,oi,ni,li,L,ri,tn,ii,ci,st,pi,ki,Xs,hi,vi,et,di,yi,ui,is,cs,fi,tt,xi,gi,at,mi,wi,_i,an,bi,Ei,ts,Ii,ot,Oi,Ci,nt,Di,Si,lt,Pi,Ti,ps,Ai,rt,ji,Hi,it,Li,$i,qi,ct,wg=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- with spread --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- without spread --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div></code></pre>`,Ri,on,Mi,Vi,pt,_g=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line inserted"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> select_levels </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [&#123; multiple</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;];</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> select_data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	</span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select_levels</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	  select_data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">assign</span><span style="color: var(--shiki-color-text)">(select_data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select_levels[i]);</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	&#125;</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> select_value_value;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">set_attributes</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select_data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">      select_value_value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-token-constant)">select_value_value</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">    p</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">       </span><span style="color: var(--shiki-token-function)">set_attributes</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get_spread_update</span><span style="color: var(--shiki-color-text)">(select_levels</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [&#123; multiple</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> &#123; value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;]));</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span></code></pre>`,Wi,Zs,Ni,kt,Bi,Fi,Gi,nn,Ui,zi,ht,bg='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>bar<span class="token punctuation">&#125;</span></span> <span class="token attr-name">baz</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baz<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>qux<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Yi,ln,Ji,Qi,vt,Eg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">levels</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [&#123; foo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; baz</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> qux];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// build the attribute maps</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">levels</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.assign</span><span style="color: var(--shiki-color-text)">(data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> levels[i]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// set attribute to element</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attributeName</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.setAttribute</span><span style="color: var(--shiki-color-text)">(attributeName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data[attributeName]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if &#96;bar&#96; changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">updates</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get_spread_update</span><span style="color: var(--shiki-color-text)">(levels</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// updates will return the updates needed to make, in this case, the diff in &#96;bar&#96;, eg: &#123; aa: &#39;1&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attributeName</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> updates) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.setAttribute</span><span style="color: var(--shiki-color-text)">(attributeName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> updates[attributeName]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xi,Ks,Zi,dt,Ki,sc,ec,rn,tc,ac,yt,Ig=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// in &#96;mount&#96; method</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-token-constant)">select_value_value</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oc,ks,nc,ut,lc,rc,ft,ic,cc,pc,se,kc,xt,hc,vc,dc,gt,Og=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-color-text)">ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,yc,U,uc,mt,fc,xc,wt,gc,mc,_t,wc,_c,bc,cn,Ec,Ic,pn,hs,bt,kn,R,$y,Oc,ee,Cc,Et,Dc,Sc,Pc,hn,Tc,Ac,te,jc,vn,Hc,Lc,$c,vs,dn,It,qc,Rc,yn,Ot,Mc,Vc,un,Ct,Wc,Nc,ms,Bc,Dt,Fc,Gc,ae,Uc,zc,St,Cg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_options</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yc,ds,Jc,Pt,Qc,Xc,Tt,Zc,Kc,sp,At,Dg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-color-text)">ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">   &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">select_options</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select_value_value);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,ep,ws,tp,jt,ap,op,Ht,np,lp,Lt,Sg=`<div class="filename">src/compiler/compile/render_dom/wrappers/Element/Attribute.ts</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  for (var </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = 0; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &lt; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.options.length; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> += 1) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    var </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">option</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.options[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">];</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">if_statement</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">updater</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,rp,fn,ip,cp,z,pp,$t,kp,hp,qt,vp,dp,Rt,yp,up,fp,Mt,Pg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_multiple_select) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_option(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">updater</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,xp,S,gp,Vt,mp,wp,oe,_p,bp,Wt,Ep,Ip,Nt,Op,Cp,ne,Dp,Sp,Pp,$,Tp,Bt,Ap,jp,le,Hp,Lp,Ft,$p,qp,Gt,Rp,Mp,Vp,ys,Ut,zt,Wp,Np,Bp,Yt,Jt,Fp,Gp,Up,Qt,Xt,zp,Yp,Jp,xn,Qp,Xp,Zt,Tg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;const </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">node</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = 1;&#96;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// returns an AST node for &#96;const foo = 1;&#96;</span></span></code></pre>`,Zp,M,Kt,Kp,sk,sa,ek,tk,re,ak,ok,ea,nk,lk,rk,ta,Ag=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@foo(bar)&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// turns into</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// import &#123; foo &#125; from &#39;svelte/internal&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// foo(bar);</span></span></code></pre>`,ik,gn,ck,pk,aa,jg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_legacy_input_type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_select_value_attribute) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_multiple_select) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_option(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">updater</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">  &#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_src) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kk,Y,hk,oa,vk,dk,na,yk,uk,la,fk,xk,gk,ra,Hg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;is_legacy_input_type:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  is_legacy_input_type</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;is_select_value_attribute:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  is_select_value_attribute</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_legacy_input_type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,mk,ie,wk,ia,_k,bk,Ek,ce,Ik,ca,Ok,Ck,Dk,us,Sk,pa,Pk,Tk,ka,Ak,jk,Hk,ha,Lg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.trace</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;trace&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lk,va,$g=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">Trace: trace</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  at AttributeWrapper.render (/Projects/svelte/compiler.js:8269:11)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at /Projects/svelte/compiler.js:10749:14</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at Array.forEach (&lt;anonymous&gt;)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  at ElementWrapper.add_attributes (/Projects/svelte/compiler.js:10748:19)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at ElementWrapper.render (/Projects/svelte/compiler.js:10472:8)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at /Projects/svelte/compiler.js:10454:11</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at Array.forEach (&lt;anonymous&gt;)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at ElementWrapper.render (/Projects/svelte/compiler.js:10453:24)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at FragmentWrapper.render (/Projects/svelte/compiler.js:13030:18)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at new Renderer (/Projects/svelte/compiler.js:13112:17)</span></span></code></pre>`,$k,da,qk,pe,Rk,Mk,ya,qg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Get all the class dependencies first</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributes</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">((attribute) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">attribute</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;class&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attribute</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.get_dependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">class_dependencies</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">dependencies);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributes</span><span style="color: var(--shiki-token-function)">.some</span><span style="color: var(--shiki-color-text)">(attr </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attr</span><span style="color: var(--shiki-color-text)">.is_spread)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributes</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">((attribute) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">attribute</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vk,J,Wk,ua,Nk,Bk,fa,Fk,Gk,xa,Uk,zk,Yk,Q,Jk,ga,Qk,Xk,ma,Zk,Kk,wa,sh,eh,th,ke,ah,_a,oh,nh,lh,ba,Rg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for &#96;&lt;select&gt;&#96; element only</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rh,f,ih,Ea,ch,ph,Ia,kh,hh,Oa,Ca,vh,dh,Da,yh,uh,Sa,fh,xh,Pa,gh,mh,Ta,wh,_h,Aa,bh,Eh,ja,Ih,Oh,Ch,Ha,Mg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// push &#96;const foo = 1&#96; to &#96;m()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;const foo = 1&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// push &#96;const bar = 2&#96; to &#96;c()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">create</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;const bar = 2&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Dh,X,Sh,La,Ph,Th,$a,Ah,jh,qa,Hh,Lh,Rn,h,mn,he,$h,qh,wn,Rh,Mh,_n,Vh,Wh,ve,Nh,Ra,Bh,Fh,Gh,de,fs,Uh,Ma,zh,Yh,Va,Jh,Qh,Xh,ye,Zh,Wa,Kh,sv,ev,bn,tv,av,En,ov,nv,Na,Vg=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> spread <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>spread<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>World<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div></code></pre>`,lv,Z,rv,Ba,iv,cv,Fa,pv,kv,Ga,hv,vv,dv,_,yv,Ua,uv,fv,za,xv,gv,Ya,mv,wv,Ja,_v,bv,Qa,Ev,Iv,Xa,Ov,Cv,Za,Dv,Sv,Pv,In,Tv,Av,On,jv,Hv,K,Lv,Ka,$v,qv,so,Rv,Mv,eo,Vv,Wv,Nv,to,ao,Bv,Fv,Gv,oo,Wg=`<div class="filename">_config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// initial props to passed to the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  props</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// initial rendered html</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// test case</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)">(&#123; assert</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> target &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// you can test the behavior of the component here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Uv,ue,zv,no,Yv,Jv,Qv,lo,Ng=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)">(&#123; assert</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> window &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// find the element</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">input1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input2</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.querySelectorAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;input&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;select&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">option1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">option2</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.childNodes;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// uncheck the checkbox</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">input1</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input1</span><span style="color: var(--shiki-token-function)">.dispatchEvent</span><span style="color: var(--shiki-color-text)">(event);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify the component updated correctly</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.selectedOptions);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.equal</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.ok</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-token-function)">.includes</span><span style="color: var(--shiki-color-text)">(option1));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.ok</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-token-function)">.includes</span><span style="color: var(--shiki-color-text)">(option2));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Xv,fe,Zv,ro,Kv,sd,ed,io,Bg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  solo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,td,T,Cn,ad,od,co,nd,ld,po,rd,id,ko,cd,pd,ho,kd,hd,vd,xe,dd,vo,yd,ud,fd,ge,xd,yo,gd,md,wd,uo,Fg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_d,me,bd,fo,Ed,Id,Od,P,Cd,xo,Dd,Sd,go,Pd,Td,mo,Ad,jd,wo,Hd,Ld,_o,$d,qd,Rd,we,Md,bo,Vd,Wd,Nd,Dn,Bd,Fd,_e,Gd,be,Eo,Ud,zd,Yd,Io,Gg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// block.renderer.dirty(...) will give me &#96;dirty &amp; bitmask&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;if (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.dirty</span><span style="color: var(--shiki-color-text)">(dependencies)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">) @select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jd,Sn,Qd,Xd,Oo,Ug=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attr</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.attributes) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dep</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attr</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.dependencies) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(dep);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;if (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.dirty</span><span style="color: var(--shiki-color-text)">(dependencies)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">) @select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Zd,Pn,Kd,Mn,m,Tn,Ee,sy,ey,xs,ty,Co,ay,oy,Do,ny,ly,ry,Ie,iy,Oe,cy,py,ky,Ce,hy,De,vy,dy,yy,An,uy,fy,xy,gy,Se,my,Pe,wy,_y,by,Te,Ey,Ae,Iy,Oy;return{c(){d=o("section"),q=o("h2"),A=o("a"),As=e("Background"),x=i(),j=o("p"),Le=e("As Svelte gains more attention, I find that more and more people are interested in contributing to Svelte."),vl=i(),Wo=o("p"),dl=e("Of course, contributing to Svelte, does not mean to contribute only in code, it could be:"),yl=i(),ls=o("ul"),$e=o("li"),ul=e("answering questions about Svelte, on social media, Stack Overflow, or "),js=o("a"),fl=e("Discord"),xl=i(),No=o("li"),gl=e("improving Svelte docs, or write tutorials and articles about Svelte"),ml=i(),Bo=o("li"),wl=e("organising and speaking in meetups about Svelte"),_l=i(),Hs=o("p"),bl=e("For those who want to contribute in code, most people are unsure where to start. So I wrote "),qe=o("a"),El=e("The Svelte Compiler Handbook"),Il=e(" as an overview of the Svelte source code."),Ol=i(),Fo=o("p"),Cl=e("However, today, I want to try a different tone."),Dl=i(),Go=o("p"),Sl=e("I am going to tell you an anecdote on how I investigated and fixed a bug in Svelte."),Pl=i(),Uo=o("p"),Tl=e("I documented down my train of thoughts as detailed as possible."),Al=i(),zo=o("p"),jl=e("I hope this gives anyone who is reading, a glimpse on how to work on the Svelte source code."),Ln=i(),g=o("section"),Yo=o("h2"),Ls=o("a"),Hl=e("The story begins"),Ll=i(),$s=o("p"),$l=e("I was combing through "),qs=o("a"),ql=e("bugs on GitHub"),Rl=e(", and found this rather interesting bug:"),Ml=i(),Vl=o("hr"),Wl=i(),Jo=o("p"),Re=o("strong"),Nl=e("Select multiple value does not get set with spread props "),Rs=o("a"),Bl=e("#4392"),Fl=i(),Ms=o("p"),Gl=e("Adding any type of spread, even an empty object "),Me=o("code"),Ul=e("{...{}}"),zl=e(", causes the value not to be set:"),Yl=i(),Ve=o("div"),Jl=i(),Vs=o("p"),Ql=e("To reproduce: "),Ws=o("a"),Xl=e("REPL"),Zl=e("."),Kl=i(),sr=o("hr"),$n=i(),b=o("section"),Qo=o("h2"),Ns=o("a"),er=e("Verifying the bug"),tr=i(),Xo=o("p"),ar=e("I clicked into the REPL and tried to understand about the bug."),or=i(),C=o("p"),nr=e("I found that if the "),We=o("code"),lr=e("<select multiple>"),rr=e(" has spread attribute "),Ne=o("code"),ir=e("{...any}"),cr=e(", the "),Be=o("code"),pr=e("value"),kr=e(" attribute will not be reactive. Changes in the value of "),Fe=o("code"),hr=e("value"),vr=e(" will not be reflected to the "),Ge=o("code"),dr=e("<select>"),yr=e("."),ur=i(),G=o("p"),fr=e("I noticed the REPL link uses the version "),Ue=o("code"),xr=e("3.18.1"),gr=e(", it's not the latest version of Svelte. At the point of writing, Svelte is at "),Zo=o("strong"),mr=e("3.22.3"),wr=e(". I tried removing the "),ze=o("code"),_r=e("?version=3.18.1"),br=e(" from the query params to verify whether the bug has fixed, and realised that the bug is still there. (Great! Something interesting to investigate into.)"),Er=i(),H=o("p"),Ir=e("To understand the current status of the issue, I read through the comments. According to "),Bs=o("a"),Or=e("Conduitry"),Cr=e(", the issue is related to "),Ko=o("strong"),Dr=e("Radio/checkbox input with bind:group and spread props makes variable undefined"),Sr=i(),Fs=o("a"),Pr=e("#3680"),Tr=e(" and can be fixed together. However, the issue "),Gs=o("a"),Ar=e("#3680"),jr=e(" was fixed and closed, yet this issue is still open."),Hr=i(),rs=o("p"),Lr=e("Nevertheless, I read through "),Us=o("a"),$r=e("the PR"),qr=e(" for the closed issue "),zs=o("a"),Rr=e("#3680"),Mr=e(", roughly understand how it was fixed and hopefully it can give me some inspirations on this issue."),qn=i(),p=o("section"),sn=o("h2"),Ys=o("a"),Vr=e("Investigating the bug"),Wr=i(),en=o("p"),Nr=e("Once I verified that the behavior described in the issue is unexpected and reproducible in the latest version of Svelte, I copied the REPL code into my local machine to investigate."),Br=i(),D=o("p"),Fr=e("I have a "),Ye=o("code"),Gr=e("test-svelte"),Ur=e(" folder ready in my local machine, where I created using "),Js=o("a"),zr=e("Svelte Template"),Yr=e(". I have "),Je=o("code"),Jr=e("npm link"),Qr=e("ed my local Svelte clone to the "),Qe=o("code"),Xr=e("test-svelte"),Zr=e(" folder, so I can rebuild "),Xe=o("code"),Kr=e("test-svelte"),si=e(" anytime with the latest changes done to my Svelte clone."),ei=i(),Ze=o("div"),ti=i(),Qs=o("p"),ai=e("I have "),Ke=o("code"),oi=e("yarn dev"),ni=e(" running in the Svelte folder, so any changes I make gets compiled immediately."),li=i(),L=o("p"),ri=e("I prefer to "),tn=o("strong"),ii=e("build"),ci=i(),st=o("code"),pi=e("test-svelte"),ki=e(" and serve it with "),Xs=o("a"),hi=e("http-server"),vi=e(" rather than start a dev server "),et=o("code"),di=e("test-svelte"),yi=e(" in watch mode. That allows me to"),ui=i(),is=o("ul"),cs=o("li"),fi=e("Run the "),tt=o("code"),xi=e("http-server"),gi=e(" in the background while tweaking the Svelte code or the "),at=o("code"),mi=e("test-svelte"),wi=e(" app."),_i=i(),an=o("li"),bi=e("Not having to restart the dev server whenever I've made changes to the Svelte code"),Ei=i(),ts=o("li"),Ii=e("Able to inspect and modify "),ot=o("code"),Oi=e("bundle.js"),Ci=e(" without worrying that accidentaly save in the "),nt=o("code"),Di=e("test-svelte"),Si=e(" app will overwrite the "),lt=o("code"),Pi=e("bundle.js"),Ti=i(),ps=o("p"),Ai=e("Looking at the different "),rt=o("code"),ji=e("bundle.js"),Hi=e(" generated from with "),it=o("code"),Li=e("{...spread}"),$i=e(" attributes and without spread attributes"),qi=i(),ct=o("div"),Ri=i(),on=o("p"),Mi=e("I found the following diffs in the bundled output:"),Vi=i(),pt=o("div"),Wi=i(),Zs=o("p"),Ni=e("Well, I know I haven't cover how spread attribute works in any of my "),kt=o("a"),Bi=e('"Compile Svelte in your Head"'),Fi=e(" articles, but the general idea is that, Svelte builds an array of attributes, and then apply it to the element / Component."),Gi=i(),nn=o("p"),Ui=e("For example, if we write the following in Svelte"),zi=i(),ht=o("div"),Yi=i(),ln=o("p"),Ji=e("It gets compiled to something like this:"),Qi=i(),vt=o("div"),Xi=i(),Ks=o("p"),Zi=e("So, this roughly explains the additional code added into the "),dt=o("code"),Ki=e("bundle.js"),sc=e(" for handling spread attributes."),ec=i(),rn=o("p"),tc=e("However the code that is removed, is something I am not familiar with."),ac=i(),yt=o("div"),oc=i(),ks=o("p"),nc=e("It seems like we are trying to set "),ut=o("code"),lc=e("option.selected"),rc=e(" after we mount the "),ft=o("code"),ic=e("<select>"),cc=e(" element. Not sure how important is that to us."),pc=i(),se=o("p"),kc=e("To verify that the bug is because that the above code snippet is missing when having a spread attribute, I tried adding the code snippet into the "),xt=o("code"),hc=e("bundle.js"),vc=e(" manually, and refresh the page."),dc=i(),gt=o("div"),yc=i(),U=o("p"),uc=e("Instead of "),mt=o("code"),fc=e("~select_value_value.indexOf(...)"),xc=e(", I changed it to "),wt=o("code"),gc=e("~ctx[0].indexOf(...)"),mc=e(", as "),_t=o("code"),wc=e("select_value_value"),_c=e(" wasn't created when using spread attribute."),bc=i(),cn=o("p"),Ec=e("...and it works!"),Ic=i(),pn=o("p"),hs=o("span"),bt=o("picture"),kn=o("source"),R=o("img"),Oc=i(),ee=o("p"),Cc=e("So, now we know that the bug is caused by missing setting "),Et=o("code"),Dc=e("option.selected"),Sc=e(" on mount, now its time to figure out what the code snippet is not generated when there's a spread attribute."),Pc=i(),hn=o("p"),Tc=e("To quickly find out why something is not generated, I tried to look for where it is generated, figuring out probably whether certain condition was not set correctly to cause the Svelte compiler to omit out the code snippet."),Ac=i(),te=o("p"),jc=e("To find the right place to start looking is an art. Usually I try to global search a small snippet of code that is "),vn=o("strong"),Hc=e("most likely static"),Lc=e(", something that has no variable name, for example:"),$c=i(),vs=o("ul"),dn=o("li"),It=o("code"),qc=e(".indexOf(option.__value)"),Rc=i(),yn=o("li"),Ot=o("code"),Mc=e(".options.length;"),Vc=i(),un=o("li"),Ct=o("code"),Wc=e(".selected = ~"),Nc=i(),ms=o("p"),Bc=e("The only search result I got when searching for "),Dt=o("code"),Fc=e(".indexOf(option.__value)"),Gc=e(" is in "),ae=o("a"),Uc=e("src/runtime/internal/dom.ts"),zc=i(),St=o("div"),Yc=i(),ds=o("p"),Jc=e("Anything within "),Pt=o("code"),Qc=e("src/runtime/"),Xc=e(" are helper functions that are referenced from the output code, to reduce the output code size. Hmm... probably we should reuse the "),Tt=o("code"),Zc=e("select_options"),Kc=e(" helper function:"),sp=i(),At=o("div"),ep=i(),ws=o("p"),tp=e("Anyway, "),jt=o("code"),ap=e("src/runtime/internal/dom.ts"),op=e(" is not where I am looking for, so I tried searching "),Ht=o("code"),np=e(".options.length"),lp=i(),Lt=o("div"),rp=i(),fn=o("p"),ip=e("Yes, this is most likely where it is."),cp=i(),z=o("p"),pp=e("Firstly, let me update the "),$t=o("code"),kp=e("updater"),hp=e(" to use the "),qt=o("code"),vp=e("src/runtime/"),dp=i(),Rt=o("code"),yp=e("select_options"),up=e(" helper instead:"),fp=i(),Mt=o("div"),xp=i(),S=o("p"),gp=e("The "),Vt=o("code"),mp=e("b`...`"),wp=e(", is called a "),oe=o("a"),_p=e("tagged template"),bp=e(", where the "),Wt=o("code"),Ep=e("b"),Ip=e(" is a function that takes in the template literal and return something. In this case, the "),Nt=o("code"),Op=e("b"),Cp=e(" function returns an "),ne=o("a"),Dp=e("Abstract Syntaxt Tree (AST)"),Sp=e("."),Pp=i(),$=o("p"),Tp=e("The "),Bt=o("code"),Ap=e("b"),jp=e(" function comes from "),le=o("a"),Hp=e("code-red"),Lp=e(", a utility to generate a JavaScript AST node. Beside "),Ft=o("code"),$p=e("b"),qp=e(", "),Gt=o("code"),Rp=e("code-red"),Mp=e(" provides a few helper functions:"),Vp=i(),ys=o("ul"),Ut=o("li"),zt=o("code"),Wp=e("b"),Np=e(" returns a block node"),Bp=i(),Yt=o("li"),Jt=o("code"),Fp=e("x"),Gp=e(" returns an expression node"),Up=i(),Qt=o("li"),Xt=o("code"),zp=e("p"),Yp=e(" returns a object property node"),Jp=i(),xn=o("p"),Qp=e("These helper functions are useful in generating code in Svelte compiler, particularly because the placeholder itself can takes in another AST node:"),Xp=i(),Zt=o("div"),Zp=i(),M=o("p"),Kt=o("code"),Kp=e("@"),sk=e(" in front of "),sa=o("code"),ek=e("@select_option"),tk=e(" is a convention in Svelte, where it will "),re=o("a"),ak=e("get replaced"),ok=e(" to refer to helpr functions in "),ea=o("code"),nk=e("src/runtime/"),lk=e(" before writing the generated AST out:"),rk=i(),ta=o("div"),ik=i(),gn=o("p"),ck=e("Coming back to figure out why this piece of code is not executed when there's a spread attribute,"),pk=i(),aa=o("div"),kk=i(),Y=o("p"),hk=e("I tried adding "),oa=o("code"),vk=e("console.log"),dk=e(" before the if statement, to figure out the value for "),na=o("code"),yk=e("is_legacy_input_type"),uk=e(" and "),la=o("code"),fk=e("is_select_value_attribute"),xk=e(":"),gk=i(),ra=o("div"),mk=i(),ie=o("p"),wk=e("To my surpise, there was no log. "),ia=o("code"),_k=e("AttributeWrapper#render"),bk=e(" wasn't executed."),Ek=i(),ce=o("p"),Ik=e("I tried removing the spread attribute, and verified from the log that the "),ca=o("code"),Ok=e("AttributeWrapper#render"),Ck=e(" method was indeed executed when there's no spread attribute."),Dk=i(),us=o("p"),Sk=e("To figure out the caller of the "),pa=o("code"),Pk=e("AttributeWrapper#render"),Tk=e(" method, I added "),ka=o("code"),Ak=e("console.trace"),jk=e(" at the top of the method:"),Hk=i(),ha=o("div"),Lk=i(),va=o("div"),$k=i(),da=o("p"),qk=e("This brought me to "),pe=o("a"),Rk=e("src/compiler/compile/render_dom/wrappers/Element/index.ts"),Mk=i(),ya=o("div"),Vk=i(),J=o("p"),Wk=e("If there's a spread attribute, it will call the "),ua=o("code"),Nk=e("this.node.attributes.some(attr => attr.is_spread)"),Bk=e(" method instead of calling "),fa=o("code"),Fk=e("attribute.render(block)"),Gk=e(", so that's probably why "),xa=o("code"),Uk=e("AttributeWrapper#render"),zk=e(" wasn't called."),Yk=i(),Q=o("p"),Jk=e("I looked into the method "),ga=o("code"),Qk=e("add_spread_attributes"),Xk=e(", found out it contain only the code about handling spread attributes as I explained earlier. It didn't have any code related to "),ma=o("code"),Zk=e("select_options"),Kk=e(", so I figured that, maybe "),wa=o("code"),sh=e("<select multiple>"),eh=e(" with spread attribute is an edge case that wasn't handled currently at all."),th=i(),ke=o("p"),ah=e("So, I tried to add a special check for this case at the bottom of the "),_a=o("code"),oh=e("add_spread_attributes"),nh=e(" method:"),lh=i(),ba=o("div"),rh=i(),f=o("p"),ih=e("As mentioned in the "),Ea=o("a"),ch=e("The Svelte Compiler Handbook"),ph=e(", a "),Ia=o("code"),kh=e("block"),hh=e(" is where it keeps the code to generate the "),Oa=o("a"),Ca=o("code"),vh=e("create_fragment"),dh=e(" function. The return object of the "),Da=o("code"),yh=e("create_fragment"),uh=e(" function contains various method as mentioned in "),Sa=o("a"),fh=e("Compile Svelte in your Head"),xh=e(", such as "),Pa=o("code"),gh=e("c()"),mh=e(", "),Ta=o("code"),wh=e("m()"),_h=e(" and "),Aa=o("code"),bh=e("d()"),Eh=e(". To add code into different method, you can push them into the array in "),ja=o("code"),Ih=e("block.chunks"),Oh=e(", for example:"),Ch=i(),Ha=o("div"),Dh=i(),X=o("p"),Sh=e("I tried adding "),La=o("code"),Ph=e("@select_options(...)"),Th=e(" into the "),$a=o("code"),Ah=e("m()"),jh=e(" method and yup, the "),qa=o("code"),Hh=e("<select>"),Lh=e(" element is pre-selected correctly!"),Rn=i(),h=o("section"),mn=o("h2"),he=o("a"),$h=e("Fixing the bug"),qh=i(),wn=o("p"),Rh=e("To ensure the bug is fixed, I need to come up with a test."),Mh=i(),_n=o("p"),Vh=e("Usually I come up with test cases that try to entail various scenario I can imagine."),Wh=i(),ve=o("p"),Nh=e("In this example, we've manually tested the case where the "),Ra=o("code"),Bh=e("<select multiple {value} {...{}}>"),Fh=e(", the value is set correctly during initialisation. but have we check the case where:"),Gh=i(),de=o("ul"),fs=o("li"),Uh=e("we update the value of "),Ma=o("code"),zh=e("value"),Yh=e(", will the "),Va=o("code"),Jh=e("<select>"),Qh=e(" get updated accordingly?"),Xh=i(),ye=o("li"),Zh=e("if the value is overriden by the spreaded attribute, eg "),Wa=o("code"),Kh=e("<select mutliple {value} { ...{value: []} }>"),sv=e("?"),ev=i(),bn=o("p"),tv=e("Ideally, the test cases come up should be failed before the fix, and passed after the fix."),av=i(),En=o("p"),ov=e("So here's the test case I came up:"),nv=i(),Na=o("div"),lv=i(),Z=o("p"),rv=e("I can check and uncheck the checkbox to change the value of "),Ba=o("code"),iv=e("value"),cv=e(" to verify the the "),Fa=o("code"),pv=e("value"),kv=e(" is reactive, and "),Ga=o("code"),hv=e("<select>"),vv=e(" will get updated accordingly."),dv=i(),_=o("p"),yv=e("Besides that, I exported "),Ua=o("code"),uv=e("spread"),fv=e(", so that I can change the object to something object to contain "),za=o("code"),xv=e("value"),gv=e(", eg: "),Ya=o("code"),mv=e("{ value: [] }"),wv=e(", and see how "),Ja=o("code"),_v=e("<select>"),bv=e(" will update accordingly. Make sure that our fix not just work with "),Qa=o("code"),Ev=e("value"),Iv=e(" attribute, and also when the "),Xa=o("code"),Ov=e("value"),Cv=e(" is spreaded into "),Za=o("code"),Dv=e("<select>"),Sv=e("."),Pv=i(),In=o("p"),Tv=e("You may think that we are familiar with our fix, we know what it will fix, what it will not fix, do we need think up and write all the edge cases?"),Av=i(),On=o("p"),jv=e("Well, I think you should. Future you will thank the present you when he encounter a fail test, that just mean his change may have an unintentional regression change. If you don't have the test case, the future you will never know what edge case he didn't accounted for."),Hv=i(),K=o("p"),Lv=e("Runtime test cases are added into "),Ka=o("code"),$v=e("test/runtime/samples/"),qv=e(". Each folder represent 1 test case. Inside the folder, the component to be tested is named "),so=o("code"),Rv=e("App.svelte"),Mv=e(", and the test case is written "),eo=o("code"),Vv=e("_config.js"),Wv=e("."),Nv=i(),to=o("p"),ao=o("code"),Bv=e("_config.js"),Fv=e(" default exports a object:"),Gv=i(),oo=o("div"),Uv=i(),ue=o("p"),zv=e("An example of test case of unchecking the checkbox, and verify "),no=o("code"),Yv=e("<select>"),Jv=e(" value get updated"),Qv=i(),lo=o("div"),Xv=i(),fe=o("p"),Zv=e("To run only this test, so that we can focus on ensuring the test case pass, we can set "),ro=o("code"),Kv=e("solo: true"),sd=e(":"),ed=i(),io=o("div"),td=i(),T=o("p"),Cn=o("strong"),ad=e("Quick tip:"),od=e(" running "),co=o("code"),nd=e("npm run test"),ld=e(" will build Svelte code first before executing the test. If you are like me, running "),po=o("code"),rd=e("npm run dev"),id=e(" on the background, Svelte code is build on every code change. So, "),ko=o("code"),cd=e("npm run quicktest"),pd=e(" would allow you to skip the "),ho=o("code"),kd=e("pretest"),hd=e(" build, and run the test suite immediately."),vd=i(),xe=o("p"),dd=e("With the test, I realised that I didn't handle the case when the "),vo=o("code"),yd=e("value"),ud=e(" is updated."),fd=i(),ge=o("p"),xd=e("So I guess what I needed to do is to add the same code in the "),yo=o("code"),gd=e("p()"),md=e(" (update) method too!"),wd=i(),uo=o("div"),_d=i(),me=o("p"),bd=e("Well, of course in this way, the "),fo=o("code"),Ed=e("select_options"),Id=e(" get executed unconditionally whenever any variable is updated."),Od=i(),P=o("p"),Cd=e("I need to make sure that the "),xo=o("code"),Dd=e("select_options(...)"),Sd=e(" inside the "),go=o("code"),Pd=e("p()"),Td=e(" method get executed only when the value of "),mo=o("code"),Ad=e("value"),jd=e(" changes, and also probably when "),wo=o("code"),Hd=e("spread"),Ld=e(" changes too, because it could potentially override the value of "),_o=o("code"),$d=e("value"),qd=e("."),Rd=i(),we=o("p"),Md=e("If you've read "),bo=o("a"),Vd=e("Compile Svelte in your Head - Bitmask in Svelte"),Wd=e(", you know that Svelte uses bitmask to check any variable changes."),Nd=i(),Dn=o("p"),Bd=e("How do I know what is the bitmask to use in this case, well I dont have to."),Fd=i(),_e=o("p"),Gd=e("I can use "),be=o("a"),Eo=o("code"),Ud=e("renderer.dirty(dependencies)"),zd=e(" to help me with that:"),Yd=i(),Io=o("div"),Jd=i(),Sn=o("p"),Qd=e("Next, I need to figure out what are the dependencies to be included. In this particular case, the dependencies of all attributes have to be taken consideration, because it is hard to tell which one would be eventually applied due to the spread attribute."),Xd=i(),Oo=o("div"),Zd=i(),Pn=o("p"),Kd=e("After a few tweaks, finally I passed all my test cases, and its time to create a pull request!"),Mn=i(),m=o("section"),Tn=o("h2"),Ee=o("a"),sy=e("Submitting the fix"),ey=i(),xs=o("p"),ty=e("Before pushing the fix to remote, it is important to make sure that all the lints and typescript definitions are correct. You can run "),Co=o("code"),ay=e("npm run lint --fixed"),oy=e(" for linting, and "),Do=o("code"),ny=e("npm run tsd"),ly=e(" to generate typescript definition."),ry=i(),Ie=o("p"),iy=e("If you are unsure on how to create a pull request, you can check out "),Oe=o("a"),cy=e("How to make your first pull request on GitHub"),py=e("."),ky=i(),Ce=o("p"),hy=e("I pushed my branch and created a "),De=o("a"),vy=e("Pull Request to Svelte"),dy=e(", and now I am waiting for feedback and for it to get merged."),yy=i(),An=o("p"),uy=e("Svelte is not maintained by full-time maintainers, everyone has their full-time job, so please be patient and be nice."),fy=i(),xy=o("hr"),gy=i(),Se=o("p"),my=e("If you wish to learn more about Svelte, "),Pe=o("a"),wy=e("follow me on Twitter"),_y=e("."),by=i(),Te=o("p"),Ey=e("If you have anything unclear about this article, find me on "),Ae=o("a"),Iy=e("Twitter"),Oy=e(" too!"),this.h()},l(y){d=n(y,"SECTION",{});var u=l(d);q=n(u,"H2",{});var qy=l(q);A=n(qy,"A",{href:!0,id:!0});var Ry=l(A);As=t(Ry,"Background"),Ry.forEach(a),qy.forEach(a),x=c(u),j=n(u,"P",{});var My=l(j);Le=t(My,"As Svelte gains more attention, I find that more and more people are interested in contributing to Svelte."),My.forEach(a),vl=c(u),Wo=n(u,"P",{});var Vy=l(Wo);dl=t(Vy,"Of course, contributing to Svelte, does not mean to contribute only in code, it could be:"),Vy.forEach(a),yl=c(u),ls=n(u,"UL",{});var So=l(ls);$e=n(So,"LI",{});var Cy=l($e);ul=t(Cy,"answering questions about Svelte, on social media, Stack Overflow, or "),js=n(Cy,"A",{href:!0,rel:!0});var Wy=l(js);fl=t(Wy,"Discord"),Wy.forEach(a),Cy.forEach(a),xl=c(So),No=n(So,"LI",{});var Ny=l(No);gl=t(Ny,"improving Svelte docs, or write tutorials and articles about Svelte"),Ny.forEach(a),ml=c(So),Bo=n(So,"LI",{});var By=l(Bo);wl=t(By,"organising and speaking in meetups about Svelte"),By.forEach(a),So.forEach(a),_l=c(u),Hs=n(u,"P",{});var Vn=l(Hs);bl=t(Vn,"For those who want to contribute in code, most people are unsure where to start. So I wrote "),qe=n(Vn,"A",{href:!0});var Fy=l(qe);El=t(Fy,"The Svelte Compiler Handbook"),Fy.forEach(a),Il=t(Vn," as an overview of the Svelte source code."),Vn.forEach(a),Ol=c(u),Fo=n(u,"P",{});var Gy=l(Fo);Cl=t(Gy,"However, today, I want to try a different tone."),Gy.forEach(a),Dl=c(u),Go=n(u,"P",{});var Uy=l(Go);Sl=t(Uy,"I am going to tell you an anecdote on how I investigated and fixed a bug in Svelte."),Uy.forEach(a),Pl=c(u),Uo=n(u,"P",{});var zy=l(Uo);Tl=t(zy,"I documented down my train of thoughts as detailed as possible."),zy.forEach(a),Al=c(u),zo=n(u,"P",{});var Yy=l(zo);jl=t(Yy,"I hope this gives anyone who is reading, a glimpse on how to work on the Svelte source code."),Yy.forEach(a),u.forEach(a),Ln=c(y),g=n(y,"SECTION",{});var E=l(g);Yo=n(E,"H2",{});var Jy=l(Yo);Ls=n(Jy,"A",{href:!0,id:!0});var Qy=l(Ls);Hl=t(Qy,"The story begins"),Qy.forEach(a),Jy.forEach(a),Ll=c(E),$s=n(E,"P",{});var Wn=l($s);$l=t(Wn,"I was combing through "),qs=n(Wn,"A",{href:!0,rel:!0});var Xy=l(qs);ql=t(Xy,"bugs on GitHub"),Xy.forEach(a),Rl=t(Wn,", and found this rather interesting bug:"),Wn.forEach(a),Ml=c(E),Vl=n(E,"HR",{}),Wl=c(E),Jo=n(E,"P",{});var Zy=l(Jo);Re=n(Zy,"STRONG",{});var Dy=l(Re);Nl=t(Dy,"Select multiple value does not get set with spread props "),Rs=n(Dy,"A",{href:!0,rel:!0});var Ky=l(Rs);Bl=t(Ky,"#4392"),Ky.forEach(a),Dy.forEach(a),Zy.forEach(a),Fl=c(E),Ms=n(E,"P",{});var Nn=l(Ms);Gl=t(Nn,"Adding any type of spread, even an empty object "),Me=n(Nn,"CODE",{class:!0});var su=l(Me);Ul=t(su,"{...{}}"),su.forEach(a),zl=t(Nn,", causes the value not to be set:"),Nn.forEach(a),Yl=c(E),Ve=n(E,"DIV",{class:!0});var zg=l(Ve);zg.forEach(a),Jl=c(E),Vs=n(E,"P",{});var Bn=l(Vs);Ql=t(Bn,"To reproduce: "),Ws=n(Bn,"A",{href:!0,rel:!0});var eu=l(Ws);Xl=t(eu,"REPL"),eu.forEach(a),Zl=t(Bn,"."),Bn.forEach(a),Kl=c(E),sr=n(E,"HR",{}),E.forEach(a),$n=c(y),b=n(y,"SECTION",{});var V=l(b);Qo=n(V,"H2",{});var tu=l(Qo);Ns=n(tu,"A",{href:!0,id:!0});var au=l(Ns);er=t(au,"Verifying the bug"),au.forEach(a),tu.forEach(a),tr=c(V),Xo=n(V,"P",{});var ou=l(Xo);ar=t(ou,"I clicked into the REPL and tried to understand about the bug."),ou.forEach(a),or=c(V),C=n(V,"P",{});var W=l(C);nr=t(W,"I found that if the "),We=n(W,"CODE",{class:!0});var nu=l(We);lr=t(nu,"<select multiple>"),nu.forEach(a),rr=t(W," has spread attribute "),Ne=n(W,"CODE",{class:!0});var lu=l(Ne);ir=t(lu,"{...any}"),lu.forEach(a),cr=t(W,", the "),Be=n(W,"CODE",{class:!0});var ru=l(Be);pr=t(ru,"value"),ru.forEach(a),kr=t(W," attribute will not be reactive. Changes in the value of "),Fe=n(W,"CODE",{class:!0});var iu=l(Fe);hr=t(iu,"value"),iu.forEach(a),vr=t(W," will not be reflected to the "),Ge=n(W,"CODE",{class:!0});var cu=l(Ge);dr=t(cu,"<select>"),cu.forEach(a),yr=t(W,"."),W.forEach(a),ur=c(V),G=n(V,"P",{});var _s=l(G);fr=t(_s,"I noticed the REPL link uses the version "),Ue=n(_s,"CODE",{class:!0});var pu=l(Ue);xr=t(pu,"3.18.1"),pu.forEach(a),gr=t(_s,", it's not the latest version of Svelte. At the point of writing, Svelte is at "),Zo=n(_s,"STRONG",{});var ku=l(Zo);mr=t(ku,"3.22.3"),ku.forEach(a),wr=t(_s,". I tried removing the "),ze=n(_s,"CODE",{class:!0});var hu=l(ze);_r=t(hu,"?version=3.18.1"),hu.forEach(a),br=t(_s," from the query params to verify whether the bug has fixed, and realised that the bug is still there. (Great! Something interesting to investigate into.)"),_s.forEach(a),Er=c(V),H=n(V,"P",{});var as=l(H);Ir=t(as,"To understand the current status of the issue, I read through the comments. According to "),Bs=n(as,"A",{href:!0,rel:!0});var vu=l(Bs);Or=t(vu,"Conduitry"),vu.forEach(a),Cr=t(as,", the issue is related to "),Ko=n(as,"STRONG",{});var du=l(Ko);Dr=t(du,"Radio/checkbox input with bind:group and spread props makes variable undefined"),du.forEach(a),Sr=c(as),Fs=n(as,"A",{href:!0,rel:!0});var yu=l(Fs);Pr=t(yu,"#3680"),yu.forEach(a),Tr=t(as," and can be fixed together. However, the issue "),Gs=n(as,"A",{href:!0,rel:!0});var uu=l(Gs);Ar=t(uu,"#3680"),uu.forEach(a),jr=t(as," was fixed and closed, yet this issue is still open."),as.forEach(a),Hr=c(V),rs=n(V,"P",{});var Po=l(rs);Lr=t(Po,"Nevertheless, I read through "),Us=n(Po,"A",{href:!0,rel:!0});var fu=l(Us);$r=t(fu,"the PR"),fu.forEach(a),qr=t(Po," for the closed issue "),zs=n(Po,"A",{href:!0,rel:!0});var xu=l(zs);Rr=t(xu,"#3680"),xu.forEach(a),Mr=t(Po,", roughly understand how it was fixed and hopefully it can give me some inspirations on this issue."),Po.forEach(a),V.forEach(a),qn=c(y),p=n(y,"SECTION",{});var k=l(p);sn=n(k,"H2",{});var gu=l(sn);Ys=n(gu,"A",{href:!0,id:!0});var mu=l(Ys);Vr=t(mu,"Investigating the bug"),mu.forEach(a),gu.forEach(a),Wr=c(k),en=n(k,"P",{});var wu=l(en);Nr=t(wu,"Once I verified that the behavior described in the issue is unexpected and reproducible in the latest version of Svelte, I copied the REPL code into my local machine to investigate."),wu.forEach(a),Br=c(k),D=n(k,"P",{});var N=l(D);Fr=t(N,"I have a "),Ye=n(N,"CODE",{class:!0});var _u=l(Ye);Gr=t(_u,"test-svelte"),_u.forEach(a),Ur=t(N," folder ready in my local machine, where I created using "),Js=n(N,"A",{href:!0,rel:!0});var bu=l(Js);zr=t(bu,"Svelte Template"),bu.forEach(a),Yr=t(N,". I have "),Je=n(N,"CODE",{class:!0});var Eu=l(Je);Jr=t(Eu,"npm link"),Eu.forEach(a),Qr=t(N,"ed my local Svelte clone to the "),Qe=n(N,"CODE",{class:!0});var Iu=l(Qe);Xr=t(Iu,"test-svelte"),Iu.forEach(a),Zr=t(N," folder, so I can rebuild "),Xe=n(N,"CODE",{class:!0});var Ou=l(Xe);Kr=t(Ou,"test-svelte"),Ou.forEach(a),si=t(N," anytime with the latest changes done to my Svelte clone."),N.forEach(a),ei=c(k),Ze=n(k,"DIV",{class:!0});var Yg=l(Ze);Yg.forEach(a),ti=c(k),Qs=n(k,"P",{});var Fn=l(Qs);ai=t(Fn,"I have "),Ke=n(Fn,"CODE",{class:!0});var Cu=l(Ke);oi=t(Cu,"yarn dev"),Cu.forEach(a),ni=t(Fn," running in the Svelte folder, so any changes I make gets compiled immediately."),Fn.forEach(a),li=c(k),L=n(k,"P",{});var os=l(L);ri=t(os,"I prefer to "),tn=n(os,"STRONG",{});var Du=l(tn);ii=t(Du,"build"),Du.forEach(a),ci=c(os),st=n(os,"CODE",{class:!0});var Su=l(st);pi=t(Su,"test-svelte"),Su.forEach(a),ki=t(os," and serve it with "),Xs=n(os,"A",{href:!0,rel:!0});var Pu=l(Xs);hi=t(Pu,"http-server"),Pu.forEach(a),vi=t(os," rather than start a dev server "),et=n(os,"CODE",{class:!0});var Tu=l(et);di=t(Tu,"test-svelte"),Tu.forEach(a),yi=t(os," in watch mode. That allows me to"),os.forEach(a),ui=c(k),is=n(k,"UL",{});var To=l(is);cs=n(To,"LI",{});var Ao=l(cs);fi=t(Ao,"Run the "),tt=n(Ao,"CODE",{class:!0});var Au=l(tt);xi=t(Au,"http-server"),Au.forEach(a),gi=t(Ao," in the background while tweaking the Svelte code or the "),at=n(Ao,"CODE",{class:!0});var ju=l(at);mi=t(ju,"test-svelte"),ju.forEach(a),wi=t(Ao," app."),Ao.forEach(a),_i=c(To),an=n(To,"LI",{});var Hu=l(an);bi=t(Hu,"Not having to restart the dev server whenever I've made changes to the Svelte code"),Hu.forEach(a),Ei=c(To),ts=n(To,"LI",{});var je=l(ts);Ii=t(je,"Able to inspect and modify "),ot=n(je,"CODE",{class:!0});var Lu=l(ot);Oi=t(Lu,"bundle.js"),Lu.forEach(a),Ci=t(je," without worrying that accidentaly save in the "),nt=n(je,"CODE",{class:!0});var $u=l(nt);Di=t($u,"test-svelte"),$u.forEach(a),Si=t(je," app will overwrite the "),lt=n(je,"CODE",{class:!0});var qu=l(lt);Pi=t(qu,"bundle.js"),qu.forEach(a),je.forEach(a),To.forEach(a),Ti=c(k),ps=n(k,"P",{});var jo=l(ps);Ai=t(jo,"Looking at the different "),rt=n(jo,"CODE",{class:!0});var Ru=l(rt);ji=t(Ru,"bundle.js"),Ru.forEach(a),Hi=t(jo," generated from with "),it=n(jo,"CODE",{class:!0});var Mu=l(it);Li=t(Mu,"{...spread}"),Mu.forEach(a),$i=t(jo," attributes and without spread attributes"),jo.forEach(a),qi=c(k),ct=n(k,"DIV",{class:!0});var Jg=l(ct);Jg.forEach(a),Ri=c(k),on=n(k,"P",{});var Vu=l(on);Mi=t(Vu,"I found the following diffs in the bundled output:"),Vu.forEach(a),Vi=c(k),pt=n(k,"DIV",{class:!0});var Qg=l(pt);Qg.forEach(a),Wi=c(k),Zs=n(k,"P",{});var Gn=l(Zs);Ni=t(Gn,"Well, I know I haven't cover how spread attribute works in any of my "),kt=n(Gn,"A",{href:!0});var Wu=l(kt);Bi=t(Wu,'"Compile Svelte in your Head"'),Wu.forEach(a),Fi=t(Gn," articles, but the general idea is that, Svelte builds an array of attributes, and then apply it to the element / Component."),Gn.forEach(a),Gi=c(k),nn=n(k,"P",{});var Nu=l(nn);Ui=t(Nu,"For example, if we write the following in Svelte"),Nu.forEach(a),zi=c(k),ht=n(k,"DIV",{class:!0});var Xg=l(ht);Xg.forEach(a),Yi=c(k),ln=n(k,"P",{});var Bu=l(ln);Ji=t(Bu,"It gets compiled to something like this:"),Bu.forEach(a),Qi=c(k),vt=n(k,"DIV",{class:!0});var Zg=l(vt);Zg.forEach(a),Xi=c(k),Ks=n(k,"P",{});var Un=l(Ks);Zi=t(Un,"So, this roughly explains the additional code added into the "),dt=n(Un,"CODE",{class:!0});var Fu=l(dt);Ki=t(Fu,"bundle.js"),Fu.forEach(a),sc=t(Un," for handling spread attributes."),Un.forEach(a),ec=c(k),rn=n(k,"P",{});var Gu=l(rn);tc=t(Gu,"However the code that is removed, is something I am not familiar with."),Gu.forEach(a),ac=c(k),yt=n(k,"DIV",{class:!0});var Kg=l(yt);Kg.forEach(a),oc=c(k),ks=n(k,"P",{});var Ho=l(ks);nc=t(Ho,"It seems like we are trying to set "),ut=n(Ho,"CODE",{class:!0});var Uu=l(ut);lc=t(Uu,"option.selected"),Uu.forEach(a),rc=t(Ho," after we mount the "),ft=n(Ho,"CODE",{class:!0});var zu=l(ft);ic=t(zu,"<select>"),zu.forEach(a),cc=t(Ho," element. Not sure how important is that to us."),Ho.forEach(a),pc=c(k),se=n(k,"P",{});var zn=l(se);kc=t(zn,"To verify that the bug is because that the above code snippet is missing when having a spread attribute, I tried adding the code snippet into the "),xt=n(zn,"CODE",{class:!0});var Yu=l(xt);hc=t(Yu,"bundle.js"),Yu.forEach(a),vc=t(zn," manually, and refresh the page."),zn.forEach(a),dc=c(k),gt=n(k,"DIV",{class:!0});var sm=l(gt);sm.forEach(a),yc=c(k),U=n(k,"P",{});var bs=l(U);uc=t(bs,"Instead of "),mt=n(bs,"CODE",{class:!0});var Ju=l(mt);fc=t(Ju,"~select_value_value.indexOf(...)"),Ju.forEach(a),xc=t(bs,", I changed it to "),wt=n(bs,"CODE",{class:!0});var Qu=l(wt);gc=t(Qu,"~ctx[0].indexOf(...)"),Qu.forEach(a),mc=t(bs,", as "),_t=n(bs,"CODE",{class:!0});var Xu=l(_t);wc=t(Xu,"select_value_value"),Xu.forEach(a),_c=t(bs," wasn't created when using spread attribute."),bs.forEach(a),bc=c(k),cn=n(k,"P",{});var Zu=l(cn);Ec=t(Zu,"...and it works!"),Zu.forEach(a),Ic=c(k),pn=n(k,"P",{});var Ku=l(pn);hs=n(Ku,"SPAN",{style:!0});var sf=l(hs);bt=n(sf,"PICTURE",{});var Sy=l(bt);kn=n(Sy,"SOURCE",{type:!0,srcset:!0}),R=n(Sy,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Sy.forEach(a),sf.forEach(a),Ku.forEach(a),Oc=c(k),ee=n(k,"P",{});var Yn=l(ee);Cc=t(Yn,"So, now we know that the bug is caused by missing setting "),Et=n(Yn,"CODE",{class:!0});var ef=l(Et);Dc=t(ef,"option.selected"),ef.forEach(a),Sc=t(Yn," on mount, now its time to figure out what the code snippet is not generated when there's a spread attribute."),Yn.forEach(a),Pc=c(k),hn=n(k,"P",{});var tf=l(hn);Tc=t(tf,"To quickly find out why something is not generated, I tried to look for where it is generated, figuring out probably whether certain condition was not set correctly to cause the Svelte compiler to omit out the code snippet."),tf.forEach(a),Ac=c(k),te=n(k,"P",{});var Jn=l(te);jc=t(Jn,"To find the right place to start looking is an art. Usually I try to global search a small snippet of code that is "),vn=n(Jn,"STRONG",{});var af=l(vn);Hc=t(af,"most likely static"),af.forEach(a),Lc=t(Jn,", something that has no variable name, for example:"),Jn.forEach(a),$c=c(k),vs=n(k,"UL",{});var Lo=l(vs);dn=n(Lo,"LI",{});var of=l(dn);It=n(of,"CODE",{class:!0});var nf=l(It);qc=t(nf,".indexOf(option.__value)"),nf.forEach(a),of.forEach(a),Rc=c(Lo),yn=n(Lo,"LI",{});var lf=l(yn);Ot=n(lf,"CODE",{class:!0});var rf=l(Ot);Mc=t(rf,".options.length;"),rf.forEach(a),lf.forEach(a),Vc=c(Lo),un=n(Lo,"LI",{});var cf=l(un);Ct=n(cf,"CODE",{class:!0});var pf=l(Ct);Wc=t(pf,".selected = ~"),pf.forEach(a),cf.forEach(a),Lo.forEach(a),Nc=c(k),ms=n(k,"P",{});var jn=l(ms);Bc=t(jn,"The only search result I got when searching for "),Dt=n(jn,"CODE",{class:!0});var kf=l(Dt);Fc=t(kf,".indexOf(option.__value)"),kf.forEach(a),Gc=t(jn," is in "),ae=n(jn,"A",{href:!0,rel:!0});var hf=l(ae);Uc=t(hf,"src/runtime/internal/dom.ts"),hf.forEach(a),jn.forEach(a),zc=c(k),St=n(k,"DIV",{class:!0});var em=l(St);em.forEach(a),Yc=c(k),ds=n(k,"P",{});var $o=l(ds);Jc=t($o,"Anything within "),Pt=n($o,"CODE",{class:!0});var vf=l(Pt);Qc=t(vf,"src/runtime/"),vf.forEach(a),Xc=t($o," are helper functions that are referenced from the output code, to reduce the output code size. Hmm... probably we should reuse the "),Tt=n($o,"CODE",{class:!0});var df=l(Tt);Zc=t(df,"select_options"),df.forEach(a),Kc=t($o," helper function:"),$o.forEach(a),sp=c(k),At=n(k,"DIV",{class:!0});var tm=l(At);tm.forEach(a),ep=c(k),ws=n(k,"P",{});var Hn=l(ws);tp=t(Hn,"Anyway, "),jt=n(Hn,"CODE",{class:!0});var yf=l(jt);ap=t(yf,"src/runtime/internal/dom.ts"),yf.forEach(a),op=t(Hn," is not where I am looking for, so I tried searching "),Ht=n(Hn,"CODE",{class:!0});var uf=l(Ht);np=t(uf,".options.length"),uf.forEach(a),Hn.forEach(a),lp=c(k),Lt=n(k,"DIV",{class:!0});var am=l(Lt);am.forEach(a),rp=c(k),fn=n(k,"P",{});var ff=l(fn);ip=t(ff,"Yes, this is most likely where it is."),ff.forEach(a),cp=c(k),z=n(k,"P",{});var Es=l(z);pp=t(Es,"Firstly, let me update the "),$t=n(Es,"CODE",{class:!0});var xf=l($t);kp=t(xf,"updater"),xf.forEach(a),hp=t(Es," to use the "),qt=n(Es,"CODE",{class:!0});var gf=l(qt);vp=t(gf,"src/runtime/"),gf.forEach(a),dp=c(Es),Rt=n(Es,"CODE",{class:!0});var mf=l(Rt);yp=t(mf,"select_options"),mf.forEach(a),up=t(Es," helper instead:"),Es.forEach(a),fp=c(k),Mt=n(k,"DIV",{class:!0});var om=l(Mt);om.forEach(a),xp=c(k),S=n(k,"P",{});var B=l(S);gp=t(B,"The "),Vt=n(B,"CODE",{class:!0});var wf=l(Vt);mp=t(wf,"b`...`"),wf.forEach(a),wp=t(B,", is called a "),oe=n(B,"A",{href:!0,rel:!0});var _f=l(oe);_p=t(_f,"tagged template"),_f.forEach(a),bp=t(B,", where the "),Wt=n(B,"CODE",{class:!0});var bf=l(Wt);Ep=t(bf,"b"),bf.forEach(a),Ip=t(B," is a function that takes in the template literal and return something. In this case, the "),Nt=n(B,"CODE",{class:!0});var Ef=l(Nt);Op=t(Ef,"b"),Ef.forEach(a),Cp=t(B," function returns an "),ne=n(B,"A",{href:!0,rel:!0});var If=l(ne);Dp=t(If,"Abstract Syntaxt Tree (AST)"),If.forEach(a),Sp=t(B,"."),B.forEach(a),Pp=c(k),$=n(k,"P",{});var ns=l($);Tp=t(ns,"The "),Bt=n(ns,"CODE",{class:!0});var Of=l(Bt);Ap=t(Of,"b"),Of.forEach(a),jp=t(ns," function comes from "),le=n(ns,"A",{href:!0,rel:!0});var Cf=l(le);Hp=t(Cf,"code-red"),Cf.forEach(a),Lp=t(ns,", a utility to generate a JavaScript AST node. Beside "),Ft=n(ns,"CODE",{class:!0});var Df=l(Ft);$p=t(Df,"b"),Df.forEach(a),qp=t(ns,", "),Gt=n(ns,"CODE",{class:!0});var Sf=l(Gt);Rp=t(Sf,"code-red"),Sf.forEach(a),Mp=t(ns," provides a few helper functions:"),ns.forEach(a),Vp=c(k),ys=n(k,"UL",{});var qo=l(ys);Ut=n(qo,"LI",{});var Py=l(Ut);zt=n(Py,"CODE",{class:!0});var Pf=l(zt);Wp=t(Pf,"b"),Pf.forEach(a),Np=t(Py," returns a block node"),Py.forEach(a),Bp=c(qo),Yt=n(qo,"LI",{});var Ty=l(Yt);Jt=n(Ty,"CODE",{class:!0});var Tf=l(Jt);Fp=t(Tf,"x"),Tf.forEach(a),Gp=t(Ty," returns an expression node"),Ty.forEach(a),Up=c(qo),Qt=n(qo,"LI",{});var Ay=l(Qt);Xt=n(Ay,"CODE",{class:!0});var Af=l(Xt);zp=t(Af,"p"),Af.forEach(a),Yp=t(Ay," returns a object property node"),Ay.forEach(a),qo.forEach(a),Jp=c(k),xn=n(k,"P",{});var jf=l(xn);Qp=t(jf,"These helper functions are useful in generating code in Svelte compiler, particularly because the placeholder itself can takes in another AST node:"),jf.forEach(a),Xp=c(k),Zt=n(k,"DIV",{class:!0});var nm=l(Zt);nm.forEach(a),Zp=c(k),M=n(k,"P",{});var gs=l(M);Kt=n(gs,"CODE",{class:!0});var Hf=l(Kt);Kp=t(Hf,"@"),Hf.forEach(a),sk=t(gs," in front of "),sa=n(gs,"CODE",{class:!0});var Lf=l(sa);ek=t(Lf,"@select_option"),Lf.forEach(a),tk=t(gs," is a convention in Svelte, where it will "),re=n(gs,"A",{href:!0,rel:!0});var $f=l(re);ak=t($f,"get replaced"),$f.forEach(a),ok=t(gs," to refer to helpr functions in "),ea=n(gs,"CODE",{class:!0});var qf=l(ea);nk=t(qf,"src/runtime/"),qf.forEach(a),lk=t(gs," before writing the generated AST out:"),gs.forEach(a),rk=c(k),ta=n(k,"DIV",{class:!0});var lm=l(ta);lm.forEach(a),ik=c(k),gn=n(k,"P",{});var Rf=l(gn);ck=t(Rf,"Coming back to figure out why this piece of code is not executed when there's a spread attribute,"),Rf.forEach(a),pk=c(k),aa=n(k,"DIV",{class:!0});var rm=l(aa);rm.forEach(a),kk=c(k),Y=n(k,"P",{});var Is=l(Y);hk=t(Is,"I tried adding "),oa=n(Is,"CODE",{class:!0});var Mf=l(oa);vk=t(Mf,"console.log"),Mf.forEach(a),dk=t(Is," before the if statement, to figure out the value for "),na=n(Is,"CODE",{class:!0});var Vf=l(na);yk=t(Vf,"is_legacy_input_type"),Vf.forEach(a),uk=t(Is," and "),la=n(Is,"CODE",{class:!0});var Wf=l(la);fk=t(Wf,"is_select_value_attribute"),Wf.forEach(a),xk=t(Is,":"),Is.forEach(a),gk=c(k),ra=n(k,"DIV",{class:!0});var im=l(ra);im.forEach(a),mk=c(k),ie=n(k,"P",{});var Qn=l(ie);wk=t(Qn,"To my surpise, there was no log. "),ia=n(Qn,"CODE",{class:!0});var Nf=l(ia);_k=t(Nf,"AttributeWrapper#render"),Nf.forEach(a),bk=t(Qn," wasn't executed."),Qn.forEach(a),Ek=c(k),ce=n(k,"P",{});var Xn=l(ce);Ik=t(Xn,"I tried removing the spread attribute, and verified from the log that the "),ca=n(Xn,"CODE",{class:!0});var Bf=l(ca);Ok=t(Bf,"AttributeWrapper#render"),Bf.forEach(a),Ck=t(Xn," method was indeed executed when there's no spread attribute."),Xn.forEach(a),Dk=c(k),us=n(k,"P",{});var Ro=l(us);Sk=t(Ro,"To figure out the caller of the "),pa=n(Ro,"CODE",{class:!0});var Ff=l(pa);Pk=t(Ff,"AttributeWrapper#render"),Ff.forEach(a),Tk=t(Ro," method, I added "),ka=n(Ro,"CODE",{class:!0});var Gf=l(ka);Ak=t(Gf,"console.trace"),Gf.forEach(a),jk=t(Ro," at the top of the method:"),Ro.forEach(a),Hk=c(k),ha=n(k,"DIV",{class:!0});var cm=l(ha);cm.forEach(a),Lk=c(k),va=n(k,"DIV",{class:!0});var pm=l(va);pm.forEach(a),$k=c(k),da=n(k,"P",{});var jy=l(da);qk=t(jy,"This brought me to "),pe=n(jy,"A",{href:!0,rel:!0});var Uf=l(pe);Rk=t(Uf,"src/compiler/compile/render_dom/wrappers/Element/index.ts"),Uf.forEach(a),jy.forEach(a),Mk=c(k),ya=n(k,"DIV",{class:!0});var km=l(ya);km.forEach(a),Vk=c(k),J=n(k,"P",{});var Os=l(J);Wk=t(Os,"If there's a spread attribute, it will call the "),ua=n(Os,"CODE",{class:!0});var zf=l(ua);Nk=t(zf,"this.node.attributes.some(attr => attr.is_spread)"),zf.forEach(a),Bk=t(Os," method instead of calling "),fa=n(Os,"CODE",{class:!0});var Yf=l(fa);Fk=t(Yf,"attribute.render(block)"),Yf.forEach(a),Gk=t(Os,", so that's probably why "),xa=n(Os,"CODE",{class:!0});var Jf=l(xa);Uk=t(Jf,"AttributeWrapper#render"),Jf.forEach(a),zk=t(Os," wasn't called."),Os.forEach(a),Yk=c(k),Q=n(k,"P",{});var Cs=l(Q);Jk=t(Cs,"I looked into the method "),ga=n(Cs,"CODE",{class:!0});var Qf=l(ga);Qk=t(Qf,"add_spread_attributes"),Qf.forEach(a),Xk=t(Cs,", found out it contain only the code about handling spread attributes as I explained earlier. It didn't have any code related to "),ma=n(Cs,"CODE",{class:!0});var Xf=l(ma);Zk=t(Xf,"select_options"),Xf.forEach(a),Kk=t(Cs,", so I figured that, maybe "),wa=n(Cs,"CODE",{class:!0});var Zf=l(wa);sh=t(Zf,"<select multiple>"),Zf.forEach(a),eh=t(Cs," with spread attribute is an edge case that wasn't handled currently at all."),Cs.forEach(a),th=c(k),ke=n(k,"P",{});var Zn=l(ke);ah=t(Zn,"So, I tried to add a special check for this case at the bottom of the "),_a=n(Zn,"CODE",{class:!0});var Kf=l(_a);oh=t(Kf,"add_spread_attributes"),Kf.forEach(a),nh=t(Zn," method:"),Zn.forEach(a),lh=c(k),ba=n(k,"DIV",{class:!0});var hm=l(ba);hm.forEach(a),rh=c(k),f=n(k,"P",{});var w=l(f);ih=t(w,"As mentioned in the "),Ea=n(w,"A",{href:!0});var sx=l(Ea);ch=t(sx,"The Svelte Compiler Handbook"),sx.forEach(a),ph=t(w,", a "),Ia=n(w,"CODE",{class:!0});var ex=l(Ia);kh=t(ex,"block"),ex.forEach(a),hh=t(w," is where it keeps the code to generate the "),Oa=n(w,"A",{href:!0});var tx=l(Oa);Ca=n(tx,"CODE",{class:!0});var ax=l(Ca);vh=t(ax,"create_fragment"),ax.forEach(a),tx.forEach(a),dh=t(w," function. The return object of the "),Da=n(w,"CODE",{class:!0});var ox=l(Da);yh=t(ox,"create_fragment"),ox.forEach(a),uh=t(w," function contains various method as mentioned in "),Sa=n(w,"A",{href:!0});var nx=l(Sa);fh=t(nx,"Compile Svelte in your Head"),nx.forEach(a),xh=t(w,", such as "),Pa=n(w,"CODE",{class:!0});var lx=l(Pa);gh=t(lx,"c()"),lx.forEach(a),mh=t(w,", "),Ta=n(w,"CODE",{class:!0});var rx=l(Ta);wh=t(rx,"m()"),rx.forEach(a),_h=t(w," and "),Aa=n(w,"CODE",{class:!0});var ix=l(Aa);bh=t(ix,"d()"),ix.forEach(a),Eh=t(w,". To add code into different method, you can push them into the array in "),ja=n(w,"CODE",{class:!0});var cx=l(ja);Ih=t(cx,"block.chunks"),cx.forEach(a),Oh=t(w,", for example:"),w.forEach(a),Ch=c(k),Ha=n(k,"DIV",{class:!0});var vm=l(Ha);vm.forEach(a),Dh=c(k),X=n(k,"P",{});var Ds=l(X);Sh=t(Ds,"I tried adding "),La=n(Ds,"CODE",{class:!0});var px=l(La);Ph=t(px,"@select_options(...)"),px.forEach(a),Th=t(Ds," into the "),$a=n(Ds,"CODE",{class:!0});var kx=l($a);Ah=t(kx,"m()"),kx.forEach(a),jh=t(Ds," method and yup, the "),qa=n(Ds,"CODE",{class:!0});var hx=l(qa);Hh=t(hx,"<select>"),hx.forEach(a),Lh=t(Ds," element is pre-selected correctly!"),Ds.forEach(a),k.forEach(a),Rn=c(y),h=n(y,"SECTION",{});var v=l(h);mn=n(v,"H2",{});var vx=l(mn);he=n(vx,"A",{href:!0,id:!0});var dx=l(he);$h=t(dx,"Fixing the bug"),dx.forEach(a),vx.forEach(a),qh=c(v),wn=n(v,"P",{});var yx=l(wn);Rh=t(yx,"To ensure the bug is fixed, I need to come up with a test."),yx.forEach(a),Mh=c(v),_n=n(v,"P",{});var ux=l(_n);Vh=t(ux,"Usually I come up with test cases that try to entail various scenario I can imagine."),ux.forEach(a),Wh=c(v),ve=n(v,"P",{});var Kn=l(ve);Nh=t(Kn,"In this example, we've manually tested the case where the "),Ra=n(Kn,"CODE",{class:!0});var fx=l(Ra);Bh=t(fx,"<select multiple {value} {...{}}>"),fx.forEach(a),Fh=t(Kn,", the value is set correctly during initialisation. but have we check the case where:"),Kn.forEach(a),Gh=c(v),de=n(v,"UL",{});var sl=l(de);fs=n(sl,"LI",{});var Mo=l(fs);Uh=t(Mo,"we update the value of "),Ma=n(Mo,"CODE",{class:!0});var xx=l(Ma);zh=t(xx,"value"),xx.forEach(a),Yh=t(Mo,", will the "),Va=n(Mo,"CODE",{class:!0});var gx=l(Va);Jh=t(gx,"<select>"),gx.forEach(a),Qh=t(Mo," get updated accordingly?"),Mo.forEach(a),Xh=c(sl),ye=n(sl,"LI",{});var el=l(ye);Zh=t(el,"if the value is overriden by the spreaded attribute, eg "),Wa=n(el,"CODE",{class:!0});var mx=l(Wa);Kh=t(mx,"<select mutliple {value} { ...{value: []} }>"),mx.forEach(a),sv=t(el,"?"),el.forEach(a),sl.forEach(a),ev=c(v),bn=n(v,"P",{});var wx=l(bn);tv=t(wx,"Ideally, the test cases come up should be failed before the fix, and passed after the fix."),wx.forEach(a),av=c(v),En=n(v,"P",{});var _x=l(En);ov=t(_x,"So here's the test case I came up:"),_x.forEach(a),nv=c(v),Na=n(v,"DIV",{class:!0});var dm=l(Na);dm.forEach(a),lv=c(v),Z=n(v,"P",{});var Ss=l(Z);rv=t(Ss,"I can check and uncheck the checkbox to change the value of "),Ba=n(Ss,"CODE",{class:!0});var bx=l(Ba);iv=t(bx,"value"),bx.forEach(a),cv=t(Ss," to verify the the "),Fa=n(Ss,"CODE",{class:!0});var Ex=l(Fa);pv=t(Ex,"value"),Ex.forEach(a),kv=t(Ss," is reactive, and "),Ga=n(Ss,"CODE",{class:!0});var Ix=l(Ga);hv=t(Ix,"<select>"),Ix.forEach(a),vv=t(Ss," will get updated accordingly."),Ss.forEach(a),dv=c(v),_=n(v,"P",{});var I=l(_);yv=t(I,"Besides that, I exported "),Ua=n(I,"CODE",{class:!0});var Ox=l(Ua);uv=t(Ox,"spread"),Ox.forEach(a),fv=t(I,", so that I can change the object to something object to contain "),za=n(I,"CODE",{class:!0});var Cx=l(za);xv=t(Cx,"value"),Cx.forEach(a),gv=t(I,", eg: "),Ya=n(I,"CODE",{class:!0});var Dx=l(Ya);mv=t(Dx,"{ value: [] }"),Dx.forEach(a),wv=t(I,", and see how "),Ja=n(I,"CODE",{class:!0});var Sx=l(Ja);_v=t(Sx,"<select>"),Sx.forEach(a),bv=t(I," will update accordingly. Make sure that our fix not just work with "),Qa=n(I,"CODE",{class:!0});var Px=l(Qa);Ev=t(Px,"value"),Px.forEach(a),Iv=t(I," attribute, and also when the "),Xa=n(I,"CODE",{class:!0});var Tx=l(Xa);Ov=t(Tx,"value"),Tx.forEach(a),Cv=t(I," is spreaded into "),Za=n(I,"CODE",{class:!0});var Ax=l(Za);Dv=t(Ax,"<select>"),Ax.forEach(a),Sv=t(I,"."),I.forEach(a),Pv=c(v),In=n(v,"P",{});var jx=l(In);Tv=t(jx,"You may think that we are familiar with our fix, we know what it will fix, what it will not fix, do we need think up and write all the edge cases?"),jx.forEach(a),Av=c(v),On=n(v,"P",{});var Hx=l(On);jv=t(Hx,"Well, I think you should. Future you will thank the present you when he encounter a fail test, that just mean his change may have an unintentional regression change. If you don't have the test case, the future you will never know what edge case he didn't accounted for."),Hx.forEach(a),Hv=c(v),K=n(v,"P",{});var Ps=l(K);Lv=t(Ps,"Runtime test cases are added into "),Ka=n(Ps,"CODE",{class:!0});var Lx=l(Ka);$v=t(Lx,"test/runtime/samples/"),Lx.forEach(a),qv=t(Ps,". Each folder represent 1 test case. Inside the folder, the component to be tested is named "),so=n(Ps,"CODE",{class:!0});var $x=l(so);Rv=t($x,"App.svelte"),$x.forEach(a),Mv=t(Ps,", and the test case is written "),eo=n(Ps,"CODE",{class:!0});var qx=l(eo);Vv=t(qx,"_config.js"),qx.forEach(a),Wv=t(Ps,"."),Ps.forEach(a),Nv=c(v),to=n(v,"P",{});var Hy=l(to);ao=n(Hy,"CODE",{class:!0});var Rx=l(ao);Bv=t(Rx,"_config.js"),Rx.forEach(a),Fv=t(Hy," default exports a object:"),Hy.forEach(a),Gv=c(v),oo=n(v,"DIV",{class:!0});var ym=l(oo);ym.forEach(a),Uv=c(v),ue=n(v,"P",{});var tl=l(ue);zv=t(tl,"An example of test case of unchecking the checkbox, and verify "),no=n(tl,"CODE",{class:!0});var Mx=l(no);Yv=t(Mx,"<select>"),Mx.forEach(a),Jv=t(tl," value get updated"),tl.forEach(a),Qv=c(v),lo=n(v,"DIV",{class:!0});var um=l(lo);um.forEach(a),Xv=c(v),fe=n(v,"P",{});var al=l(fe);Zv=t(al,"To run only this test, so that we can focus on ensuring the test case pass, we can set "),ro=n(al,"CODE",{class:!0});var Vx=l(ro);Kv=t(Vx,"solo: true"),Vx.forEach(a),sd=t(al,":"),al.forEach(a),ed=c(v),io=n(v,"DIV",{class:!0});var fm=l(io);fm.forEach(a),td=c(v),T=n(v,"P",{});var ss=l(T);Cn=n(ss,"STRONG",{});var Wx=l(Cn);ad=t(Wx,"Quick tip:"),Wx.forEach(a),od=t(ss," running "),co=n(ss,"CODE",{class:!0});var Nx=l(co);nd=t(Nx,"npm run test"),Nx.forEach(a),ld=t(ss," will build Svelte code first before executing the test. If you are like me, running "),po=n(ss,"CODE",{class:!0});var Bx=l(po);rd=t(Bx,"npm run dev"),Bx.forEach(a),id=t(ss," on the background, Svelte code is build on every code change. So, "),ko=n(ss,"CODE",{class:!0});var Fx=l(ko);cd=t(Fx,"npm run quicktest"),Fx.forEach(a),pd=t(ss," would allow you to skip the "),ho=n(ss,"CODE",{class:!0});var Gx=l(ho);kd=t(Gx,"pretest"),Gx.forEach(a),hd=t(ss," build, and run the test suite immediately."),ss.forEach(a),vd=c(v),xe=n(v,"P",{});var ol=l(xe);dd=t(ol,"With the test, I realised that I didn't handle the case when the "),vo=n(ol,"CODE",{class:!0});var Ux=l(vo);yd=t(Ux,"value"),Ux.forEach(a),ud=t(ol," is updated."),ol.forEach(a),fd=c(v),ge=n(v,"P",{});var nl=l(ge);xd=t(nl,"So I guess what I needed to do is to add the same code in the "),yo=n(nl,"CODE",{class:!0});var zx=l(yo);gd=t(zx,"p()"),zx.forEach(a),md=t(nl," (update) method too!"),nl.forEach(a),wd=c(v),uo=n(v,"DIV",{class:!0});var xm=l(uo);xm.forEach(a),_d=c(v),me=n(v,"P",{});var ll=l(me);bd=t(ll,"Well, of course in this way, the "),fo=n(ll,"CODE",{class:!0});var Yx=l(fo);Ed=t(Yx,"select_options"),Yx.forEach(a),Id=t(ll," get executed unconditionally whenever any variable is updated."),ll.forEach(a),Od=c(v),P=n(v,"P",{});var F=l(P);Cd=t(F,"I need to make sure that the "),xo=n(F,"CODE",{class:!0});var Jx=l(xo);Dd=t(Jx,"select_options(...)"),Jx.forEach(a),Sd=t(F," inside the "),go=n(F,"CODE",{class:!0});var Qx=l(go);Pd=t(Qx,"p()"),Qx.forEach(a),Td=t(F," method get executed only when the value of "),mo=n(F,"CODE",{class:!0});var Xx=l(mo);Ad=t(Xx,"value"),Xx.forEach(a),jd=t(F," changes, and also probably when "),wo=n(F,"CODE",{class:!0});var Zx=l(wo);Hd=t(Zx,"spread"),Zx.forEach(a),Ld=t(F," changes too, because it could potentially override the value of "),_o=n(F,"CODE",{class:!0});var Kx=l(_o);$d=t(Kx,"value"),Kx.forEach(a),qd=t(F,"."),F.forEach(a),Rd=c(v),we=n(v,"P",{});var rl=l(we);Md=t(rl,"If you've read "),bo=n(rl,"A",{href:!0});var sg=l(bo);Vd=t(sg,"Compile Svelte in your Head - Bitmask in Svelte"),sg.forEach(a),Wd=t(rl,", you know that Svelte uses bitmask to check any variable changes."),rl.forEach(a),Nd=c(v),Dn=n(v,"P",{});var eg=l(Dn);Bd=t(eg,"How do I know what is the bitmask to use in this case, well I dont have to."),eg.forEach(a),Fd=c(v),_e=n(v,"P",{});var il=l(_e);Gd=t(il,"I can use "),be=n(il,"A",{href:!0,rel:!0});var tg=l(be);Eo=n(tg,"CODE",{class:!0});var ag=l(Eo);Ud=t(ag,"renderer.dirty(dependencies)"),ag.forEach(a),tg.forEach(a),zd=t(il," to help me with that:"),il.forEach(a),Yd=c(v),Io=n(v,"DIV",{class:!0});var gm=l(Io);gm.forEach(a),Jd=c(v),Sn=n(v,"P",{});var og=l(Sn);Qd=t(og,"Next, I need to figure out what are the dependencies to be included. In this particular case, the dependencies of all attributes have to be taken consideration, because it is hard to tell which one would be eventually applied due to the spread attribute."),og.forEach(a),Xd=c(v),Oo=n(v,"DIV",{class:!0});var mm=l(Oo);mm.forEach(a),Zd=c(v),Pn=n(v,"P",{});var ng=l(Pn);Kd=t(ng,"After a few tweaks, finally I passed all my test cases, and its time to create a pull request!"),ng.forEach(a),v.forEach(a),Mn=c(y),m=n(y,"SECTION",{});var O=l(m);Tn=n(O,"H2",{});var lg=l(Tn);Ee=n(lg,"A",{href:!0,id:!0});var rg=l(Ee);sy=t(rg,"Submitting the fix"),rg.forEach(a),lg.forEach(a),ey=c(O),xs=n(O,"P",{});var Vo=l(xs);ty=t(Vo,"Before pushing the fix to remote, it is important to make sure that all the lints and typescript definitions are correct. You can run "),Co=n(Vo,"CODE",{class:!0});var ig=l(Co);ay=t(ig,"npm run lint --fixed"),ig.forEach(a),oy=t(Vo," for linting, and "),Do=n(Vo,"CODE",{class:!0});var cg=l(Do);ny=t(cg,"npm run tsd"),cg.forEach(a),ly=t(Vo," to generate typescript definition."),Vo.forEach(a),ry=c(O),Ie=n(O,"P",{});var cl=l(Ie);iy=t(cl,"If you are unsure on how to create a pull request, you can check out "),Oe=n(cl,"A",{href:!0,rel:!0});var pg=l(Oe);cy=t(pg,"How to make your first pull request on GitHub"),pg.forEach(a),py=t(cl,"."),cl.forEach(a),ky=c(O),Ce=n(O,"P",{});var pl=l(Ce);hy=t(pl,"I pushed my branch and created a "),De=n(pl,"A",{href:!0,rel:!0});var kg=l(De);vy=t(kg,"Pull Request to Svelte"),kg.forEach(a),dy=t(pl,", and now I am waiting for feedback and for it to get merged."),pl.forEach(a),yy=c(O),An=n(O,"P",{});var hg=l(An);uy=t(hg,"Svelte is not maintained by full-time maintainers, everyone has their full-time job, so please be patient and be nice."),hg.forEach(a),fy=c(O),xy=n(O,"HR",{}),gy=c(O),Se=n(O,"P",{});var kl=l(Se);my=t(kl,"If you wish to learn more about Svelte, "),Pe=n(kl,"A",{href:!0,rel:!0});var vg=l(Pe);wy=t(vg,"follow me on Twitter"),vg.forEach(a),_y=t(kl,"."),kl.forEach(a),by=c(O),Te=n(O,"P",{});var hl=l(Te);Ey=t(hl,"If you have anything unclear about this article, find me on "),Ae=n(hl,"A",{href:!0,rel:!0});var dg=l(Ae);Iy=t(dg,"Twitter"),dg.forEach(a),Oy=t(hl," too!"),hl.forEach(a),O.forEach(a),this.h()},h(){r(A,"href","#background"),r(A,"id","background"),r(js,"href","https://svelte.dev/chat"),r(js,"rel","nofollow"),r(qe,"href","/the-svelte-compiler-handbook/"),r(Ls,"href","#the-story-begins"),r(Ls,"id","the-story-begins"),r(qs,"href","https://github.com/sveltejs/svelte/issues?q=is%3Aopen+is%3Aissue+label%3Abug"),r(qs,"rel","nofollow"),r(Rs,"href","https://github.com/sveltejs/svelte/issues/4392"),r(Rs,"rel","nofollow"),r(Me,"class","inline"),r(Ve,"class","code-section"),r(Ws,"href","https://svelte.dev/repl/99bd5ebecc464e328972252e287ab716?version=3.18.1"),r(Ws,"rel","nofollow"),r(Ns,"href","#verifying-the-bug"),r(Ns,"id","verifying-the-bug"),r(We,"class","inline"),r(Ne,"class","inline"),r(Be,"class","inline"),r(Fe,"class","inline"),r(Ge,"class","inline"),r(Ue,"class","inline"),r(ze,"class","inline"),r(Bs,"href","https://github.com/Conduitry"),r(Bs,"rel","nofollow"),r(Fs,"href","https://github.com/sveltejs/svelte/issues/3680"),r(Fs,"rel","nofollow"),r(Gs,"href","https://github.com/sveltejs/svelte/issues/3680"),r(Gs,"rel","nofollow"),r(Us,"href","https://github.com/sveltejs/svelte/pull/4398"),r(Us,"rel","nofollow"),r(zs,"href","https://github.com/sveltejs/svelte/issues/3680"),r(zs,"rel","nofollow"),r(Ys,"href","#investigating-the-bug"),r(Ys,"id","investigating-the-bug"),r(Ye,"class","inline"),r(Js,"href","https://github.com/sveltejs/template"),r(Js,"rel","nofollow"),r(Je,"class","inline"),r(Qe,"class","inline"),r(Xe,"class","inline"),r(Ze,"class","code-section"),r(Ke,"class","inline"),r(st,"class","inline"),r(Xs,"href","https://www.npmjs.com/package/http-server"),r(Xs,"rel","nofollow"),r(et,"class","inline"),r(tt,"class","inline"),r(at,"class","inline"),r(ot,"class","inline"),r(nt,"class","inline"),r(lt,"class","inline"),r(rt,"class","inline"),r(it,"class","inline"),r(ct,"class","code-section"),r(pt,"class","code-section"),r(kt,"href","/compile-svelte-in-your-head-part-1/"),r(ht,"class","code-section"),r(vt,"class","code-section"),r(dt,"class","inline"),r(yt,"class","code-section"),r(ut,"class","inline"),r(ft,"class","inline"),r(xt,"class","inline"),r(gt,"class","code-section"),r(mt,"class","inline"),r(wt,"class","inline"),r(_t,"class","inline"),r(kn,"type","image/webp"),r(kn,"srcset",$m+", "+Lm+" 2x"),Am(R.src,$y=fg)||r(R,"src",$y),r(R,"srcset",fg+", "+qm+" 2x"),r(R,"loading","lazy"),Ts(R,"position","absolute"),Ts(R,"top","0"),Ts(R,"width","100%"),Ts(R,"height","100%"),r(R,"alt","Fixed"),Ts(hs,"display","block"),Ts(hs,"position","relative"),Ts(hs,"padding-top","58.266%"),Ts(hs,"width","100%"),r(Et,"class","inline"),r(It,"class","inline"),r(Ot,"class","inline"),r(Ct,"class","inline"),r(Dt,"class","inline"),r(ae,"href","https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/runtime/internal/dom.ts#L221-L226"),r(ae,"rel","nofollow"),r(St,"class","code-section"),r(Pt,"class","inline"),r(Tt,"class","inline"),r(At,"class","code-section"),r(jt,"class","inline"),r(Ht,"class","inline"),r(Lt,"class","code-section"),r($t,"class","inline"),r(qt,"class","inline"),r(Rt,"class","inline"),r(Mt,"class","code-section"),r(Vt,"class","inline"),r(oe,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates"),r(oe,"rel","nofollow"),r(Wt,"class","inline"),r(Nt,"class","inline"),r(ne,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),r(ne,"rel","nofollow"),r(Bt,"class","inline"),r(le,"href","https://www.npmjs.com/package/code-red"),r(le,"rel","nofollow"),r(Ft,"class","inline"),r(Gt,"class","inline"),r(zt,"class","inline"),r(Jt,"class","inline"),r(Xt,"class","inline"),r(Zt,"class","code-section"),r(Kt,"class","inline"),r(sa,"class","inline"),r(re,"href","https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/compiler/compile/Component.ts#L245-L264"),r(re,"rel","nofollow"),r(ea,"class","inline"),r(ta,"class","code-section"),r(aa,"class","code-section"),r(oa,"class","inline"),r(na,"class","inline"),r(la,"class","inline"),r(ra,"class","code-section"),r(ia,"class","inline"),r(ca,"class","inline"),r(pa,"class","inline"),r(ka,"class","inline"),r(ha,"class","code-section"),r(va,"class","code-section"),r(pe,"href","https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/compiler/compile/render_dom/wrappers/Element/index.ts#L642-L659"),r(pe,"rel","nofollow"),r(ya,"class","code-section"),r(ua,"class","inline"),r(fa,"class","inline"),r(xa,"class","inline"),r(ga,"class","inline"),r(ma,"class","inline"),r(wa,"class","inline"),r(_a,"class","inline"),r(ba,"class","code-section"),r(Ea,"href","/the-svelte-compiler-handbook/#dom-renderer"),r(Ia,"class","inline"),r(Ca,"class","inline"),r(Oa,"href","/compile-svelte-in-your-head-part-1/#create_fragment"),r(Da,"class","inline"),r(Sa,"href","/compile-svelte-in-your-head-part-1/#create_fragment"),r(Pa,"class","inline"),r(Ta,"class","inline"),r(Aa,"class","inline"),r(ja,"class","inline"),r(Ha,"class","code-section"),r(La,"class","inline"),r($a,"class","inline"),r(qa,"class","inline"),r(he,"href","#fixing-the-bug"),r(he,"id","fixing-the-bug"),r(Ra,"class","inline"),r(Ma,"class","inline"),r(Va,"class","inline"),r(Wa,"class","inline"),r(Na,"class","code-section"),r(Ba,"class","inline"),r(Fa,"class","inline"),r(Ga,"class","inline"),r(Ua,"class","inline"),r(za,"class","inline"),r(Ya,"class","inline"),r(Ja,"class","inline"),r(Qa,"class","inline"),r(Xa,"class","inline"),r(Za,"class","inline"),r(Ka,"class","inline"),r(so,"class","inline"),r(eo,"class","inline"),r(ao,"class","inline"),r(oo,"class","code-section"),r(no,"class","inline"),r(lo,"class","code-section"),r(ro,"class","inline"),r(io,"class","code-section"),r(co,"class","inline"),r(po,"class","inline"),r(ko,"class","inline"),r(ho,"class","inline"),r(vo,"class","inline"),r(yo,"class","inline"),r(uo,"class","code-section"),r(fo,"class","inline"),r(xo,"class","inline"),r(go,"class","inline"),r(mo,"class","inline"),r(wo,"class","inline"),r(_o,"class","inline"),r(bo,"href","/compile-svelte-in-your-head-part-2/#bitmask-in-svelte"),r(Eo,"class","inline"),r(be,"href","https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/compiler/compile/render_dom/Renderer.ts#L206"),r(be,"rel","nofollow"),r(Io,"class","code-section"),r(Oo,"class","code-section"),r(Ee,"href","#submitting-the-fix"),r(Ee,"id","submitting-the-fix"),r(Co,"class","inline"),r(Do,"class","inline"),r(Oe,"href","https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/"),r(Oe,"rel","nofollow"),r(De,"href","https://github.com/sveltejs/svelte/pull/4894"),r(De,"rel","nofollow"),r(Pe,"href","https://twitter.com/lihautan"),r(Pe,"rel","nofollow"),r(Ae,"href","https://twitter.com/lihautan"),r(Ae,"rel","nofollow")},m(y,u){es(y,d,u),s(d,q),s(q,A),s(A,As),s(d,x),s(d,j),s(j,Le),s(d,vl),s(d,Wo),s(Wo,dl),s(d,yl),s(d,ls),s(ls,$e),s($e,ul),s($e,js),s(js,fl),s(ls,xl),s(ls,No),s(No,gl),s(ls,ml),s(ls,Bo),s(Bo,wl),s(d,_l),s(d,Hs),s(Hs,bl),s(Hs,qe),s(qe,El),s(Hs,Il),s(d,Ol),s(d,Fo),s(Fo,Cl),s(d,Dl),s(d,Go),s(Go,Sl),s(d,Pl),s(d,Uo),s(Uo,Tl),s(d,Al),s(d,zo),s(zo,jl),es(y,Ln,u),es(y,g,u),s(g,Yo),s(Yo,Ls),s(Ls,Hl),s(g,Ll),s(g,$s),s($s,$l),s($s,qs),s(qs,ql),s($s,Rl),s(g,Ml),s(g,Vl),s(g,Wl),s(g,Jo),s(Jo,Re),s(Re,Nl),s(Re,Rs),s(Rs,Bl),s(g,Fl),s(g,Ms),s(Ms,Gl),s(Ms,Me),s(Me,Ul),s(Ms,zl),s(g,Yl),s(g,Ve),Ve.innerHTML=gg,s(g,Jl),s(g,Vs),s(Vs,Ql),s(Vs,Ws),s(Ws,Xl),s(Vs,Zl),s(g,Kl),s(g,sr),es(y,$n,u),es(y,b,u),s(b,Qo),s(Qo,Ns),s(Ns,er),s(b,tr),s(b,Xo),s(Xo,ar),s(b,or),s(b,C),s(C,nr),s(C,We),s(We,lr),s(C,rr),s(C,Ne),s(Ne,ir),s(C,cr),s(C,Be),s(Be,pr),s(C,kr),s(C,Fe),s(Fe,hr),s(C,vr),s(C,Ge),s(Ge,dr),s(C,yr),s(b,ur),s(b,G),s(G,fr),s(G,Ue),s(Ue,xr),s(G,gr),s(G,Zo),s(Zo,mr),s(G,wr),s(G,ze),s(ze,_r),s(G,br),s(b,Er),s(b,H),s(H,Ir),s(H,Bs),s(Bs,Or),s(H,Cr),s(H,Ko),s(Ko,Dr),s(H,Sr),s(H,Fs),s(Fs,Pr),s(H,Tr),s(H,Gs),s(Gs,Ar),s(H,jr),s(b,Hr),s(b,rs),s(rs,Lr),s(rs,Us),s(Us,$r),s(rs,qr),s(rs,zs),s(zs,Rr),s(rs,Mr),es(y,qn,u),es(y,p,u),s(p,sn),s(sn,Ys),s(Ys,Vr),s(p,Wr),s(p,en),s(en,Nr),s(p,Br),s(p,D),s(D,Fr),s(D,Ye),s(Ye,Gr),s(D,Ur),s(D,Js),s(Js,zr),s(D,Yr),s(D,Je),s(Je,Jr),s(D,Qr),s(D,Qe),s(Qe,Xr),s(D,Zr),s(D,Xe),s(Xe,Kr),s(D,si),s(p,ei),s(p,Ze),Ze.innerHTML=mg,s(p,ti),s(p,Qs),s(Qs,ai),s(Qs,Ke),s(Ke,oi),s(Qs,ni),s(p,li),s(p,L),s(L,ri),s(L,tn),s(tn,ii),s(L,ci),s(L,st),s(st,pi),s(L,ki),s(L,Xs),s(Xs,hi),s(L,vi),s(L,et),s(et,di),s(L,yi),s(p,ui),s(p,is),s(is,cs),s(cs,fi),s(cs,tt),s(tt,xi),s(cs,gi),s(cs,at),s(at,mi),s(cs,wi),s(is,_i),s(is,an),s(an,bi),s(is,Ei),s(is,ts),s(ts,Ii),s(ts,ot),s(ot,Oi),s(ts,Ci),s(ts,nt),s(nt,Di),s(ts,Si),s(ts,lt),s(lt,Pi),s(p,Ti),s(p,ps),s(ps,Ai),s(ps,rt),s(rt,ji),s(ps,Hi),s(ps,it),s(it,Li),s(ps,$i),s(p,qi),s(p,ct),ct.innerHTML=wg,s(p,Ri),s(p,on),s(on,Mi),s(p,Vi),s(p,pt),pt.innerHTML=_g,s(p,Wi),s(p,Zs),s(Zs,Ni),s(Zs,kt),s(kt,Bi),s(Zs,Fi),s(p,Gi),s(p,nn),s(nn,Ui),s(p,zi),s(p,ht),ht.innerHTML=bg,s(p,Yi),s(p,ln),s(ln,Ji),s(p,Qi),s(p,vt),vt.innerHTML=Eg,s(p,Xi),s(p,Ks),s(Ks,Zi),s(Ks,dt),s(dt,Ki),s(Ks,sc),s(p,ec),s(p,rn),s(rn,tc),s(p,ac),s(p,yt),yt.innerHTML=Ig,s(p,oc),s(p,ks),s(ks,nc),s(ks,ut),s(ut,lc),s(ks,rc),s(ks,ft),s(ft,ic),s(ks,cc),s(p,pc),s(p,se),s(se,kc),s(se,xt),s(xt,hc),s(se,vc),s(p,dc),s(p,gt),gt.innerHTML=Og,s(p,yc),s(p,U),s(U,uc),s(U,mt),s(mt,fc),s(U,xc),s(U,wt),s(wt,gc),s(U,mc),s(U,_t),s(_t,wc),s(U,_c),s(p,bc),s(p,cn),s(cn,Ec),s(p,Ic),s(p,pn),s(pn,hs),s(hs,bt),s(bt,kn),s(bt,R),s(p,Oc),s(p,ee),s(ee,Cc),s(ee,Et),s(Et,Dc),s(ee,Sc),s(p,Pc),s(p,hn),s(hn,Tc),s(p,Ac),s(p,te),s(te,jc),s(te,vn),s(vn,Hc),s(te,Lc),s(p,$c),s(p,vs),s(vs,dn),s(dn,It),s(It,qc),s(vs,Rc),s(vs,yn),s(yn,Ot),s(Ot,Mc),s(vs,Vc),s(vs,un),s(un,Ct),s(Ct,Wc),s(p,Nc),s(p,ms),s(ms,Bc),s(ms,Dt),s(Dt,Fc),s(ms,Gc),s(ms,ae),s(ae,Uc),s(p,zc),s(p,St),St.innerHTML=Cg,s(p,Yc),s(p,ds),s(ds,Jc),s(ds,Pt),s(Pt,Qc),s(ds,Xc),s(ds,Tt),s(Tt,Zc),s(ds,Kc),s(p,sp),s(p,At),At.innerHTML=Dg,s(p,ep),s(p,ws),s(ws,tp),s(ws,jt),s(jt,ap),s(ws,op),s(ws,Ht),s(Ht,np),s(p,lp),s(p,Lt),Lt.innerHTML=Sg,s(p,rp),s(p,fn),s(fn,ip),s(p,cp),s(p,z),s(z,pp),s(z,$t),s($t,kp),s(z,hp),s(z,qt),s(qt,vp),s(z,dp),s(z,Rt),s(Rt,yp),s(z,up),s(p,fp),s(p,Mt),Mt.innerHTML=Pg,s(p,xp),s(p,S),s(S,gp),s(S,Vt),s(Vt,mp),s(S,wp),s(S,oe),s(oe,_p),s(S,bp),s(S,Wt),s(Wt,Ep),s(S,Ip),s(S,Nt),s(Nt,Op),s(S,Cp),s(S,ne),s(ne,Dp),s(S,Sp),s(p,Pp),s(p,$),s($,Tp),s($,Bt),s(Bt,Ap),s($,jp),s($,le),s(le,Hp),s($,Lp),s($,Ft),s(Ft,$p),s($,qp),s($,Gt),s(Gt,Rp),s($,Mp),s(p,Vp),s(p,ys),s(ys,Ut),s(Ut,zt),s(zt,Wp),s(Ut,Np),s(ys,Bp),s(ys,Yt),s(Yt,Jt),s(Jt,Fp),s(Yt,Gp),s(ys,Up),s(ys,Qt),s(Qt,Xt),s(Xt,zp),s(Qt,Yp),s(p,Jp),s(p,xn),s(xn,Qp),s(p,Xp),s(p,Zt),Zt.innerHTML=Tg,s(p,Zp),s(p,M),s(M,Kt),s(Kt,Kp),s(M,sk),s(M,sa),s(sa,ek),s(M,tk),s(M,re),s(re,ak),s(M,ok),s(M,ea),s(ea,nk),s(M,lk),s(p,rk),s(p,ta),ta.innerHTML=Ag,s(p,ik),s(p,gn),s(gn,ck),s(p,pk),s(p,aa),aa.innerHTML=jg,s(p,kk),s(p,Y),s(Y,hk),s(Y,oa),s(oa,vk),s(Y,dk),s(Y,na),s(na,yk),s(Y,uk),s(Y,la),s(la,fk),s(Y,xk),s(p,gk),s(p,ra),ra.innerHTML=Hg,s(p,mk),s(p,ie),s(ie,wk),s(ie,ia),s(ia,_k),s(ie,bk),s(p,Ek),s(p,ce),s(ce,Ik),s(ce,ca),s(ca,Ok),s(ce,Ck),s(p,Dk),s(p,us),s(us,Sk),s(us,pa),s(pa,Pk),s(us,Tk),s(us,ka),s(ka,Ak),s(us,jk),s(p,Hk),s(p,ha),ha.innerHTML=Lg,s(p,Lk),s(p,va),va.innerHTML=$g,s(p,$k),s(p,da),s(da,qk),s(da,pe),s(pe,Rk),s(p,Mk),s(p,ya),ya.innerHTML=qg,s(p,Vk),s(p,J),s(J,Wk),s(J,ua),s(ua,Nk),s(J,Bk),s(J,fa),s(fa,Fk),s(J,Gk),s(J,xa),s(xa,Uk),s(J,zk),s(p,Yk),s(p,Q),s(Q,Jk),s(Q,ga),s(ga,Qk),s(Q,Xk),s(Q,ma),s(ma,Zk),s(Q,Kk),s(Q,wa),s(wa,sh),s(Q,eh),s(p,th),s(p,ke),s(ke,ah),s(ke,_a),s(_a,oh),s(ke,nh),s(p,lh),s(p,ba),ba.innerHTML=Rg,s(p,rh),s(p,f),s(f,ih),s(f,Ea),s(Ea,ch),s(f,ph),s(f,Ia),s(Ia,kh),s(f,hh),s(f,Oa),s(Oa,Ca),s(Ca,vh),s(f,dh),s(f,Da),s(Da,yh),s(f,uh),s(f,Sa),s(Sa,fh),s(f,xh),s(f,Pa),s(Pa,gh),s(f,mh),s(f,Ta),s(Ta,wh),s(f,_h),s(f,Aa),s(Aa,bh),s(f,Eh),s(f,ja),s(ja,Ih),s(f,Oh),s(p,Ch),s(p,Ha),Ha.innerHTML=Mg,s(p,Dh),s(p,X),s(X,Sh),s(X,La),s(La,Ph),s(X,Th),s(X,$a),s($a,Ah),s(X,jh),s(X,qa),s(qa,Hh),s(X,Lh),es(y,Rn,u),es(y,h,u),s(h,mn),s(mn,he),s(he,$h),s(h,qh),s(h,wn),s(wn,Rh),s(h,Mh),s(h,_n),s(_n,Vh),s(h,Wh),s(h,ve),s(ve,Nh),s(ve,Ra),s(Ra,Bh),s(ve,Fh),s(h,Gh),s(h,de),s(de,fs),s(fs,Uh),s(fs,Ma),s(Ma,zh),s(fs,Yh),s(fs,Va),s(Va,Jh),s(fs,Qh),s(de,Xh),s(de,ye),s(ye,Zh),s(ye,Wa),s(Wa,Kh),s(ye,sv),s(h,ev),s(h,bn),s(bn,tv),s(h,av),s(h,En),s(En,ov),s(h,nv),s(h,Na),Na.innerHTML=Vg,s(h,lv),s(h,Z),s(Z,rv),s(Z,Ba),s(Ba,iv),s(Z,cv),s(Z,Fa),s(Fa,pv),s(Z,kv),s(Z,Ga),s(Ga,hv),s(Z,vv),s(h,dv),s(h,_),s(_,yv),s(_,Ua),s(Ua,uv),s(_,fv),s(_,za),s(za,xv),s(_,gv),s(_,Ya),s(Ya,mv),s(_,wv),s(_,Ja),s(Ja,_v),s(_,bv),s(_,Qa),s(Qa,Ev),s(_,Iv),s(_,Xa),s(Xa,Ov),s(_,Cv),s(_,Za),s(Za,Dv),s(_,Sv),s(h,Pv),s(h,In),s(In,Tv),s(h,Av),s(h,On),s(On,jv),s(h,Hv),s(h,K),s(K,Lv),s(K,Ka),s(Ka,$v),s(K,qv),s(K,so),s(so,Rv),s(K,Mv),s(K,eo),s(eo,Vv),s(K,Wv),s(h,Nv),s(h,to),s(to,ao),s(ao,Bv),s(to,Fv),s(h,Gv),s(h,oo),oo.innerHTML=Wg,s(h,Uv),s(h,ue),s(ue,zv),s(ue,no),s(no,Yv),s(ue,Jv),s(h,Qv),s(h,lo),lo.innerHTML=Ng,s(h,Xv),s(h,fe),s(fe,Zv),s(fe,ro),s(ro,Kv),s(fe,sd),s(h,ed),s(h,io),io.innerHTML=Bg,s(h,td),s(h,T),s(T,Cn),s(Cn,ad),s(T,od),s(T,co),s(co,nd),s(T,ld),s(T,po),s(po,rd),s(T,id),s(T,ko),s(ko,cd),s(T,pd),s(T,ho),s(ho,kd),s(T,hd),s(h,vd),s(h,xe),s(xe,dd),s(xe,vo),s(vo,yd),s(xe,ud),s(h,fd),s(h,ge),s(ge,xd),s(ge,yo),s(yo,gd),s(ge,md),s(h,wd),s(h,uo),uo.innerHTML=Fg,s(h,_d),s(h,me),s(me,bd),s(me,fo),s(fo,Ed),s(me,Id),s(h,Od),s(h,P),s(P,Cd),s(P,xo),s(xo,Dd),s(P,Sd),s(P,go),s(go,Pd),s(P,Td),s(P,mo),s(mo,Ad),s(P,jd),s(P,wo),s(wo,Hd),s(P,Ld),s(P,_o),s(_o,$d),s(P,qd),s(h,Rd),s(h,we),s(we,Md),s(we,bo),s(bo,Vd),s(we,Wd),s(h,Nd),s(h,Dn),s(Dn,Bd),s(h,Fd),s(h,_e),s(_e,Gd),s(_e,be),s(be,Eo),s(Eo,Ud),s(_e,zd),s(h,Yd),s(h,Io),Io.innerHTML=Gg,s(h,Jd),s(h,Sn),s(Sn,Qd),s(h,Xd),s(h,Oo),Oo.innerHTML=Ug,s(h,Zd),s(h,Pn),s(Pn,Kd),es(y,Mn,u),es(y,m,u),s(m,Tn),s(Tn,Ee),s(Ee,sy),s(m,ey),s(m,xs),s(xs,ty),s(xs,Co),s(Co,ay),s(xs,oy),s(xs,Do),s(Do,ny),s(xs,ly),s(m,ry),s(m,Ie),s(Ie,iy),s(Ie,Oe),s(Oe,cy),s(Ie,py),s(m,ky),s(m,Ce),s(Ce,hy),s(Ce,De),s(De,vy),s(Ce,dy),s(m,yy),s(m,An),s(An,uy),s(m,fy),s(m,xy),s(m,gy),s(m,Se),s(Se,my),s(Se,Pe),s(Pe,wy),s(Se,_y),s(m,by),s(m,Te),s(Te,Ey),s(Te,Ae),s(Ae,Iy),s(Te,Oy)},p:jm,d(y){y&&a(d),y&&a(Ln),y&&a(g),y&&a($n),y&&a(b),y&&a(qn),y&&a(p),y&&a(Rn),y&&a(h),y&&a(Mn),y&&a(m)}}}function Vm(He){let d,q;const A=[He[0],xg];let As={$$slots:{default:[Mm]},$$scope:{ctx:He}};for(let x=0;x<A.length;x+=1)As=Ly(As,A[x]);return d=new Hm({props:As}),{c(){Em(d.$$.fragment)},l(x){Im(d.$$.fragment,x)},m(x,j){Om(d,x,j),q=!0},p(x,[j]){const Le=j&1?Cm(A,[j&1&&yg(x[0]),j&0&&yg(xg)]):{};j&2&&(Le.$$scope={dirty:j,ctx:x}),d.$set(Le)},i(x){q||(Dm(d.$$.fragment,x),q=!0)},o(x){Sm(d.$$.fragment,x),q=!1},d(x){Pm(d,x)}}}const xg={title:"Contributing to Svelte - Fixing issue #4392",date:"2020-05-23T08:00:00Z",tags:["Svelte","JavaScript","Open Source"],series:"Contributing to Svelte",description:"I am going to tell you an anecdote on how I investigated and fixed a bug in Svelte. I documented down my train of thoughts as detailed as possible. I hope this gives anyone who is reading, a glimpse on how to work on the Svelte source code.",label:"blog",tableOfContents:[{link:"background",title:"Background"},{link:"the-story-begins",title:"The story begins"},{link:"verifying-the-bug",title:"Verifying the bug"},{link:"investigating-the-bug",title:"Investigating the bug"},{link:"fixing-the-bug",title:"Fixing the bug"},{link:"submitting-the-fix",title:"Submitting the fix"}]};function Wm(He,d,q){return Tm("blog",{image:Rm}),He.$$set=A=>{q(0,d=Ly(Ly({},d),ug(A)))},d=ug(d),[d]}class zm extends wm{constructor(d){super();_m(this,d,Wm,Vm,bm,{})}}export{zm as default,xg as metadata};
