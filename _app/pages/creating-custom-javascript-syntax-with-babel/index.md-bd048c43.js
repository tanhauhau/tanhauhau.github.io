import{S as p_,i as h_,s as d_,C as hg,w as k_,x as u_,y as v_,z as y_,A as o1,q as f_,o as b_,B as m_,r as g_,Y as a1,e as a,t as s,k as i,c as n,a as r,h as t,d as o,m as c,b as l,X as zi,f as y,g as x,H as e,J as x_}from"../../chunks/vendor-da4388d4.js";import{B as w_}from"../../chunks/BlogLayout-14cfab6f.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var E_="https://lihautan.com/_app/assets/custom-parser-7e007a61.gif",n1="https://lihautan.com/_app/assets/custom-parser-8dacdaf1.gif",__="https://lihautan.com/_app/assets/curry-function-80c5079a.webp",T_="https://lihautan.com/_app/assets/curry-function-8da89c90.webp",I_="https://lihautan.com/_app/assets/curry-function-7763bc7d.png",r1="https://lihautan.com/_app/assets/curry-function-40bd348b.png",C_="https://lihautan.com/_app/assets/generator-function-2beb2653.webp",O_="https://lihautan.com/_app/assets/generator-function-4f1730da.webp",D_="https://lihautan.com/_app/assets/generator-function-9056969f.png",l1="https://lihautan.com/_app/assets/generator-function-a2553bf5.png",A_="https://lihautan.com/_app/assets/forking-d6a0339f.webp",P_="https://lihautan.com/_app/assets/forking-de059522.webp",S_="https://lihautan.com/_app/assets/forking-70fa361c.png",i1="https://lihautan.com/_app/assets/forking-2f29a6a7.png",L_="https://lihautan.com/_app/assets/hero-twitter-03484d5c.jpg";function j_(oo){let C,me,K,vs,S,Q,g,hr,ys,Ji,Gi,dr,Xi,Yi,ao,p1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// &#39;@@&#39; makes the function &#96;foo&#96; curried</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> @@ </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)(</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 6</span></span></code></pre>`,$i,j,Zi,fs,Ki,Qi,no,ec,sc,bs,tc,oc,ro,ac,nc,lo,rc,lc,io,ic,cc,co,pc,hc,dc,le,kc,ms,uc,vc,po,yc,fc,ho,bc,mc,gc,ko,h1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 6</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">bar</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// (n) =&gt; 1 + 2 + n</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">bar</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 6</span></span></code></pre>`,xc,kr,M,wc,uo,Ec,_c,vo,Tc,Ic,yo,Cc,Oc,fo,Dc,Ac,gs,Pc,Sc,bo,Lc,jc,Mc,ur,Hc,qc,xs,vr,Nc,Fc,yr,Uc,Rc,fr,Wc,Bc,br,Vc,Yl,O,mr,ws,zc,Jc,Es,Gc,_s,Xc,Yc,$c,gr,Oe,mo,xr,V,dg,Zc,wr,Kc,Qc,Ts,ep,Is,sp,tp,op,go,d1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git clone https://github.com/tanhauhau/babel.git</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># set up</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ </span><span style="color: var(--shiki-token-function)">cd</span><span style="color: var(--shiki-color-text)"> babel</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ make bootstrap</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ make build</span></span></code></pre>`,ap,Er,np,rp,z,lp,xo,ip,cp,wo,pp,hp,Eo,dp,kp,_o,up,vp,yp,To,k1='<pre class="prism language-yml"><code><div class="line"><span class="token punctuation">-</span> doc</div><div class="line"><span class="token punctuation">-</span> packages</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>core</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>parser</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>plugin<span class="token punctuation">-</span>transform<span class="token punctuation">-</span>react<span class="token punctuation">-</span>jsx</div><div class="line">  <span class="token punctuation">-</span> <span class="token punctuation">...</span></div><div class="line"><span class="token punctuation">-</span> Gulpfile.js</div><div class="line"><span class="token punctuation">-</span> Makefile</div><div class="line"><span class="token punctuation">-</span> <span class="token punctuation">...</span></div></code></pre>',fp,_r,Tr,bp,$l,H,Ir,Cs,mp,gp,De,xp,Os,wp,Ep,Ds,_p,Tp,Ip,Cr,Cp,Op,Ae,Ke,Dp,Io,Ap,Pp,Co,Sp,Lp,ge,jp,Or,Mp,Hp,Dr,qp,Np,Oo,Fp,Up,Pe,Rp,Ar,Wp,Bp,As,Vp,zp,Jp,Se,Gp,Ps,Xp,Yp,Ss,$p,Zp,Kp,Pr,Sr,Qp,Zl,h,Lr,Ls,eh,sh,js,th,Do,oh,ah,nh,Ao,u1=`<pre class="prism language-"><code><span class="line">- src/</span>
<span class="line">  - tokenizer/</span>
<span class="line">  - parser/</span>
<span class="line">  - plugins/</span>
<span class="line">    - jsx/</span>
<span class="line">    - typescript/</span>
<span class="line">    - flow/</span>
<span class="line">    - ...</span>
<span class="line">- test/</span></code></pre>`,rh,F,lh,jr,ih,ch,Mr,ph,hh,Po,dh,kh,So,uh,vh,Lo,yh,fh,bh,Ms,mh,Hs,gh,xh,wh,jo,v1=`<div class="filename">packages/babel-parser/test/curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; parse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../lib&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getParser</span><span style="color: var(--shiki-color-text)">(code) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; sourceType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;module&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;curry function syntax&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">it</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;should parse&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">getParser</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;function @@ foo() &#123;&#125;&#96;</span><span style="color: var(--shiki-color-text)">)())</span><span style="color: var(--shiki-token-function)">.toMatchSnapshot</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Eh,Le,_h,Mo,Th,Ih,Ho,Ch,Oh,Dh,qo,y1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">SyntaxError: Unexpected token (1:9)</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.raise (packages/babel-parser/src/parser/location.js:39:63)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.raise [as unexpected] (packages/babel-parser/src/parser/util.js:133:16)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.unexpected [as parseIdentifierName] (packages/babel-parser/src/parser/expression.js:2090:18)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.parseIdentifierName [as parseIdentifier] (packages/babel-parser/src/parser/expression.js:2052:23)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.parseIdentifier (packages/babel-parser/src/parser/statement.js:1096:52)</span></span></code></pre>`,Ah,qs,Hr,Ph,Sh,No,f1='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">BABEL_ENV=test node_modules/.bin/jest -u packages/babel-parser/test/curry-function.js</span></span></code></pre>',Lh,Ns,jh,Fo,Mh,Hh,qh,Fs,Nh,Uo,Fh,Uh,Rh,je,Wh,Us,Ro,Bh,Vh,Wo,zh,Jh,Gh,Rs,Xh,Bo,Yh,$h,Zh,Vo,b1=`<div class="filename">packages/babel-parser/src/parser/expression.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">parseIdentifierName</span><span style="color: var(--shiki-color-text)">(pos: number</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> liberal</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> boolean): string &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.name)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.type); </span><span style="color: var(--shiki-token-comment)">// current token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.lookahead</span><span style="color: var(--shiki-color-text)">().type); </span><span style="color: var(--shiki-token-comment)">// next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.unexpected</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Kh,Ws,Qh,zo,ed,sd,td,Jo,m1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,od,Me,ad,Go,nd,rd,Xo,ld,id,cd,Bs,pd,Yo,hd,dd,kd,qr,ud,vd,ie,$o,yd,Zo,fd,bd,Vs,md,Ko,gd,xd,wd,Qo,Ed,ea,_d,Td,sa,Id,ta,Cd,Od,Nr,Dd,Ad,He,Pd,oa,Sd,Ld,aa,jd,Md,Kl,E,Fr,zs,Hd,qd,Js,Nd,Gs,Fd,Ud,Rd,Ur,Wd,Bd,na,g1=`<div class="filename">packages/babel-parser/src/tokenizer/types.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; [name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  atat</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@@&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Vd,ee,zd,Rr,Jd,Gd,ra,Xd,Yd,la,$d,Zd,Xs,Kd,Qd,Wr,Br,ek,sk,J,tk,ia,ok,ak,ca,nk,rk,pa,lk,ik,ha,ck,pk,hk,da,x1=`<div class="filename">packages/babel-parser/src/tokenizer/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">getTokenFromCode</span><span style="color: var(--shiki-color-text)">(code: number): </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (code) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">charCodes</span><span style="color: var(--shiki-color-text)">.atSign:</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if the next character is a &#96;@&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-token-function)">.charCodeAt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.pos </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">charCodes</span><span style="color: var(--shiki-color-text)">.atSign) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// create &#96;tt.atat&#96; instead</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishOp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishOp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.at</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,dk,Vr,kk,uk,ka,w1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// current token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@@&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vk,ua,yk,Ys,fk,Ql,b,zr,$s,bk,mk,Zs,gk,Ks,xk,wk,Ek,Jr,qe,va,Gr,G,kg,_k,Ne,Tk,ya,Ik,Ck,fa,Ok,Dk,Ak,Fe,Pk,ba,Sk,Lk,ma,jk,Mk,Hk,Xr,Ue,ga,Yr,X,ug,qk,$r,Nk,Fk,Y,Uk,Zr,Rk,Wk,xa,Bk,Vk,Qs,zk,Jk,wa,Gk,Xk,Yk,Ea,E1=`<div class="filename">packages/babel-parser/src/parser/statement.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StatementParser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExpressionParser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseFunction</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">N</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">NormalFunction</span><span style="color: var(--shiki-color-text)">&gt;(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    statement</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">FUNC_NO_FLAGS</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    isAsync</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  )</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.generator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.star);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$k,Kr,Zk,Kk,_a,_1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)"> PASS  packages/babel-parser/test/curry-function.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  curry </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">syntax</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2713 should parse (12ms)</span></span></code></pre>`,Qk,Qr,eu,su,el,tu,ei,f,sl,et,ou,au,st,nu,tl,ru,lu,iu,ol,cu,pu,Ta,T1=`<pre class="prism language-"><code><span class="line">...</span>
<span class="line">ExponentiationExpression -&gt; UnaryExpression</span>
<span class="line">                            UpdateExpression ** ExponentiationExpression</span>
<span class="line">MultiplicativeExpression -&gt; ExponentiationExpression</span>
<span class="line">                            MultiplicativeExpression (&quot;*&quot; or &quot;/&quot; or &quot;%&quot;) ExponentiationExpression</span>
<span class="line">AdditiveExpression       -&gt; MultiplicativeExpression</span>
<span class="line">                            AdditiveExpression + MultiplicativeExpression</span>
<span class="line">                            AdditiveExpression - MultiplicativeExpression</span>
<span class="line">...</span></code></pre>`,hu,tt,du,Ia,ku,uu,vu,Re,ot,yu,Ca,fu,bu,mu,ce,gu,Oa,xu,wu,Da,Eu,_u,Aa,Tu,Iu,Cu,pe,Ou,Pa,Du,Au,Sa,Pu,Su,La,Lu,ju,Mu,at,Hu,ja,qu,Nu,Fu,Ma,I1='<pre class="prism language-"><code><span class="line">(AdditiveExpression &quot;+&quot; 1 (MultiplicativeExpression &quot;*&quot; 2 3))</span></code></pre>',Uu,al,Ru,Wu,Ha,C1='<pre class="prism language-"><code><span class="line">(MultiplicativeExpression &quot;*&quot; (AdditiveExpression &quot;+&quot; 1 2) 3)</span></code></pre>',Bu,nl,Vu,zu,qa,O1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseAdditiveExpression</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">left</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseMultiplicativeExpression</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// if the current token is &#96;+&#96; or &#96;-&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.plus) </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.minus)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operator</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.type;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move on to the next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.nextToken</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">right</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseMultiplicativeExpression</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// create the node</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishNode</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          operator</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          left</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          right</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;BinaryExpression&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// return as MultiplicativeExpression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> left;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ju,rl,ll,Gu,Xu,$,Yu,Na,$u,Zu,Fa,Ku,Qu,Ua,ev,sv,nt,tv,ov,si,m,il,rt,av,nv,he,rv,Ra,lv,iv,Wa,cv,pv,Ba,hv,dv,kv,de,Qe,cl,Va,uv,vv,za,yv,fv,bv,Ja,pl,Ga,mv,gv,xv,U,hl,Xa,wv,Ev,Ya,_v,Tv,$a,Iv,Cv,Za,Ov,Dv,Ka,Av,dl,se,Qa,Pv,Sv,en,Lv,jv,sn,Mv,Hv,tn,qv,Nv,Fv,on,kl,an,Uv,Rv,Wv,ul,Bv,Vv,nn,D1=`<div class="filename">packages/babel-parser/src/parser/statement.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StatementParser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExpressionParser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseStatementContent</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* ...*/</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: we call match to check the current token</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">._function)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.next</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// NOTE: function statement has a higher precendence than a generic statement</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseFunction</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseFunction</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: we call eat to check whether the optional token exists</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.generator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.star);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseFunctionId</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zv,vl,Jv,Gv,lt,it,ct,Xv,Yv,pt,$v,Zv,rn,ht,Kv,Qv,ey,sy,ty,ln,yl,oy,ay,ny,fl,ry,ly,We,iy,cn,cy,py,pn,hy,dy,ky,bl,Be,te,vg,uy,vy,ti,d,ml,dt,yy,fy,gl,by,my,xl,gy,xy,hn,wy,kt,Ey,_y,dn,A1=`<div class="filename">babel-plugin-transformation-curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> customParser </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./custom-parser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ourBabelPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">parserOverride</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> opts) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">customParser</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> opts);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ty,wl,Iy,Cy,kn,Oy,El,Dy,Ay,Py,Sy,_l,Ly,jy,ke,My,ut,Hy,qy,un,Ny,Fy,vn,Uy,Ry,Wy,Tl,vt,By,yt,Vy,zy,Jy,Gy,Xy,ft,Yy,yn,$y,Zy,Ky,fn,P1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">currying</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">numParamsRequired</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">(params) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newParams</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-token-function)">.concat</span><span style="color: var(--shiki-color-text)">(args);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">newParams</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;=</span><span style="color: var(--shiki-color-text)"> numParamsRequired) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">newParams);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">(newParams);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">([]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qy,Il,es,ef,bt,sf,tf,mt,of,af,Cl,nf,rf,bn,S1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// from</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> @@ </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">currying</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)</span></span></code></pre>`,lf,Ol,Ve,cf,gt,pf,hf,mn,df,kf,uf,xt,vf,gn,yf,ff,bf,xn,L1=`<div class="filename">babel-plugin-transformation-curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ourBabelPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">FunctionDeclaration</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;curry&#39;</span><span style="color: var(--shiki-color-text)">).node) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// const foo = curry(function () &#123; ... &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclaration</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;const&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclarator</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;id.name&#39;</span><span style="color: var(--shiki-color-text)">).node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;currying&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.toExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                ])</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            ])</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,mf,wt,gf,wn,xf,wf,Ef,Dl,_f,oi,oe,Al,ze,Tf,En,If,Cf,Of,Pl,Df,Af,ue,Pf,_n,Sf,Lf,Sl,jf,Mf,Et,Hf,qf,Nf,Je,Ff,Tn,Uf,Rf,In,Wf,Bf,ai,_,Ll,ss,Vf,Cn,zf,Jf,Z,Gf,On,Xf,Yf,Dn,$f,Zf,An,Kf,Qf,Pn,eb,sb,tb,Sn,j1=`<div class="filename">package.json</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;resolutions&quot;</span><span style="color: var(--shiki-color-text)">: &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;@babel/helpers&quot;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;7.6.0--your-custom-forked-version&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ob,jl,ts,Ml,ab,nb,_t,rb,lb,ib,Tt,cb,Ln,pb,hb,db,It,kb,Ct,ub,vb,yb,jn,M1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">helpers</span><span style="color: var(--shiki-color-text)">.currying </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">helper</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;7.6.0&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  export default function currying(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    const numParamsRequired = fn.length;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    function curryFactory(params) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      return function (...args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        const newParams = params.concat(args);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        if (newParams.length &gt;= numParamsRequired) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">          return fn(...newParams);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        return curryFactory(newParams);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return curryFactory([]);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,fb,ve,bb,Mn,mb,gb,Hn,xb,wb,qn,Eb,_b,Tb,Ot,Ib,Nn,Cb,Ob,Db,Fn,H1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclaration</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;const&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclarator</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;id.name&#39;</span><span style="color: var(--shiki-color-text)">).node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.addHelper</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;currying&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.toExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      ])</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ])</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ab,Ge,Pb,Un,Sb,Lb,Rn,jb,Mb,ni,q,Hl,Dt,Hb,qb,ye,Nb,At,Fb,Wn,Ub,Rb,Wb,Bn,Bb,Vb,Vn,zb,Jb,Gb,Pt,Xb,zn,Yb,$b,Zb,Xe,Kb,St,Qb,em,Lt,sm,tm,om,jt,am,Mt,nm,rm,lm,im,ri,R,ql,Ht,cm,pm,Nl,hm,dm,Fl,km,um,qt,vm,Jn,ym,fm,bm,Nt,mm,Ft,gm,xm,li,W,Ul,Ut,wm,Em,Rl,_m,Tm,Ye,Rt,Wt,Im,Cm,Bt,Om,Dm,Gn,Vt,Am,Pm,Sm,zt,Jt,Lm,jm,Gt,Mm,Hm,Wl,qm,Nm,fe,Xt,Yt,Fm,Um,$t,Rm,Wm,Zt,Kt,Bm,Vm,Qt,zm,Jm,Bl,eo,Gm,Xm,Vl,so,Ym;return{c(){C=a("p"),me=s("Following my previous post on "),K=a("a"),vs=s("writing a custom babel transformation"),S=s(", today I am going to show you how you can create a custom JavaScript syntax with Babel."),Q=i(),g=a("section"),hr=a("h2"),ys=a("a"),Ji=s("Overview"),Gi=i(),dr=a("p"),Xi=s("Let me show you what we will achieve at the end of this article:"),Yi=i(),ao=a("div"),$i=i(),j=a("p"),Zi=s("We are going to create a "),fs=a("a"),Ki=s("curry function"),Qi=s(" syntax "),no=a("code"),ec=s("@@"),sc=s(". The syntax is like the "),bs=a("a"),tc=s("generator function"),oc=s(", except you place "),ro=a("code"),ac=s("@@"),nc=s(" instead of "),lo=a("code"),rc=s("*"),lc=s(" in between the "),io=a("code"),ic=s("function"),cc=s(" keyword and the function name, eg "),co=a("code"),pc=s("function @@ name(arg1, arg2)"),hc=s("."),dc=i(),le=a("p"),kc=s("In this example, you can have "),ms=a("a"),uc=s("partial application"),vc=s(" with the function "),po=a("code"),yc=s("foo"),fc=s(". Calling "),ho=a("code"),bc=s("foo"),mc=s(" with the number of parameters less than the arguments required will return a new function of the remaining arguments:"),gc=i(),ko=a("div"),xc=i(),kr=a("blockquote"),M=a("p"),wc=s("The reason I choose "),uo=a("code"),Ec=s("@@"),_c=s(" is that you can't have "),vo=a("code"),Tc=s("@"),Ic=s(" in a variable name, so "),yo=a("code"),Cc=s("function@@foo(){}"),Oc=s(' is still a valid syntax. And the "operator" '),fo=a("code"),Dc=s("@"),Ac=s(" is used for "),gs=a("a"),Pc=s("decorator functions"),Sc=s(" but I wanted to use something entirely new, thus "),bo=a("code"),Lc=s("@@"),jc=s("."),Mc=i(),ur=a("p"),Hc=s("To achieve this, we are going to:"),qc=i(),xs=a("ul"),vr=a("li"),Nc=s("Fork the babel parser"),Fc=i(),yr=a("li"),Uc=s("Create a custom babel transformation plugin"),Rc=i(),fr=a("p"),Wc=s("Sounds impossible \u{1F628}?"),Bc=i(),br=a("p"),Vc=s("Don't worry, I will guide you through every step. Hopefully, at the end of this article, you will be the babel master amongst your peers. \u{1F920}"),Yl=i(),O=a("section"),mr=a("h2"),ws=a("a"),zc=s("Fork the babel"),Jc=i(),Es=a("p"),Gc=s("Head over to "),_s=a("a"),Xc=s("babel's Github repo"),Yc=s(', click the "Fork" button located at the top left of the page.'),$c=i(),gr=a("p"),Oe=a("span"),mo=a("picture"),xr=a("source"),V=a("img"),Zc=i(),wr=a("p"),Kc=s("If this is your first time forking a popular open-source project, congratulations! \u{1F389}"),Qc=i(),Ts=a("p"),ep=s("Clone your forked babel to your local workspace and "),Is=a("a"),sp=s("set it up"),tp=s(":"),op=i(),go=a("div"),ap=i(),Er=a("p"),np=s("Meanwhile, let me briefly walk you through how the babel repository is organised."),rp=i(),z=a("p"),lp=s("Babel uses a monorepo structure, all the packages, eg: "),xo=a("code"),ip=s("@babel/core"),cp=s(", "),wo=a("code"),pp=s("@babel/parser"),hp=s(", "),Eo=a("code"),dp=s("@babel/plugin-transform-react-jsx"),kp=s(", etc are in the "),_o=a("code"),up=s("packages/"),vp=s(" folder:"),yp=i(),To=a("div"),fp=i(),_r=a("blockquote"),Tr=a("small"),bp=s("**Trivia:** Babel uses [Makefile](https://opensource.com/article/18/8/what-how-makefile) for automating tasks. For build task, such as `make build`, it will use [Gulp](https://gulpjs.com) as the task runner."),$l=i(),H=a("section"),Ir=a("h3"),Cs=a("a"),mp=s("Crash Course on Parsing Code to AST"),gp=i(),De=a("p"),xp=s("Before we proceed, if you are unfamiliar with parsers and Abstract Syntax Tree (AST), I highly recommend to checkout "),Os=a("a"),wp=s("Vaidehi Joshi"),Ep=s("'s "),Ds=a("a"),_p=s("Leveling Up One\u2019s Parsing Game With ASTs"),Tp=s("."),Ip=i(),Cr=a("p"),Cp=s("To summarise, this is what happened when babel is parsing your code:"),Op=i(),Ae=a("ul"),Ke=a("li"),Dp=s("Your code as a "),Io=a("code"),Ap=s("string"),Pp=s(" is a long list of characters: "),Co=a("code"),Sp=s("f, u, n, c, t, i, o, n, , @, @, f, ..."),Lp=i(),ge=a("li"),jp=s("The first step is called "),Or=a("strong"),Mp=s("tokenization"),Hp=s(", where babel scans through each character and creates "),Dr=a("em"),qp=s("tokens"),Np=s(", like "),Oo=a("code"),Fp=s("function, @@, foo, (, a, ..."),Up=i(),Pe=a("li"),Rp=s("The tokens then pass through a parser for "),Ar=a("strong"),Wp=s("Syntax analysis"),Bp=s(", where babel creates an AST based on "),As=a("a"),Vp=s("JavaScript language specification"),zp=s("."),Jp=i(),Se=a("p"),Gp=s("If you want to learn more in-depth on compilers in general, "),Ps=a("a"),Xp=s("Robert Nystrom"),Yp=s("'s "),Ss=a("a"),$p=s("Crafting Interpreters"),Zp=s(" is a gem."),Kp=i(),Pr=a("blockquote"),Sr=a("small"),Qp=s("Don't get scared of by the word **compiler**, it is nothing but parsing your code and generate XXX out of it. XXX could be machine code, which is the compiler most of us have in mind; XXX could be JavaScript compatible with older browsers, which is the case for Babel."),Zl=i(),h=a("section"),Lr=a("h2"),Ls=a("a"),eh=s("Our custom babel parser"),sh=i(),js=a("p"),th=s("The folder we are going to work on is "),Do=a("code"),oh=s("packages/babel-parser/"),ah=s(":"),nh=i(),Ao=a("div"),rh=i(),F=a("p"),lh=s("We've talked about "),jr=a("em"),ih=s("tokenization"),ch=s(" and "),Mr=a("em"),ph=s("parsing"),hh=s(", now it's clear where to find the code for each process. "),Po=a("code"),dh=s("plugins/"),kh=s(" folder contains plugins that extend the base parser and add custom syntaxes, such as "),So=a("code"),uh=s("jsx"),vh=s(" and "),Lo=a("code"),yh=s("flow"),fh=s("."),bh=i(),Ms=a("p"),mh=s("Let's do a "),Hs=a("a"),gh=s("Test-driven development (TDD)"),xh=s('. I find it easier to define the test case then slowly work our way to "fix" it. It is especially true in an unfamiliar codebase, TDD allows you to "easily" point out code places you need to change.'),wh=i(),jo=a("div"),Eh=i(),Le=a("p"),_h=s("You can run "),Mo=a("code"),Th=s('TEST_ONLY=babel-parser TEST_GREP="curry function" make test-only'),Ih=s(" to run tests for "),Ho=a("code"),Ch=s("babel-parser"),Oh=s(" and see your failing case:"),Dh=i(),qo=a("div"),Ah=i(),qs=a("blockquote"),Hr=a("small"),Ph=s("If you find scanning through all the test cases takes time, you can directly call `jest` to run the test:"),Sh=i(),No=a("div"),Lh=i(),Ns=a("p"),jh=s("Our parser found 2 seemingly innocent "),Fo=a("code"),Mh=s("@"),Hh=s(" tokens at a place where they shouldn't be present."),qh=i(),Fs=a("p"),Nh=s("How do I know that? Let's start the watch mode, "),Uo=a("code"),Fh=s("make watch"),Uh=s(", wear our detective cap \u{1F575}\uFE0F\u200D and start digging!"),Rh=i(),je=a("p"),Wh=s("Tracing the stack trace, led us to "),Us=a("a"),Ro=a("code"),Bh=s("packages/babel-parser/src/parser/expression.js"),Vh=s(" where it throws "),Wo=a("code"),zh=s("this.unexpected()"),Jh=s("."),Gh=i(),Rs=a("p"),Xh=s("Let us add some "),Bo=a("code"),Yh=s("console.log"),$h=s(":"),Zh=i(),Vo=a("div"),Kh=i(),Ws=a("p"),Qh=s("As you can see, both tokens are "),zo=a("code"),ed=s("@"),sd=s(" token:"),td=i(),Jo=a("div"),od=i(),Me=a("p"),ad=s("How do I know "),Go=a("code"),nd=s("this.state.type"),rd=s(" and "),Xo=a("code"),ld=s("this.lookahead().type"),id=s(" will give me the current and the next token?"),cd=i(),Bs=a("p"),pd=s("Well, I'll explained them "),Yo=a("a"),hd=s("later"),dd=s("."),kd=i(),qr=a("p"),ud=s("Let's recap what we've done so far before we move on:"),vd=i(),ie=a("ul"),$o=a("li"),yd=s("We've written a test case for "),Zo=a("code"),fd=s("babel-parser"),bd=i(),Vs=a("li"),md=s("We ran "),Ko=a("code"),gd=s("make test-only"),xd=s(" to run the test case"),wd=i(),Qo=a("li"),Ed=s("We've started the watch mode via "),ea=a("code"),_d=s("make watch"),Td=i(),sa=a("li"),Id=s("We've learned about parser state, and console out the current token type, "),ta=a("code"),Cd=s("this.state.type"),Od=i(),Nr=a("p"),Dd=s("Here's what we are going to do next:"),Ad=i(),He=a("p"),Pd=s("If there's 2 consecutive "),oa=a("code"),Sd=s("@"),Ld=s(", it should not be separate tokens, it should be a "),aa=a("code"),jd=s("@@"),Md=s(" token, the new token we just defined for our curry function"),Kl=i(),E=a("section"),Fr=a("h3"),zs=a("a"),Hd=s("A new token: '@@'"),qd=i(),Js=a("p"),Nd=s("Let's first look at where a token type is defined: "),Gs=a("a"),Fd=s("packages/babel-parser/src/tokenizer/types.js"),Ud=s("."),Rd=i(),Ur=a("p"),Wd=s("Here you see a list of tokens, so let's add our new token definition in as well:"),Bd=i(),na=a("div"),Vd=i(),ee=a("p"),zd=s("Next, let's find out where the token gets created during "),Rr=a("em"),Jd=s("tokenization"),Gd=s(". A quick search on "),ra=a("code"),Xd=s("tt.at"),Yd=s(" within "),la=a("code"),$d=s("babel-parser/src/tokenizer"),Zd=s(" lead us to "),Xs=a("a"),Kd=s("packages/babel-parser/src/tokenizer/index.js"),Qd=i(),Wr=a("blockquote"),Br=a("small"),ek=s("Well, token types are import as `tt` throughout the babel-parser."),sk=i(),J=a("p"),tk=s("Let's create the token "),ia=a("code"),ok=s("tt.atat"),ak=s(" instead of "),ca=a("code"),nk=s("tt.at"),rk=s(" if there's another "),pa=a("code"),lk=s("@"),ik=s(" succeed the current "),ha=a("code"),ck=s("@"),pk=s(":"),hk=i(),da=a("div"),dk=i(),Vr=a("p"),kk=s("If you run the test again, you will see that the current token and the next token has changed:"),uk=i(),ka=a("div"),vk=i(),ua=a("p"),yk=s("Yeah! It looks good and lets move on. "),Ys=a("span"),fk=s("\u{1F3C3}\u200D"),Ql=i(),b=a("section"),zr=a("h3"),$s=a("a"),bk=s("The new parser"),mk=i(),Zs=a("p"),gk=s("Before we move on, let's inspect how "),Ks=a("a"),xk=s("generator functions are represented in AST"),wk=s(":"),Ek=i(),Jr=a("p"),qe=a("span"),va=a("picture"),Gr=a("source"),G=a("img"),_k=i(),Ne=a("p"),Tk=s("As you can see, a generator function is represented by the "),ya=a("code"),Ik=s("generator: true"),Ck=s(" attribute of a "),fa=a("code"),Ok=s("FunctionDeclaration"),Dk=s("."),Ak=i(),Fe=a("p"),Pk=s("Similarly, we can add a "),ba=a("code"),Sk=s("curry: true"),Lk=s(" attribute of the "),ma=a("code"),jk=s("FunctionDeclaration"),Mk=s(" too if it is a curry function:"),Hk=i(),Xr=a("p"),Ue=a("span"),ga=a("picture"),Yr=a("source"),X=a("img"),qk=i(),$r=a("p"),Nk=s("We have a plan now, let's implement it."),Fk=i(),Y=a("p"),Uk=s("A quick search on "),Zr=a("em"),Rk=s('"FunctionDeclaration"'),Wk=s(" leads us to a function called "),xa=a("code"),Bk=s("parseFunction"),Vk=s(" in "),Qs=a("a"),zk=s("packages/babel-parser/src/parser/statement.js"),Jk=s(", and here we find a line that sets the "),wa=a("code"),Gk=s("generator"),Xk=s(" attribute, let's add one more line:"),Yk=i(),Ea=a("div"),$k=i(),Kr=a("p"),Zk=s("If you run the test again, you will be amazed that it passed!"),Kk=i(),_a=a("div"),Qk=i(),Qr=a("p"),eu=s("That's it? How did we miraculously fix it?"),su=i(),el=a("p"),tu=s("I am going to briefly explain how parsing works, and in the process hopefully, you understood what that one-liner change did."),ei=i(),f=a("section"),sl=a("h3"),et=a("a"),ou=s("How parsing works"),au=i(),st=a("p"),nu=s("With the list of tokens from the "),tl=a("em"),ru=s("tokenizer"),lu=s(", the parser consumes the token one by one and constructs the AST. The parser uses the language grammar specification to decide how to use the tokens, which token to expect next."),iu=i(),ol=a("p"),cu=s("The grammar specification looks something like this:"),pu=i(),Ta=a("div"),hu=i(),tt=a("p"),du=s("It explains the precedence of each expressions/statements. For example, an "),Ia=a("code"),ku=s("AdditiveExpression"),uu=s(" is made up of either:"),vu=i(),Re=a("ul"),ot=a("li"),yu=s("a "),Ca=a("code"),fu=s("MultiplicativeExpression"),bu=s(", or"),mu=i(),ce=a("li"),gu=s("an "),Oa=a("code"),xu=s("AdditiveExpression"),wu=s(" followed by "),Da=a("code"),Eu=s("+"),_u=s(" operator token followed by "),Aa=a("code"),Tu=s("MultiplicativeExpression"),Iu=s(", or"),Cu=i(),pe=a("li"),Ou=s("an "),Pa=a("code"),Du=s("AdditiveExpression"),Au=s(" followed by "),Sa=a("code"),Pu=s("-"),Su=s(" operator token followed by "),La=a("code"),Lu=s("MultiplicativeExpression"),ju=s("."),Mu=i(),at=a("p"),Hu=s("So if you have an expression "),ja=a("code"),qu=s("1 + 2 * 3"),Nu=s(", it will be like:"),Fu=i(),Ma=a("div"),Uu=i(),al=a("p"),Ru=s("instead of"),Wu=i(),Ha=a("div"),Bu=i(),nl=a("p"),Vu=s("With these rules, we translate them into parser code:"),zu=i(),qa=a("div"),Ju=i(),rl=a("p"),ll=a("em"),Gu=s("This is a made-up code that oversimplifies what babel have, but I hope you get the gist of it."),Xu=i(),$=a("p"),Yu=s("As you can see here, the parser is recursively in nature, and it goes from the lowest precedence to the highest precedence expressions/statements. Eg: "),Na=a("code"),$u=s("parseAdditiveExpression"),Zu=s(" calls "),Fa=a("code"),Ku=s("parseMultiplicativeExpression"),Qu=s(", which in turn calls "),Ua=a("code"),ev=s("parseExponentiationExpression"),sv=s(", which in turn calls ... . This recursive process is called the "),nt=a("a"),tv=s("Recursive Descent Parsing"),ov=s("."),si=i(),m=a("section"),il=a("h4"),rt=a("a"),av=s("this.eat, this.match, this.next"),nv=i(),he=a("p"),rv=s("If you have noticed, in my examples above, I used some utility function, such as "),Ra=a("code"),lv=s("this.eat"),iv=s(", "),Wa=a("code"),cv=s("this.match"),pv=s(", "),Ba=a("code"),hv=s("this.next"),dv=s(", etc. These are babel parser's internal functions, yet they are quite ubiquitous amongst parsers as well:"),kv=i(),de=a("ul"),Qe=a("li"),cl=a("strong"),Va=a("code"),uv=s("this.match"),vv=s(" returns a "),za=a("code"),yv=s("boolean"),fv=s(" indicating whether the current token matches the condition"),bv=i(),Ja=a("li"),pl=a("strong"),Ga=a("code"),mv=s("this.next"),gv=s(" moves the token list forward to point to the next token"),xv=i(),U=a("li"),hl=a("strong"),Xa=a("code"),wv=s("this.eat"),Ev=s(" return what "),Ya=a("code"),_v=s("this.match"),Tv=s(" returns and if "),$a=a("code"),Iv=s("this.match"),Cv=s(" returns "),Za=a("code"),Ov=s("true"),Dv=s(", will do "),Ka=a("code"),Av=s("this.next"),dl=a("ul"),se=a("li"),Qa=a("code"),Pv=s("this.eat"),Sv=s(" is commonly used for optional operators, like "),en=a("code"),Lv=s("*"),jv=s(" in generator function, "),sn=a("code"),Mv=s(";"),Hv=s(" at the end of statements, and "),tn=a("code"),qv=s("?"),Nv=s(" in typescript types."),Fv=i(),on=a("li"),kl=a("strong"),an=a("code"),Uv=s("this.lookahead"),Rv=s(" get the next token without moving forward to make a decision on the current node"),Wv=i(),ul=a("p"),Bv=s("If you take a look again the parser code we just changed, it's easier to read it in now."),Vv=i(),nn=a("div"),zv=i(),vl=a("p"),Jv=s("I know I didn't do a good job explaining how a parser works. Here are some resources that I learned from, and I highly recommend them:"),Gv=i(),lt=a("ul"),it=a("li"),ct=a("a"),Xv=s("Crafting Interpreters"),Yv=s(" by "),pt=a("a"),$v=s("Robert Nystrom"),Zv=i(),rn=a("li"),ht=a("a"),Kv=s('Free Udacity course: "Compilers: Theory and Practice"'),Qv=s(", offered by Georgia Tech"),ey=i(),sy=a("hr"),ty=i(),ln=a("p"),yl=a("strong"),oy=s("Side Note"),ay=s(': You might be curious how am I able to visualize the custom syntax in the Babel AST Explorer, where I showed you the new "curry" attribute in the AST.'),ny=i(),fl=a("p"),ry=s("That's because I've added a new feature in the Babel AST Explorer where you can upload your custom parser!"),ly=i(),We=a("p"),iy=s("If you go to "),cn=a("code"),cy=s("packages/babel-parser/lib"),py=s(", you would find the compiled version of your parser and the source map. Open the drawer of the Babel AST Explorer, you will see a button to upload a custom parser. Drag the "),pn=a("code"),hy=s("packages/babel-parser/lib/index.js"),dy=s(" in and you will be visualizing the AST generated via your custom parser!"),ky=i(),bl=a("p"),Be=a("span"),te=a("img"),uy=i(),vy=a("hr"),ti=i(),d=a("section"),ml=a("h2"),dt=a("a"),yy=s("Our babel plugin"),fy=i(),gl=a("p"),by=s("With our custom babel parser done, let's move on to write our babel plugin."),my=i(),xl=a("p"),gy=s("But maybe before that, you may have some doubts on how are we going to use our custom babel parser, especially with whatever build stack we are using right now?"),xy=i(),hn=a("p"),wy=s("Well, fret not. A babel plugin can provide a custom parser, which is "),kt=a("a"),Ey=s("documented on the babel website"),_y=i(),dn=a("div"),Ty=i(),wl=a("p"),Iy=s("Since we forked out the babel parser, all existing babel parser options or built-in plugins will still work perfectly."),Cy=i(),kn=a("p"),Oy=s("With this doubt out of the way, let see how we can make our curry function curryable? "),El=a("em"),Dy=s("(not entirely sure there's such word)"),Ay=i(),Py=a("hr"),Sy=i(),_l=a("p"),Ly=s("Before we start, if you have eagerly tried to add our plugin into your build system, you would notice that the curry function gets compiled to a normal function."),jy=i(),ke=a("p"),My=s("This is because, after parsing + transformation, babel will use "),ut=a("a"),Hy=s("@babel/generator"),qy=s(" to generate code from the transformed AST. Since the "),un=a("code"),Ny=s("@babel/generator"),Fy=s(" has no idea about the new "),vn=a("code"),Uy=s("curry"),Ry=s(" attribute we added, it will be omitted."),Wy=i(),Tl=a("blockquote"),vt=a("p"),By=s("If one day curry function becomes the new JavaScript syntax, you may want to make a pull request to add one more line "),yt=a("a"),Vy=s("here"),zy=s("!"),Jy=i(),Gy=a("hr"),Xy=i(),ft=a("p"),Yy=s("Ok, to make our function curryable, we can wrap it with a "),yn=a("code"),$y=s("currying"),Zy=s(" helper higher-order function:"),Ky=i(),fn=a("div"),Qy=i(),Il=a("blockquote"),es=a("p"),ef=s("If you want to learn how to write a currying function, you can read this "),bt=a("a"),sf=s("Currying in JS"),tf=s(" by "),mt=a("a"),of=s("Shirsh Zibbu"),af=i(),Cl=a("p"),nf=s("So when we transform our curry function, we can transform it into the following:"),rf=i(),bn=a("div"),lf=i(),Ol=a("blockquote"),Ve=a("p"),cf=s("Let's first ignore "),gt=a("a"),pf=s("function hoisting"),hf=s(" in JavaScript, where you can call "),mn=a("code"),df=s("foo"),kf=s(" before it is defined."),uf=i(),xt=a("p"),vf=s("If you have read my "),gn=a("a"),yf=s("step-by-step guide on babel transformation"),ff=s(", writing this transformation should be manageable:"),bf=i(),xn=a("div"),mf=i(),wt=a("p"),gf=s("The question is how do we provide the "),wn=a("code"),xf=s("currying"),wf=s(" function?"),Ef=i(),Dl=a("p"),_f=s("There are 2 ways:"),oi=i(),oe=a("section"),Al=a("h3"),ze=a("a"),Tf=s("1. Assume "),En=a("code"),If=s("currying"),Cf=s(" has been declared in the global scope."),Of=i(),Pl=a("p"),Df=s("Basically, your job is done here."),Af=i(),ue=a("p"),Pf=s("If "),_n=a("code"),Sf=s("currying"),Lf=s(" is not defined, then when executing the compiled code, the runtime will scream out "),Sl=a("em"),jf=s('"currying is not defined"'),Mf=s(", just like the "),Et=a("a"),Hf=s('"regeneratorRuntime is not defined"'),qf=s("."),Nf=i(),Je=a("p"),Ff=s("So probably you have to educate the users to install "),Tn=a("code"),Uf=s("currying"),Rf=s(" polyfills in order to use your "),In=a("code"),Wf=s("babel-plugin-transformation-curry-function"),Bf=s("."),ai=i(),_=a("section"),Ll=a("h3"),ss=a("a"),Vf=s("2. Use the "),Cn=a("code"),zf=s("@babel/helpers"),Jf=i(),Z=a("p"),Gf=s("You can add a new helper to "),On=a("code"),Xf=s("@babel/helpers"),Yf=s(", which of course you are unlikely to merge that into the official "),Dn=a("code"),$f=s("@babel/helpers"),Zf=s(", so you would have to figure a way to make "),An=a("code"),Kf=s("@babel/core"),Qf=s(" to resolve to your "),Pn=a("code"),eb=s("@babel/helpers"),sb=s(":"),tb=i(),Sn=a("div"),ob=i(),jl=a("p"),ts=a("em"),Ml=a("strong"),ab=s("Disclaimer:"),nb=s(" I have not personally tried this, but I believe it will work. If you encountered problems trying this, "),_t=a("a"),rb=s("DM me"),lb=s(", I am very happy to discuss it with you."),ib=i(),Tt=a("p"),cb=s("Adding a new helper function into "),Ln=a("code"),pb=s("@babel/helpers"),hb=s(" is very easy."),db=i(),It=a("p"),kb=s("Head over to "),Ct=a("a"),ub=s("packages/babel-helpers/src/helpers.js"),vb=s(" and add a new entry:"),yb=i(),jn=a("div"),fb=i(),ve=a("p"),bb=s("The helper tag function specifies the "),Mn=a("code"),mb=s("@babel/core"),gb=s(" version required. The trick here is to "),Hn=a("code"),xb=s("export default"),wb=s(" the "),qn=a("code"),Eb=s("currying"),_b=s(" function."),Tb=i(),Ot=a("p"),Ib=s("To use the helper, just call the "),Nn=a("code"),Cb=s("this.addHelper()"),Ob=s(":"),Db=i(),Fn=a("div"),Ab=i(),Ge=a("p"),Pb=s("The "),Un=a("code"),Sb=s("this.addHelper"),Lb=s(" will inject the helper at the top of the file if needed, and returns an "),Rn=a("code"),jb=s("Identifier"),Mb=s(" to the injected function."),ni=i(),q=a("section"),Hl=a("h2"),Dt=a("a"),Hb=s("Closing Note"),qb=i(),ye=a("p"),Nb=s("We've seen how we can modify the babel parser function, write our own babel transform plugin "),At=a("em"),Fb=s("(which was brief mainly because I have "),Wn=a("a"),Ub=s("a detailed cover in my previous post"),Rb=s(")"),Wb=s(", a brief touch on "),Bn=a("code"),Bb=s("@babel/generator"),Vb=s(" and also how we can add helper functions via "),Vn=a("code"),zb=s("@babel/helpers"),Jb=s("."),Gb=i(),Pt=a("p"),Xb=s("Along the way, we had a crash course on how a parser works, which I will provide the links to "),zn=a("a"),Yb=s("further reading"),$b=s(" at the bottom."),Zb=i(),Xe=a("p"),Kb=s("The steps we've gone through above is similar to part of the "),St=a("a"),Qb=s("TC39 proposal"),em=i(),Lt=a("a"),sm=s("process"),tm=s(" when defining a new JavaScript specification. When proposing a new specification, the champion of the proposal usually write polyfills or forked out babel to write proof-of-concept demos. As you've seen, forking a parser or writing polyfills is not the hardest part of the process, but to define the problem space, plan and think through the use cases and edge cases, and gather opinions and suggestions from the community. To this end, I am grateful to the proposal champion, for their effort in pushing the JavaScript language forward."),om=i(),jt=a("p"),am=s("Finally, if you want to see the code we've done so far in a full picture, you can "),Mt=a("a"),nm=s("check it out from Github"),rm=s("."),lm=i(),im=a("hr"),ri=i(),R=a("section"),ql=a("h2"),Ht=a("a"),cm=s("Editor's Note"),pm=i(),Nl=a("p"),hm=s("I've worked on the babel repository for a while, yet I've never added a new syntax to the babel parser before. Most of my contributions were just fixing bugs and specs compliance feature."),dm=i(),Fl=a("p"),km=s("Yet this idea of creating a new syntax has been in my mind for a while. So I took the chance of writing a blog to try it out. It is an exhilarating experience to see it work as expected."),um=i(),qt=a("p"),vm=s("Having the ability to manipulate the syntax of the language you are writing is invigorating. It empowers us the possibility of writing less code or more straightforward code and shifts that complexity to compile time. Just as how "),Jn=a("code"),ym=s("async-await"),fm=s(" solves the callback hell and promise-chaining hell."),bm=i(),Nt=a("p"),mm=s("If this article inspires you to some great idea, and you wish to discuss it with somebody, you are always more than welcome to reach out to me through "),Ft=a("a"),gm=s("Twitter"),xm=s("."),li=i(),W=a("section"),Ul=a("h2"),Ut=a("a"),wm=s("Further Reading"),Em=i(),Rl=a("p"),_m=s("About compilers:"),Tm=i(),Ye=a("ul"),Rt=a("li"),Wt=a("a"),Im=s("Crafting Interpreters"),Cm=s(" by "),Bt=a("a"),Om=s("Robert Nystrom"),Dm=i(),Gn=a("li"),Vt=a("a"),Am=s('Free Udacity course: "Compilers: Theory and Practice"'),Pm=s(", offered by Georgia Tech"),Sm=i(),zt=a("li"),Jt=a("a"),Lm=s("Leveling Up One\u2019s Parsing Game With ASTs"),jm=s(" by "),Gt=a("a"),Mm=s("Vaidehi Joshi"),Hm=i(),Wl=a("p"),qm=s("Misc:"),Nm=i(),fe=a("ul"),Xt=a("li"),Yt=a("a"),Fm=s("Understanding hoisting in JavaScript"),Um=s(" by "),$t=a("a"),Rm=s("Mabishi Wakio"),Wm=i(),Zt=a("li"),Kt=a("a"),Bm=s("Currying in JS"),Vm=s(" by "),Qt=a("a"),zm=s("Shirsh Zibbu"),Jm=i(),Bl=a("li"),eo=a("a"),Gm=s("TC39 Proposals"),Xm=i(),Vl=a("li"),so=a("a"),Ym=s("TC39 Process Document"),this.h()},l(p){C=n(p,"P",{});var v=r(C);me=t(v,"Following my previous post on "),K=n(v,"A",{href:!0});var yg=r(K);vs=t(yg,"writing a custom babel transformation"),yg.forEach(o),S=t(v,", today I am going to show you how you can create a custom JavaScript syntax with Babel."),v.forEach(o),Q=c(p),g=n(p,"SECTION",{});var D=r(g);hr=n(D,"H2",{});var fg=r(hr);ys=n(fg,"A",{href:!0,id:!0});var bg=r(ys);Ji=t(bg,"Overview"),bg.forEach(o),fg.forEach(o),Gi=c(D),dr=n(D,"P",{});var mg=r(dr);Xi=t(mg,"Let me show you what we will achieve at the end of this article:"),mg.forEach(o),Yi=c(D),ao=n(D,"DIV",{class:!0});var q1=r(ao);q1.forEach(o),$i=c(D),j=n(D,"P",{});var N=r(j);Zi=t(N,"We are going to create a "),fs=n(N,"A",{href:!0,rel:!0});var gg=r(fs);Ki=t(gg,"curry function"),gg.forEach(o),Qi=t(N," syntax "),no=n(N,"CODE",{class:!0});var xg=r(no);ec=t(xg,"@@"),xg.forEach(o),sc=t(N,". The syntax is like the "),bs=n(N,"A",{href:!0,rel:!0});var wg=r(bs);tc=t(wg,"generator function"),wg.forEach(o),oc=t(N,", except you place "),ro=n(N,"CODE",{class:!0});var Eg=r(ro);ac=t(Eg,"@@"),Eg.forEach(o),nc=t(N," instead of "),lo=n(N,"CODE",{class:!0});var _g=r(lo);rc=t(_g,"*"),_g.forEach(o),lc=t(N," in between the "),io=n(N,"CODE",{class:!0});var Tg=r(io);ic=t(Tg,"function"),Tg.forEach(o),cc=t(N," keyword and the function name, eg "),co=n(N,"CODE",{class:!0});var Ig=r(co);pc=t(Ig,"function @@ name(arg1, arg2)"),Ig.forEach(o),hc=t(N,"."),N.forEach(o),dc=c(D),le=n(D,"P",{});var os=r(le);kc=t(os,"In this example, you can have "),ms=n(os,"A",{href:!0,rel:!0});var Cg=r(ms);uc=t(Cg,"partial application"),Cg.forEach(o),vc=t(os," with the function "),po=n(os,"CODE",{class:!0});var Og=r(po);yc=t(Og,"foo"),Og.forEach(o),fc=t(os,". Calling "),ho=n(os,"CODE",{class:!0});var Dg=r(ho);bc=t(Dg,"foo"),Dg.forEach(o),mc=t(os," with the number of parameters less than the arguments required will return a new function of the remaining arguments:"),os.forEach(o),gc=c(D),ko=n(D,"DIV",{class:!0});var N1=r(ko);N1.forEach(o),xc=c(D),kr=n(D,"BLOCKQUOTE",{});var Ag=r(kr);M=n(Ag,"P",{});var B=r(M);wc=t(B,"The reason I choose "),uo=n(B,"CODE",{class:!0});var Pg=r(uo);Ec=t(Pg,"@@"),Pg.forEach(o),_c=t(B," is that you can't have "),vo=n(B,"CODE",{class:!0});var Sg=r(vo);Tc=t(Sg,"@"),Sg.forEach(o),Ic=t(B," in a variable name, so "),yo=n(B,"CODE",{class:!0});var Lg=r(yo);Cc=t(Lg,"function@@foo(){}"),Lg.forEach(o),Oc=t(B,' is still a valid syntax. And the "operator" '),fo=n(B,"CODE",{class:!0});var jg=r(fo);Dc=t(jg,"@"),jg.forEach(o),Ac=t(B," is used for "),gs=n(B,"A",{href:!0,rel:!0});var Mg=r(gs);Pc=t(Mg,"decorator functions"),Mg.forEach(o),Sc=t(B," but I wanted to use something entirely new, thus "),bo=n(B,"CODE",{class:!0});var Hg=r(bo);Lc=t(Hg,"@@"),Hg.forEach(o),jc=t(B,"."),B.forEach(o),Ag.forEach(o),Mc=c(D),ur=n(D,"P",{});var qg=r(ur);Hc=t(qg,"To achieve this, we are going to:"),qg.forEach(o),qc=c(D),xs=n(D,"UL",{});var ii=r(xs);vr=n(ii,"LI",{});var Ng=r(vr);Nc=t(Ng,"Fork the babel parser"),Ng.forEach(o),Fc=c(ii),yr=n(ii,"LI",{});var Fg=r(yr);Uc=t(Fg,"Create a custom babel transformation plugin"),Fg.forEach(o),ii.forEach(o),Rc=c(D),fr=n(D,"P",{});var Ug=r(fr);Wc=t(Ug,"Sounds impossible \u{1F628}?"),Ug.forEach(o),Bc=c(D),br=n(D,"P",{});var Rg=r(br);Vc=t(Rg,"Don't worry, I will guide you through every step. Hopefully, at the end of this article, you will be the babel master amongst your peers. \u{1F920}"),Rg.forEach(o),D.forEach(o),Yl=c(p),O=n(p,"SECTION",{});var L=r(O);mr=n(L,"H2",{});var Wg=r(mr);ws=n(Wg,"A",{href:!0,id:!0});var Bg=r(ws);zc=t(Bg,"Fork the babel"),Bg.forEach(o),Wg.forEach(o),Jc=c(L),Es=n(L,"P",{});var ci=r(Es);Gc=t(ci,"Head over to "),_s=n(ci,"A",{href:!0,rel:!0});var Vg=r(_s);Xc=t(Vg,"babel's Github repo"),Vg.forEach(o),Yc=t(ci,', click the "Fork" button located at the top left of the page.'),ci.forEach(o),$c=c(L),gr=n(L,"P",{});var zg=r(gr);Oe=n(zg,"SPAN",{style:!0});var Jg=r(Oe);mo=n(Jg,"PICTURE",{});var $m=r(mo);xr=n($m,"SOURCE",{type:!0,srcset:!0}),V=n($m,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),$m.forEach(o),Jg.forEach(o),zg.forEach(o),Zc=c(L),wr=n(L,"P",{});var Gg=r(wr);Kc=t(Gg,"If this is your first time forking a popular open-source project, congratulations! \u{1F389}"),Gg.forEach(o),Qc=c(L),Ts=n(L,"P",{});var pi=r(Ts);ep=t(pi,"Clone your forked babel to your local workspace and "),Is=n(pi,"A",{href:!0,rel:!0});var Xg=r(Is);sp=t(Xg,"set it up"),Xg.forEach(o),tp=t(pi,":"),pi.forEach(o),op=c(L),go=n(L,"DIV",{class:!0});var F1=r(go);F1.forEach(o),ap=c(L),Er=n(L,"P",{});var Yg=r(Er);np=t(Yg,"Meanwhile, let me briefly walk you through how the babel repository is organised."),Yg.forEach(o),rp=c(L),z=n(L,"P",{});var xe=r(z);lp=t(xe,"Babel uses a monorepo structure, all the packages, eg: "),xo=n(xe,"CODE",{class:!0});var $g=r(xo);ip=t($g,"@babel/core"),$g.forEach(o),cp=t(xe,", "),wo=n(xe,"CODE",{class:!0});var Zg=r(wo);pp=t(Zg,"@babel/parser"),Zg.forEach(o),hp=t(xe,", "),Eo=n(xe,"CODE",{class:!0});var Kg=r(Eo);dp=t(Kg,"@babel/plugin-transform-react-jsx"),Kg.forEach(o),kp=t(xe,", etc are in the "),_o=n(xe,"CODE",{class:!0});var Qg=r(_o);up=t(Qg,"packages/"),Qg.forEach(o),vp=t(xe," folder:"),xe.forEach(o),yp=c(L),To=n(L,"DIV",{class:!0});var U1=r(To);U1.forEach(o),fp=c(L),_r=n(L,"BLOCKQUOTE",{});var ex=r(_r);Tr=n(ex,"SMALL",{});var sx=r(Tr);bp=t(sx,"**Trivia:** Babel uses [Makefile](https://opensource.com/article/18/8/what-how-makefile) for automating tasks. For build task, such as `make build`, it will use [Gulp](https://gulpjs.com) as the task runner."),sx.forEach(o),ex.forEach(o),L.forEach(o),$l=c(p),H=n(p,"SECTION",{});var ae=r(H);Ir=n(ae,"H3",{});var tx=r(Ir);Cs=n(tx,"A",{href:!0,id:!0});var ox=r(Cs);mp=t(ox,"Crash Course on Parsing Code to AST"),ox.forEach(o),tx.forEach(o),gp=c(ae),De=n(ae,"P",{});var Xn=r(De);xp=t(Xn,"Before we proceed, if you are unfamiliar with parsers and Abstract Syntax Tree (AST), I highly recommend to checkout "),Os=n(Xn,"A",{href:!0,rel:!0});var ax=r(Os);wp=t(ax,"Vaidehi Joshi"),ax.forEach(o),Ep=t(Xn,"'s "),Ds=n(Xn,"A",{href:!0,rel:!0});var nx=r(Ds);_p=t(nx,"Leveling Up One\u2019s Parsing Game With ASTs"),nx.forEach(o),Tp=t(Xn,"."),Xn.forEach(o),Ip=c(ae),Cr=n(ae,"P",{});var rx=r(Cr);Cp=t(rx,"To summarise, this is what happened when babel is parsing your code:"),rx.forEach(o),Op=c(ae),Ae=n(ae,"UL",{});var Yn=r(Ae);Ke=n(Yn,"LI",{});var zl=r(Ke);Dp=t(zl,"Your code as a "),Io=n(zl,"CODE",{class:!0});var lx=r(Io);Ap=t(lx,"string"),lx.forEach(o),Pp=t(zl," is a long list of characters: "),Co=n(zl,"CODE",{class:!0});var ix=r(Co);Sp=t(ix,"f, u, n, c, t, i, o, n, , @, @, f, ..."),ix.forEach(o),zl.forEach(o),Lp=c(Yn),ge=n(Yn,"LI",{});var to=r(ge);jp=t(to,"The first step is called "),Or=n(to,"STRONG",{});var cx=r(Or);Mp=t(cx,"tokenization"),cx.forEach(o),Hp=t(to,", where babel scans through each character and creates "),Dr=n(to,"EM",{});var px=r(Dr);qp=t(px,"tokens"),px.forEach(o),Np=t(to,", like "),Oo=n(to,"CODE",{class:!0});var hx=r(Oo);Fp=t(hx,"function, @@, foo, (, a, ..."),hx.forEach(o),to.forEach(o),Up=c(Yn),Pe=n(Yn,"LI",{});var $n=r(Pe);Rp=t($n,"The tokens then pass through a parser for "),Ar=n($n,"STRONG",{});var dx=r(Ar);Wp=t(dx,"Syntax analysis"),dx.forEach(o),Bp=t($n,", where babel creates an AST based on "),As=n($n,"A",{href:!0,rel:!0});var kx=r(As);Vp=t(kx,"JavaScript language specification"),kx.forEach(o),zp=t($n,"."),$n.forEach(o),Yn.forEach(o),Jp=c(ae),Se=n(ae,"P",{});var Zn=r(Se);Gp=t(Zn,"If you want to learn more in-depth on compilers in general, "),Ps=n(Zn,"A",{href:!0,rel:!0});var ux=r(Ps);Xp=t(ux,"Robert Nystrom"),ux.forEach(o),Yp=t(Zn,"'s "),Ss=n(Zn,"A",{href:!0,rel:!0});var vx=r(Ss);$p=t(vx,"Crafting Interpreters"),vx.forEach(o),Zp=t(Zn," is a gem."),Zn.forEach(o),Kp=c(ae),Pr=n(ae,"BLOCKQUOTE",{});var yx=r(Pr);Sr=n(yx,"SMALL",{});var fx=r(Sr);Qp=t(fx,"Don't get scared of by the word **compiler**, it is nothing but parsing your code and generate XXX out of it. XXX could be machine code, which is the compiler most of us have in mind; XXX could be JavaScript compatible with older browsers, which is the case for Babel."),fx.forEach(o),yx.forEach(o),ae.forEach(o),Zl=c(p),h=n(p,"SECTION",{});var k=r(h);Lr=n(k,"H2",{});var bx=r(Lr);Ls=n(bx,"A",{href:!0,id:!0});var mx=r(Ls);eh=t(mx,"Our custom babel parser"),mx.forEach(o),bx.forEach(o),sh=c(k),js=n(k,"P",{});var hi=r(js);th=t(hi,"The folder we are going to work on is "),Do=n(hi,"CODE",{class:!0});var gx=r(Do);oh=t(gx,"packages/babel-parser/"),gx.forEach(o),ah=t(hi,":"),hi.forEach(o),nh=c(k),Ao=n(k,"DIV",{class:!0});var R1=r(Ao);R1.forEach(o),rh=c(k),F=n(k,"P",{});var ne=r(F);lh=t(ne,"We've talked about "),jr=n(ne,"EM",{});var xx=r(jr);ih=t(xx,"tokenization"),xx.forEach(o),ch=t(ne," and "),Mr=n(ne,"EM",{});var wx=r(Mr);ph=t(wx,"parsing"),wx.forEach(o),hh=t(ne,", now it's clear where to find the code for each process. "),Po=n(ne,"CODE",{class:!0});var Ex=r(Po);dh=t(Ex,"plugins/"),Ex.forEach(o),kh=t(ne," folder contains plugins that extend the base parser and add custom syntaxes, such as "),So=n(ne,"CODE",{class:!0});var _x=r(So);uh=t(_x,"jsx"),_x.forEach(o),vh=t(ne," and "),Lo=n(ne,"CODE",{class:!0});var Tx=r(Lo);yh=t(Tx,"flow"),Tx.forEach(o),fh=t(ne,"."),ne.forEach(o),bh=c(k),Ms=n(k,"P",{});var di=r(Ms);mh=t(di,"Let's do a "),Hs=n(di,"A",{href:!0,rel:!0});var Ix=r(Hs);gh=t(Ix,"Test-driven development (TDD)"),Ix.forEach(o),xh=t(di,'. I find it easier to define the test case then slowly work our way to "fix" it. It is especially true in an unfamiliar codebase, TDD allows you to "easily" point out code places you need to change.'),di.forEach(o),wh=c(k),jo=n(k,"DIV",{class:!0});var W1=r(jo);W1.forEach(o),Eh=c(k),Le=n(k,"P",{});var Kn=r(Le);_h=t(Kn,"You can run "),Mo=n(Kn,"CODE",{class:!0});var Cx=r(Mo);Th=t(Cx,'TEST_ONLY=babel-parser TEST_GREP="curry function" make test-only'),Cx.forEach(o),Ih=t(Kn," to run tests for "),Ho=n(Kn,"CODE",{class:!0});var Ox=r(Ho);Ch=t(Ox,"babel-parser"),Ox.forEach(o),Oh=t(Kn," and see your failing case:"),Kn.forEach(o),Dh=c(k),qo=n(k,"DIV",{class:!0});var B1=r(qo);B1.forEach(o),Ah=c(k),qs=n(k,"BLOCKQUOTE",{});var ki=r(qs);Hr=n(ki,"SMALL",{});var Dx=r(Hr);Ph=t(Dx,"If you find scanning through all the test cases takes time, you can directly call `jest` to run the test:"),Dx.forEach(o),Sh=c(ki),No=n(ki,"DIV",{class:!0});var V1=r(No);V1.forEach(o),ki.forEach(o),Lh=c(k),Ns=n(k,"P",{});var ui=r(Ns);jh=t(ui,"Our parser found 2 seemingly innocent "),Fo=n(ui,"CODE",{class:!0});var Ax=r(Fo);Mh=t(Ax,"@"),Ax.forEach(o),Hh=t(ui," tokens at a place where they shouldn't be present."),ui.forEach(o),qh=c(k),Fs=n(k,"P",{});var vi=r(Fs);Nh=t(vi,"How do I know that? Let's start the watch mode, "),Uo=n(vi,"CODE",{class:!0});var Px=r(Uo);Fh=t(Px,"make watch"),Px.forEach(o),Uh=t(vi,", wear our detective cap \u{1F575}\uFE0F\u200D and start digging!"),vi.forEach(o),Rh=c(k),je=n(k,"P",{});var Qn=r(je);Wh=t(Qn,"Tracing the stack trace, led us to "),Us=n(Qn,"A",{href:!0,rel:!0});var Sx=r(Us);Ro=n(Sx,"CODE",{class:!0});var Lx=r(Ro);Bh=t(Lx,"packages/babel-parser/src/parser/expression.js"),Lx.forEach(o),Sx.forEach(o),Vh=t(Qn," where it throws "),Wo=n(Qn,"CODE",{class:!0});var jx=r(Wo);zh=t(jx,"this.unexpected()"),jx.forEach(o),Jh=t(Qn,"."),Qn.forEach(o),Gh=c(k),Rs=n(k,"P",{});var yi=r(Rs);Xh=t(yi,"Let us add some "),Bo=n(yi,"CODE",{class:!0});var Mx=r(Bo);Yh=t(Mx,"console.log"),Mx.forEach(o),$h=t(yi,":"),yi.forEach(o),Zh=c(k),Vo=n(k,"DIV",{class:!0});var z1=r(Vo);z1.forEach(o),Kh=c(k),Ws=n(k,"P",{});var fi=r(Ws);Qh=t(fi,"As you can see, both tokens are "),zo=n(fi,"CODE",{class:!0});var Hx=r(zo);ed=t(Hx,"@"),Hx.forEach(o),sd=t(fi," token:"),fi.forEach(o),td=c(k),Jo=n(k,"DIV",{class:!0});var J1=r(Jo);J1.forEach(o),od=c(k),Me=n(k,"P",{});var er=r(Me);ad=t(er,"How do I know "),Go=n(er,"CODE",{class:!0});var qx=r(Go);nd=t(qx,"this.state.type"),qx.forEach(o),rd=t(er," and "),Xo=n(er,"CODE",{class:!0});var Nx=r(Xo);ld=t(Nx,"this.lookahead().type"),Nx.forEach(o),id=t(er," will give me the current and the next token?"),er.forEach(o),cd=c(k),Bs=n(k,"P",{});var bi=r(Bs);pd=t(bi,"Well, I'll explained them "),Yo=n(bi,"A",{href:!0});var Fx=r(Yo);hd=t(Fx,"later"),Fx.forEach(o),dd=t(bi,"."),bi.forEach(o),kd=c(k),qr=n(k,"P",{});var Ux=r(qr);ud=t(Ux,"Let's recap what we've done so far before we move on:"),Ux.forEach(o),vd=c(k),ie=n(k,"UL",{});var as=r(ie);$o=n(as,"LI",{});var Zm=r($o);yd=t(Zm,"We've written a test case for "),Zo=n(Zm,"CODE",{class:!0});var Rx=r(Zo);fd=t(Rx,"babel-parser"),Rx.forEach(o),Zm.forEach(o),bd=c(as),Vs=n(as,"LI",{});var mi=r(Vs);md=t(mi,"We ran "),Ko=n(mi,"CODE",{class:!0});var Wx=r(Ko);gd=t(Wx,"make test-only"),Wx.forEach(o),xd=t(mi," to run the test case"),mi.forEach(o),wd=c(as),Qo=n(as,"LI",{});var Km=r(Qo);Ed=t(Km,"We've started the watch mode via "),ea=n(Km,"CODE",{class:!0});var Bx=r(ea);_d=t(Bx,"make watch"),Bx.forEach(o),Km.forEach(o),Td=c(as),sa=n(as,"LI",{});var Qm=r(sa);Id=t(Qm,"We've learned about parser state, and console out the current token type, "),ta=n(Qm,"CODE",{class:!0});var Vx=r(ta);Cd=t(Vx,"this.state.type"),Vx.forEach(o),Qm.forEach(o),as.forEach(o),Od=c(k),Nr=n(k,"P",{});var zx=r(Nr);Dd=t(zx,"Here's what we are going to do next:"),zx.forEach(o),Ad=c(k),He=n(k,"P",{});var sr=r(He);Pd=t(sr,"If there's 2 consecutive "),oa=n(sr,"CODE",{class:!0});var Jx=r(oa);Sd=t(Jx,"@"),Jx.forEach(o),Ld=t(sr,", it should not be separate tokens, it should be a "),aa=n(sr,"CODE",{class:!0});var Gx=r(aa);jd=t(Gx,"@@"),Gx.forEach(o),Md=t(sr," token, the new token we just defined for our curry function"),sr.forEach(o),k.forEach(o),Kl=c(p),E=n(p,"SECTION",{});var A=r(E);Fr=n(A,"H3",{});var Xx=r(Fr);zs=n(Xx,"A",{href:!0,id:!0});var Yx=r(zs);Hd=t(Yx,"A new token: '@@'"),Yx.forEach(o),Xx.forEach(o),qd=c(A),Js=n(A,"P",{});var gi=r(Js);Nd=t(gi,"Let's first look at where a token type is defined: "),Gs=n(gi,"A",{href:!0,rel:!0});var $x=r(Gs);Fd=t($x,"packages/babel-parser/src/tokenizer/types.js"),$x.forEach(o),Ud=t(gi,"."),gi.forEach(o),Rd=c(A),Ur=n(A,"P",{});var Zx=r(Ur);Wd=t(Zx,"Here you see a list of tokens, so let's add our new token definition in as well:"),Zx.forEach(o),Bd=c(A),na=n(A,"DIV",{class:!0});var G1=r(na);G1.forEach(o),Vd=c(A),ee=n(A,"P",{});var $e=r(ee);zd=t($e,"Next, let's find out where the token gets created during "),Rr=n($e,"EM",{});var Kx=r(Rr);Jd=t(Kx,"tokenization"),Kx.forEach(o),Gd=t($e,". A quick search on "),ra=n($e,"CODE",{class:!0});var Qx=r(ra);Xd=t(Qx,"tt.at"),Qx.forEach(o),Yd=t($e," within "),la=n($e,"CODE",{class:!0});var ew=r(la);$d=t(ew,"babel-parser/src/tokenizer"),ew.forEach(o),Zd=t($e," lead us to "),Xs=n($e,"A",{href:!0,rel:!0});var sw=r(Xs);Kd=t(sw,"packages/babel-parser/src/tokenizer/index.js"),sw.forEach(o),$e.forEach(o),Qd=c(A),Wr=n(A,"BLOCKQUOTE",{});var tw=r(Wr);Br=n(tw,"SMALL",{});var ow=r(Br);ek=t(ow,"Well, token types are import as `tt` throughout the babel-parser."),ow.forEach(o),tw.forEach(o),sk=c(A),J=n(A,"P",{});var we=r(J);tk=t(we,"Let's create the token "),ia=n(we,"CODE",{class:!0});var aw=r(ia);ok=t(aw,"tt.atat"),aw.forEach(o),ak=t(we," instead of "),ca=n(we,"CODE",{class:!0});var nw=r(ca);nk=t(nw,"tt.at"),nw.forEach(o),rk=t(we," if there's another "),pa=n(we,"CODE",{class:!0});var rw=r(pa);lk=t(rw,"@"),rw.forEach(o),ik=t(we," succeed the current "),ha=n(we,"CODE",{class:!0});var lw=r(ha);ck=t(lw,"@"),lw.forEach(o),pk=t(we,":"),we.forEach(o),hk=c(A),da=n(A,"DIV",{class:!0});var X1=r(da);X1.forEach(o),dk=c(A),Vr=n(A,"P",{});var iw=r(Vr);kk=t(iw,"If you run the test again, you will see that the current token and the next token has changed:"),iw.forEach(o),uk=c(A),ka=n(A,"DIV",{class:!0});var Y1=r(ka);Y1.forEach(o),vk=c(A),ua=n(A,"P",{});var eg=r(ua);yk=t(eg,"Yeah! It looks good and lets move on. "),Ys=n(eg,"SPAN",{style:!0});var cw=r(Ys);fk=t(cw,"\u{1F3C3}\u200D"),cw.forEach(o),eg.forEach(o),A.forEach(o),Ql=c(p),b=n(p,"SECTION",{});var T=r(b);zr=n(T,"H3",{});var pw=r(zr);$s=n(pw,"A",{href:!0,id:!0});var hw=r($s);bk=t(hw,"The new parser"),hw.forEach(o),pw.forEach(o),mk=c(T),Zs=n(T,"P",{});var xi=r(Zs);gk=t(xi,"Before we move on, let's inspect how "),Ks=n(xi,"A",{href:!0,rel:!0});var dw=r(Ks);xk=t(dw,"generator functions are represented in AST"),dw.forEach(o),wk=t(xi,":"),xi.forEach(o),Ek=c(T),Jr=n(T,"P",{});var kw=r(Jr);qe=n(kw,"SPAN",{style:!0});var uw=r(qe);va=n(uw,"PICTURE",{});var sg=r(va);Gr=n(sg,"SOURCE",{type:!0,srcset:!0}),G=n(sg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),sg.forEach(o),uw.forEach(o),kw.forEach(o),_k=c(T),Ne=n(T,"P",{});var tr=r(Ne);Tk=t(tr,"As you can see, a generator function is represented by the "),ya=n(tr,"CODE",{class:!0});var vw=r(ya);Ik=t(vw,"generator: true"),vw.forEach(o),Ck=t(tr," attribute of a "),fa=n(tr,"CODE",{class:!0});var yw=r(fa);Ok=t(yw,"FunctionDeclaration"),yw.forEach(o),Dk=t(tr,"."),tr.forEach(o),Ak=c(T),Fe=n(T,"P",{});var or=r(Fe);Pk=t(or,"Similarly, we can add a "),ba=n(or,"CODE",{class:!0});var fw=r(ba);Sk=t(fw,"curry: true"),fw.forEach(o),Lk=t(or," attribute of the "),ma=n(or,"CODE",{class:!0});var bw=r(ma);jk=t(bw,"FunctionDeclaration"),bw.forEach(o),Mk=t(or," too if it is a curry function:"),or.forEach(o),Hk=c(T),Xr=n(T,"P",{});var mw=r(Xr);Ue=n(mw,"SPAN",{style:!0});var gw=r(Ue);ga=n(gw,"PICTURE",{});var tg=r(ga);Yr=n(tg,"SOURCE",{type:!0,srcset:!0}),X=n(tg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),tg.forEach(o),gw.forEach(o),mw.forEach(o),qk=c(T),$r=n(T,"P",{});var xw=r($r);Nk=t(xw,"We have a plan now, let's implement it."),xw.forEach(o),Fk=c(T),Y=n(T,"P",{});var Ee=r(Y);Uk=t(Ee,"A quick search on "),Zr=n(Ee,"EM",{});var ww=r(Zr);Rk=t(ww,'"FunctionDeclaration"'),ww.forEach(o),Wk=t(Ee," leads us to a function called "),xa=n(Ee,"CODE",{class:!0});var Ew=r(xa);Bk=t(Ew,"parseFunction"),Ew.forEach(o),Vk=t(Ee," in "),Qs=n(Ee,"A",{href:!0,rel:!0});var _w=r(Qs);zk=t(_w,"packages/babel-parser/src/parser/statement.js"),_w.forEach(o),Jk=t(Ee,", and here we find a line that sets the "),wa=n(Ee,"CODE",{class:!0});var Tw=r(wa);Gk=t(Tw,"generator"),Tw.forEach(o),Xk=t(Ee," attribute, let's add one more line:"),Ee.forEach(o),Yk=c(T),Ea=n(T,"DIV",{class:!0});var $1=r(Ea);$1.forEach(o),$k=c(T),Kr=n(T,"P",{});var Iw=r(Kr);Zk=t(Iw,"If you run the test again, you will be amazed that it passed!"),Iw.forEach(o),Kk=c(T),_a=n(T,"DIV",{class:!0});var Z1=r(_a);Z1.forEach(o),Qk=c(T),Qr=n(T,"P",{});var Cw=r(Qr);eu=t(Cw,"That's it? How did we miraculously fix it?"),Cw.forEach(o),su=c(T),el=n(T,"P",{});var Ow=r(el);tu=t(Ow,"I am going to briefly explain how parsing works, and in the process hopefully, you understood what that one-liner change did."),Ow.forEach(o),T.forEach(o),ei=c(p),f=n(p,"SECTION",{});var w=r(f);sl=n(w,"H3",{});var Dw=r(sl);et=n(Dw,"A",{href:!0,id:!0});var Aw=r(et);ou=t(Aw,"How parsing works"),Aw.forEach(o),Dw.forEach(o),au=c(w),st=n(w,"P",{});var wi=r(st);nu=t(wi,"With the list of tokens from the "),tl=n(wi,"EM",{});var Pw=r(tl);ru=t(Pw,"tokenizer"),Pw.forEach(o),lu=t(wi,", the parser consumes the token one by one and constructs the AST. The parser uses the language grammar specification to decide how to use the tokens, which token to expect next."),wi.forEach(o),iu=c(w),ol=n(w,"P",{});var Sw=r(ol);cu=t(Sw,"The grammar specification looks something like this:"),Sw.forEach(o),pu=c(w),Ta=n(w,"DIV",{class:!0});var K1=r(Ta);K1.forEach(o),hu=c(w),tt=n(w,"P",{});var Ei=r(tt);du=t(Ei,"It explains the precedence of each expressions/statements. For example, an "),Ia=n(Ei,"CODE",{class:!0});var Lw=r(Ia);ku=t(Lw,"AdditiveExpression"),Lw.forEach(o),uu=t(Ei," is made up of either:"),Ei.forEach(o),vu=c(w),Re=n(w,"UL",{});var ar=r(Re);ot=n(ar,"LI",{});var _i=r(ot);yu=t(_i,"a "),Ca=n(_i,"CODE",{class:!0});var jw=r(Ca);fu=t(jw,"MultiplicativeExpression"),jw.forEach(o),bu=t(_i,", or"),_i.forEach(o),mu=c(ar),ce=n(ar,"LI",{});var ns=r(ce);gu=t(ns,"an "),Oa=n(ns,"CODE",{class:!0});var Mw=r(Oa);xu=t(Mw,"AdditiveExpression"),Mw.forEach(o),wu=t(ns," followed by "),Da=n(ns,"CODE",{class:!0});var Hw=r(Da);Eu=t(Hw,"+"),Hw.forEach(o),_u=t(ns," operator token followed by "),Aa=n(ns,"CODE",{class:!0});var qw=r(Aa);Tu=t(qw,"MultiplicativeExpression"),qw.forEach(o),Iu=t(ns,", or"),ns.forEach(o),Cu=c(ar),pe=n(ar,"LI",{});var rs=r(pe);Ou=t(rs,"an "),Pa=n(rs,"CODE",{class:!0});var Nw=r(Pa);Du=t(Nw,"AdditiveExpression"),Nw.forEach(o),Au=t(rs," followed by "),Sa=n(rs,"CODE",{class:!0});var Fw=r(Sa);Pu=t(Fw,"-"),Fw.forEach(o),Su=t(rs," operator token followed by "),La=n(rs,"CODE",{class:!0});var Uw=r(La);Lu=t(Uw,"MultiplicativeExpression"),Uw.forEach(o),ju=t(rs,"."),rs.forEach(o),ar.forEach(o),Mu=c(w),at=n(w,"P",{});var Ti=r(at);Hu=t(Ti,"So if you have an expression "),ja=n(Ti,"CODE",{class:!0});var Rw=r(ja);qu=t(Rw,"1 + 2 * 3"),Rw.forEach(o),Nu=t(Ti,", it will be like:"),Ti.forEach(o),Fu=c(w),Ma=n(w,"DIV",{class:!0});var Q1=r(Ma);Q1.forEach(o),Uu=c(w),al=n(w,"P",{});var Ww=r(al);Ru=t(Ww,"instead of"),Ww.forEach(o),Wu=c(w),Ha=n(w,"DIV",{class:!0});var e_=r(Ha);e_.forEach(o),Bu=c(w),nl=n(w,"P",{});var Bw=r(nl);Vu=t(Bw,"With these rules, we translate them into parser code:"),Bw.forEach(o),zu=c(w),qa=n(w,"DIV",{class:!0});var s_=r(qa);s_.forEach(o),Ju=c(w),rl=n(w,"P",{});var Vw=r(rl);ll=n(Vw,"EM",{});var zw=r(ll);Gu=t(zw,"This is a made-up code that oversimplifies what babel have, but I hope you get the gist of it."),zw.forEach(o),Vw.forEach(o),Xu=c(w),$=n(w,"P",{});var _e=r($);Yu=t(_e,"As you can see here, the parser is recursively in nature, and it goes from the lowest precedence to the highest precedence expressions/statements. Eg: "),Na=n(_e,"CODE",{class:!0});var Jw=r(Na);$u=t(Jw,"parseAdditiveExpression"),Jw.forEach(o),Zu=t(_e," calls "),Fa=n(_e,"CODE",{class:!0});var Gw=r(Fa);Ku=t(Gw,"parseMultiplicativeExpression"),Gw.forEach(o),Qu=t(_e,", which in turn calls "),Ua=n(_e,"CODE",{class:!0});var Xw=r(Ua);ev=t(Xw,"parseExponentiationExpression"),Xw.forEach(o),sv=t(_e,", which in turn calls ... . This recursive process is called the "),nt=n(_e,"A",{href:!0,rel:!0});var Yw=r(nt);tv=t(Yw,"Recursive Descent Parsing"),Yw.forEach(o),ov=t(_e,"."),_e.forEach(o),w.forEach(o),si=c(p),m=n(p,"SECTION",{});var I=r(m);il=n(I,"H4",{});var $w=r(il);rt=n($w,"A",{href:!0,id:!0});var Zw=r(rt);av=t(Zw,"this.eat, this.match, this.next"),Zw.forEach(o),$w.forEach(o),nv=c(I),he=n(I,"P",{});var ls=r(he);rv=t(ls,"If you have noticed, in my examples above, I used some utility function, such as "),Ra=n(ls,"CODE",{class:!0});var Kw=r(Ra);lv=t(Kw,"this.eat"),Kw.forEach(o),iv=t(ls,", "),Wa=n(ls,"CODE",{class:!0});var Qw=r(Wa);cv=t(Qw,"this.match"),Qw.forEach(o),pv=t(ls,", "),Ba=n(ls,"CODE",{class:!0});var e2=r(Ba);hv=t(e2,"this.next"),e2.forEach(o),dv=t(ls,", etc. These are babel parser's internal functions, yet they are quite ubiquitous amongst parsers as well:"),ls.forEach(o),kv=c(I),de=n(I,"UL",{});var is=r(de);Qe=n(is,"LI",{});var Jl=r(Qe);cl=n(Jl,"STRONG",{});var s2=r(cl);Va=n(s2,"CODE",{class:!0});var t2=r(Va);uv=t(t2,"this.match"),t2.forEach(o),s2.forEach(o),vv=t(Jl," returns a "),za=n(Jl,"CODE",{class:!0});var o2=r(za);yv=t(o2,"boolean"),o2.forEach(o),fv=t(Jl," indicating whether the current token matches the condition"),Jl.forEach(o),bv=c(is),Ja=n(is,"LI",{});var og=r(Ja);pl=n(og,"STRONG",{});var a2=r(pl);Ga=n(a2,"CODE",{class:!0});var n2=r(Ga);mv=t(n2,"this.next"),n2.forEach(o),a2.forEach(o),gv=t(og," moves the token list forward to point to the next token"),og.forEach(o),xv=c(is),U=n(is,"LI",{});var be=r(U);hl=n(be,"STRONG",{});var r2=r(hl);Xa=n(r2,"CODE",{class:!0});var l2=r(Xa);wv=t(l2,"this.eat"),l2.forEach(o),r2.forEach(o),Ev=t(be," return what "),Ya=n(be,"CODE",{class:!0});var i2=r(Ya);_v=t(i2,"this.match"),i2.forEach(o),Tv=t(be," returns and if "),$a=n(be,"CODE",{class:!0});var c2=r($a);Iv=t(c2,"this.match"),c2.forEach(o),Cv=t(be," returns "),Za=n(be,"CODE",{class:!0});var p2=r(Za);Ov=t(p2,"true"),p2.forEach(o),Dv=t(be,", will do "),Ka=n(be,"CODE",{class:!0});var h2=r(Ka);Av=t(h2,"this.next"),h2.forEach(o),dl=n(be,"UL",{});var d2=r(dl);se=n(d2,"LI",{});var Ze=r(se);Qa=n(Ze,"CODE",{class:!0});var k2=r(Qa);Pv=t(k2,"this.eat"),k2.forEach(o),Sv=t(Ze," is commonly used for optional operators, like "),en=n(Ze,"CODE",{class:!0});var u2=r(en);Lv=t(u2,"*"),u2.forEach(o),jv=t(Ze," in generator function, "),sn=n(Ze,"CODE",{class:!0});var v2=r(sn);Mv=t(v2,";"),v2.forEach(o),Hv=t(Ze," at the end of statements, and "),tn=n(Ze,"CODE",{class:!0});var y2=r(tn);qv=t(y2,"?"),y2.forEach(o),Nv=t(Ze," in typescript types."),Ze.forEach(o),d2.forEach(o),be.forEach(o),Fv=c(is),on=n(is,"LI",{});var ag=r(on);kl=n(ag,"STRONG",{});var f2=r(kl);an=n(f2,"CODE",{class:!0});var b2=r(an);Uv=t(b2,"this.lookahead"),b2.forEach(o),f2.forEach(o),Rv=t(ag," get the next token without moving forward to make a decision on the current node"),ag.forEach(o),is.forEach(o),Wv=c(I),ul=n(I,"P",{});var m2=r(ul);Bv=t(m2,"If you take a look again the parser code we just changed, it's easier to read it in now."),m2.forEach(o),Vv=c(I),nn=n(I,"DIV",{class:!0});var t_=r(nn);t_.forEach(o),zv=c(I),vl=n(I,"P",{});var g2=r(vl);Jv=t(g2,"I know I didn't do a good job explaining how a parser works. Here are some resources that I learned from, and I highly recommend them:"),g2.forEach(o),Gv=c(I),lt=n(I,"UL",{});var Ii=r(lt);it=n(Ii,"LI",{});var Ci=r(it);ct=n(Ci,"A",{href:!0,rel:!0});var x2=r(ct);Xv=t(x2,"Crafting Interpreters"),x2.forEach(o),Yv=t(Ci," by "),pt=n(Ci,"A",{href:!0,rel:!0});var w2=r(pt);$v=t(w2,"Robert Nystrom"),w2.forEach(o),Ci.forEach(o),Zv=c(Ii),rn=n(Ii,"LI",{});var ng=r(rn);ht=n(ng,"A",{href:!0,rel:!0});var E2=r(ht);Kv=t(E2,'Free Udacity course: "Compilers: Theory and Practice"'),E2.forEach(o),Qv=t(ng,", offered by Georgia Tech"),ng.forEach(o),Ii.forEach(o),ey=c(I),sy=n(I,"HR",{}),ty=c(I),ln=n(I,"P",{});var rg=r(ln);yl=n(rg,"STRONG",{});var _2=r(yl);oy=t(_2,"Side Note"),_2.forEach(o),ay=t(rg,': You might be curious how am I able to visualize the custom syntax in the Babel AST Explorer, where I showed you the new "curry" attribute in the AST.'),rg.forEach(o),ny=c(I),fl=n(I,"P",{});var T2=r(fl);ry=t(T2,"That's because I've added a new feature in the Babel AST Explorer where you can upload your custom parser!"),T2.forEach(o),ly=c(I),We=n(I,"P",{});var nr=r(We);iy=t(nr,"If you go to "),cn=n(nr,"CODE",{class:!0});var I2=r(cn);cy=t(I2,"packages/babel-parser/lib"),I2.forEach(o),py=t(nr,", you would find the compiled version of your parser and the source map. Open the drawer of the Babel AST Explorer, you will see a button to upload a custom parser. Drag the "),pn=n(nr,"CODE",{class:!0});var C2=r(pn);hy=t(C2,"packages/babel-parser/lib/index.js"),C2.forEach(o),dy=t(nr," in and you will be visualizing the AST generated via your custom parser!"),nr.forEach(o),ky=c(I),bl=n(I,"P",{});var O2=r(bl);Be=n(O2,"SPAN",{style:!0});var D2=r(Be);te=n(D2,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),D2.forEach(o),O2.forEach(o),uy=c(I),vy=n(I,"HR",{}),I.forEach(o),ti=c(p),d=n(p,"SECTION",{});var u=r(d);ml=n(u,"H2",{});var A2=r(ml);dt=n(A2,"A",{href:!0,id:!0});var P2=r(dt);yy=t(P2,"Our babel plugin"),P2.forEach(o),A2.forEach(o),fy=c(u),gl=n(u,"P",{});var S2=r(gl);by=t(S2,"With our custom babel parser done, let's move on to write our babel plugin."),S2.forEach(o),my=c(u),xl=n(u,"P",{});var L2=r(xl);gy=t(L2,"But maybe before that, you may have some doubts on how are we going to use our custom babel parser, especially with whatever build stack we are using right now?"),L2.forEach(o),xy=c(u),hn=n(u,"P",{});var lg=r(hn);wy=t(lg,"Well, fret not. A babel plugin can provide a custom parser, which is "),kt=n(lg,"A",{href:!0,rel:!0});var j2=r(kt);Ey=t(j2,"documented on the babel website"),j2.forEach(o),lg.forEach(o),_y=c(u),dn=n(u,"DIV",{class:!0});var o_=r(dn);o_.forEach(o),Ty=c(u),wl=n(u,"P",{});var M2=r(wl);Iy=t(M2,"Since we forked out the babel parser, all existing babel parser options or built-in plugins will still work perfectly."),M2.forEach(o),Cy=c(u),kn=n(u,"P",{});var ig=r(kn);Oy=t(ig,"With this doubt out of the way, let see how we can make our curry function curryable? "),El=n(ig,"EM",{});var H2=r(El);Dy=t(H2,"(not entirely sure there's such word)"),H2.forEach(o),ig.forEach(o),Ay=c(u),Py=n(u,"HR",{}),Sy=c(u),_l=n(u,"P",{});var q2=r(_l);Ly=t(q2,"Before we start, if you have eagerly tried to add our plugin into your build system, you would notice that the curry function gets compiled to a normal function."),q2.forEach(o),jy=c(u),ke=n(u,"P",{});var cs=r(ke);My=t(cs,"This is because, after parsing + transformation, babel will use "),ut=n(cs,"A",{href:!0,rel:!0});var N2=r(ut);Hy=t(N2,"@babel/generator"),N2.forEach(o),qy=t(cs," to generate code from the transformed AST. Since the "),un=n(cs,"CODE",{class:!0});var F2=r(un);Ny=t(F2,"@babel/generator"),F2.forEach(o),Fy=t(cs," has no idea about the new "),vn=n(cs,"CODE",{class:!0});var U2=r(vn);Uy=t(U2,"curry"),U2.forEach(o),Ry=t(cs," attribute we added, it will be omitted."),cs.forEach(o),Wy=c(u),Tl=n(u,"BLOCKQUOTE",{});var R2=r(Tl);vt=n(R2,"P",{});var Oi=r(vt);By=t(Oi,"If one day curry function becomes the new JavaScript syntax, you may want to make a pull request to add one more line "),yt=n(Oi,"A",{href:!0,rel:!0});var W2=r(yt);Vy=t(W2,"here"),W2.forEach(o),zy=t(Oi,"!"),Oi.forEach(o),R2.forEach(o),Jy=c(u),Gy=n(u,"HR",{}),Xy=c(u),ft=n(u,"P",{});var Di=r(ft);Yy=t(Di,"Ok, to make our function curryable, we can wrap it with a "),yn=n(Di,"CODE",{class:!0});var B2=r(yn);$y=t(B2,"currying"),B2.forEach(o),Zy=t(Di," helper higher-order function:"),Di.forEach(o),Ky=c(u),fn=n(u,"DIV",{class:!0});var a_=r(fn);a_.forEach(o),Qy=c(u),Il=n(u,"BLOCKQUOTE",{});var V2=r(Il);es=n(V2,"P",{});var Gl=r(es);ef=t(Gl,"If you want to learn how to write a currying function, you can read this "),bt=n(Gl,"A",{href:!0,rel:!0});var z2=r(bt);sf=t(z2,"Currying in JS"),z2.forEach(o),tf=t(Gl," by "),mt=n(Gl,"A",{href:!0,rel:!0});var J2=r(mt);of=t(J2,"Shirsh Zibbu"),J2.forEach(o),Gl.forEach(o),V2.forEach(o),af=c(u),Cl=n(u,"P",{});var G2=r(Cl);nf=t(G2,"So when we transform our curry function, we can transform it into the following:"),G2.forEach(o),rf=c(u),bn=n(u,"DIV",{class:!0});var n_=r(bn);n_.forEach(o),lf=c(u),Ol=n(u,"BLOCKQUOTE",{});var X2=r(Ol);Ve=n(X2,"P",{});var rr=r(Ve);cf=t(rr,"Let's first ignore "),gt=n(rr,"A",{href:!0,rel:!0});var Y2=r(gt);pf=t(Y2,"function hoisting"),Y2.forEach(o),hf=t(rr," in JavaScript, where you can call "),mn=n(rr,"CODE",{class:!0});var $2=r(mn);df=t($2,"foo"),$2.forEach(o),kf=t(rr," before it is defined."),rr.forEach(o),X2.forEach(o),uf=c(u),xt=n(u,"P",{});var Ai=r(xt);vf=t(Ai,"If you have read my "),gn=n(Ai,"A",{href:!0});var Z2=r(gn);yf=t(Z2,"step-by-step guide on babel transformation"),Z2.forEach(o),ff=t(Ai,", writing this transformation should be manageable:"),Ai.forEach(o),bf=c(u),xn=n(u,"DIV",{class:!0});var r_=r(xn);r_.forEach(o),mf=c(u),wt=n(u,"P",{});var Pi=r(wt);gf=t(Pi,"The question is how do we provide the "),wn=n(Pi,"CODE",{class:!0});var K2=r(wn);xf=t(K2,"currying"),K2.forEach(o),wf=t(Pi," function?"),Pi.forEach(o),Ef=c(u),Dl=n(u,"P",{});var Q2=r(Dl);_f=t(Q2,"There are 2 ways:"),Q2.forEach(o),u.forEach(o),oi=c(p),oe=n(p,"SECTION",{});var ps=r(oe);Al=n(ps,"H3",{});var eE=r(Al);ze=n(eE,"A",{href:!0,id:!0});var Si=r(ze);Tf=t(Si,"1. Assume "),En=n(Si,"CODE",{class:!0});var sE=r(En);If=t(sE,"currying"),sE.forEach(o),Cf=t(Si," has been declared in the global scope."),Si.forEach(o),eE.forEach(o),Of=c(ps),Pl=n(ps,"P",{});var tE=r(Pl);Df=t(tE,"Basically, your job is done here."),tE.forEach(o),Af=c(ps),ue=n(ps,"P",{});var hs=r(ue);Pf=t(hs,"If "),_n=n(hs,"CODE",{class:!0});var oE=r(_n);Sf=t(oE,"currying"),oE.forEach(o),Lf=t(hs," is not defined, then when executing the compiled code, the runtime will scream out "),Sl=n(hs,"EM",{});var aE=r(Sl);jf=t(aE,'"currying is not defined"'),aE.forEach(o),Mf=t(hs,", just like the "),Et=n(hs,"A",{href:!0,rel:!0});var nE=r(Et);Hf=t(nE,'"regeneratorRuntime is not defined"'),nE.forEach(o),qf=t(hs,"."),hs.forEach(o),Nf=c(ps),Je=n(ps,"P",{});var lr=r(Je);Ff=t(lr,"So probably you have to educate the users to install "),Tn=n(lr,"CODE",{class:!0});var rE=r(Tn);Uf=t(rE,"currying"),rE.forEach(o),Rf=t(lr," polyfills in order to use your "),In=n(lr,"CODE",{class:!0});var lE=r(In);Wf=t(lE,"babel-plugin-transformation-curry-function"),lE.forEach(o),Bf=t(lr,"."),lr.forEach(o),ps.forEach(o),ai=c(p),_=n(p,"SECTION",{});var P=r(_);Ll=n(P,"H3",{});var iE=r(Ll);ss=n(iE,"A",{href:!0,id:!0});var cg=r(ss);Vf=t(cg,"2. Use the "),Cn=n(cg,"CODE",{class:!0});var cE=r(Cn);zf=t(cE,"@babel/helpers"),cE.forEach(o),cg.forEach(o),iE.forEach(o),Jf=c(P),Z=n(P,"P",{});var Te=r(Z);Gf=t(Te,"You can add a new helper to "),On=n(Te,"CODE",{class:!0});var pE=r(On);Xf=t(pE,"@babel/helpers"),pE.forEach(o),Yf=t(Te,", which of course you are unlikely to merge that into the official "),Dn=n(Te,"CODE",{class:!0});var hE=r(Dn);$f=t(hE,"@babel/helpers"),hE.forEach(o),Zf=t(Te,", so you would have to figure a way to make "),An=n(Te,"CODE",{class:!0});var dE=r(An);Kf=t(dE,"@babel/core"),dE.forEach(o),Qf=t(Te," to resolve to your "),Pn=n(Te,"CODE",{class:!0});var kE=r(Pn);eb=t(kE,"@babel/helpers"),kE.forEach(o),sb=t(Te,":"),Te.forEach(o),tb=c(P),Sn=n(P,"DIV",{class:!0});var l_=r(Sn);l_.forEach(o),ob=c(P),jl=n(P,"P",{});var uE=r(jl);ts=n(uE,"EM",{});var Xl=r(ts);Ml=n(Xl,"STRONG",{});var vE=r(Ml);ab=t(vE,"Disclaimer:"),vE.forEach(o),nb=t(Xl," I have not personally tried this, but I believe it will work. If you encountered problems trying this, "),_t=n(Xl,"A",{href:!0,rel:!0});var yE=r(_t);rb=t(yE,"DM me"),yE.forEach(o),lb=t(Xl,", I am very happy to discuss it with you."),Xl.forEach(o),uE.forEach(o),ib=c(P),Tt=n(P,"P",{});var Li=r(Tt);cb=t(Li,"Adding a new helper function into "),Ln=n(Li,"CODE",{class:!0});var fE=r(Ln);pb=t(fE,"@babel/helpers"),fE.forEach(o),hb=t(Li," is very easy."),Li.forEach(o),db=c(P),It=n(P,"P",{});var ji=r(It);kb=t(ji,"Head over to "),Ct=n(ji,"A",{href:!0,rel:!0});var bE=r(Ct);ub=t(bE,"packages/babel-helpers/src/helpers.js"),bE.forEach(o),vb=t(ji," and add a new entry:"),ji.forEach(o),yb=c(P),jn=n(P,"DIV",{class:!0});var i_=r(jn);i_.forEach(o),fb=c(P),ve=n(P,"P",{});var ds=r(ve);bb=t(ds,"The helper tag function specifies the "),Mn=n(ds,"CODE",{class:!0});var mE=r(Mn);mb=t(mE,"@babel/core"),mE.forEach(o),gb=t(ds," version required. The trick here is to "),Hn=n(ds,"CODE",{class:!0});var gE=r(Hn);xb=t(gE,"export default"),gE.forEach(o),wb=t(ds," the "),qn=n(ds,"CODE",{class:!0});var xE=r(qn);Eb=t(xE,"currying"),xE.forEach(o),_b=t(ds," function."),ds.forEach(o),Tb=c(P),Ot=n(P,"P",{});var Mi=r(Ot);Ib=t(Mi,"To use the helper, just call the "),Nn=n(Mi,"CODE",{class:!0});var wE=r(Nn);Cb=t(wE,"this.addHelper()"),wE.forEach(o),Ob=t(Mi,":"),Mi.forEach(o),Db=c(P),Fn=n(P,"DIV",{class:!0});var c_=r(Fn);c_.forEach(o),Ab=c(P),Ge=n(P,"P",{});var ir=r(Ge);Pb=t(ir,"The "),Un=n(ir,"CODE",{class:!0});var EE=r(Un);Sb=t(EE,"this.addHelper"),EE.forEach(o),Lb=t(ir," will inject the helper at the top of the file if needed, and returns an "),Rn=n(ir,"CODE",{class:!0});var _E=r(Rn);jb=t(_E,"Identifier"),_E.forEach(o),Mb=t(ir," to the injected function."),ir.forEach(o),P.forEach(o),ni=c(p),q=n(p,"SECTION",{});var re=r(q);Hl=n(re,"H2",{});var TE=r(Hl);Dt=n(TE,"A",{href:!0,id:!0});var IE=r(Dt);Hb=t(IE,"Closing Note"),IE.forEach(o),TE.forEach(o),qb=c(re),ye=n(re,"P",{});var ks=r(ye);Nb=t(ks,"We've seen how we can modify the babel parser function, write our own babel transform plugin "),At=n(ks,"EM",{});var Hi=r(At);Fb=t(Hi,"(which was brief mainly because I have "),Wn=n(Hi,"A",{href:!0});var CE=r(Wn);Ub=t(CE,"a detailed cover in my previous post"),CE.forEach(o),Rb=t(Hi,")"),Hi.forEach(o),Wb=t(ks,", a brief touch on "),Bn=n(ks,"CODE",{class:!0});var OE=r(Bn);Bb=t(OE,"@babel/generator"),OE.forEach(o),Vb=t(ks," and also how we can add helper functions via "),Vn=n(ks,"CODE",{class:!0});var DE=r(Vn);zb=t(DE,"@babel/helpers"),DE.forEach(o),Jb=t(ks,"."),ks.forEach(o),Gb=c(re),Pt=n(re,"P",{});var qi=r(Pt);Xb=t(qi,"Along the way, we had a crash course on how a parser works, which I will provide the links to "),zn=n(qi,"A",{href:!0});var AE=r(zn);Yb=t(AE,"further reading"),AE.forEach(o),$b=t(qi," at the bottom."),qi.forEach(o),Zb=c(re),Xe=n(re,"P",{});var cr=r(Xe);Kb=t(cr,"The steps we've gone through above is similar to part of the "),St=n(cr,"A",{href:!0,rel:!0});var PE=r(St);Qb=t(PE,"TC39 proposal"),PE.forEach(o),em=c(cr),Lt=n(cr,"A",{href:!0,rel:!0});var SE=r(Lt);sm=t(SE,"process"),SE.forEach(o),tm=t(cr," when defining a new JavaScript specification. When proposing a new specification, the champion of the proposal usually write polyfills or forked out babel to write proof-of-concept demos. As you've seen, forking a parser or writing polyfills is not the hardest part of the process, but to define the problem space, plan and think through the use cases and edge cases, and gather opinions and suggestions from the community. To this end, I am grateful to the proposal champion, for their effort in pushing the JavaScript language forward."),cr.forEach(o),om=c(re),jt=n(re,"P",{});var Ni=r(jt);am=t(Ni,"Finally, if you want to see the code we've done so far in a full picture, you can "),Mt=n(Ni,"A",{href:!0,rel:!0});var LE=r(Mt);nm=t(LE,"check it out from Github"),LE.forEach(o),rm=t(Ni,"."),Ni.forEach(o),lm=c(re),im=n(re,"HR",{}),re.forEach(o),ri=c(p),R=n(p,"SECTION",{});var Ie=r(R);ql=n(Ie,"H2",{});var jE=r(ql);Ht=n(jE,"A",{href:!0,id:!0});var ME=r(Ht);cm=t(ME,"Editor's Note"),ME.forEach(o),jE.forEach(o),pm=c(Ie),Nl=n(Ie,"P",{});var HE=r(Nl);hm=t(HE,"I've worked on the babel repository for a while, yet I've never added a new syntax to the babel parser before. Most of my contributions were just fixing bugs and specs compliance feature."),HE.forEach(o),dm=c(Ie),Fl=n(Ie,"P",{});var qE=r(Fl);km=t(qE,"Yet this idea of creating a new syntax has been in my mind for a while. So I took the chance of writing a blog to try it out. It is an exhilarating experience to see it work as expected."),qE.forEach(o),um=c(Ie),qt=n(Ie,"P",{});var Fi=r(qt);vm=t(Fi,"Having the ability to manipulate the syntax of the language you are writing is invigorating. It empowers us the possibility of writing less code or more straightforward code and shifts that complexity to compile time. Just as how "),Jn=n(Fi,"CODE",{class:!0});var NE=r(Jn);ym=t(NE,"async-await"),NE.forEach(o),fm=t(Fi," solves the callback hell and promise-chaining hell."),Fi.forEach(o),bm=c(Ie),Nt=n(Ie,"P",{});var Ui=r(Nt);mm=t(Ui,"If this article inspires you to some great idea, and you wish to discuss it with somebody, you are always more than welcome to reach out to me through "),Ft=n(Ui,"A",{href:!0,rel:!0});var FE=r(Ft);gm=t(FE,"Twitter"),FE.forEach(o),xm=t(Ui,"."),Ui.forEach(o),Ie.forEach(o),li=c(p),W=n(p,"SECTION",{});var Ce=r(W);Ul=n(Ce,"H2",{});var UE=r(Ul);Ut=n(UE,"A",{href:!0,id:!0});var RE=r(Ut);wm=t(RE,"Further Reading"),RE.forEach(o),UE.forEach(o),Em=c(Ce),Rl=n(Ce,"P",{});var WE=r(Rl);_m=t(WE,"About compilers:"),WE.forEach(o),Tm=c(Ce),Ye=n(Ce,"UL",{});var pr=r(Ye);Rt=n(pr,"LI",{});var Ri=r(Rt);Wt=n(Ri,"A",{href:!0,rel:!0});var BE=r(Wt);Im=t(BE,"Crafting Interpreters"),BE.forEach(o),Cm=t(Ri," by "),Bt=n(Ri,"A",{href:!0,rel:!0});var VE=r(Bt);Om=t(VE,"Robert Nystrom"),VE.forEach(o),Ri.forEach(o),Dm=c(pr),Gn=n(pr,"LI",{});var pg=r(Gn);Vt=n(pg,"A",{href:!0,rel:!0});var zE=r(Vt);Am=t(zE,'Free Udacity course: "Compilers: Theory and Practice"'),zE.forEach(o),Pm=t(pg,", offered by Georgia Tech"),pg.forEach(o),Sm=c(pr),zt=n(pr,"LI",{});var Wi=r(zt);Jt=n(Wi,"A",{href:!0,rel:!0});var JE=r(Jt);Lm=t(JE,"Leveling Up One\u2019s Parsing Game With ASTs"),JE.forEach(o),jm=t(Wi," by "),Gt=n(Wi,"A",{href:!0,rel:!0});var GE=r(Gt);Mm=t(GE,"Vaidehi Joshi"),GE.forEach(o),Wi.forEach(o),pr.forEach(o),Hm=c(Ce),Wl=n(Ce,"P",{});var XE=r(Wl);qm=t(XE,"Misc:"),XE.forEach(o),Nm=c(Ce),fe=n(Ce,"UL",{});var us=r(fe);Xt=n(us,"LI",{});var Bi=r(Xt);Yt=n(Bi,"A",{href:!0,rel:!0});var YE=r(Yt);Fm=t(YE,"Understanding hoisting in JavaScript"),YE.forEach(o),Um=t(Bi," by "),$t=n(Bi,"A",{href:!0,rel:!0});var $E=r($t);Rm=t($E,"Mabishi Wakio"),$E.forEach(o),Bi.forEach(o),Wm=c(us),Zt=n(us,"LI",{});var Vi=r(Zt);Kt=n(Vi,"A",{href:!0,rel:!0});var ZE=r(Kt);Bm=t(ZE,"Currying in JS"),ZE.forEach(o),Vm=t(Vi," by "),Qt=n(Vi,"A",{href:!0,rel:!0});var KE=r(Qt);zm=t(KE,"Shirsh Zibbu"),KE.forEach(o),Vi.forEach(o),Jm=c(us),Bl=n(us,"LI",{});var QE=r(Bl);eo=n(QE,"A",{href:!0,rel:!0});var e1=r(eo);Gm=t(e1,"TC39 Proposals"),e1.forEach(o),QE.forEach(o),Xm=c(us),Vl=n(us,"LI",{});var s1=r(Vl);so=n(s1,"A",{href:!0,rel:!0});var t1=r(so);Ym=t(t1,"TC39 Process Document"),t1.forEach(o),s1.forEach(o),us.forEach(o),Ce.forEach(o),this.h()},h(){l(K,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(ys,"href","#overview"),l(ys,"id","overview"),l(ao,"class","code-section"),l(fs,"href","https://en.wikipedia.org/wiki/Currying"),l(fs,"rel","nofollow"),l(no,"class","inline"),l(bs,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"),l(bs,"rel","nofollow"),l(ro,"class","inline"),l(lo,"class","inline"),l(io,"class","inline"),l(co,"class","inline"),l(ms,"href","https://scotch.io/tutorials/javascript-functional-programming-explained-partial-application-and-currying"),l(ms,"rel","nofollow"),l(po,"class","inline"),l(ho,"class","inline"),l(ko,"class","code-section"),l(uo,"class","inline"),l(vo,"class","inline"),l(yo,"class","inline"),l(fo,"class","inline"),l(gs,"href","https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841"),l(gs,"rel","nofollow"),l(bo,"class","inline"),l(ws,"href","#fork-the-babel"),l(ws,"id","fork-the-babel"),l(_s,"href","https://github.com/babel/babel"),l(_s,"rel","nofollow"),l(xr,"type","image/webp"),l(xr,"srcset",P_+", "+A_+" 2x"),zi(V.src,dg=i1)||l(V,"src",dg),l(V,"srcset",i1+", "+S_+" 2x"),l(V,"loading","lazy"),y(V,"position","absolute"),y(V,"top","0"),y(V,"width","100%"),y(V,"height","100%"),l(V,"alt","forking babel"),l(V,"title","Forking babel"),y(Oe,"display","block"),y(Oe,"position","relative"),y(Oe,"padding-top","54.570%"),y(Oe,"width","100%"),l(Is,"href","https://github.com/tanhauhau/babel/blob/master/CONTRIBUTING.md#setup"),l(Is,"rel","nofollow"),l(go,"class","code-section"),l(xo,"class","inline"),l(wo,"class","inline"),l(Eo,"class","inline"),l(_o,"class","inline"),l(To,"class","code-section"),l(Cs,"href","#crash-course-on-parsing-code-to-ast"),l(Cs,"id","crash-course-on-parsing-code-to-ast"),l(Os,"href","https://twitter.com/vaidehijoshi"),l(Os,"rel","nofollow"),l(Ds,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),l(Ds,"rel","nofollow"),l(Io,"class","inline"),l(Co,"class","inline"),l(Oo,"class","inline"),l(As,"href","https://www.ecma-international.org/ecma-262/10.0/index.html#Title"),l(As,"rel","nofollow"),l(Ps,"href","https://twitter.com/munificentbob?lang=en"),l(Ps,"rel","nofollow"),l(Ss,"href","https://craftinginterpreters.com/introduction.html"),l(Ss,"rel","nofollow"),l(Ls,"href","#our-custom-babel-parser"),l(Ls,"id","our-custom-babel-parser"),l(Do,"class","inline"),l(Ao,"class","code-section"),l(Po,"class","inline"),l(So,"class","inline"),l(Lo,"class","inline"),l(Hs,"href","https://en.wikipedia.org/wiki/Test-driven_development"),l(Hs,"rel","nofollow"),l(jo,"class","code-section"),l(Mo,"class","inline"),l(Ho,"class","inline"),l(qo,"class","code-section"),l(No,"class","code-section"),l(Fo,"class","inline"),l(Uo,"class","inline"),l(Ro,"class","inline"),l(Us,"href","https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-parser/src/parser/expression.js#L2092"),l(Us,"rel","nofollow"),l(Wo,"class","inline"),l(Bo,"class","inline"),l(Vo,"class","code-section"),l(zo,"class","inline"),l(Jo,"class","code-section"),l(Go,"class","inline"),l(Xo,"class","inline"),l(Yo,"href","#thiseat-thismatch-thisnext"),l(Zo,"class","inline"),l(Ko,"class","inline"),l(ea,"class","inline"),l(ta,"class","inline"),l(oa,"class","inline"),l(aa,"class","inline"),l(zs,"href","#a-new-token"),l(zs,"id","a-new-token"),l(Gs,"href","https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-parser/src/tokenizer/types.js#L86"),l(Gs,"rel","nofollow"),l(na,"class","code-section"),l(ra,"class","inline"),l(la,"class","inline"),l(Xs,"href","https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-parser/src/tokenizer/index.js#L790"),l(Xs,"rel","nofollow"),l(ia,"class","inline"),l(ca,"class","inline"),l(pa,"class","inline"),l(ha,"class","inline"),l(da,"class","code-section"),l(ka,"class","code-section"),y(Ys,"transform","scaleX(-1)"),y(Ys,"display","inline-block"),l($s,"href","#the-new-parser"),l($s,"id","the-new-parser"),l(Ks,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjYuMCJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uICogZm9vKCkge30ifQ=="),l(Ks,"rel","nofollow"),l(Gr,"type","image/webp"),l(Gr,"srcset",O_+", "+C_+" 2x"),zi(G.src,kg=l1)||l(G,"src",kg),l(G,"srcset",l1+", "+D_+" 2x"),l(G,"loading","lazy"),y(G,"position","absolute"),y(G,"top","0"),y(G,"width","100%"),y(G,"height","100%"),l(G,"alt","AST for generator function"),l(G,"title","AST for generator function"),y(qe,"display","block"),y(qe,"position","relative"),y(qe,"padding-top","37.422%"),y(qe,"width","100%"),l(ya,"class","inline"),l(fa,"class","inline"),l(ba,"class","inline"),l(ma,"class","inline"),l(Yr,"type","image/webp"),l(Yr,"srcset",T_+", "+__+" 2x"),zi(X.src,ug=r1)||l(X,"src",ug),l(X,"srcset",r1+", "+I_+" 2x"),l(X,"loading","lazy"),y(X,"position","absolute"),y(X,"top","0"),y(X,"width","100%"),y(X,"height","100%"),l(X,"alt","AST for curry function"),l(X,"title","AST for curry function"),y(Ue,"display","block"),y(Ue,"position","relative"),y(Ue,"padding-top","39.297%"),y(Ue,"width","100%"),l(xa,"class","inline"),l(Qs,"href","https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-parser/src/parser/statement.js#L1030"),l(Qs,"rel","nofollow"),l(wa,"class","inline"),l(Ea,"class","code-section"),l(_a,"class","code-section"),l(et,"href","#how-parsing-works"),l(et,"id","how-parsing-works"),l(Ta,"class","code-section"),l(Ia,"class","inline"),l(Ca,"class","inline"),l(Oa,"class","inline"),l(Da,"class","inline"),l(Aa,"class","inline"),l(Pa,"class","inline"),l(Sa,"class","inline"),l(La,"class","inline"),l(ja,"class","inline"),l(Ma,"class","code-section"),l(Ha,"class","code-section"),l(qa,"class","code-section"),l(Na,"class","inline"),l(Fa,"class","inline"),l(Ua,"class","inline"),l(nt,"href","https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing"),l(nt,"rel","nofollow"),l(rt,"href","#this-eat-this-match-this-next"),l(rt,"id","this-eat-this-match-this-next"),l(Ra,"class","inline"),l(Wa,"class","inline"),l(Ba,"class","inline"),l(Va,"class","inline"),l(za,"class","inline"),l(Ga,"class","inline"),l(Xa,"class","inline"),l(Ya,"class","inline"),l($a,"class","inline"),l(Za,"class","inline"),l(Ka,"class","inline"),l(Qa,"class","inline"),l(en,"class","inline"),l(sn,"class","inline"),l(tn,"class","inline"),l(an,"class","inline"),l(nn,"class","code-section"),l(ct,"href","https://craftinginterpreters.com/introduction.html"),l(ct,"rel","nofollow"),l(pt,"href","https://twitter.com/munificentbob?lang=en"),l(pt,"rel","nofollow"),l(ht,"href","https://www.udacity.com/course/compilers-theory-and-practice--ud168"),l(ht,"rel","nofollow"),l(cn,"class","inline"),l(pn,"class","inline"),zi(te.src,vg=n1)||l(te,"src",vg),l(te,"srcset",n1+", "+E_+" 2x"),l(te,"loading","lazy"),y(te,"position","absolute"),y(te,"top","0"),y(te,"width","100%"),y(te,"height","100%"),l(te,"alt","Uploading custom parser"),y(Be,"display","block"),y(Be,"position","relative"),y(Be,"padding-top","54.000%"),y(Be,"width","100%"),l(dt,"href","#our-babel-plugin"),l(dt,"id","our-babel-plugin"),l(kt,"href","https://babeljs.io/docs/en/babel-parser#will-the-babel-parser-support-a-plugin-system"),l(kt,"rel","nofollow"),l(dn,"class","code-section"),l(ut,"href","https://babeljs.io/docs/en/babel-generator"),l(ut,"rel","nofollow"),l(un,"class","inline"),l(vn,"class","inline"),l(yt,"href","https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-generator/src/generators/methods.js#L82"),l(yt,"rel","nofollow"),l(yn,"class","inline"),l(fn,"class","code-section"),l(bt,"href","https://hackernoon.com/currying-in-js-d9ddc64f162e"),l(bt,"rel","nofollow"),l(mt,"href","https://twitter.com/zhirzh"),l(mt,"rel","nofollow"),l(bn,"class","code-section"),l(gt,"href","https://scotch.io/tutorials/understanding-hoisting-in-javascript"),l(gt,"rel","nofollow"),l(mn,"class","inline"),l(gn,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(xn,"class","code-section"),l(wn,"class","inline"),l(En,"class","inline"),l(ze,"href","#1-assume-currying-has-been-declared-in-the-global-scope"),l(ze,"id","1-assume-currying-has-been-declared-in-the-global-scope"),l(_n,"class","inline"),l(Et,"href","https://www.google.com/search?q=regeneratorRuntime+is+not+defined"),l(Et,"rel","nofollow"),l(Tn,"class","inline"),l(In,"class","inline"),l(Cn,"class","inline"),l(ss,"href","#2-use-the-babel-helpers"),l(ss,"id","2-use-the-babel-helpers"),l(On,"class","inline"),l(Dn,"class","inline"),l(An,"class","inline"),l(Pn,"class","inline"),l(Sn,"class","code-section"),l(_t,"href","https://twitter.com/lihautan"),l(_t,"rel","nofollow"),l(Ln,"class","inline"),l(Ct,"href","https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-helpers/src/helpers.js"),l(Ct,"rel","nofollow"),l(jn,"class","code-section"),l(Mn,"class","inline"),l(Hn,"class","inline"),l(qn,"class","inline"),l(Nn,"class","inline"),l(Fn,"class","code-section"),l(Un,"class","inline"),l(Rn,"class","inline"),l(Dt,"href","#closing-note"),l(Dt,"id","closing-note"),l(Wn,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(Bn,"class","inline"),l(Vn,"class","inline"),l(zn,"href","#further-reading"),l(St,"href","https://github.com/tc39/proposals"),l(St,"rel","nofollow"),l(Lt,"href","https://tc39.es/process-document/"),l(Lt,"rel","nofollow"),l(Mt,"href","https://github.com/tanhauhau/babel/compare/3a7b6e1c2...b793efad1"),l(Mt,"rel","nofollow"),l(Ht,"href","#editor-s-note"),l(Ht,"id","editor-s-note"),l(Jn,"class","inline"),l(Ft,"href","https://twitter.com/lihautan"),l(Ft,"rel","nofollow"),l(Ut,"href","#further-reading"),l(Ut,"id","further-reading"),l(Wt,"href","https://craftinginterpreters.com/introduction.html"),l(Wt,"rel","nofollow"),l(Bt,"href","https://twitter.com/munificentbob?lang=en"),l(Bt,"rel","nofollow"),l(Vt,"href","https://www.udacity.com/course/compilers-theory-and-practice--ud168"),l(Vt,"rel","nofollow"),l(Jt,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),l(Jt,"rel","nofollow"),l(Gt,"href","https://twitter.com/vaidehijoshi"),l(Gt,"rel","nofollow"),l(Yt,"href","https://scotch.io/tutorials/understanding-hoisting-in-javascript"),l(Yt,"rel","nofollow"),l($t,"href","https://twitter.com/emabishi"),l($t,"rel","nofollow"),l(Kt,"href","https://hackernoon.com/currying-in-js-d9ddc64f162e"),l(Kt,"rel","nofollow"),l(Qt,"href","https://twitter.com/zhirzh"),l(Qt,"rel","nofollow"),l(eo,"href","https://github.com/tc39/proposals"),l(eo,"rel","nofollow"),l(so,"href","https://tc39.es/process-document/"),l(so,"rel","nofollow")},m(p,v){x(p,C,v),e(C,me),e(C,K),e(K,vs),e(C,S),x(p,Q,v),x(p,g,v),e(g,hr),e(hr,ys),e(ys,Ji),e(g,Gi),e(g,dr),e(dr,Xi),e(g,Yi),e(g,ao),ao.innerHTML=p1,e(g,$i),e(g,j),e(j,Zi),e(j,fs),e(fs,Ki),e(j,Qi),e(j,no),e(no,ec),e(j,sc),e(j,bs),e(bs,tc),e(j,oc),e(j,ro),e(ro,ac),e(j,nc),e(j,lo),e(lo,rc),e(j,lc),e(j,io),e(io,ic),e(j,cc),e(j,co),e(co,pc),e(j,hc),e(g,dc),e(g,le),e(le,kc),e(le,ms),e(ms,uc),e(le,vc),e(le,po),e(po,yc),e(le,fc),e(le,ho),e(ho,bc),e(le,mc),e(g,gc),e(g,ko),ko.innerHTML=h1,e(g,xc),e(g,kr),e(kr,M),e(M,wc),e(M,uo),e(uo,Ec),e(M,_c),e(M,vo),e(vo,Tc),e(M,Ic),e(M,yo),e(yo,Cc),e(M,Oc),e(M,fo),e(fo,Dc),e(M,Ac),e(M,gs),e(gs,Pc),e(M,Sc),e(M,bo),e(bo,Lc),e(M,jc),e(g,Mc),e(g,ur),e(ur,Hc),e(g,qc),e(g,xs),e(xs,vr),e(vr,Nc),e(xs,Fc),e(xs,yr),e(yr,Uc),e(g,Rc),e(g,fr),e(fr,Wc),e(g,Bc),e(g,br),e(br,Vc),x(p,Yl,v),x(p,O,v),e(O,mr),e(mr,ws),e(ws,zc),e(O,Jc),e(O,Es),e(Es,Gc),e(Es,_s),e(_s,Xc),e(Es,Yc),e(O,$c),e(O,gr),e(gr,Oe),e(Oe,mo),e(mo,xr),e(mo,V),e(O,Zc),e(O,wr),e(wr,Kc),e(O,Qc),e(O,Ts),e(Ts,ep),e(Ts,Is),e(Is,sp),e(Ts,tp),e(O,op),e(O,go),go.innerHTML=d1,e(O,ap),e(O,Er),e(Er,np),e(O,rp),e(O,z),e(z,lp),e(z,xo),e(xo,ip),e(z,cp),e(z,wo),e(wo,pp),e(z,hp),e(z,Eo),e(Eo,dp),e(z,kp),e(z,_o),e(_o,up),e(z,vp),e(O,yp),e(O,To),To.innerHTML=k1,e(O,fp),e(O,_r),e(_r,Tr),e(Tr,bp),x(p,$l,v),x(p,H,v),e(H,Ir),e(Ir,Cs),e(Cs,mp),e(H,gp),e(H,De),e(De,xp),e(De,Os),e(Os,wp),e(De,Ep),e(De,Ds),e(Ds,_p),e(De,Tp),e(H,Ip),e(H,Cr),e(Cr,Cp),e(H,Op),e(H,Ae),e(Ae,Ke),e(Ke,Dp),e(Ke,Io),e(Io,Ap),e(Ke,Pp),e(Ke,Co),e(Co,Sp),e(Ae,Lp),e(Ae,ge),e(ge,jp),e(ge,Or),e(Or,Mp),e(ge,Hp),e(ge,Dr),e(Dr,qp),e(ge,Np),e(ge,Oo),e(Oo,Fp),e(Ae,Up),e(Ae,Pe),e(Pe,Rp),e(Pe,Ar),e(Ar,Wp),e(Pe,Bp),e(Pe,As),e(As,Vp),e(Pe,zp),e(H,Jp),e(H,Se),e(Se,Gp),e(Se,Ps),e(Ps,Xp),e(Se,Yp),e(Se,Ss),e(Ss,$p),e(Se,Zp),e(H,Kp),e(H,Pr),e(Pr,Sr),e(Sr,Qp),x(p,Zl,v),x(p,h,v),e(h,Lr),e(Lr,Ls),e(Ls,eh),e(h,sh),e(h,js),e(js,th),e(js,Do),e(Do,oh),e(js,ah),e(h,nh),e(h,Ao),Ao.innerHTML=u1,e(h,rh),e(h,F),e(F,lh),e(F,jr),e(jr,ih),e(F,ch),e(F,Mr),e(Mr,ph),e(F,hh),e(F,Po),e(Po,dh),e(F,kh),e(F,So),e(So,uh),e(F,vh),e(F,Lo),e(Lo,yh),e(F,fh),e(h,bh),e(h,Ms),e(Ms,mh),e(Ms,Hs),e(Hs,gh),e(Ms,xh),e(h,wh),e(h,jo),jo.innerHTML=v1,e(h,Eh),e(h,Le),e(Le,_h),e(Le,Mo),e(Mo,Th),e(Le,Ih),e(Le,Ho),e(Ho,Ch),e(Le,Oh),e(h,Dh),e(h,qo),qo.innerHTML=y1,e(h,Ah),e(h,qs),e(qs,Hr),e(Hr,Ph),e(qs,Sh),e(qs,No),No.innerHTML=f1,e(h,Lh),e(h,Ns),e(Ns,jh),e(Ns,Fo),e(Fo,Mh),e(Ns,Hh),e(h,qh),e(h,Fs),e(Fs,Nh),e(Fs,Uo),e(Uo,Fh),e(Fs,Uh),e(h,Rh),e(h,je),e(je,Wh),e(je,Us),e(Us,Ro),e(Ro,Bh),e(je,Vh),e(je,Wo),e(Wo,zh),e(je,Jh),e(h,Gh),e(h,Rs),e(Rs,Xh),e(Rs,Bo),e(Bo,Yh),e(Rs,$h),e(h,Zh),e(h,Vo),Vo.innerHTML=b1,e(h,Kh),e(h,Ws),e(Ws,Qh),e(Ws,zo),e(zo,ed),e(Ws,sd),e(h,td),e(h,Jo),Jo.innerHTML=m1,e(h,od),e(h,Me),e(Me,ad),e(Me,Go),e(Go,nd),e(Me,rd),e(Me,Xo),e(Xo,ld),e(Me,id),e(h,cd),e(h,Bs),e(Bs,pd),e(Bs,Yo),e(Yo,hd),e(Bs,dd),e(h,kd),e(h,qr),e(qr,ud),e(h,vd),e(h,ie),e(ie,$o),e($o,yd),e($o,Zo),e(Zo,fd),e(ie,bd),e(ie,Vs),e(Vs,md),e(Vs,Ko),e(Ko,gd),e(Vs,xd),e(ie,wd),e(ie,Qo),e(Qo,Ed),e(Qo,ea),e(ea,_d),e(ie,Td),e(ie,sa),e(sa,Id),e(sa,ta),e(ta,Cd),e(h,Od),e(h,Nr),e(Nr,Dd),e(h,Ad),e(h,He),e(He,Pd),e(He,oa),e(oa,Sd),e(He,Ld),e(He,aa),e(aa,jd),e(He,Md),x(p,Kl,v),x(p,E,v),e(E,Fr),e(Fr,zs),e(zs,Hd),e(E,qd),e(E,Js),e(Js,Nd),e(Js,Gs),e(Gs,Fd),e(Js,Ud),e(E,Rd),e(E,Ur),e(Ur,Wd),e(E,Bd),e(E,na),na.innerHTML=g1,e(E,Vd),e(E,ee),e(ee,zd),e(ee,Rr),e(Rr,Jd),e(ee,Gd),e(ee,ra),e(ra,Xd),e(ee,Yd),e(ee,la),e(la,$d),e(ee,Zd),e(ee,Xs),e(Xs,Kd),e(E,Qd),e(E,Wr),e(Wr,Br),e(Br,ek),e(E,sk),e(E,J),e(J,tk),e(J,ia),e(ia,ok),e(J,ak),e(J,ca),e(ca,nk),e(J,rk),e(J,pa),e(pa,lk),e(J,ik),e(J,ha),e(ha,ck),e(J,pk),e(E,hk),e(E,da),da.innerHTML=x1,e(E,dk),e(E,Vr),e(Vr,kk),e(E,uk),e(E,ka),ka.innerHTML=w1,e(E,vk),e(E,ua),e(ua,yk),e(ua,Ys),e(Ys,fk),x(p,Ql,v),x(p,b,v),e(b,zr),e(zr,$s),e($s,bk),e(b,mk),e(b,Zs),e(Zs,gk),e(Zs,Ks),e(Ks,xk),e(Zs,wk),e(b,Ek),e(b,Jr),e(Jr,qe),e(qe,va),e(va,Gr),e(va,G),e(b,_k),e(b,Ne),e(Ne,Tk),e(Ne,ya),e(ya,Ik),e(Ne,Ck),e(Ne,fa),e(fa,Ok),e(Ne,Dk),e(b,Ak),e(b,Fe),e(Fe,Pk),e(Fe,ba),e(ba,Sk),e(Fe,Lk),e(Fe,ma),e(ma,jk),e(Fe,Mk),e(b,Hk),e(b,Xr),e(Xr,Ue),e(Ue,ga),e(ga,Yr),e(ga,X),e(b,qk),e(b,$r),e($r,Nk),e(b,Fk),e(b,Y),e(Y,Uk),e(Y,Zr),e(Zr,Rk),e(Y,Wk),e(Y,xa),e(xa,Bk),e(Y,Vk),e(Y,Qs),e(Qs,zk),e(Y,Jk),e(Y,wa),e(wa,Gk),e(Y,Xk),e(b,Yk),e(b,Ea),Ea.innerHTML=E1,e(b,$k),e(b,Kr),e(Kr,Zk),e(b,Kk),e(b,_a),_a.innerHTML=_1,e(b,Qk),e(b,Qr),e(Qr,eu),e(b,su),e(b,el),e(el,tu),x(p,ei,v),x(p,f,v),e(f,sl),e(sl,et),e(et,ou),e(f,au),e(f,st),e(st,nu),e(st,tl),e(tl,ru),e(st,lu),e(f,iu),e(f,ol),e(ol,cu),e(f,pu),e(f,Ta),Ta.innerHTML=T1,e(f,hu),e(f,tt),e(tt,du),e(tt,Ia),e(Ia,ku),e(tt,uu),e(f,vu),e(f,Re),e(Re,ot),e(ot,yu),e(ot,Ca),e(Ca,fu),e(ot,bu),e(Re,mu),e(Re,ce),e(ce,gu),e(ce,Oa),e(Oa,xu),e(ce,wu),e(ce,Da),e(Da,Eu),e(ce,_u),e(ce,Aa),e(Aa,Tu),e(ce,Iu),e(Re,Cu),e(Re,pe),e(pe,Ou),e(pe,Pa),e(Pa,Du),e(pe,Au),e(pe,Sa),e(Sa,Pu),e(pe,Su),e(pe,La),e(La,Lu),e(pe,ju),e(f,Mu),e(f,at),e(at,Hu),e(at,ja),e(ja,qu),e(at,Nu),e(f,Fu),e(f,Ma),Ma.innerHTML=I1,e(f,Uu),e(f,al),e(al,Ru),e(f,Wu),e(f,Ha),Ha.innerHTML=C1,e(f,Bu),e(f,nl),e(nl,Vu),e(f,zu),e(f,qa),qa.innerHTML=O1,e(f,Ju),e(f,rl),e(rl,ll),e(ll,Gu),e(f,Xu),e(f,$),e($,Yu),e($,Na),e(Na,$u),e($,Zu),e($,Fa),e(Fa,Ku),e($,Qu),e($,Ua),e(Ua,ev),e($,sv),e($,nt),e(nt,tv),e($,ov),x(p,si,v),x(p,m,v),e(m,il),e(il,rt),e(rt,av),e(m,nv),e(m,he),e(he,rv),e(he,Ra),e(Ra,lv),e(he,iv),e(he,Wa),e(Wa,cv),e(he,pv),e(he,Ba),e(Ba,hv),e(he,dv),e(m,kv),e(m,de),e(de,Qe),e(Qe,cl),e(cl,Va),e(Va,uv),e(Qe,vv),e(Qe,za),e(za,yv),e(Qe,fv),e(de,bv),e(de,Ja),e(Ja,pl),e(pl,Ga),e(Ga,mv),e(Ja,gv),e(de,xv),e(de,U),e(U,hl),e(hl,Xa),e(Xa,wv),e(U,Ev),e(U,Ya),e(Ya,_v),e(U,Tv),e(U,$a),e($a,Iv),e(U,Cv),e(U,Za),e(Za,Ov),e(U,Dv),e(U,Ka),e(Ka,Av),e(U,dl),e(dl,se),e(se,Qa),e(Qa,Pv),e(se,Sv),e(se,en),e(en,Lv),e(se,jv),e(se,sn),e(sn,Mv),e(se,Hv),e(se,tn),e(tn,qv),e(se,Nv),e(de,Fv),e(de,on),e(on,kl),e(kl,an),e(an,Uv),e(on,Rv),e(m,Wv),e(m,ul),e(ul,Bv),e(m,Vv),e(m,nn),nn.innerHTML=D1,e(m,zv),e(m,vl),e(vl,Jv),e(m,Gv),e(m,lt),e(lt,it),e(it,ct),e(ct,Xv),e(it,Yv),e(it,pt),e(pt,$v),e(lt,Zv),e(lt,rn),e(rn,ht),e(ht,Kv),e(rn,Qv),e(m,ey),e(m,sy),e(m,ty),e(m,ln),e(ln,yl),e(yl,oy),e(ln,ay),e(m,ny),e(m,fl),e(fl,ry),e(m,ly),e(m,We),e(We,iy),e(We,cn),e(cn,cy),e(We,py),e(We,pn),e(pn,hy),e(We,dy),e(m,ky),e(m,bl),e(bl,Be),e(Be,te),e(m,uy),e(m,vy),x(p,ti,v),x(p,d,v),e(d,ml),e(ml,dt),e(dt,yy),e(d,fy),e(d,gl),e(gl,by),e(d,my),e(d,xl),e(xl,gy),e(d,xy),e(d,hn),e(hn,wy),e(hn,kt),e(kt,Ey),e(d,_y),e(d,dn),dn.innerHTML=A1,e(d,Ty),e(d,wl),e(wl,Iy),e(d,Cy),e(d,kn),e(kn,Oy),e(kn,El),e(El,Dy),e(d,Ay),e(d,Py),e(d,Sy),e(d,_l),e(_l,Ly),e(d,jy),e(d,ke),e(ke,My),e(ke,ut),e(ut,Hy),e(ke,qy),e(ke,un),e(un,Ny),e(ke,Fy),e(ke,vn),e(vn,Uy),e(ke,Ry),e(d,Wy),e(d,Tl),e(Tl,vt),e(vt,By),e(vt,yt),e(yt,Vy),e(vt,zy),e(d,Jy),e(d,Gy),e(d,Xy),e(d,ft),e(ft,Yy),e(ft,yn),e(yn,$y),e(ft,Zy),e(d,Ky),e(d,fn),fn.innerHTML=P1,e(d,Qy),e(d,Il),e(Il,es),e(es,ef),e(es,bt),e(bt,sf),e(es,tf),e(es,mt),e(mt,of),e(d,af),e(d,Cl),e(Cl,nf),e(d,rf),e(d,bn),bn.innerHTML=S1,e(d,lf),e(d,Ol),e(Ol,Ve),e(Ve,cf),e(Ve,gt),e(gt,pf),e(Ve,hf),e(Ve,mn),e(mn,df),e(Ve,kf),e(d,uf),e(d,xt),e(xt,vf),e(xt,gn),e(gn,yf),e(xt,ff),e(d,bf),e(d,xn),xn.innerHTML=L1,e(d,mf),e(d,wt),e(wt,gf),e(wt,wn),e(wn,xf),e(wt,wf),e(d,Ef),e(d,Dl),e(Dl,_f),x(p,oi,v),x(p,oe,v),e(oe,Al),e(Al,ze),e(ze,Tf),e(ze,En),e(En,If),e(ze,Cf),e(oe,Of),e(oe,Pl),e(Pl,Df),e(oe,Af),e(oe,ue),e(ue,Pf),e(ue,_n),e(_n,Sf),e(ue,Lf),e(ue,Sl),e(Sl,jf),e(ue,Mf),e(ue,Et),e(Et,Hf),e(ue,qf),e(oe,Nf),e(oe,Je),e(Je,Ff),e(Je,Tn),e(Tn,Uf),e(Je,Rf),e(Je,In),e(In,Wf),e(Je,Bf),x(p,ai,v),x(p,_,v),e(_,Ll),e(Ll,ss),e(ss,Vf),e(ss,Cn),e(Cn,zf),e(_,Jf),e(_,Z),e(Z,Gf),e(Z,On),e(On,Xf),e(Z,Yf),e(Z,Dn),e(Dn,$f),e(Z,Zf),e(Z,An),e(An,Kf),e(Z,Qf),e(Z,Pn),e(Pn,eb),e(Z,sb),e(_,tb),e(_,Sn),Sn.innerHTML=j1,e(_,ob),e(_,jl),e(jl,ts),e(ts,Ml),e(Ml,ab),e(ts,nb),e(ts,_t),e(_t,rb),e(ts,lb),e(_,ib),e(_,Tt),e(Tt,cb),e(Tt,Ln),e(Ln,pb),e(Tt,hb),e(_,db),e(_,It),e(It,kb),e(It,Ct),e(Ct,ub),e(It,vb),e(_,yb),e(_,jn),jn.innerHTML=M1,e(_,fb),e(_,ve),e(ve,bb),e(ve,Mn),e(Mn,mb),e(ve,gb),e(ve,Hn),e(Hn,xb),e(ve,wb),e(ve,qn),e(qn,Eb),e(ve,_b),e(_,Tb),e(_,Ot),e(Ot,Ib),e(Ot,Nn),e(Nn,Cb),e(Ot,Ob),e(_,Db),e(_,Fn),Fn.innerHTML=H1,e(_,Ab),e(_,Ge),e(Ge,Pb),e(Ge,Un),e(Un,Sb),e(Ge,Lb),e(Ge,Rn),e(Rn,jb),e(Ge,Mb),x(p,ni,v),x(p,q,v),e(q,Hl),e(Hl,Dt),e(Dt,Hb),e(q,qb),e(q,ye),e(ye,Nb),e(ye,At),e(At,Fb),e(At,Wn),e(Wn,Ub),e(At,Rb),e(ye,Wb),e(ye,Bn),e(Bn,Bb),e(ye,Vb),e(ye,Vn),e(Vn,zb),e(ye,Jb),e(q,Gb),e(q,Pt),e(Pt,Xb),e(Pt,zn),e(zn,Yb),e(Pt,$b),e(q,Zb),e(q,Xe),e(Xe,Kb),e(Xe,St),e(St,Qb),e(Xe,em),e(Xe,Lt),e(Lt,sm),e(Xe,tm),e(q,om),e(q,jt),e(jt,am),e(jt,Mt),e(Mt,nm),e(jt,rm),e(q,lm),e(q,im),x(p,ri,v),x(p,R,v),e(R,ql),e(ql,Ht),e(Ht,cm),e(R,pm),e(R,Nl),e(Nl,hm),e(R,dm),e(R,Fl),e(Fl,km),e(R,um),e(R,qt),e(qt,vm),e(qt,Jn),e(Jn,ym),e(qt,fm),e(R,bm),e(R,Nt),e(Nt,mm),e(Nt,Ft),e(Ft,gm),e(Nt,xm),x(p,li,v),x(p,W,v),e(W,Ul),e(Ul,Ut),e(Ut,wm),e(W,Em),e(W,Rl),e(Rl,_m),e(W,Tm),e(W,Ye),e(Ye,Rt),e(Rt,Wt),e(Wt,Im),e(Rt,Cm),e(Rt,Bt),e(Bt,Om),e(Ye,Dm),e(Ye,Gn),e(Gn,Vt),e(Vt,Am),e(Gn,Pm),e(Ye,Sm),e(Ye,zt),e(zt,Jt),e(Jt,Lm),e(zt,jm),e(zt,Gt),e(Gt,Mm),e(W,Hm),e(W,Wl),e(Wl,qm),e(W,Nm),e(W,fe),e(fe,Xt),e(Xt,Yt),e(Yt,Fm),e(Xt,Um),e(Xt,$t),e($t,Rm),e(fe,Wm),e(fe,Zt),e(Zt,Kt),e(Kt,Bm),e(Zt,Vm),e(Zt,Qt),e(Qt,zm),e(fe,Jm),e(fe,Bl),e(Bl,eo),e(eo,Gm),e(fe,Xm),e(fe,Vl),e(Vl,so),e(so,Ym)},p:x_,d(p){p&&o(C),p&&o(Q),p&&o(g),p&&o(Yl),p&&o(O),p&&o($l),p&&o(H),p&&o(Zl),p&&o(h),p&&o(Kl),p&&o(E),p&&o(Ql),p&&o(b),p&&o(ei),p&&o(f),p&&o(si),p&&o(m),p&&o(ti),p&&o(d),p&&o(oi),p&&o(oe),p&&o(ai),p&&o(_),p&&o(ni),p&&o(q),p&&o(ri),p&&o(R),p&&o(li),p&&o(W)}}}function M_(oo){let C,me;const K=[oo[0],c1];let vs={$$slots:{default:[j_]},$$scope:{ctx:oo}};for(let S=0;S<K.length;S+=1)vs=hg(vs,K[S]);return C=new w_({props:vs}),{c(){k_(C.$$.fragment)},l(S){u_(C.$$.fragment,S)},m(S,Q){v_(C,S,Q),me=!0},p(S,[Q]){const g=Q&1?y_(K,[Q&1&&o1(S[0]),Q&0&&o1(c1)]):{};Q&2&&(g.$$scope={dirty:Q,ctx:S}),C.$set(g)},i(S){me||(f_(C.$$.fragment,S),me=!0)},o(S){b_(C.$$.fragment,S),me=!1},d(S){m_(C,S)}}}const c1={title:"Creating custom JavaScript syntax with Babel",date:"2019-09-25T08:00:00Z",description:"Forking babel parser and creating your custom JavaScript syntax isn't as hard as you think.",tags:["JavaScript","babel","AST","transform"],series:"Intermediate Babel",label:"blog",tableOfContents:[{link:"overview",title:"Overview"},{link:"fork-the-babel",title:"Fork the babel",nested:[{link:"crash-course-on-parsing-code-to-ast",title:"Crash Course on Parsing Code to AST"}]},{link:"our-custom-babel-parser",title:"Our custom babel parser",nested:[{link:"a-new-token",title:"A new token: '@@'"},{link:"the-new-parser",title:"The new parser"},{link:"how-parsing-works",title:"How parsing works",nested:[{link:"this-eat-this-match-this-next",title:"this.eat, this.match, this.next"}]}]},{link:"our-babel-plugin",title:"Our babel plugin",nested:[{link:"1-assume-currying-has-been-declared-in-the-global-scope",title:"1. Assume  `currying`  has been declared in the global scope."},{link:"2-use-the-babel-helpers",title:"2. Use the  `@babel/helpers`"}]},{link:"closing-note",title:"Closing Note"},{link:"editor-s-note",title:"Editor's Note"},{link:"further-reading",title:"Further Reading"}]};function H_(oo,C,me){return g_("blog",{image:L_}),oo.$$set=K=>{me(0,C=hg(hg({},C),a1(K)))},C=a1(C),[C]}class W_ extends p_{constructor(C){super();h_(this,C,H_,M_,d_,{})}}export{W_ as default,c1 as metadata};
