import{S as M3,i as R3,s as q3,C as Ig,w as L3,x as U3,y as z3,z as V3,A as WE,q as Y3,o as W3,B as F3,r as $3,Y as FE,e as a,t as o,k as d,c as s,a as r,h as i,d as t,m as h,b as l,X as E,f as c,g as u,H as e,J as B3}from"../../chunks/vendor-da4388d4.js";import{T as j3}from"../../chunks/TalkLayout-ea325345.js";import{_ as K3}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var J3="https://lihautan.com/_app/assets/git-rebase-w-5-40f84cef.webp",Q3="https://lihautan.com/_app/assets/git-rebase-w-5-72f577bd.webp",X3="https://lihautan.com/_app/assets/git-rebase-w-5-d8f43a6a.png",$E="https://lihautan.com/_app/assets/git-rebase-w-5-5a2d55ac.png",Z3="https://lihautan.com/_app/assets/git-rebase-w-4-78b4f72b.webp",e0="https://lihautan.com/_app/assets/git-rebase-w-4-4ed80686.webp",t0="https://lihautan.com/_app/assets/git-rebase-w-4-1b8530af.png",BE="https://lihautan.com/_app/assets/git-rebase-w-4-2584a942.png",a0="https://lihautan.com/_app/assets/git-rebase-w-3-c05740e5.webp",s0="https://lihautan.com/_app/assets/git-rebase-w-3-ec2827ca.webp",r0="https://lihautan.com/_app/assets/git-rebase-w-3-4994b691.png",jE="https://lihautan.com/_app/assets/git-rebase-w-3-ffc13e9b.png",o0="https://lihautan.com/_app/assets/git-rebase-w-2-0417cc74.webp",i0="https://lihautan.com/_app/assets/git-rebase-w-2-b2000a8d.webp",l0="https://lihautan.com/_app/assets/git-rebase-w-2-510c3e85.png",KE="https://lihautan.com/_app/assets/git-rebase-w-2-b8b283d7.png",c0="https://lihautan.com/_app/assets/git-rebase-w-23535fd9.webp",n0="https://lihautan.com/_app/assets/git-rebase-w-77da260b.webp",d0="https://lihautan.com/_app/assets/git-rebase-w-3ffe0b5a.png",JE="https://lihautan.com/_app/assets/git-rebase-w-11db8095.png",h0="https://lihautan.com/_app/assets/git-pull-rebase-e96cea4d.gif",QE="https://lihautan.com/_app/assets/git-pull-rebase-108e4a1b.gif",p0="https://lihautan.com/_app/assets/git-rebase-i-edit-659d16af.webp",u0="https://lihautan.com/_app/assets/git-rebase-i-edit-8b5613d8.webp",m0="https://lihautan.com/_app/assets/git-rebase-i-edit-f9cd0321.png",XE="https://lihautan.com/_app/assets/git-rebase-i-edit-ab47c210.png",_0="https://lihautan.com/_app/assets/git-rebase-i-edit-659d16af.webp",f0="https://lihautan.com/_app/assets/git-rebase-i-edit-8b5613d8.webp",g0="https://lihautan.com/_app/assets/git-rebase-i-edit-f9cd0321.png",ZE="https://lihautan.com/_app/assets/git-rebase-i-edit-ab47c210.png",v0="https://lihautan.com/_app/assets/git-rebase-i-squash-8a020892.webp",b0="https://lihautan.com/_app/assets/git-rebase-i-squash-9abb4d89.webp",E0="https://lihautan.com/_app/assets/git-rebase-i-squash-c3b29d41.png",e3="https://lihautan.com/_app/assets/git-rebase-i-squash-02b80129.png",y0="https://lihautan.com/_app/assets/git-rebase-i-drop-934580e2.webp",w0="https://lihautan.com/_app/assets/git-rebase-i-drop-c37640da.webp",k0="https://lihautan.com/_app/assets/git-rebase-i-drop-4702c3bb.png",t3="https://lihautan.com/_app/assets/git-rebase-i-drop-5f9056bc.png",a3="https://lihautan.com/_app/assets/git-rebase-i-pick-7274ae2b.webp",s3="https://lihautan.com/_app/assets/git-rebase-i-pick-604dbb33.webp",r3="https://lihautan.com/_app/assets/git-rebase-i-pick-49c122b1.png",Hc="https://lihautan.com/_app/assets/git-rebase-i-pick-32a4e89d.png",C0="https://lihautan.com/_app/assets/git-rebase-2b43108c.webp",O0="https://lihautan.com/_app/assets/git-rebase-b5c1eb8b.webp",D0="https://lihautan.com/_app/assets/git-rebase-a4eff047.jpeg",o3="https://lihautan.com/_app/assets/git-rebase-256acea2.jpeg",I0="https://lihautan.com/_app/assets/git-rebase-2-2b7025c5.gif",i3="https://lihautan.com/_app/assets/git-rebase-2-d5365d9e.gif",x0="https://lihautan.com/_app/assets/git-rebase-1900225e.gif",l3="https://lihautan.com/_app/assets/git-rebase-369d0d6d.gif",P0="https://lihautan.com/_app/assets/git-revert-4-3edfe3dc.gif",c3="https://lihautan.com/_app/assets/git-revert-4-75e51dd4.gif",S0="https://lihautan.com/_app/assets/git-revert-3-8a0ba457.gif",n3="https://lihautan.com/_app/assets/git-revert-3-23bca0eb.gif",T0="https://lihautan.com/_app/assets/git-revert-2-dc29e568.gif",d3="https://lihautan.com/_app/assets/git-revert-2-67d081e4.gif",G0="https://lihautan.com/_app/assets/git-revert-7d3a118f.gif",h3="https://lihautan.com/_app/assets/git-revert-1eb721eb.gif",N0="https://lihautan.com/_app/assets/git-cherry-pick-b67643f3.gif",p3="https://lihautan.com/_app/assets/git-cherry-pick-8b54a570.gif",A0="https://lihautan.com/_app/assets/git-reset-fcc6d63c.gif",u3="https://lihautan.com/_app/assets/git-reset-c28aebc3.gif",H0="https://lihautan.com/_app/assets/git-pull-b6dc00cb.gif",m3="https://lihautan.com/_app/assets/git-pull-f9956a6f.gif",M0="https://lihautan.com/_app/assets/git-merge-non-ff-a3864a1c.gif",_3="https://lihautan.com/_app/assets/git-merge-non-ff-65850ed3.gif",R0="https://lihautan.com/_app/assets/git-merge-ff-dcf4441f.gif",f3="https://lihautan.com/_app/assets/git-merge-ff-a4be79f5.gif";function q0(Fa){let y,qe,Le,N,k,q,$a,Mc,ai,Rc,qc,Yl,Ba,si,Lc,Wl,St,ri,ca,Uc,zc,na,Vc,da,Yc,Wc,Fl,Tt,oi,ha,Fc,$c,xe,Bc,ja,jc,Kc,ii,Jc,Qc,li,Xc,Zc,$l,Y,ci,pa,en,tn,je,an,Ka,sn,rn,Ja,on,ln,cn,ni,Ke,W,xg,nn,Qa,dn,Bl,A,di,ua,hn,pn,Je,un,Xa,mn,_n,Za,fn,gn,vn,hi,Qe,F,Pg,bn,es,En,yn,pi,wn,jl,$,ui,ma,kn,Cn,Pe,On,ts,Dn,In,as,xn,Pn,ss,Sn,Tn,Gn,mi,Xe,B,Sg,Nn,rs,An,Kl,H,_i,_a,Hn,Mn,os,is,Rn,qn,Ln,Ue,ls,Un,zn,cs,Vn,Yn,ns,Wn,Fn,$n,fi,Ze,j,Tg,Bn,ds,jn,Jl,M,gi,fa,Kn,Jn,vi,Qn,Xn,Gt,hs,Zn,ed,ps,td,ad,sd,bi,et,K,Gg,rd,us,od,Ql,_,Ei,ga,id,ld,ms,_s,cd,nd,dd,L,hd,fs,pd,ud,gs,md,_d,vs,fd,gd,bs,vd,bd,Ed,yi,tt,J,Ng,yd,Es,wd,kd,va,Cd,ys,Od,Dd,Id,wi,at,Q,Ag,xd,ws,Pd,Sd,Se,Td,ks,Gd,Nd,Cs,Ad,Hd,Os,Md,Rd,qd,Ds,Is,Ld,Ud,zd,ki,st,X,Hg,Vd,xs,Yd,Wd,S,Fd,Ps,$d,Bd,Ss,jd,Kd,Ts,Jd,Qd,Gs,Xd,Zd,Ns,eh,th,ah,Ci,rt,Z,Mg,sh,As,rh,Xl,m,Oi,ba,oh,ih,Hs,Ms,lh,ch,nh,D,dh,Rs,hh,ph,qs,uh,mh,Ls,_h,fh,Us,gh,vh,zs,bh,Eh,Vs,yh,wh,kh,Nt,Ys,Ch,Oh,Ws,Dh,Ih,xh,Di,ot,ee,Rg,Ph,Fs,Sh,Th,$s,Bs,Gh,Nh,Ah,At,js,Hh,Mh,Ks,Rh,qh,Lh,Ii,it,te,qg,Uh,Js,zh,Vh,xi,Yh,Wh,lt,Pi,Qs,Fh,$h,Si,Xs,Bh,jh,Ti,Zs,Kh,Jh,Gi,ct,er,Ni,ae,Lg,Qh,tr,Xh,Zh,Ai,ep,tp,U,se,ar,ap,sp,sr,rp,op,rr,ip,lp,or,cp,np,dp,T,hp,ir,pp,up,lr,mp,_p,cr,fp,gp,nr,vp,bp,dr,Ep,yp,wp,nt,kp,hr,Cp,Op,pr,Dp,Ip,xp,z,Pp,ur,Sp,Tp,mr,Gp,Np,_r,Ap,Hp,fr,Mp,Rp,qp,Te,Lp,gr,Up,zp,vr,Vp,Yp,br,Wp,Fp,Zl,I,Hi,Ea,$p,Bp,Er,yr,jp,Kp,Jp,Mi,dt,wr,Ri,re,Ug,Qp,kr,Xp,Zp,ya,eu,Cr,tu,au,su,Or,v3=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span>
<span class="line"></span>
<span class="line"># Rebase #1..#6 onto #1 (5 commands)</span>
<span class="line">#</span>
<span class="line"># Commands:</span>
<span class="line"># p, pick = use commit</span>
<span class="line"># r, reword = use commit, but edit the commit message</span>
<span class="line"># e, edit = use commit, but stop for amending</span>
<span class="line">...</span></code></pre>`,ec,oe,qi,wa,ru,ou,Li,iu,lu,Ui,ht,Dr,zi,ie,zg,cu,Ir,b3=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,tc,le,Vi,ka,nu,du,Yi,hu,pu,Wi,pt,xr,Fi,ce,Vg,uu,Pr,E3=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">drop #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,ac,ne,$i,Ca,mu,_u,Ge,fu,Sr,gu,vu,Tr,bu,Eu,Gr,yu,wu,ku,Bi,ut,Nr,ji,de,Yg,Cu,Ar,y3=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">squash #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">fixup  #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,sc,he,Ki,Oa,Ou,Du,Da,Iu,Hr,xu,Pu,Su,Ji,mt,Mr,Qi,pe,Wg,Tu,Rr,w3=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">pick   #3 commit msg 3</span>
<span class="line">break</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,rc,ue,Xi,Ia,Gu,Nu,Zi,Au,Hu,el,_t,qr,tl,me,Fg,Mu,Lr,k3=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">edit   #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,oc,_e,al,xa,Ru,qu,ft,Lu,Ur,Uu,zu,zr,Vu,Yu,Wu,sl,gt,fe,$g,Fu,Vr,$u,ic,f,rl,Pa,Bu,ju,Ne,Ku,Yr,Ju,Qu,Wr,Xu,Zu,Fr,em,tm,am,ol,vt,$r,il,ge,Bg,sm,Ht,Br,rm,om,jr,im,lm,cm,ll,bt,Kr,cl,ve,jg,nm,Et,dm,Jr,hm,pm,Qr,um,mm,_m,nl,yt,Xr,dl,be,Kg,fm,Ae,gm,Zr,vm,bm,hl,Em,ym,eo,wm,km,Cm,He,Om,to,Dm,Im,ao,xm,Pm,so,Sm,Tm,Gm,pl,wt,ro,ul,Ee,Jg,Nm,kt,Am,oo,Hm,Mm,io,Rm,qm,Lm,Me,Um,lo,zm,Vm,co,Ym,Wm,no,Fm,$m,Bm,ml,Ct,ho,_l,ye,Qg,jm,V,Km,po,Jm,Qm,uo,Xm,Zm,mo,e_,t_,_o,a_,s_,r_,Ot,o_,fo,i_,l_,go,c_,n_,lc,Mt,fl,Sa,d_,h_,gl,p_,cc,Rt,vl,Ta,u_,m_,bl,__,nc,qt,El,Ga,f_,g_,yl,v_,dc,Lt,wl,Na,b_,E_,vo,y_,bo,w_,hc,Ut,kl,Aa,k_,C_,we,Eo,O_,D_,yo,I_,x_,wo,P_,S_,ko,T_,G_,pc,zt,Cl,Ha,N_,A_,Dt,H_,Co,M_,R_,Oo,q_,L_,uc,Vt,Ol,Ma,U_,z_,Ra,V_,Do,Y_,W_,mc,Yt,Dl,qa,F_,$_,Re,B_,Io,j_,K_,xo,J_,Q_,Po,X_,Z_,_c,w,Il,La,ef,tf,xl,af,sf,Ua,rf,So,of,lf,cf,To,C3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git bisect start </span><span style="color: var(--shiki-token-comment)"># starts the bisect session</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad v2.5.1 </span><span style="color: var(--shiki-token-comment)"># specify the commit you know is bad</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good v2.6.13 </span><span style="color: var(--shiki-token-comment)"># specify the commit you knew were good</span></span></code></pre>`,nf,G,df,Go,hf,pf,No,uf,mf,Ao,_f,ff,Ho,gf,vf,Mo,bf,Ef,yf,Ro,O3='<pre class="prism language-"><code><span class="line">Bisecting: 675 revisions left to test after this (roughly 10 steps)</span></code></pre>',wf,It,kf,qo,Cf,Of,Lo,Df,If,xf,Uo,D3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)"># if it is a good commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># if it is a bad commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad</span></span></code></pre>`,Pf,za,Sf,zo,Tf,Gf,fc,x,Pl,Va,Nf,Af,Sl,Hf,Mf,C,Tl,Rf,qf,Gl,Lf,Uf,Nl,zf,Vf,Al,Yf,Wf,Hl,Ff,$f,Ml,Bf,jf,Rl,Kf,Jf,ql,Qf,Xf,Ya,Zf,Vo,eg,tg,ag,sg,rg,Yo,og,Wo,ig;return{c(){y=a("p"),qe=o("This week in React Knowledgeable, I did a sharing on Git commands."),Le=d(),N=a("p"),k=o("The title of the talk was called "),q=a("strong"),$a=o('"Git Gudder"'),Mc=o(', because almost a year ago I did a lightning sharing on "Git Gud", '),ai=a("em"),Rc=o("(Get Good)"),qc=o(', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),Yl=d(),Ba=a("blockquote"),si=a("p"),Lc=o('Will there be a "Git Guddest"? \u{1F914}'),Wl=d(),St=a("section"),ri=a("h2"),ca=a("a"),Uc=o("Disclaimer"),zc=d(),na=a("p"),Vc=o("I am by no means a Git master or anywhere near mastering Git. I do google or "),da=a("a"),Yc=o("refer to the docs"),Wc=o(" whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),Fl=d(),Tt=a("section"),oi=a("h2"),ha=a("a"),Fc=o("git merge"),$c=d(),xe=a("p"),Bc=o("There's 2 kind of "),ja=a("code"),jc=o("git merge"),Kc=o(", the "),ii=a("strong"),Jc=o("fast-forward"),Qc=o(" and "),li=a("strong"),Xc=o("non fast-forward"),Zc=o("."),$l=d(),Y=a("section"),ci=a("h3"),pa=a("a"),en=o("Fast-forward merge"),tn=d(),je=a("p"),an=o("Merging "),Ka=a("code"),sn=o("master"),rn=o(" into "),Ja=a("code"),on=o("branch A"),ln=o(":"),cn=d(),ni=a("p"),Ke=a("span"),W=a("img"),nn=d(),Qa=a("div"),dn=o("Fast-forward merge"),Bl=d(),A=a("section"),di=a("h3"),ua=a("a"),hn=o("Non Fast-forward merge"),pn=d(),Je=a("p"),un=o("Merging "),Xa=a("code"),mn=o("master"),_n=o(" into "),Za=a("code"),fn=o("branch A"),gn=o(":"),vn=d(),hi=a("p"),Qe=a("span"),F=a("img"),bn=d(),es=a("div"),En=o("Non fast-forward merge"),yn=d(),pi=a("p"),wn=o("Non fast-forward merge will create an extra commit that merges 2 branches."),jl=d(),$=a("section"),ui=a("h3"),ma=a("a"),kn=o("git pull"),Cn=d(),Pe=a("p"),On=o("By default, "),ts=a("code"),Dn=o("git pull"),In=o(" is "),as=a("code"),xn=o("git fetch origin branch"),Pn=o(" + "),ss=a("code"),Sn=o("git merge origin/branch"),Tn=o("."),Gn=d(),mi=a("p"),Xe=a("span"),B=a("img"),Nn=d(),rs=a("div"),An=o("git pull"),Kl=d(),H=a("section"),_i=a("h2"),_a=a("a"),Hn=o("git reset"),Mn=d(),os=a("p"),is=a("code"),Rn=o("git reset --hard"),qn=o(" allows you to change the reference of where your branch is pointing at."),Ln=d(),Ue=a("p"),ls=a("code"),Un=o("git checkout branch-b"),zn=o(", "),cs=a("code"),Vn=o("git reset --hard branch-a"),Yn=o(", "),ns=a("code"),Wn=o("git reset --hard #d"),Fn=o(":"),$n=d(),fi=a("p"),Ze=a("span"),j=a("img"),Bn=d(),ds=a("div"),jn=o("git reset"),Jl=d(),M=a("section"),gi=a("h2"),fa=a("a"),Kn=o("git cherry-pick"),Jn=d(),vi=a("p"),Qn=o("cherry-pick allows you to pick commits from some other branches, tags, or refs."),Xn=d(),Gt=a("p"),hs=a("code"),Zn=o("git checkout branch-b"),ed=o(", "),ps=a("code"),td=o("git cherry-pick branch-a"),ad=o(":"),sd=d(),bi=a("p"),et=a("span"),K=a("img"),rd=d(),us=a("div"),od=o("git cherry-pick"),Ql=d(),_=a("section"),Ei=a("h2"),ga=a("a"),id=o("git revert"),ld=d(),ms=a("p"),_s=a("code"),cd=o("git revert"),nd=o(" creates a new commit that reverses the change of the commit that you are reverting."),dd=d(),L=a("p"),hd=o("For example, if you accidentally merged "),fs=a("code"),pd=o("feat/a"),ud=o(" into "),gs=a("code"),md=o("master"),_d=o(" branch, you can "),vs=a("code"),fd=o("git checkout master"),gd=o(", "),bs=a("code"),vd=o("git revert #1"),bd=o(":"),Ed=d(),yi=a("p"),tt=a("span"),J=a("img"),yd=d(),Es=a("div"),wd=o("git revert"),kd=d(),va=a("p"),Cd=o("If you know merge master into your "),ys=a("code"),Od=o("feat/a"),Dd=o(" branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),Id=d(),wi=a("p"),at=a("span"),Q=a("img"),xd=d(),ws=a("div"),Pd=o("Merging `master` into `feat/a`"),Sd=d(),Se=a("p"),Td=o("If you want to recover the changes made in "),ks=a("code"),Gd=o("feat/a"),Nd=o(", you can "),Cs=a("code"),Ad=o("revert"),Hd=o(" the "),Os=a("code"),Md=o("revert"),Rd=o(":"),qd=d(),Ds=a("p"),Is=a("code"),Ld=o("git revert ~#1"),Ud=o(":"),zd=d(),ki=a("p"),st=a("span"),X=a("img"),Vd=d(),xs=a("div"),Yd=o("git revert the revert"),Wd=d(),S=a("p"),Fd=o("Now, when you are ready to merge your "),Ps=a("code"),$d=o("feat/a"),Bd=o(" branch into "),Ss=a("code"),jd=o("master"),Kd=o(", you get the all the changes in "),Ts=a("code"),Jd=o("feat/a"),Qd=o(", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Gs=a("code"),Xd=o("feat/a"),Zd=o(" in "),Ns=a("code"),eh=o("master"),th=o(":"),ah=d(),Ci=a("p"),rt=a("span"),Z=a("img"),sh=d(),As=a("div"),rh=o("Merging changes back to master"),Xl=d(),m=a("section"),Oi=a("h2"),ba=a("a"),oh=o("git rebase"),ih=d(),Hs=a("p"),Ms=a("code"),lh=o("git rebase"),ch=o(' allows you to "move" commits to a different "base".'),nh=d(),D=a("p"),dh=o("For example, you branched out "),Rs=a("code"),hh=o("branch-a"),ph=o(" from "),qs=a("code"),uh=o("master"),mh=o(" a while ago, and "),Ls=a("code"),_h=o("master"),fh=o(" has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Us=a("code"),gh=o("rebase"),vh=o(", replaying commits that you have made in "),zs=a("code"),bh=o("branch-a"),Eh=o(" on top of the latest "),Vs=a("code"),yh=o("master"),wh=o("."),kh=d(),Nt=a("p"),Ys=a("code"),Ch=o("git checkout branch-a"),Oh=o(", "),Ws=a("code"),Dh=o("git rebase master"),Ih=o(":"),xh=d(),Di=a("p"),ot=a("span"),ee=a("img"),Ph=d(),Fs=a("div"),Sh=o("git rebase"),Th=d(),$s=a("p"),Bs=a("code"),Gh=o("git rebase"),Nh=o(" does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),Ah=d(),At=a("p"),js=a("code"),Hh=o("git checkout branch-a"),Mh=o(", "),Ks=a("code"),Rh=o("git rebase --onto branch-b master branch-a"),qh=o(":"),Lh=d(),Ii=a("p"),it=a("span"),te=a("img"),Uh=d(),Js=a("div"),zh=o("git rebase"),Vh=d(),xi=a("p"),Yh=o("There's 3 reference point you should know when doing a git rebase:"),Wh=d(),lt=a("ul"),Pi=a("li"),Qs=a("code"),Fh=o("<new base>"),$h=d(),Si=a("li"),Xs=a("code"),Bh=o("<upstream>"),jh=d(),Ti=a("li"),Zs=a("code"),Kh=o("<branch>"),Jh=d(),Gi=a("p"),ct=a("span"),er=a("picture"),Ni=a("source"),ae=a("img"),Qh=d(),tr=a("div"),Xh=o("git rebase"),Zh=d(),Ai=a("p"),ep=o("Here are a few things you should know:"),tp=d(),U=a("ul"),se=a("li"),ar=a("code"),ap=o("git rebase"),sp=o(" will replay the commits from "),sr=a("code"),rp=o("<upstream>"),op=o(" to "),rr=a("code"),ip=o("<branch>"),lp=o(" onto "),or=a("code"),cp=o("<new base>"),np=o("."),dp=d(),T=a("li"),hp=o("If you specify "),ir=a("code"),pp=o("<upstream>"),up=o(" as a branch name, "),lr=a("code"),mp=o("git rebase"),_p=o(" will replay commits from the common ancestor of "),cr=a("code"),fp=o("<upstream>"),gp=o(" and "),nr=a("code"),vp=o("<branch>"),bp=o(" to "),dr=a("code"),Ep=o("<branch>"),yp=o("."),wp=d(),nt=a("li"),kp=o("If you do not specify "),hr=a("code"),Cp=o("<branch>"),Op=o(", the default is the "),pr=a("code"),Dp=o("HEAD"),Ip=o(", current commit you are at now."),xp=d(),z=a("li"),Pp=o("If you do not specify "),ur=a("code"),Sp=o("--onto <new base>"),Tp=o(", the new base will be default to "),mr=a("code"),Gp=o("<upsttream>"),Np=o(", that's why "),_r=a("code"),Ap=o("git rebase master"),Hp=o(" is equivalent to "),fr=a("code"),Mp=o("git rebase --onto master master"),Rp=o("."),qp=d(),Te=a("li"),Lp=o("If you do not specify "),gr=a("code"),Up=o("<upstream>"),zp=o(", it will be the upstream of the current branch. So "),vr=a("code"),Vp=o("git rebase"),Yp=o(" is equivalent to "),br=a("code"),Wp=o("git rebase <origin/current-branch>"),Fp=o("."),Zl=d(),I=a("section"),Hi=a("h3"),Ea=a("a"),$p=o("git rebase --interactive"),Bp=d(),Er=a("p"),yr=a("code"),jp=o("git rebase"),Kp=o(" has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),Jp=d(),Mi=a("p"),dt=a("span"),wr=a("picture"),Ri=a("source"),re=a("img"),Qp=d(),kr=a("div"),Xp=o("git rebase interactive"),Zp=d(),ya=a("p"),eu=o("When you run "),Cr=a("code"),tu=o("git rebase --interactive"),au=o(", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),su=d(),Or=a("div"),ec=d(),oe=a("section"),qi=a("h4"),wa=a("a"),ru=o("pick"),ou=d(),Li=a("p"),iu=o("The default instruction. Will just use the commit while replaying:"),lu=d(),Ui=a("p"),ht=a("span"),Dr=a("picture"),zi=a("source"),ie=a("img"),cu=d(),Ir=a("div"),tc=d(),le=a("section"),Vi=a("h4"),ka=a("a"),nu=o("drop"),du=d(),Yi=a("p"),hu=o("Drop will omit the commit:"),pu=d(),Wi=a("p"),pt=a("span"),xr=a("picture"),Fi=a("source"),ce=a("img"),uu=d(),Pr=a("div"),ac=d(),ne=a("section"),$i=a("h4"),Ca=a("a"),mu=o("squash & fixup"),_u=d(),Ge=a("p"),fu=o("Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),Sr=a("code"),gu=o("squash"),vu=o(", git will prompt you to edit the commit message of the combined commit, while "),Tr=a("code"),bu=o("fixup"),Eu=o(" will drop the commit of the "),Gr=a("code"),yu=o("fixup"),wu=o("ed commit."),ku=d(),Bi=a("p"),ut=a("span"),Nr=a("picture"),ji=a("source"),de=a("img"),Cu=d(),Ar=a("div"),sc=d(),he=a("section"),Ki=a("h4"),Oa=a("a"),Ou=o("break"),Du=d(),Da=a("p"),Iu=o("Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),Hr=a("code"),xu=o("git rebase --continue"),Pu=o(" to continue."),Su=d(),Ji=a("p"),mt=a("span"),Mr=a("picture"),Qi=a("source"),pe=a("img"),Tu=d(),Rr=a("div"),rc=d(),ue=a("section"),Xi=a("h4"),Ia=a("a"),Gu=o("edit"),Nu=d(),Zi=a("p"),Au=o("Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),Hu=d(),el=a("p"),_t=a("span"),qr=a("picture"),tl=a("source"),me=a("img"),Mu=d(),Lr=a("div"),oc=d(),_e=a("section"),al=a("h3"),xa=a("a"),Ru=o("git pull --rebase"),qu=d(),ft=a("p"),Lu=o("There's a rebase mode for git pull, where it will be "),Ur=a("code"),Uu=o("git fetch origin branch"),zu=o(" + "),zr=a("code"),Vu=o("git rebase origin/branch"),Yu=o("."),Wu=d(),sl=a("p"),gt=a("span"),fe=a("img"),Fu=d(),Vr=a("div"),$u=o("git pull --rebase"),ic=d(),f=a("section"),rl=a("h3"),Pa=a("a"),Bu=o("git rebase a shared branch"),ju=d(),Ne=a("p"),Ku=o("Say "),Yr=a("code"),Ju=o("x"),Qu=o(" and "),Wr=a("code"),Xu=o("y"),Zu=o(" are working on the "),Fr=a("code"),em=o("feat/a"),tm=o(" branch."),am=d(),ol=a("p"),vt=a("span"),$r=a("picture"),il=a("source"),ge=a("img"),sm=d(),Ht=a("p"),Br=a("code"),rm=o("x"),om=o(" decided to rebase the "),jr=a("code"),im=o("feat/a"),lm=o(" branch to squash and drop some commits:"),cm=d(),ll=a("p"),bt=a("span"),Kr=a("picture"),cl=a("source"),ve=a("img"),nm=d(),Et=a("p"),dm=o("While "),Jr=a("code"),hm=o("x"),pm=o(" had done that, that was just a part of the whole picture. Because the "),Qr=a("code"),um=o("rebase"),mm=o(" on his local machine changed the git history on his local copy only."),_m=d(),nl=a("p"),yt=a("span"),Xr=a("picture"),dl=a("source"),be=a("img"),fm=d(),Ae=a("p"),gm=o("To make the change on the remote server as well, "),Zr=a("code"),vm=o("x"),bm=o(" forced push his branch to the remote server. ("),hl=a("strong"),Em=o("Note:"),ym=o(" You can push without "),eo=a("code"),wm=o("--force"),km=o(" if the origin branch cannot fast-forward merge your local branch)"),Cm=d(),He=a("p"),Om=o("While "),to=a("code"),Dm=o("y"),Im=o(" on the other hand, did not know about the "),ao=a("code"),xm=o("rebase"),Pm=o(", so when "),so=a("code"),Sm=o("y"),Tm=o(" pulled the code, it ended up with a messed up merged of a messed up git history:"),Gm=d(),pl=a("p"),wt=a("span"),ro=a("picture"),ul=a("source"),Ee=a("img"),Nm=d(),kt=a("p"),Am=o("In most cases, there would be a merge conflict, because "),oo=a("code"),Hm=o("x"),Mm=o(" and "),io=a("code"),Rm=o("y"),qm=o("'s branch would have made changes on the same file."),Lm=d(),Me=a("p"),Um=o("So, the correct way, if the rebase is necessary, is to notify "),lo=a("code"),zm=o("y"),Vm=o(" about the rebase, so that "),co=a("code"),Ym=o("y"),Wm=o(" can "),no=a("code"),Fm=o("git reset --hard"),$m=o(" his branch to the remote branch."),Bm=d(),ml=a("p"),Ct=a("span"),ho=a("picture"),_l=a("source"),ye=a("img"),jm=d(),V=a("p"),Km=o("If unfortunately, at the same time, "),po=a("code"),Jm=o("y"),Qm=o(" has made more commits to his local branch, he would have to "),uo=a("code"),Xm=o("git rebase"),Zm=o(" the new changes onto the remote branch, or "),mo=a("code"),e_=o("git cherry-pick"),t_=o(" the new changes after the "),_o=a("code"),a_=o("git reset --hard"),s_=o("."),r_=d(),Ot=a("p"),o_=o("In the companies that I have worked with, forbidden a "),fo=a("code"),i_=o("rebase"),l_=o(" on a common branch, especially the "),go=a("code"),c_=o("master"),n_=o(" branch."),lc=d(),Mt=a("section"),fl=a("h2"),Sa=a("a"),d_=o("git log"),h_=d(),gl=a("p"),p_=o("The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),cc=d(),Rt=a("section"),vl=a("h3"),Ta=a("a"),u_=o("--since, --after, --until, --before"),m_=d(),bl=a("p"),__=o("You can filter out commits within a specific timeframe"),nc=d(),qt=a("section"),El=a("h3"),Ga=a("a"),f_=o("--grep"),g_=d(),yl=a("p"),v_=o("You can filter out commits based on commit message"),dc=d(),Lt=a("section"),wl=a("h3"),Na=a("a"),b_=o("--invert-grep"),E_=d(),vo=a("p"),y_=o("You can filter out commits that does not match the "),bo=a("code"),w_=o("--grep"),hc=d(),Ut=a("section"),kl=a("h3"),Aa=a("a"),k_=o("--all-match"),C_=d(),we=a("p"),Eo=a("code"),O_=o("--grep"),D_=o(" is a "),yo=a("code"),I_=o("OR"),x_=o(" filter, "),wo=a("code"),P_=o("--all-match"),S_=o(" make it a "),ko=a("code"),T_=o("AND"),G_=o(" filter"),pc=d(),zt=a("section"),Cl=a("h3"),Ha=a("a"),N_=o("--min-parents, --max-parents, --merges, --no-merges"),A_=d(),Dt=a("p"),H_=o("You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Co=a("code"),M_=o("--merge"),R_=o(" is equivalent to "),Oo=a("code"),q_=o("--min-parents=2"),L_=o("."),uc=d(),Vt=a("section"),Ol=a("h3"),Ma=a("a"),U_=o("--first-parent"),z_=d(),Ra=a("p"),V_=o("You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),Do=a("code"),Y_=o("--first-parent"),W_=o(" allow you to filter out only the merge commit and the commit you have made on the current branch."),mc=d(),Yt=a("section"),Dl=a("h2"),qa=a("a"),F_=o("git reflog"),$_=d(),Re=a("p"),B_=o("The reference log shows you all the "),Io=a("code"),j_=o("HEAD"),K_=o(" position you have been to. This is especially useful when you have "),xo=a("code"),J_=o("reset --hard"),Q_=o(" or "),Po=a("code"),X_=o("rebase"),Z_=o(", you can still find back the commit reference that you were at previously, so you can recover them."),_c=d(),w=a("section"),Il=a("h2"),La=a("a"),ef=o("git bisect"),tf=d(),xl=a("p"),af=o("This is a useful command that I am looking forward to use it."),sf=d(),Ua=a("p"),rf=o("Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),So=a("code"),of=o("git bisect"),lf=o(" allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),cf=d(),To=a("div"),nf=d(),G=a("p"),df=o("Once you've specified at least one "),Go=a("code"),hf=o("bad"),pf=o(" and one "),No=a("code"),uf=o("good"),mf=o(" commit, "),Ao=a("code"),_f=o("git bisect"),ff=o(" will find and checkout to a commit in the middle of that range between "),Ho=a("code"),gf=o("bad"),vf=o(" and "),Mo=a("code"),bf=o("good"),Ef=o(" and greets you with:"),yf=d(),Ro=a("div"),wf=d(),It=a("p"),kf=o("You can know test / verify / profile your code, and specify whether the current commit is a "),qo=a("code"),Cf=o("good"),Of=o(" commit or a "),Lo=a("code"),Df=o("bad"),If=o(" commit:"),xf=d(),Uo=a("div"),Pf=d(),za=a("p"),Sf=o("Continue doing it until eventually there's no more commit to inspect. "),zo=a("code"),Tf=o("git bisect"),Gf=o(" will print out the description of the first bad commit."),fc=d(),x=a("section"),Pl=a("h2"),Va=a("a"),Nf=o("Summary"),Af=d(),Sl=a("p"),Hf=o("We've gone through the following git commands:"),Mf=d(),C=a("ul"),Tl=a("li"),Rf=o("git merge"),qf=d(),Gl=a("li"),Lf=o("git reset"),Uf=d(),Nl=a("li"),zf=o("git cherry-pick"),Vf=d(),Al=a("li"),Yf=o("git revert"),Wf=d(),Hl=a("li"),Ff=o("git rebase"),$f=d(),Ml=a("li"),Bf=o("git log"),jf=d(),Rl=a("li"),Kf=o("git reflog"),Jf=d(),ql=a("li"),Qf=o("git bisect"),Xf=d(),Ya=a("p"),Zf=o("Hopefully we are now "),Vo=a("code"),eg=o("git gudder"),tg=o(" than before!"),ag=d(),sg=a("hr"),rg=d(),Yo=a("p"),og=o("Related topic: "),Wo=a("a"),ig=o("Git commits went missing after a rebase"),this.h()},l(n){y=s(n,"P",{});var p=r(y);qe=i(p,"This week in React Knowledgeable, I did a sharing on Git commands."),p.forEach(t),Le=h(n),N=s(n,"P",{});var Fo=r(N);k=i(Fo,"The title of the talk was called "),q=s(Fo,"STRONG",{});var Xg=r(q);$a=i(Xg,'"Git Gudder"'),Xg.forEach(t),Mc=i(Fo,', because almost a year ago I did a lightning sharing on "Git Gud", '),ai=s(Fo,"EM",{});var Zg=r(ai);Rc=i(Zg,"(Get Good)"),Zg.forEach(t),qc=i(Fo,', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),Fo.forEach(t),Yl=h(n),Ba=s(n,"BLOCKQUOTE",{});var ev=r(Ba);si=s(ev,"P",{});var tv=r(si);Lc=i(tv,'Will there be a "Git Guddest"? \u{1F914}'),tv.forEach(t),ev.forEach(t),Wl=h(n),St=s(n,"SECTION",{});var gc=r(St);ri=s(gc,"H2",{});var av=r(ri);ca=s(av,"A",{href:!0,id:!0});var sv=r(ca);Uc=i(sv,"Disclaimer"),sv.forEach(t),av.forEach(t),zc=h(gc),na=s(gc,"P",{});var vc=r(na);Vc=i(vc,"I am by no means a Git master or anywhere near mastering Git. I do google or "),da=s(vc,"A",{href:!0,rel:!0});var rv=r(da);Yc=i(rv,"refer to the docs"),rv.forEach(t),Wc=i(vc," whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),vc.forEach(t),gc.forEach(t),Fl=h(n),Tt=s(n,"SECTION",{});var bc=r(Tt);oi=s(bc,"H2",{});var ov=r(oi);ha=s(ov,"A",{href:!0,id:!0});var iv=r(ha);Fc=i(iv,"git merge"),iv.forEach(t),ov.forEach(t),$c=h(bc),xe=s(bc,"P",{});var Wt=r(xe);Bc=i(Wt,"There's 2 kind of "),ja=s(Wt,"CODE",{class:!0});var lv=r(ja);jc=i(lv,"git merge"),lv.forEach(t),Kc=i(Wt,", the "),ii=s(Wt,"STRONG",{});var cv=r(ii);Jc=i(cv,"fast-forward"),cv.forEach(t),Qc=i(Wt," and "),li=s(Wt,"STRONG",{});var nv=r(li);Xc=i(nv,"non fast-forward"),nv.forEach(t),Zc=i(Wt,"."),Wt.forEach(t),bc.forEach(t),$l=h(n),Y=s(n,"SECTION",{});var Ft=r(Y);ci=s(Ft,"H3",{});var dv=r(ci);pa=s(dv,"A",{href:!0,id:!0});var hv=r(pa);en=i(hv,"Fast-forward merge"),hv.forEach(t),dv.forEach(t),tn=h(Ft),je=s(Ft,"P",{});var $o=r(je);an=i($o,"Merging "),Ka=s($o,"CODE",{class:!0});var pv=r(Ka);sn=i(pv,"master"),pv.forEach(t),rn=i($o," into "),Ja=s($o,"CODE",{class:!0});var uv=r(Ja);on=i(uv,"branch A"),uv.forEach(t),ln=i($o,":"),$o.forEach(t),cn=h(Ft),ni=s(Ft,"P",{});var mv=r(ni);Ke=s(mv,"SPAN",{style:!0});var _v=r(Ke);W=s(_v,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),_v.forEach(t),mv.forEach(t),nn=h(Ft),Qa=s(Ft,"DIV",{class:!0});var fv=r(Qa);dn=i(fv,"Fast-forward merge"),fv.forEach(t),Ft.forEach(t),Bl=h(n),A=s(n,"SECTION",{});var ze=r(A);di=s(ze,"H3",{});var gv=r(di);ua=s(gv,"A",{href:!0,id:!0});var vv=r(ua);hn=i(vv,"Non Fast-forward merge"),vv.forEach(t),gv.forEach(t),pn=h(ze),Je=s(ze,"P",{});var Bo=r(Je);un=i(Bo,"Merging "),Xa=s(Bo,"CODE",{class:!0});var bv=r(Xa);mn=i(bv,"master"),bv.forEach(t),_n=i(Bo," into "),Za=s(Bo,"CODE",{class:!0});var Ev=r(Za);fn=i(Ev,"branch A"),Ev.forEach(t),gn=i(Bo,":"),Bo.forEach(t),vn=h(ze),hi=s(ze,"P",{});var yv=r(hi);Qe=s(yv,"SPAN",{style:!0});var wv=r(Qe);F=s(wv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),wv.forEach(t),yv.forEach(t),bn=h(ze),es=s(ze,"DIV",{class:!0});var kv=r(es);En=i(kv,"Non fast-forward merge"),kv.forEach(t),yn=h(ze),pi=s(ze,"P",{});var Cv=r(pi);wn=i(Cv,"Non fast-forward merge will create an extra commit that merges 2 branches."),Cv.forEach(t),ze.forEach(t),jl=h(n),$=s(n,"SECTION",{});var $t=r($);ui=s($t,"H3",{});var Ov=r(ui);ma=s(Ov,"A",{href:!0,id:!0});var Dv=r(ma);kn=i(Dv,"git pull"),Dv.forEach(t),Ov.forEach(t),Cn=h($t),Pe=s($t,"P",{});var Bt=r(Pe);On=i(Bt,"By default, "),ts=s(Bt,"CODE",{class:!0});var Iv=r(ts);Dn=i(Iv,"git pull"),Iv.forEach(t),In=i(Bt," is "),as=s(Bt,"CODE",{class:!0});var xv=r(as);xn=i(xv,"git fetch origin branch"),xv.forEach(t),Pn=i(Bt," + "),ss=s(Bt,"CODE",{class:!0});var Pv=r(ss);Sn=i(Pv,"git merge origin/branch"),Pv.forEach(t),Tn=i(Bt,"."),Bt.forEach(t),Gn=h($t),mi=s($t,"P",{});var Sv=r(mi);Xe=s(Sv,"SPAN",{style:!0});var Tv=r(Xe);B=s(Tv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Tv.forEach(t),Sv.forEach(t),Nn=h($t),rs=s($t,"DIV",{class:!0});var Gv=r(rs);An=i(Gv,"git pull"),Gv.forEach(t),$t.forEach(t),Kl=h(n),H=s(n,"SECTION",{});var Ve=r(H);_i=s(Ve,"H2",{});var Nv=r(_i);_a=s(Nv,"A",{href:!0,id:!0});var Av=r(_a);Hn=i(Av,"git reset"),Av.forEach(t),Nv.forEach(t),Mn=h(Ve),os=s(Ve,"P",{});var lg=r(os);is=s(lg,"CODE",{class:!0});var Hv=r(is);Rn=i(Hv,"git reset --hard"),Hv.forEach(t),qn=i(lg," allows you to change the reference of where your branch is pointing at."),lg.forEach(t),Ln=h(Ve),Ue=s(Ve,"P",{});var Wa=r(Ue);ls=s(Wa,"CODE",{class:!0});var Mv=r(ls);Un=i(Mv,"git checkout branch-b"),Mv.forEach(t),zn=i(Wa,", "),cs=s(Wa,"CODE",{class:!0});var Rv=r(cs);Vn=i(Rv,"git reset --hard branch-a"),Rv.forEach(t),Yn=i(Wa,", "),ns=s(Wa,"CODE",{class:!0});var qv=r(ns);Wn=i(qv,"git reset --hard #d"),qv.forEach(t),Fn=i(Wa,":"),Wa.forEach(t),$n=h(Ve),fi=s(Ve,"P",{});var Lv=r(fi);Ze=s(Lv,"SPAN",{style:!0});var Uv=r(Ze);j=s(Uv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Uv.forEach(t),Lv.forEach(t),Bn=h(Ve),ds=s(Ve,"DIV",{class:!0});var zv=r(ds);jn=i(zv,"git reset"),zv.forEach(t),Ve.forEach(t),Jl=h(n),M=s(n,"SECTION",{});var Ye=r(M);gi=s(Ye,"H2",{});var Vv=r(gi);fa=s(Vv,"A",{href:!0,id:!0});var Yv=r(fa);Kn=i(Yv,"git cherry-pick"),Yv.forEach(t),Vv.forEach(t),Jn=h(Ye),vi=s(Ye,"P",{});var Wv=r(vi);Qn=i(Wv,"cherry-pick allows you to pick commits from some other branches, tags, or refs."),Wv.forEach(t),Xn=h(Ye),Gt=s(Ye,"P",{});var Ll=r(Gt);hs=s(Ll,"CODE",{class:!0});var Fv=r(hs);Zn=i(Fv,"git checkout branch-b"),Fv.forEach(t),ed=i(Ll,", "),ps=s(Ll,"CODE",{class:!0});var $v=r(ps);td=i($v,"git cherry-pick branch-a"),$v.forEach(t),ad=i(Ll,":"),Ll.forEach(t),sd=h(Ye),bi=s(Ye,"P",{});var Bv=r(bi);et=s(Bv,"SPAN",{style:!0});var jv=r(et);K=s(jv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),jv.forEach(t),Bv.forEach(t),rd=h(Ye),us=s(Ye,"DIV",{class:!0});var Kv=r(us);od=i(Kv,"git cherry-pick"),Kv.forEach(t),Ye.forEach(t),Ql=h(n),_=s(n,"SECTION",{});var v=r(_);Ei=s(v,"H2",{});var Jv=r(Ei);ga=s(Jv,"A",{href:!0,id:!0});var Qv=r(ga);id=i(Qv,"git revert"),Qv.forEach(t),Jv.forEach(t),ld=h(v),ms=s(v,"P",{});var cg=r(ms);_s=s(cg,"CODE",{class:!0});var Xv=r(_s);cd=i(Xv,"git revert"),Xv.forEach(t),nd=i(cg," creates a new commit that reverses the change of the commit that you are reverting."),cg.forEach(t),dd=h(v),L=s(v,"P",{});var We=r(L);hd=i(We,"For example, if you accidentally merged "),fs=s(We,"CODE",{class:!0});var Zv=r(fs);pd=i(Zv,"feat/a"),Zv.forEach(t),ud=i(We," into "),gs=s(We,"CODE",{class:!0});var e1=r(gs);md=i(e1,"master"),e1.forEach(t),_d=i(We," branch, you can "),vs=s(We,"CODE",{class:!0});var t1=r(vs);fd=i(t1,"git checkout master"),t1.forEach(t),gd=i(We,", "),bs=s(We,"CODE",{class:!0});var a1=r(bs);vd=i(a1,"git revert #1"),a1.forEach(t),bd=i(We,":"),We.forEach(t),Ed=h(v),yi=s(v,"P",{});var s1=r(yi);tt=s(s1,"SPAN",{style:!0});var r1=r(tt);J=s(r1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),r1.forEach(t),s1.forEach(t),yd=h(v),Es=s(v,"DIV",{class:!0});var o1=r(Es);wd=i(o1,"git revert"),o1.forEach(t),kd=h(v),va=s(v,"P",{});var Ec=r(va);Cd=i(Ec,"If you know merge master into your "),ys=s(Ec,"CODE",{class:!0});var i1=r(ys);Od=i(i1,"feat/a"),i1.forEach(t),Dd=i(Ec," branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),Ec.forEach(t),Id=h(v),wi=s(v,"P",{});var l1=r(wi);at=s(l1,"SPAN",{style:!0});var c1=r(at);Q=s(c1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),c1.forEach(t),l1.forEach(t),xd=h(v),ws=s(v,"DIV",{class:!0});var n1=r(ws);Pd=i(n1,"Merging `master` into `feat/a`"),n1.forEach(t),Sd=h(v),Se=s(v,"P",{});var jt=r(Se);Td=i(jt,"If you want to recover the changes made in "),ks=s(jt,"CODE",{class:!0});var d1=r(ks);Gd=i(d1,"feat/a"),d1.forEach(t),Nd=i(jt,", you can "),Cs=s(jt,"CODE",{class:!0});var h1=r(Cs);Ad=i(h1,"revert"),h1.forEach(t),Hd=i(jt," the "),Os=s(jt,"CODE",{class:!0});var p1=r(Os);Md=i(p1,"revert"),p1.forEach(t),Rd=i(jt,":"),jt.forEach(t),qd=h(v),Ds=s(v,"P",{});var ng=r(Ds);Is=s(ng,"CODE",{class:!0});var u1=r(Is);Ld=i(u1,"git revert ~#1"),u1.forEach(t),Ud=i(ng,":"),ng.forEach(t),zd=h(v),ki=s(v,"P",{});var m1=r(ki);st=s(m1,"SPAN",{style:!0});var _1=r(st);X=s(_1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),_1.forEach(t),m1.forEach(t),Vd=h(v),xs=s(v,"DIV",{class:!0});var f1=r(xs);Yd=i(f1,"git revert the revert"),f1.forEach(t),Wd=h(v),S=s(v,"P",{});var ke=r(S);Fd=i(ke,"Now, when you are ready to merge your "),Ps=s(ke,"CODE",{class:!0});var g1=r(Ps);$d=i(g1,"feat/a"),g1.forEach(t),Bd=i(ke," branch into "),Ss=s(ke,"CODE",{class:!0});var v1=r(Ss);jd=i(v1,"master"),v1.forEach(t),Kd=i(ke,", you get the all the changes in "),Ts=s(ke,"CODE",{class:!0});var b1=r(Ts);Jd=i(b1,"feat/a"),b1.forEach(t),Qd=i(ke,", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Gs=s(ke,"CODE",{class:!0});var E1=r(Gs);Xd=i(E1,"feat/a"),E1.forEach(t),Zd=i(ke," in "),Ns=s(ke,"CODE",{class:!0});var y1=r(Ns);eh=i(y1,"master"),y1.forEach(t),th=i(ke,":"),ke.forEach(t),ah=h(v),Ci=s(v,"P",{});var w1=r(Ci);rt=s(w1,"SPAN",{style:!0});var k1=r(rt);Z=s(k1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),k1.forEach(t),w1.forEach(t),sh=h(v),As=s(v,"DIV",{class:!0});var C1=r(As);rh=i(C1,"Merging changes back to master"),C1.forEach(t),v.forEach(t),Xl=h(n),m=s(n,"SECTION",{});var g=r(m);Oi=s(g,"H2",{});var O1=r(Oi);ba=s(O1,"A",{href:!0,id:!0});var D1=r(ba);oh=i(D1,"git rebase"),D1.forEach(t),O1.forEach(t),ih=h(g),Hs=s(g,"P",{});var dg=r(Hs);Ms=s(dg,"CODE",{class:!0});var I1=r(Ms);lh=i(I1,"git rebase"),I1.forEach(t),ch=i(dg,' allows you to "move" commits to a different "base".'),dg.forEach(t),nh=h(g),D=s(g,"P",{});var R=r(D);dh=i(R,"For example, you branched out "),Rs=s(R,"CODE",{class:!0});var x1=r(Rs);hh=i(x1,"branch-a"),x1.forEach(t),ph=i(R," from "),qs=s(R,"CODE",{class:!0});var P1=r(qs);uh=i(P1,"master"),P1.forEach(t),mh=i(R," a while ago, and "),Ls=s(R,"CODE",{class:!0});var S1=r(Ls);_h=i(S1,"master"),S1.forEach(t),fh=i(R," has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Us=s(R,"CODE",{class:!0});var T1=r(Us);gh=i(T1,"rebase"),T1.forEach(t),vh=i(R,", replaying commits that you have made in "),zs=s(R,"CODE",{class:!0});var G1=r(zs);bh=i(G1,"branch-a"),G1.forEach(t),Eh=i(R," on top of the latest "),Vs=s(R,"CODE",{class:!0});var N1=r(Vs);yh=i(N1,"master"),N1.forEach(t),wh=i(R,"."),R.forEach(t),kh=h(g),Nt=s(g,"P",{});var Ul=r(Nt);Ys=s(Ul,"CODE",{class:!0});var A1=r(Ys);Ch=i(A1,"git checkout branch-a"),A1.forEach(t),Oh=i(Ul,", "),Ws=s(Ul,"CODE",{class:!0});var H1=r(Ws);Dh=i(H1,"git rebase master"),H1.forEach(t),Ih=i(Ul,":"),Ul.forEach(t),xh=h(g),Di=s(g,"P",{});var M1=r(Di);ot=s(M1,"SPAN",{style:!0});var R1=r(ot);ee=s(R1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),R1.forEach(t),M1.forEach(t),Ph=h(g),Fs=s(g,"DIV",{class:!0});var q1=r(Fs);Sh=i(q1,"git rebase"),q1.forEach(t),Th=h(g),$s=s(g,"P",{});var hg=r($s);Bs=s(hg,"CODE",{class:!0});var L1=r(Bs);Gh=i(L1,"git rebase"),L1.forEach(t),Nh=i(hg," does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),hg.forEach(t),Ah=h(g),At=s(g,"P",{});var zl=r(At);js=s(zl,"CODE",{class:!0});var U1=r(js);Hh=i(U1,"git checkout branch-a"),U1.forEach(t),Mh=i(zl,", "),Ks=s(zl,"CODE",{class:!0});var z1=r(Ks);Rh=i(z1,"git rebase --onto branch-b master branch-a"),z1.forEach(t),qh=i(zl,":"),zl.forEach(t),Lh=h(g),Ii=s(g,"P",{});var V1=r(Ii);it=s(V1,"SPAN",{style:!0});var Y1=r(it);te=s(Y1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Y1.forEach(t),V1.forEach(t),Uh=h(g),Js=s(g,"DIV",{class:!0});var W1=r(Js);zh=i(W1,"git rebase"),W1.forEach(t),Vh=h(g),xi=s(g,"P",{});var F1=r(xi);Yh=i(F1,"There's 3 reference point you should know when doing a git rebase:"),F1.forEach(t),Wh=h(g),lt=s(g,"UL",{});var jo=r(lt);Pi=s(jo,"LI",{});var $1=r(Pi);Qs=s($1,"CODE",{class:!0});var B1=r(Qs);Fh=i(B1,"<new base>"),B1.forEach(t),$1.forEach(t),$h=h(jo),Si=s(jo,"LI",{});var j1=r(Si);Xs=s(j1,"CODE",{class:!0});var K1=r(Xs);Bh=i(K1,"<upstream>"),K1.forEach(t),j1.forEach(t),jh=h(jo),Ti=s(jo,"LI",{});var J1=r(Ti);Zs=s(J1,"CODE",{class:!0});var Q1=r(Zs);Kh=i(Q1,"<branch>"),Q1.forEach(t),J1.forEach(t),jo.forEach(t),Jh=h(g),Gi=s(g,"P",{});var X1=r(Gi);ct=s(X1,"SPAN",{style:!0});var Z1=r(ct);er=s(Z1,"PICTURE",{});var pg=r(er);Ni=s(pg,"SOURCE",{type:!0,srcset:!0}),ae=s(pg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),pg.forEach(t),Z1.forEach(t),X1.forEach(t),Qh=h(g),tr=s(g,"DIV",{class:!0});var eb=r(tr);Xh=i(eb,"git rebase"),eb.forEach(t),Zh=h(g),Ai=s(g,"P",{});var tb=r(Ai);ep=i(tb,"Here are a few things you should know:"),tb.forEach(t),tp=h(g),U=s(g,"UL",{});var Fe=r(U);se=s(Fe,"LI",{});var xt=r(se);ar=s(xt,"CODE",{class:!0});var ab=r(ar);ap=i(ab,"git rebase"),ab.forEach(t),sp=i(xt," will replay the commits from "),sr=s(xt,"CODE",{class:!0});var sb=r(sr);rp=i(sb,"<upstream>"),sb.forEach(t),op=i(xt," to "),rr=s(xt,"CODE",{class:!0});var rb=r(rr);ip=i(rb,"<branch>"),rb.forEach(t),lp=i(xt," onto "),or=s(xt,"CODE",{class:!0});var ob=r(or);cp=i(ob,"<new base>"),ob.forEach(t),np=i(xt,"."),xt.forEach(t),dp=h(Fe),T=s(Fe,"LI",{});var Ce=r(T);hp=i(Ce,"If you specify "),ir=s(Ce,"CODE",{class:!0});var ib=r(ir);pp=i(ib,"<upstream>"),ib.forEach(t),up=i(Ce," as a branch name, "),lr=s(Ce,"CODE",{class:!0});var lb=r(lr);mp=i(lb,"git rebase"),lb.forEach(t),_p=i(Ce," will replay commits from the common ancestor of "),cr=s(Ce,"CODE",{class:!0});var cb=r(cr);fp=i(cb,"<upstream>"),cb.forEach(t),gp=i(Ce," and "),nr=s(Ce,"CODE",{class:!0});var nb=r(nr);vp=i(nb,"<branch>"),nb.forEach(t),bp=i(Ce," to "),dr=s(Ce,"CODE",{class:!0});var db=r(dr);Ep=i(db,"<branch>"),db.forEach(t),yp=i(Ce,"."),Ce.forEach(t),wp=h(Fe),nt=s(Fe,"LI",{});var Ko=r(nt);kp=i(Ko,"If you do not specify "),hr=s(Ko,"CODE",{class:!0});var hb=r(hr);Cp=i(hb,"<branch>"),hb.forEach(t),Op=i(Ko,", the default is the "),pr=s(Ko,"CODE",{class:!0});var pb=r(pr);Dp=i(pb,"HEAD"),pb.forEach(t),Ip=i(Ko,", current commit you are at now."),Ko.forEach(t),xp=h(Fe),z=s(Fe,"LI",{});var $e=r(z);Pp=i($e,"If you do not specify "),ur=s($e,"CODE",{class:!0});var ub=r(ur);Sp=i(ub,"--onto <new base>"),ub.forEach(t),Tp=i($e,", the new base will be default to "),mr=s($e,"CODE",{class:!0});var mb=r(mr);Gp=i(mb,"<upsttream>"),mb.forEach(t),Np=i($e,", that's why "),_r=s($e,"CODE",{class:!0});var _b=r(_r);Ap=i(_b,"git rebase master"),_b.forEach(t),Hp=i($e," is equivalent to "),fr=s($e,"CODE",{class:!0});var fb=r(fr);Mp=i(fb,"git rebase --onto master master"),fb.forEach(t),Rp=i($e,"."),$e.forEach(t),qp=h(Fe),Te=s(Fe,"LI",{});var Kt=r(Te);Lp=i(Kt,"If you do not specify "),gr=s(Kt,"CODE",{class:!0});var gb=r(gr);Up=i(gb,"<upstream>"),gb.forEach(t),zp=i(Kt,", it will be the upstream of the current branch. So "),vr=s(Kt,"CODE",{class:!0});var vb=r(vr);Vp=i(vb,"git rebase"),vb.forEach(t),Yp=i(Kt," is equivalent to "),br=s(Kt,"CODE",{class:!0});var bb=r(br);Wp=i(bb,"git rebase <origin/current-branch>"),bb.forEach(t),Fp=i(Kt,"."),Kt.forEach(t),Fe.forEach(t),g.forEach(t),Zl=h(n),I=s(n,"SECTION",{});var Oe=r(I);Hi=s(Oe,"H3",{});var Eb=r(Hi);Ea=s(Eb,"A",{href:!0,id:!0});var yb=r(Ea);$p=i(yb,"git rebase --interactive"),yb.forEach(t),Eb.forEach(t),Bp=h(Oe),Er=s(Oe,"P",{});var ug=r(Er);yr=s(ug,"CODE",{class:!0});var wb=r(yr);jp=i(wb,"git rebase"),wb.forEach(t),Kp=i(ug," has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),ug.forEach(t),Jp=h(Oe),Mi=s(Oe,"P",{});var kb=r(Mi);dt=s(kb,"SPAN",{style:!0});var Cb=r(dt);wr=s(Cb,"PICTURE",{});var mg=r(wr);Ri=s(mg,"SOURCE",{type:!0,srcset:!0}),re=s(mg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),mg.forEach(t),Cb.forEach(t),kb.forEach(t),Qp=h(Oe),kr=s(Oe,"DIV",{class:!0});var Ob=r(kr);Xp=i(Ob,"git rebase interactive"),Ob.forEach(t),Zp=h(Oe),ya=s(Oe,"P",{});var yc=r(ya);eu=i(yc,"When you run "),Cr=s(yc,"CODE",{class:!0});var Db=r(Cr);tu=i(Db,"git rebase --interactive"),Db.forEach(t),au=i(yc,", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),yc.forEach(t),su=h(Oe),Or=s(Oe,"DIV",{class:!0});var I3=r(Or);I3.forEach(t),Oe.forEach(t),ec=h(n),oe=s(n,"SECTION",{});var Jt=r(oe);qi=s(Jt,"H4",{});var Ib=r(qi);wa=s(Ib,"A",{href:!0,id:!0});var xb=r(wa);ru=i(xb,"pick"),xb.forEach(t),Ib.forEach(t),ou=h(Jt),Li=s(Jt,"P",{});var Pb=r(Li);iu=i(Pb,"The default instruction. Will just use the commit while replaying:"),Pb.forEach(t),lu=h(Jt),Ui=s(Jt,"P",{});var Sb=r(Ui);ht=s(Sb,"SPAN",{style:!0});var Tb=r(ht);Dr=s(Tb,"PICTURE",{});var _g=r(Dr);zi=s(_g,"SOURCE",{type:!0,srcset:!0}),ie=s(_g,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),_g.forEach(t),Tb.forEach(t),Sb.forEach(t),cu=h(Jt),Ir=s(Jt,"DIV",{class:!0});var x3=r(Ir);x3.forEach(t),Jt.forEach(t),tc=h(n),le=s(n,"SECTION",{});var Qt=r(le);Vi=s(Qt,"H4",{});var Gb=r(Vi);ka=s(Gb,"A",{href:!0,id:!0});var Nb=r(ka);nu=i(Nb,"drop"),Nb.forEach(t),Gb.forEach(t),du=h(Qt),Yi=s(Qt,"P",{});var Ab=r(Yi);hu=i(Ab,"Drop will omit the commit:"),Ab.forEach(t),pu=h(Qt),Wi=s(Qt,"P",{});var Hb=r(Wi);pt=s(Hb,"SPAN",{style:!0});var Mb=r(pt);xr=s(Mb,"PICTURE",{});var fg=r(xr);Fi=s(fg,"SOURCE",{type:!0,srcset:!0}),ce=s(fg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),fg.forEach(t),Mb.forEach(t),Hb.forEach(t),uu=h(Qt),Pr=s(Qt,"DIV",{class:!0});var P3=r(Pr);P3.forEach(t),Qt.forEach(t),ac=h(n),ne=s(n,"SECTION",{});var Xt=r(ne);$i=s(Xt,"H4",{});var Rb=r($i);Ca=s(Rb,"A",{href:!0,id:!0});var qb=r(Ca);mu=i(qb,"squash & fixup"),qb.forEach(t),Rb.forEach(t),_u=h(Xt),Ge=s(Xt,"P",{});var Zt=r(Ge);fu=i(Zt,"Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),Sr=s(Zt,"CODE",{class:!0});var Lb=r(Sr);gu=i(Lb,"squash"),Lb.forEach(t),vu=i(Zt,", git will prompt you to edit the commit message of the combined commit, while "),Tr=s(Zt,"CODE",{class:!0});var Ub=r(Tr);bu=i(Ub,"fixup"),Ub.forEach(t),Eu=i(Zt," will drop the commit of the "),Gr=s(Zt,"CODE",{class:!0});var zb=r(Gr);yu=i(zb,"fixup"),zb.forEach(t),wu=i(Zt,"ed commit."),Zt.forEach(t),ku=h(Xt),Bi=s(Xt,"P",{});var Vb=r(Bi);ut=s(Vb,"SPAN",{style:!0});var Yb=r(ut);Nr=s(Yb,"PICTURE",{});var gg=r(Nr);ji=s(gg,"SOURCE",{type:!0,srcset:!0}),de=s(gg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),gg.forEach(t),Yb.forEach(t),Vb.forEach(t),Cu=h(Xt),Ar=s(Xt,"DIV",{class:!0});var S3=r(Ar);S3.forEach(t),Xt.forEach(t),sc=h(n),he=s(n,"SECTION",{});var ea=r(he);Ki=s(ea,"H4",{});var Wb=r(Ki);Oa=s(Wb,"A",{href:!0,id:!0});var Fb=r(Oa);Ou=i(Fb,"break"),Fb.forEach(t),Wb.forEach(t),Du=h(ea),Da=s(ea,"P",{});var wc=r(Da);Iu=i(wc,"Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),Hr=s(wc,"CODE",{class:!0});var $b=r(Hr);xu=i($b,"git rebase --continue"),$b.forEach(t),Pu=i(wc," to continue."),wc.forEach(t),Su=h(ea),Ji=s(ea,"P",{});var Bb=r(Ji);mt=s(Bb,"SPAN",{style:!0});var jb=r(mt);Mr=s(jb,"PICTURE",{});var vg=r(Mr);Qi=s(vg,"SOURCE",{type:!0,srcset:!0}),pe=s(vg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),vg.forEach(t),jb.forEach(t),Bb.forEach(t),Tu=h(ea),Rr=s(ea,"DIV",{class:!0});var T3=r(Rr);T3.forEach(t),ea.forEach(t),rc=h(n),ue=s(n,"SECTION",{});var ta=r(ue);Xi=s(ta,"H4",{});var Kb=r(Xi);Ia=s(Kb,"A",{href:!0,id:!0});var Jb=r(Ia);Gu=i(Jb,"edit"),Jb.forEach(t),Kb.forEach(t),Nu=h(ta),Zi=s(ta,"P",{});var Qb=r(Zi);Au=i(Qb,"Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),Qb.forEach(t),Hu=h(ta),el=s(ta,"P",{});var Xb=r(el);_t=s(Xb,"SPAN",{style:!0});var Zb=r(_t);qr=s(Zb,"PICTURE",{});var bg=r(qr);tl=s(bg,"SOURCE",{type:!0,srcset:!0}),me=s(bg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),bg.forEach(t),Zb.forEach(t),Xb.forEach(t),Mu=h(ta),Lr=s(ta,"DIV",{class:!0});var G3=r(Lr);G3.forEach(t),ta.forEach(t),oc=h(n),_e=s(n,"SECTION",{});var aa=r(_e);al=s(aa,"H3",{});var e2=r(al);xa=s(e2,"A",{href:!0,id:!0});var t2=r(xa);Ru=i(t2,"git pull --rebase"),t2.forEach(t),e2.forEach(t),qu=h(aa),ft=s(aa,"P",{});var Jo=r(ft);Lu=i(Jo,"There's a rebase mode for git pull, where it will be "),Ur=s(Jo,"CODE",{class:!0});var a2=r(Ur);Uu=i(a2,"git fetch origin branch"),a2.forEach(t),zu=i(Jo," + "),zr=s(Jo,"CODE",{class:!0});var s2=r(zr);Vu=i(s2,"git rebase origin/branch"),s2.forEach(t),Yu=i(Jo,"."),Jo.forEach(t),Wu=h(aa),sl=s(aa,"P",{});var r2=r(sl);gt=s(r2,"SPAN",{style:!0});var o2=r(gt);fe=s(o2,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),o2.forEach(t),r2.forEach(t),Fu=h(aa),Vr=s(aa,"DIV",{class:!0});var i2=r(Vr);$u=i(i2,"git pull --rebase"),i2.forEach(t),aa.forEach(t),ic=h(n),f=s(n,"SECTION",{});var b=r(f);rl=s(b,"H3",{});var l2=r(rl);Pa=s(l2,"A",{href:!0,id:!0});var c2=r(Pa);Bu=i(c2,"git rebase a shared branch"),c2.forEach(t),l2.forEach(t),ju=h(b),Ne=s(b,"P",{});var sa=r(Ne);Ku=i(sa,"Say "),Yr=s(sa,"CODE",{class:!0});var n2=r(Yr);Ju=i(n2,"x"),n2.forEach(t),Qu=i(sa," and "),Wr=s(sa,"CODE",{class:!0});var d2=r(Wr);Xu=i(d2,"y"),d2.forEach(t),Zu=i(sa," are working on the "),Fr=s(sa,"CODE",{class:!0});var h2=r(Fr);em=i(h2,"feat/a"),h2.forEach(t),tm=i(sa," branch."),sa.forEach(t),am=h(b),ol=s(b,"P",{});var p2=r(ol);vt=s(p2,"SPAN",{style:!0});var u2=r(vt);$r=s(u2,"PICTURE",{});var Eg=r($r);il=s(Eg,"SOURCE",{type:!0,srcset:!0}),ge=s(Eg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Eg.forEach(t),u2.forEach(t),p2.forEach(t),sm=h(b),Ht=s(b,"P",{});var Vl=r(Ht);Br=s(Vl,"CODE",{class:!0});var m2=r(Br);rm=i(m2,"x"),m2.forEach(t),om=i(Vl," decided to rebase the "),jr=s(Vl,"CODE",{class:!0});var _2=r(jr);im=i(_2,"feat/a"),_2.forEach(t),lm=i(Vl," branch to squash and drop some commits:"),Vl.forEach(t),cm=h(b),ll=s(b,"P",{});var f2=r(ll);bt=s(f2,"SPAN",{style:!0});var g2=r(bt);Kr=s(g2,"PICTURE",{});var yg=r(Kr);cl=s(yg,"SOURCE",{type:!0,srcset:!0}),ve=s(yg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),yg.forEach(t),g2.forEach(t),f2.forEach(t),nm=h(b),Et=s(b,"P",{});var Qo=r(Et);dm=i(Qo,"While "),Jr=s(Qo,"CODE",{class:!0});var v2=r(Jr);hm=i(v2,"x"),v2.forEach(t),pm=i(Qo," had done that, that was just a part of the whole picture. Because the "),Qr=s(Qo,"CODE",{class:!0});var b2=r(Qr);um=i(b2,"rebase"),b2.forEach(t),mm=i(Qo," on his local machine changed the git history on his local copy only."),Qo.forEach(t),_m=h(b),nl=s(b,"P",{});var E2=r(nl);yt=s(E2,"SPAN",{style:!0});var y2=r(yt);Xr=s(y2,"PICTURE",{});var wg=r(Xr);dl=s(wg,"SOURCE",{type:!0,srcset:!0}),be=s(wg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),wg.forEach(t),y2.forEach(t),E2.forEach(t),fm=h(b),Ae=s(b,"P",{});var ra=r(Ae);gm=i(ra,"To make the change on the remote server as well, "),Zr=s(ra,"CODE",{class:!0});var w2=r(Zr);vm=i(w2,"x"),w2.forEach(t),bm=i(ra," forced push his branch to the remote server. ("),hl=s(ra,"STRONG",{});var k2=r(hl);Em=i(k2,"Note:"),k2.forEach(t),ym=i(ra," You can push without "),eo=s(ra,"CODE",{class:!0});var C2=r(eo);wm=i(C2,"--force"),C2.forEach(t),km=i(ra," if the origin branch cannot fast-forward merge your local branch)"),ra.forEach(t),Cm=h(b),He=s(b,"P",{});var oa=r(He);Om=i(oa,"While "),to=s(oa,"CODE",{class:!0});var O2=r(to);Dm=i(O2,"y"),O2.forEach(t),Im=i(oa," on the other hand, did not know about the "),ao=s(oa,"CODE",{class:!0});var D2=r(ao);xm=i(D2,"rebase"),D2.forEach(t),Pm=i(oa,", so when "),so=s(oa,"CODE",{class:!0});var I2=r(so);Sm=i(I2,"y"),I2.forEach(t),Tm=i(oa," pulled the code, it ended up with a messed up merged of a messed up git history:"),oa.forEach(t),Gm=h(b),pl=s(b,"P",{});var x2=r(pl);wt=s(x2,"SPAN",{style:!0});var P2=r(wt);ro=s(P2,"PICTURE",{});var kg=r(ro);ul=s(kg,"SOURCE",{type:!0,srcset:!0}),Ee=s(kg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),kg.forEach(t),P2.forEach(t),x2.forEach(t),Nm=h(b),kt=s(b,"P",{});var Xo=r(kt);Am=i(Xo,"In most cases, there would be a merge conflict, because "),oo=s(Xo,"CODE",{class:!0});var S2=r(oo);Hm=i(S2,"x"),S2.forEach(t),Mm=i(Xo," and "),io=s(Xo,"CODE",{class:!0});var T2=r(io);Rm=i(T2,"y"),T2.forEach(t),qm=i(Xo,"'s branch would have made changes on the same file."),Xo.forEach(t),Lm=h(b),Me=s(b,"P",{});var ia=r(Me);Um=i(ia,"So, the correct way, if the rebase is necessary, is to notify "),lo=s(ia,"CODE",{class:!0});var G2=r(lo);zm=i(G2,"y"),G2.forEach(t),Vm=i(ia," about the rebase, so that "),co=s(ia,"CODE",{class:!0});var N2=r(co);Ym=i(N2,"y"),N2.forEach(t),Wm=i(ia," can "),no=s(ia,"CODE",{class:!0});var A2=r(no);Fm=i(A2,"git reset --hard"),A2.forEach(t),$m=i(ia," his branch to the remote branch."),ia.forEach(t),Bm=h(b),ml=s(b,"P",{});var H2=r(ml);Ct=s(H2,"SPAN",{style:!0});var M2=r(Ct);ho=s(M2,"PICTURE",{});var Cg=r(ho);_l=s(Cg,"SOURCE",{type:!0,srcset:!0}),ye=s(Cg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Cg.forEach(t),M2.forEach(t),H2.forEach(t),jm=h(b),V=s(b,"P",{});var Be=r(V);Km=i(Be,"If unfortunately, at the same time, "),po=s(Be,"CODE",{class:!0});var R2=r(po);Jm=i(R2,"y"),R2.forEach(t),Qm=i(Be," has made more commits to his local branch, he would have to "),uo=s(Be,"CODE",{class:!0});var q2=r(uo);Xm=i(q2,"git rebase"),q2.forEach(t),Zm=i(Be," the new changes onto the remote branch, or "),mo=s(Be,"CODE",{class:!0});var L2=r(mo);e_=i(L2,"git cherry-pick"),L2.forEach(t),t_=i(Be," the new changes after the "),_o=s(Be,"CODE",{class:!0});var U2=r(_o);a_=i(U2,"git reset --hard"),U2.forEach(t),s_=i(Be,"."),Be.forEach(t),r_=h(b),Ot=s(b,"P",{});var Zo=r(Ot);o_=i(Zo,"In the companies that I have worked with, forbidden a "),fo=s(Zo,"CODE",{class:!0});var z2=r(fo);i_=i(z2,"rebase"),z2.forEach(t),l_=i(Zo," on a common branch, especially the "),go=s(Zo,"CODE",{class:!0});var V2=r(go);c_=i(V2,"master"),V2.forEach(t),n_=i(Zo," branch."),Zo.forEach(t),b.forEach(t),lc=h(n),Mt=s(n,"SECTION",{});var kc=r(Mt);fl=s(kc,"H2",{});var Y2=r(fl);Sa=s(Y2,"A",{href:!0,id:!0});var W2=r(Sa);d_=i(W2,"git log"),W2.forEach(t),Y2.forEach(t),h_=h(kc),gl=s(kc,"P",{});var F2=r(gl);p_=i(F2,"The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),F2.forEach(t),kc.forEach(t),cc=h(n),Rt=s(n,"SECTION",{});var Cc=r(Rt);vl=s(Cc,"H3",{});var $2=r(vl);Ta=s($2,"A",{href:!0,id:!0});var B2=r(Ta);u_=i(B2,"--since, --after, --until, --before"),B2.forEach(t),$2.forEach(t),m_=h(Cc),bl=s(Cc,"P",{});var j2=r(bl);__=i(j2,"You can filter out commits within a specific timeframe"),j2.forEach(t),Cc.forEach(t),nc=h(n),qt=s(n,"SECTION",{});var Oc=r(qt);El=s(Oc,"H3",{});var K2=r(El);Ga=s(K2,"A",{href:!0,id:!0});var J2=r(Ga);f_=i(J2,"--grep"),J2.forEach(t),K2.forEach(t),g_=h(Oc),yl=s(Oc,"P",{});var Q2=r(yl);v_=i(Q2,"You can filter out commits based on commit message"),Q2.forEach(t),Oc.forEach(t),dc=h(n),Lt=s(n,"SECTION",{});var Dc=r(Lt);wl=s(Dc,"H3",{});var X2=r(wl);Na=s(X2,"A",{href:!0,id:!0});var Z2=r(Na);b_=i(Z2,"--invert-grep"),Z2.forEach(t),X2.forEach(t),E_=h(Dc),vo=s(Dc,"P",{});var Og=r(vo);y_=i(Og,"You can filter out commits that does not match the "),bo=s(Og,"CODE",{class:!0});var eE=r(bo);w_=i(eE,"--grep"),eE.forEach(t),Og.forEach(t),Dc.forEach(t),hc=h(n),Ut=s(n,"SECTION",{});var Ic=r(Ut);kl=s(Ic,"H3",{});var tE=r(kl);Aa=s(tE,"A",{href:!0,id:!0});var aE=r(Aa);k_=i(aE,"--all-match"),aE.forEach(t),tE.forEach(t),C_=h(Ic),we=s(Ic,"P",{});var Pt=r(we);Eo=s(Pt,"CODE",{class:!0});var sE=r(Eo);O_=i(sE,"--grep"),sE.forEach(t),D_=i(Pt," is a "),yo=s(Pt,"CODE",{class:!0});var rE=r(yo);I_=i(rE,"OR"),rE.forEach(t),x_=i(Pt," filter, "),wo=s(Pt,"CODE",{class:!0});var oE=r(wo);P_=i(oE,"--all-match"),oE.forEach(t),S_=i(Pt," make it a "),ko=s(Pt,"CODE",{class:!0});var iE=r(ko);T_=i(iE,"AND"),iE.forEach(t),G_=i(Pt," filter"),Pt.forEach(t),Ic.forEach(t),pc=h(n),zt=s(n,"SECTION",{});var xc=r(zt);Cl=s(xc,"H3",{});var lE=r(Cl);Ha=s(lE,"A",{href:!0,id:!0});var cE=r(Ha);N_=i(cE,"--min-parents, --max-parents, --merges, --no-merges"),cE.forEach(t),lE.forEach(t),A_=h(xc),Dt=s(xc,"P",{});var ei=r(Dt);H_=i(ei,"You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Co=s(ei,"CODE",{class:!0});var nE=r(Co);M_=i(nE,"--merge"),nE.forEach(t),R_=i(ei," is equivalent to "),Oo=s(ei,"CODE",{class:!0});var dE=r(Oo);q_=i(dE,"--min-parents=2"),dE.forEach(t),L_=i(ei,"."),ei.forEach(t),xc.forEach(t),uc=h(n),Vt=s(n,"SECTION",{});var Pc=r(Vt);Ol=s(Pc,"H3",{});var hE=r(Ol);Ma=s(hE,"A",{href:!0,id:!0});var pE=r(Ma);U_=i(pE,"--first-parent"),pE.forEach(t),hE.forEach(t),z_=h(Pc),Ra=s(Pc,"P",{});var Sc=r(Ra);V_=i(Sc,"You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),Do=s(Sc,"CODE",{class:!0});var uE=r(Do);Y_=i(uE,"--first-parent"),uE.forEach(t),W_=i(Sc," allow you to filter out only the merge commit and the commit you have made on the current branch."),Sc.forEach(t),Pc.forEach(t),mc=h(n),Yt=s(n,"SECTION",{});var Tc=r(Yt);Dl=s(Tc,"H2",{});var mE=r(Dl);qa=s(mE,"A",{href:!0,id:!0});var _E=r(qa);F_=i(_E,"git reflog"),_E.forEach(t),mE.forEach(t),$_=h(Tc),Re=s(Tc,"P",{});var la=r(Re);B_=i(la,"The reference log shows you all the "),Io=s(la,"CODE",{class:!0});var fE=r(Io);j_=i(fE,"HEAD"),fE.forEach(t),K_=i(la," position you have been to. This is especially useful when you have "),xo=s(la,"CODE",{class:!0});var gE=r(xo);J_=i(gE,"reset --hard"),gE.forEach(t),Q_=i(la," or "),Po=s(la,"CODE",{class:!0});var vE=r(Po);X_=i(vE,"rebase"),vE.forEach(t),Z_=i(la,", you can still find back the commit reference that you were at previously, so you can recover them."),la.forEach(t),Tc.forEach(t),_c=h(n),w=s(n,"SECTION",{});var O=r(w);Il=s(O,"H2",{});var bE=r(Il);La=s(bE,"A",{href:!0,id:!0});var EE=r(La);ef=i(EE,"git bisect"),EE.forEach(t),bE.forEach(t),tf=h(O),xl=s(O,"P",{});var yE=r(xl);af=i(yE,"This is a useful command that I am looking forward to use it."),yE.forEach(t),sf=h(O),Ua=s(O,"P",{});var Gc=r(Ua);rf=i(Gc,"Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),So=s(Gc,"CODE",{class:!0});var wE=r(So);of=i(wE,"git bisect"),wE.forEach(t),lf=i(Gc," allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),Gc.forEach(t),cf=h(O),To=s(O,"DIV",{class:!0});var N3=r(To);N3.forEach(t),nf=h(O),G=s(O,"P",{});var De=r(G);df=i(De,"Once you've specified at least one "),Go=s(De,"CODE",{class:!0});var kE=r(Go);hf=i(kE,"bad"),kE.forEach(t),pf=i(De," and one "),No=s(De,"CODE",{class:!0});var CE=r(No);uf=i(CE,"good"),CE.forEach(t),mf=i(De," commit, "),Ao=s(De,"CODE",{class:!0});var OE=r(Ao);_f=i(OE,"git bisect"),OE.forEach(t),ff=i(De," will find and checkout to a commit in the middle of that range between "),Ho=s(De,"CODE",{class:!0});var DE=r(Ho);gf=i(DE,"bad"),DE.forEach(t),vf=i(De," and "),Mo=s(De,"CODE",{class:!0});var IE=r(Mo);bf=i(IE,"good"),IE.forEach(t),Ef=i(De," and greets you with:"),De.forEach(t),yf=h(O),Ro=s(O,"DIV",{class:!0});var A3=r(Ro);A3.forEach(t),wf=h(O),It=s(O,"P",{});var ti=r(It);kf=i(ti,"You can know test / verify / profile your code, and specify whether the current commit is a "),qo=s(ti,"CODE",{class:!0});var xE=r(qo);Cf=i(xE,"good"),xE.forEach(t),Of=i(ti," commit or a "),Lo=s(ti,"CODE",{class:!0});var PE=r(Lo);Df=i(PE,"bad"),PE.forEach(t),If=i(ti," commit:"),ti.forEach(t),xf=h(O),Uo=s(O,"DIV",{class:!0});var H3=r(Uo);H3.forEach(t),Pf=h(O),za=s(O,"P",{});var Nc=r(za);Sf=i(Nc,"Continue doing it until eventually there's no more commit to inspect. "),zo=s(Nc,"CODE",{class:!0});var SE=r(zo);Tf=i(SE,"git bisect"),SE.forEach(t),Gf=i(Nc," will print out the description of the first bad commit."),Nc.forEach(t),O.forEach(t),fc=h(n),x=s(n,"SECTION",{});var Ie=r(x);Pl=s(Ie,"H2",{});var TE=r(Pl);Va=s(TE,"A",{href:!0,id:!0});var GE=r(Va);Nf=i(GE,"Summary"),GE.forEach(t),TE.forEach(t),Af=h(Ie),Sl=s(Ie,"P",{});var NE=r(Sl);Hf=i(NE,"We've gone through the following git commands:"),NE.forEach(t),Mf=h(Ie),C=s(Ie,"UL",{});var P=r(C);Tl=s(P,"LI",{});var AE=r(Tl);Rf=i(AE,"git merge"),AE.forEach(t),qf=h(P),Gl=s(P,"LI",{});var HE=r(Gl);Lf=i(HE,"git reset"),HE.forEach(t),Uf=h(P),Nl=s(P,"LI",{});var ME=r(Nl);zf=i(ME,"git cherry-pick"),ME.forEach(t),Vf=h(P),Al=s(P,"LI",{});var RE=r(Al);Yf=i(RE,"git revert"),RE.forEach(t),Wf=h(P),Hl=s(P,"LI",{});var qE=r(Hl);Ff=i(qE,"git rebase"),qE.forEach(t),$f=h(P),Ml=s(P,"LI",{});var LE=r(Ml);Bf=i(LE,"git log"),LE.forEach(t),jf=h(P),Rl=s(P,"LI",{});var UE=r(Rl);Kf=i(UE,"git reflog"),UE.forEach(t),Jf=h(P),ql=s(P,"LI",{});var zE=r(ql);Qf=i(zE,"git bisect"),zE.forEach(t),P.forEach(t),Xf=h(Ie),Ya=s(Ie,"P",{});var Ac=r(Ya);Zf=i(Ac,"Hopefully we are now "),Vo=s(Ac,"CODE",{class:!0});var VE=r(Vo);eg=i(VE,"git gudder"),VE.forEach(t),tg=i(Ac," than before!"),Ac.forEach(t),ag=h(Ie),sg=s(Ie,"HR",{}),rg=h(Ie),Yo=s(Ie,"P",{});var Dg=r(Yo);og=i(Dg,"Related topic: "),Wo=s(Dg,"A",{href:!0});var YE=r(Wo);ig=i(YE,"Git commits went missing after a rebase"),YE.forEach(t),Dg.forEach(t),Ie.forEach(t),this.h()},h(){l(ca,"href","#disclaimer"),l(ca,"id","disclaimer"),l(da,"href","https://git-scm.com"),l(da,"rel","nofollow"),l(ha,"href","#git-merge"),l(ha,"id","git-merge"),l(ja,"class","inline"),l(pa,"href","#fast-forward-merge"),l(pa,"id","fast-forward-merge"),l(Ka,"class","inline"),l(Ja,"class","inline"),E(W.src,xg=f3)||l(W,"src",xg),l(W,"srcset",f3+", "+R0+" 2x"),l(W,"loading","lazy"),c(W,"position","absolute"),c(W,"top","0"),c(W,"width","100%"),c(W,"height","100%"),l(W,"alt","git-merge-ff"),c(Ke,"display","block"),c(Ke,"position","relative"),c(Ke,"padding-top","56.566%"),c(Ke,"width","100%"),l(Qa,"class","caption svelte-koydfe"),l(ua,"href","#non-fast-forward-merge"),l(ua,"id","non-fast-forward-merge"),l(Xa,"class","inline"),l(Za,"class","inline"),E(F.src,Pg=_3)||l(F,"src",Pg),l(F,"srcset",_3+", "+M0+" 2x"),l(F,"loading","lazy"),c(F,"position","absolute"),c(F,"top","0"),c(F,"width","100%"),c(F,"height","100%"),l(F,"alt","git-merge-non-ff"),c(Qe,"display","block"),c(Qe,"position","relative"),c(Qe,"padding-top","58.779%"),c(Qe,"width","100%"),l(es,"class","caption svelte-koydfe"),l(ma,"href","#git-pull"),l(ma,"id","git-pull"),l(ts,"class","inline"),l(as,"class","inline"),l(ss,"class","inline"),E(B.src,Sg=m3)||l(B,"src",Sg),l(B,"srcset",m3+", "+H0+" 2x"),l(B,"loading","lazy"),c(B,"position","absolute"),c(B,"top","0"),c(B,"width","100%"),c(B,"height","100%"),l(B,"alt","git-pull"),c(Xe,"display","block"),c(Xe,"position","relative"),c(Xe,"padding-top","59.695%"),c(Xe,"width","100%"),l(rs,"class","caption svelte-koydfe"),l(_a,"href","#git-reset"),l(_a,"id","git-reset"),l(is,"class","inline"),l(ls,"class","inline"),l(cs,"class","inline"),l(ns,"class","inline"),E(j.src,Tg=u3)||l(j,"src",Tg),l(j,"srcset",u3+", "+A0+" 2x"),l(j,"loading","lazy"),c(j,"position","absolute"),c(j,"top","0"),c(j,"width","100%"),c(j,"height","100%"),l(j,"alt","git-reset"),c(Ze,"display","block"),c(Ze,"position","relative"),c(Ze,"padding-top","89.167%"),c(Ze,"width","100%"),l(ds,"class","caption svelte-koydfe"),l(fa,"href","#git-cherry-pick"),l(fa,"id","git-cherry-pick"),l(hs,"class","inline"),l(ps,"class","inline"),E(K.src,Gg=p3)||l(K,"src",Gg),l(K,"srcset",p3+", "+N0+" 2x"),l(K,"loading","lazy"),c(K,"position","absolute"),c(K,"top","0"),c(K,"width","100%"),c(K,"height","100%"),l(K,"alt","git-cherry-pick"),c(et,"display","block"),c(et,"position","relative"),c(et,"padding-top","87.500%"),c(et,"width","100%"),l(us,"class","caption svelte-koydfe"),l(ga,"href","#git-revert"),l(ga,"id","git-revert"),l(_s,"class","inline"),l(fs,"class","inline"),l(gs,"class","inline"),l(vs,"class","inline"),l(bs,"class","inline"),E(J.src,Ng=h3)||l(J,"src",Ng),l(J,"srcset",h3+", "+G0+" 2x"),l(J,"loading","lazy"),c(J,"position","absolute"),c(J,"top","0"),c(J,"width","100%"),c(J,"height","100%"),l(J,"alt","git-revert"),c(tt,"display","block"),c(tt,"position","relative"),c(tt,"padding-top","69.231%"),c(tt,"width","100%"),l(Es,"class","caption svelte-koydfe"),l(ys,"class","inline"),E(Q.src,Ag=d3)||l(Q,"src",Ag),l(Q,"srcset",d3+", "+T0+" 2x"),l(Q,"loading","lazy"),c(Q,"position","absolute"),c(Q,"top","0"),c(Q,"width","100%"),c(Q,"height","100%"),l(Q,"alt","git-revert-2"),c(at,"display","block"),c(at,"position","relative"),c(at,"padding-top","69.231%"),c(at,"width","100%"),l(ws,"class","caption svelte-koydfe"),l(ks,"class","inline"),l(Cs,"class","inline"),l(Os,"class","inline"),l(Is,"class","inline"),E(X.src,Hg=n3)||l(X,"src",Hg),l(X,"srcset",n3+", "+S0+" 2x"),l(X,"loading","lazy"),c(X,"position","absolute"),c(X,"top","0"),c(X,"width","100%"),c(X,"height","100%"),l(X,"alt","git-revert-3"),c(st,"display","block"),c(st,"position","relative"),c(st,"padding-top","54.783%"),c(st,"width","100%"),l(xs,"class","caption svelte-koydfe"),l(Ps,"class","inline"),l(Ss,"class","inline"),l(Ts,"class","inline"),l(Gs,"class","inline"),l(Ns,"class","inline"),E(Z.src,Mg=c3)||l(Z,"src",Mg),l(Z,"srcset",c3+", "+P0+" 2x"),l(Z,"loading","lazy"),c(Z,"position","absolute"),c(Z,"top","0"),c(Z,"width","100%"),c(Z,"height","100%"),l(Z,"alt","git-revert-4"),c(rt,"display","block"),c(rt,"position","relative"),c(rt,"padding-top","54.783%"),c(rt,"width","100%"),l(As,"class","caption svelte-koydfe"),l(ba,"href","#git-rebase"),l(ba,"id","git-rebase"),l(Ms,"class","inline"),l(Rs,"class","inline"),l(qs,"class","inline"),l(Ls,"class","inline"),l(Us,"class","inline"),l(zs,"class","inline"),l(Vs,"class","inline"),l(Ys,"class","inline"),l(Ws,"class","inline"),E(ee.src,Rg=l3)||l(ee,"src",Rg),l(ee,"srcset",l3+", "+x0+" 2x"),l(ee,"loading","lazy"),c(ee,"position","absolute"),c(ee,"top","0"),c(ee,"width","100%"),c(ee,"height","100%"),l(ee,"alt","git-rebase"),c(ot,"display","block"),c(ot,"position","relative"),c(ot,"padding-top","49.613%"),c(ot,"width","100%"),l(Fs,"class","caption svelte-koydfe"),l(Bs,"class","inline"),l(js,"class","inline"),l(Ks,"class","inline"),E(te.src,qg=i3)||l(te,"src",qg),l(te,"srcset",i3+", "+I0+" 2x"),l(te,"loading","lazy"),c(te,"position","absolute"),c(te,"top","0"),c(te,"width","100%"),c(te,"height","100%"),l(te,"alt","git-rebase-2"),c(it,"display","block"),c(it,"position","relative"),c(it,"padding-top","77.510%"),c(it,"width","100%"),l(Js,"class","caption svelte-koydfe"),l(Qs,"class","inline"),l(Xs,"class","inline"),l(Zs,"class","inline"),l(Ni,"type","image/webp"),l(Ni,"srcset",O0+", "+C0+" 2x"),E(ae.src,Lg=o3)||l(ae,"src",Lg),l(ae,"srcset",o3+", "+D0+" 2x"),l(ae,"loading","lazy"),c(ae,"position","absolute"),c(ae,"top","0"),c(ae,"width","100%"),c(ae,"height","100%"),l(ae,"alt","git-rebase"),c(ct,"display","block"),c(ct,"position","relative"),c(ct,"padding-top","77.510%"),c(ct,"width","100%"),l(tr,"class","caption svelte-koydfe"),l(ar,"class","inline"),l(sr,"class","inline"),l(rr,"class","inline"),l(or,"class","inline"),l(ir,"class","inline"),l(lr,"class","inline"),l(cr,"class","inline"),l(nr,"class","inline"),l(dr,"class","inline"),l(hr,"class","inline"),l(pr,"class","inline"),l(ur,"class","inline"),l(mr,"class","inline"),l(_r,"class","inline"),l(fr,"class","inline"),l(gr,"class","inline"),l(vr,"class","inline"),l(br,"class","inline"),l(Ea,"href","#git-rebase-interactive"),l(Ea,"id","git-rebase-interactive"),l(yr,"class","inline"),l(Ri,"type","image/webp"),l(Ri,"srcset",s3+", "+a3+" 2x"),E(re.src,Ug=Hc)||l(re,"src",Ug),l(re,"srcset",Hc+", "+r3+" 2x"),l(re,"loading","lazy"),c(re,"position","absolute"),c(re,"top","0"),c(re,"width","100%"),c(re,"height","100%"),l(re,"alt","git-rebase-i-pick"),c(dt,"display","block"),c(dt,"position","relative"),c(dt,"padding-top","24.476%"),c(dt,"width","100%"),l(kr,"class","caption svelte-koydfe"),l(Cr,"class","inline"),l(Or,"class","code-section"),l(wa,"href","#pick"),l(wa,"id","pick"),l(zi,"type","image/webp"),l(zi,"srcset",s3+", "+a3+" 2x"),E(ie.src,zg=Hc)||l(ie,"src",zg),l(ie,"srcset",Hc+", "+r3+" 2x"),l(ie,"loading","lazy"),c(ie,"position","absolute"),c(ie,"top","0"),c(ie,"width","100%"),c(ie,"height","100%"),l(ie,"alt","git-rebase-i-pick"),c(ht,"display","block"),c(ht,"position","relative"),c(ht,"padding-top","24.476%"),c(ht,"width","100%"),l(Ir,"class","code-section"),l(ka,"href","#drop"),l(ka,"id","drop"),l(Fi,"type","image/webp"),l(Fi,"srcset",w0+", "+y0+" 2x"),E(ce.src,Vg=t3)||l(ce,"src",Vg),l(ce,"srcset",t3+", "+k0+" 2x"),l(ce,"loading","lazy"),c(ce,"position","absolute"),c(ce,"top","0"),c(ce,"width","100%"),c(ce,"height","100%"),l(ce,"alt","git-rebase-i-drop"),c(pt,"display","block"),c(pt,"position","relative"),c(pt,"padding-top","24.476%"),c(pt,"width","100%"),l(Pr,"class","code-section"),l(Ca,"href","#squash-fixup"),l(Ca,"id","squash-fixup"),l(Sr,"class","inline"),l(Tr,"class","inline"),l(Gr,"class","inline"),l(ji,"type","image/webp"),l(ji,"srcset",b0+", "+v0+" 2x"),E(de.src,Yg=e3)||l(de,"src",Yg),l(de,"srcset",e3+", "+E0+" 2x"),l(de,"loading","lazy"),c(de,"position","absolute"),c(de,"top","0"),c(de,"width","100%"),c(de,"height","100%"),l(de,"alt","git-rebase-i-squash"),c(ut,"display","block"),c(ut,"position","relative"),c(ut,"padding-top","24.615%"),c(ut,"width","100%"),l(Ar,"class","code-section"),l(Oa,"href","#break"),l(Oa,"id","break"),l(Hr,"class","inline"),l(Qi,"type","image/webp"),l(Qi,"srcset",f0+", "+_0+" 2x"),E(pe.src,Wg=ZE)||l(pe,"src",Wg),l(pe,"srcset",ZE+", "+g0+" 2x"),l(pe,"loading","lazy"),c(pe,"position","absolute"),c(pe,"top","0"),c(pe,"width","100%"),c(pe,"height","100%"),l(pe,"alt","git-rebase-i-break"),c(mt,"display","block"),c(mt,"position","relative"),c(mt,"padding-top","26.434%"),c(mt,"width","100%"),l(Rr,"class","code-section"),l(Ia,"href","#edit"),l(Ia,"id","edit"),l(tl,"type","image/webp"),l(tl,"srcset",u0+", "+p0+" 2x"),E(me.src,Fg=XE)||l(me,"src",Fg),l(me,"srcset",XE+", "+m0+" 2x"),l(me,"loading","lazy"),c(me,"position","absolute"),c(me,"top","0"),c(me,"width","100%"),c(me,"height","100%"),l(me,"alt","git-rebase-i-edit"),c(_t,"display","block"),c(_t,"position","relative"),c(_t,"padding-top","26.434%"),c(_t,"width","100%"),l(Lr,"class","code-section"),l(xa,"href","#git-pull-rebase"),l(xa,"id","git-pull-rebase"),l(Ur,"class","inline"),l(zr,"class","inline"),E(fe.src,$g=QE)||l(fe,"src",$g),l(fe,"srcset",QE+", "+h0+" 2x"),l(fe,"loading","lazy"),c(fe,"position","absolute"),c(fe,"top","0"),c(fe,"width","100%"),c(fe,"height","100%"),l(fe,"alt","git-pull-rebase"),c(gt,"display","block"),c(gt,"position","relative"),c(gt,"padding-top","66.066%"),c(gt,"width","100%"),l(Vr,"class","caption svelte-koydfe"),l(Pa,"href","#git-rebase-a-shared-branch"),l(Pa,"id","git-rebase-a-shared-branch"),l(Yr,"class","inline"),l(Wr,"class","inline"),l(Fr,"class","inline"),l(il,"type","image/webp"),l(il,"srcset",n0+", "+c0+" 2x"),E(ge.src,Bg=JE)||l(ge,"src",Bg),l(ge,"srcset",JE+", "+d0+" 2x"),l(ge,"loading","lazy"),c(ge,"position","absolute"),c(ge,"top","0"),c(ge,"width","100%"),c(ge,"height","100%"),l(ge,"alt","git-rebase-w"),c(vt,"display","block"),c(vt,"position","relative"),c(vt,"padding-top","34.266%"),c(vt,"width","100%"),l(Br,"class","inline"),l(jr,"class","inline"),l(cl,"type","image/webp"),l(cl,"srcset",i0+", "+o0+" 2x"),E(ve.src,jg=KE)||l(ve,"src",jg),l(ve,"srcset",KE+", "+l0+" 2x"),l(ve,"loading","lazy"),c(ve,"position","absolute"),c(ve,"top","0"),c(ve,"width","100%"),c(ve,"height","100%"),l(ve,"alt","git-rebase-w-2"),c(bt,"display","block"),c(bt,"position","relative"),c(bt,"padding-top","52.448%"),c(bt,"width","100%"),l(Jr,"class","inline"),l(Qr,"class","inline"),l(dl,"type","image/webp"),l(dl,"srcset",s0+", "+a0+" 2x"),E(be.src,Kg=jE)||l(be,"src",Kg),l(be,"srcset",jE+", "+r0+" 2x"),l(be,"loading","lazy"),c(be,"position","absolute"),c(be,"top","0"),c(be,"width","100%"),c(be,"height","100%"),l(be,"alt","git-rebase-w-3"),c(yt,"display","block"),c(yt,"position","relative"),c(yt,"padding-top","52.448%"),c(yt,"width","100%"),l(Zr,"class","inline"),l(eo,"class","inline"),l(to,"class","inline"),l(ao,"class","inline"),l(so,"class","inline"),l(ul,"type","image/webp"),l(ul,"srcset",e0+", "+Z3+" 2x"),E(Ee.src,Jg=BE)||l(Ee,"src",Jg),l(Ee,"srcset",BE+", "+t0+" 2x"),l(Ee,"loading","lazy"),c(Ee,"position","absolute"),c(Ee,"top","0"),c(Ee,"width","100%"),c(Ee,"height","100%"),l(Ee,"alt","git-rebase-w-4"),c(wt,"display","block"),c(wt,"position","relative"),c(wt,"padding-top","44.643%"),c(wt,"width","100%"),l(oo,"class","inline"),l(io,"class","inline"),l(lo,"class","inline"),l(co,"class","inline"),l(no,"class","inline"),l(_l,"type","image/webp"),l(_l,"srcset",Q3+", "+J3+" 2x"),E(ye.src,Qg=$E)||l(ye,"src",Qg),l(ye,"srcset",$E+", "+X3+" 2x"),l(ye,"loading","lazy"),c(ye,"position","absolute"),c(ye,"top","0"),c(ye,"width","100%"),c(ye,"height","100%"),l(ye,"alt","git-rebase-w-5"),c(Ct,"display","block"),c(Ct,"position","relative"),c(Ct,"padding-top","48.319%"),c(Ct,"width","100%"),l(po,"class","inline"),l(uo,"class","inline"),l(mo,"class","inline"),l(_o,"class","inline"),l(fo,"class","inline"),l(go,"class","inline"),l(Sa,"href","#git-log"),l(Sa,"id","git-log"),l(Ta,"href","#since-after-until-before"),l(Ta,"id","since-after-until-before"),l(Ga,"href","#grep"),l(Ga,"id","grep"),l(Na,"href","#invert-grep"),l(Na,"id","invert-grep"),l(bo,"class","inline"),l(Aa,"href","#all-match"),l(Aa,"id","all-match"),l(Eo,"class","inline"),l(yo,"class","inline"),l(wo,"class","inline"),l(ko,"class","inline"),l(Ha,"href","#min-parents-max-parents-merges-no-merges"),l(Ha,"id","min-parents-max-parents-merges-no-merges"),l(Co,"class","inline"),l(Oo,"class","inline"),l(Ma,"href","#first-parent"),l(Ma,"id","first-parent"),l(Do,"class","inline"),l(qa,"href","#git-reflog"),l(qa,"id","git-reflog"),l(Io,"class","inline"),l(xo,"class","inline"),l(Po,"class","inline"),l(La,"href","#git-bisect"),l(La,"id","git-bisect"),l(So,"class","inline"),l(To,"class","code-section"),l(Go,"class","inline"),l(No,"class","inline"),l(Ao,"class","inline"),l(Ho,"class","inline"),l(Mo,"class","inline"),l(Ro,"class","code-section"),l(qo,"class","inline"),l(Lo,"class","inline"),l(Uo,"class","code-section"),l(zo,"class","inline"),l(Va,"href","#summary"),l(Va,"id","summary"),l(Vo,"class","inline"),l(Wo,"href","/commit-went-missing-after-rebase/")},m(n,p){u(n,y,p),e(y,qe),u(n,Le,p),u(n,N,p),e(N,k),e(N,q),e(q,$a),e(N,Mc),e(N,ai),e(ai,Rc),e(N,qc),u(n,Yl,p),u(n,Ba,p),e(Ba,si),e(si,Lc),u(n,Wl,p),u(n,St,p),e(St,ri),e(ri,ca),e(ca,Uc),e(St,zc),e(St,na),e(na,Vc),e(na,da),e(da,Yc),e(na,Wc),u(n,Fl,p),u(n,Tt,p),e(Tt,oi),e(oi,ha),e(ha,Fc),e(Tt,$c),e(Tt,xe),e(xe,Bc),e(xe,ja),e(ja,jc),e(xe,Kc),e(xe,ii),e(ii,Jc),e(xe,Qc),e(xe,li),e(li,Xc),e(xe,Zc),u(n,$l,p),u(n,Y,p),e(Y,ci),e(ci,pa),e(pa,en),e(Y,tn),e(Y,je),e(je,an),e(je,Ka),e(Ka,sn),e(je,rn),e(je,Ja),e(Ja,on),e(je,ln),e(Y,cn),e(Y,ni),e(ni,Ke),e(Ke,W),e(Y,nn),e(Y,Qa),e(Qa,dn),u(n,Bl,p),u(n,A,p),e(A,di),e(di,ua),e(ua,hn),e(A,pn),e(A,Je),e(Je,un),e(Je,Xa),e(Xa,mn),e(Je,_n),e(Je,Za),e(Za,fn),e(Je,gn),e(A,vn),e(A,hi),e(hi,Qe),e(Qe,F),e(A,bn),e(A,es),e(es,En),e(A,yn),e(A,pi),e(pi,wn),u(n,jl,p),u(n,$,p),e($,ui),e(ui,ma),e(ma,kn),e($,Cn),e($,Pe),e(Pe,On),e(Pe,ts),e(ts,Dn),e(Pe,In),e(Pe,as),e(as,xn),e(Pe,Pn),e(Pe,ss),e(ss,Sn),e(Pe,Tn),e($,Gn),e($,mi),e(mi,Xe),e(Xe,B),e($,Nn),e($,rs),e(rs,An),u(n,Kl,p),u(n,H,p),e(H,_i),e(_i,_a),e(_a,Hn),e(H,Mn),e(H,os),e(os,is),e(is,Rn),e(os,qn),e(H,Ln),e(H,Ue),e(Ue,ls),e(ls,Un),e(Ue,zn),e(Ue,cs),e(cs,Vn),e(Ue,Yn),e(Ue,ns),e(ns,Wn),e(Ue,Fn),e(H,$n),e(H,fi),e(fi,Ze),e(Ze,j),e(H,Bn),e(H,ds),e(ds,jn),u(n,Jl,p),u(n,M,p),e(M,gi),e(gi,fa),e(fa,Kn),e(M,Jn),e(M,vi),e(vi,Qn),e(M,Xn),e(M,Gt),e(Gt,hs),e(hs,Zn),e(Gt,ed),e(Gt,ps),e(ps,td),e(Gt,ad),e(M,sd),e(M,bi),e(bi,et),e(et,K),e(M,rd),e(M,us),e(us,od),u(n,Ql,p),u(n,_,p),e(_,Ei),e(Ei,ga),e(ga,id),e(_,ld),e(_,ms),e(ms,_s),e(_s,cd),e(ms,nd),e(_,dd),e(_,L),e(L,hd),e(L,fs),e(fs,pd),e(L,ud),e(L,gs),e(gs,md),e(L,_d),e(L,vs),e(vs,fd),e(L,gd),e(L,bs),e(bs,vd),e(L,bd),e(_,Ed),e(_,yi),e(yi,tt),e(tt,J),e(_,yd),e(_,Es),e(Es,wd),e(_,kd),e(_,va),e(va,Cd),e(va,ys),e(ys,Od),e(va,Dd),e(_,Id),e(_,wi),e(wi,at),e(at,Q),e(_,xd),e(_,ws),e(ws,Pd),e(_,Sd),e(_,Se),e(Se,Td),e(Se,ks),e(ks,Gd),e(Se,Nd),e(Se,Cs),e(Cs,Ad),e(Se,Hd),e(Se,Os),e(Os,Md),e(Se,Rd),e(_,qd),e(_,Ds),e(Ds,Is),e(Is,Ld),e(Ds,Ud),e(_,zd),e(_,ki),e(ki,st),e(st,X),e(_,Vd),e(_,xs),e(xs,Yd),e(_,Wd),e(_,S),e(S,Fd),e(S,Ps),e(Ps,$d),e(S,Bd),e(S,Ss),e(Ss,jd),e(S,Kd),e(S,Ts),e(Ts,Jd),e(S,Qd),e(S,Gs),e(Gs,Xd),e(S,Zd),e(S,Ns),e(Ns,eh),e(S,th),e(_,ah),e(_,Ci),e(Ci,rt),e(rt,Z),e(_,sh),e(_,As),e(As,rh),u(n,Xl,p),u(n,m,p),e(m,Oi),e(Oi,ba),e(ba,oh),e(m,ih),e(m,Hs),e(Hs,Ms),e(Ms,lh),e(Hs,ch),e(m,nh),e(m,D),e(D,dh),e(D,Rs),e(Rs,hh),e(D,ph),e(D,qs),e(qs,uh),e(D,mh),e(D,Ls),e(Ls,_h),e(D,fh),e(D,Us),e(Us,gh),e(D,vh),e(D,zs),e(zs,bh),e(D,Eh),e(D,Vs),e(Vs,yh),e(D,wh),e(m,kh),e(m,Nt),e(Nt,Ys),e(Ys,Ch),e(Nt,Oh),e(Nt,Ws),e(Ws,Dh),e(Nt,Ih),e(m,xh),e(m,Di),e(Di,ot),e(ot,ee),e(m,Ph),e(m,Fs),e(Fs,Sh),e(m,Th),e(m,$s),e($s,Bs),e(Bs,Gh),e($s,Nh),e(m,Ah),e(m,At),e(At,js),e(js,Hh),e(At,Mh),e(At,Ks),e(Ks,Rh),e(At,qh),e(m,Lh),e(m,Ii),e(Ii,it),e(it,te),e(m,Uh),e(m,Js),e(Js,zh),e(m,Vh),e(m,xi),e(xi,Yh),e(m,Wh),e(m,lt),e(lt,Pi),e(Pi,Qs),e(Qs,Fh),e(lt,$h),e(lt,Si),e(Si,Xs),e(Xs,Bh),e(lt,jh),e(lt,Ti),e(Ti,Zs),e(Zs,Kh),e(m,Jh),e(m,Gi),e(Gi,ct),e(ct,er),e(er,Ni),e(er,ae),e(m,Qh),e(m,tr),e(tr,Xh),e(m,Zh),e(m,Ai),e(Ai,ep),e(m,tp),e(m,U),e(U,se),e(se,ar),e(ar,ap),e(se,sp),e(se,sr),e(sr,rp),e(se,op),e(se,rr),e(rr,ip),e(se,lp),e(se,or),e(or,cp),e(se,np),e(U,dp),e(U,T),e(T,hp),e(T,ir),e(ir,pp),e(T,up),e(T,lr),e(lr,mp),e(T,_p),e(T,cr),e(cr,fp),e(T,gp),e(T,nr),e(nr,vp),e(T,bp),e(T,dr),e(dr,Ep),e(T,yp),e(U,wp),e(U,nt),e(nt,kp),e(nt,hr),e(hr,Cp),e(nt,Op),e(nt,pr),e(pr,Dp),e(nt,Ip),e(U,xp),e(U,z),e(z,Pp),e(z,ur),e(ur,Sp),e(z,Tp),e(z,mr),e(mr,Gp),e(z,Np),e(z,_r),e(_r,Ap),e(z,Hp),e(z,fr),e(fr,Mp),e(z,Rp),e(U,qp),e(U,Te),e(Te,Lp),e(Te,gr),e(gr,Up),e(Te,zp),e(Te,vr),e(vr,Vp),e(Te,Yp),e(Te,br),e(br,Wp),e(Te,Fp),u(n,Zl,p),u(n,I,p),e(I,Hi),e(Hi,Ea),e(Ea,$p),e(I,Bp),e(I,Er),e(Er,yr),e(yr,jp),e(Er,Kp),e(I,Jp),e(I,Mi),e(Mi,dt),e(dt,wr),e(wr,Ri),e(wr,re),e(I,Qp),e(I,kr),e(kr,Xp),e(I,Zp),e(I,ya),e(ya,eu),e(ya,Cr),e(Cr,tu),e(ya,au),e(I,su),e(I,Or),Or.innerHTML=v3,u(n,ec,p),u(n,oe,p),e(oe,qi),e(qi,wa),e(wa,ru),e(oe,ou),e(oe,Li),e(Li,iu),e(oe,lu),e(oe,Ui),e(Ui,ht),e(ht,Dr),e(Dr,zi),e(Dr,ie),e(oe,cu),e(oe,Ir),Ir.innerHTML=b3,u(n,tc,p),u(n,le,p),e(le,Vi),e(Vi,ka),e(ka,nu),e(le,du),e(le,Yi),e(Yi,hu),e(le,pu),e(le,Wi),e(Wi,pt),e(pt,xr),e(xr,Fi),e(xr,ce),e(le,uu),e(le,Pr),Pr.innerHTML=E3,u(n,ac,p),u(n,ne,p),e(ne,$i),e($i,Ca),e(Ca,mu),e(ne,_u),e(ne,Ge),e(Ge,fu),e(Ge,Sr),e(Sr,gu),e(Ge,vu),e(Ge,Tr),e(Tr,bu),e(Ge,Eu),e(Ge,Gr),e(Gr,yu),e(Ge,wu),e(ne,ku),e(ne,Bi),e(Bi,ut),e(ut,Nr),e(Nr,ji),e(Nr,de),e(ne,Cu),e(ne,Ar),Ar.innerHTML=y3,u(n,sc,p),u(n,he,p),e(he,Ki),e(Ki,Oa),e(Oa,Ou),e(he,Du),e(he,Da),e(Da,Iu),e(Da,Hr),e(Hr,xu),e(Da,Pu),e(he,Su),e(he,Ji),e(Ji,mt),e(mt,Mr),e(Mr,Qi),e(Mr,pe),e(he,Tu),e(he,Rr),Rr.innerHTML=w3,u(n,rc,p),u(n,ue,p),e(ue,Xi),e(Xi,Ia),e(Ia,Gu),e(ue,Nu),e(ue,Zi),e(Zi,Au),e(ue,Hu),e(ue,el),e(el,_t),e(_t,qr),e(qr,tl),e(qr,me),e(ue,Mu),e(ue,Lr),Lr.innerHTML=k3,u(n,oc,p),u(n,_e,p),e(_e,al),e(al,xa),e(xa,Ru),e(_e,qu),e(_e,ft),e(ft,Lu),e(ft,Ur),e(Ur,Uu),e(ft,zu),e(ft,zr),e(zr,Vu),e(ft,Yu),e(_e,Wu),e(_e,sl),e(sl,gt),e(gt,fe),e(_e,Fu),e(_e,Vr),e(Vr,$u),u(n,ic,p),u(n,f,p),e(f,rl),e(rl,Pa),e(Pa,Bu),e(f,ju),e(f,Ne),e(Ne,Ku),e(Ne,Yr),e(Yr,Ju),e(Ne,Qu),e(Ne,Wr),e(Wr,Xu),e(Ne,Zu),e(Ne,Fr),e(Fr,em),e(Ne,tm),e(f,am),e(f,ol),e(ol,vt),e(vt,$r),e($r,il),e($r,ge),e(f,sm),e(f,Ht),e(Ht,Br),e(Br,rm),e(Ht,om),e(Ht,jr),e(jr,im),e(Ht,lm),e(f,cm),e(f,ll),e(ll,bt),e(bt,Kr),e(Kr,cl),e(Kr,ve),e(f,nm),e(f,Et),e(Et,dm),e(Et,Jr),e(Jr,hm),e(Et,pm),e(Et,Qr),e(Qr,um),e(Et,mm),e(f,_m),e(f,nl),e(nl,yt),e(yt,Xr),e(Xr,dl),e(Xr,be),e(f,fm),e(f,Ae),e(Ae,gm),e(Ae,Zr),e(Zr,vm),e(Ae,bm),e(Ae,hl),e(hl,Em),e(Ae,ym),e(Ae,eo),e(eo,wm),e(Ae,km),e(f,Cm),e(f,He),e(He,Om),e(He,to),e(to,Dm),e(He,Im),e(He,ao),e(ao,xm),e(He,Pm),e(He,so),e(so,Sm),e(He,Tm),e(f,Gm),e(f,pl),e(pl,wt),e(wt,ro),e(ro,ul),e(ro,Ee),e(f,Nm),e(f,kt),e(kt,Am),e(kt,oo),e(oo,Hm),e(kt,Mm),e(kt,io),e(io,Rm),e(kt,qm),e(f,Lm),e(f,Me),e(Me,Um),e(Me,lo),e(lo,zm),e(Me,Vm),e(Me,co),e(co,Ym),e(Me,Wm),e(Me,no),e(no,Fm),e(Me,$m),e(f,Bm),e(f,ml),e(ml,Ct),e(Ct,ho),e(ho,_l),e(ho,ye),e(f,jm),e(f,V),e(V,Km),e(V,po),e(po,Jm),e(V,Qm),e(V,uo),e(uo,Xm),e(V,Zm),e(V,mo),e(mo,e_),e(V,t_),e(V,_o),e(_o,a_),e(V,s_),e(f,r_),e(f,Ot),e(Ot,o_),e(Ot,fo),e(fo,i_),e(Ot,l_),e(Ot,go),e(go,c_),e(Ot,n_),u(n,lc,p),u(n,Mt,p),e(Mt,fl),e(fl,Sa),e(Sa,d_),e(Mt,h_),e(Mt,gl),e(gl,p_),u(n,cc,p),u(n,Rt,p),e(Rt,vl),e(vl,Ta),e(Ta,u_),e(Rt,m_),e(Rt,bl),e(bl,__),u(n,nc,p),u(n,qt,p),e(qt,El),e(El,Ga),e(Ga,f_),e(qt,g_),e(qt,yl),e(yl,v_),u(n,dc,p),u(n,Lt,p),e(Lt,wl),e(wl,Na),e(Na,b_),e(Lt,E_),e(Lt,vo),e(vo,y_),e(vo,bo),e(bo,w_),u(n,hc,p),u(n,Ut,p),e(Ut,kl),e(kl,Aa),e(Aa,k_),e(Ut,C_),e(Ut,we),e(we,Eo),e(Eo,O_),e(we,D_),e(we,yo),e(yo,I_),e(we,x_),e(we,wo),e(wo,P_),e(we,S_),e(we,ko),e(ko,T_),e(we,G_),u(n,pc,p),u(n,zt,p),e(zt,Cl),e(Cl,Ha),e(Ha,N_),e(zt,A_),e(zt,Dt),e(Dt,H_),e(Dt,Co),e(Co,M_),e(Dt,R_),e(Dt,Oo),e(Oo,q_),e(Dt,L_),u(n,uc,p),u(n,Vt,p),e(Vt,Ol),e(Ol,Ma),e(Ma,U_),e(Vt,z_),e(Vt,Ra),e(Ra,V_),e(Ra,Do),e(Do,Y_),e(Ra,W_),u(n,mc,p),u(n,Yt,p),e(Yt,Dl),e(Dl,qa),e(qa,F_),e(Yt,$_),e(Yt,Re),e(Re,B_),e(Re,Io),e(Io,j_),e(Re,K_),e(Re,xo),e(xo,J_),e(Re,Q_),e(Re,Po),e(Po,X_),e(Re,Z_),u(n,_c,p),u(n,w,p),e(w,Il),e(Il,La),e(La,ef),e(w,tf),e(w,xl),e(xl,af),e(w,sf),e(w,Ua),e(Ua,rf),e(Ua,So),e(So,of),e(Ua,lf),e(w,cf),e(w,To),To.innerHTML=C3,e(w,nf),e(w,G),e(G,df),e(G,Go),e(Go,hf),e(G,pf),e(G,No),e(No,uf),e(G,mf),e(G,Ao),e(Ao,_f),e(G,ff),e(G,Ho),e(Ho,gf),e(G,vf),e(G,Mo),e(Mo,bf),e(G,Ef),e(w,yf),e(w,Ro),Ro.innerHTML=O3,e(w,wf),e(w,It),e(It,kf),e(It,qo),e(qo,Cf),e(It,Of),e(It,Lo),e(Lo,Df),e(It,If),e(w,xf),e(w,Uo),Uo.innerHTML=D3,e(w,Pf),e(w,za),e(za,Sf),e(za,zo),e(zo,Tf),e(za,Gf),u(n,fc,p),u(n,x,p),e(x,Pl),e(Pl,Va),e(Va,Nf),e(x,Af),e(x,Sl),e(Sl,Hf),e(x,Mf),e(x,C),e(C,Tl),e(Tl,Rf),e(C,qf),e(C,Gl),e(Gl,Lf),e(C,Uf),e(C,Nl),e(Nl,zf),e(C,Vf),e(C,Al),e(Al,Yf),e(C,Wf),e(C,Hl),e(Hl,Ff),e(C,$f),e(C,Ml),e(Ml,Bf),e(C,jf),e(C,Rl),e(Rl,Kf),e(C,Jf),e(C,ql),e(ql,Qf),e(x,Xf),e(x,Ya),e(Ya,Zf),e(Ya,Vo),e(Vo,eg),e(Ya,tg),e(x,ag),e(x,sg),e(x,rg),e(x,Yo),e(Yo,og),e(Yo,Wo),e(Wo,ig)},p:B3,d(n){n&&t(y),n&&t(Le),n&&t(N),n&&t(Yl),n&&t(Ba),n&&t(Wl),n&&t(St),n&&t(Fl),n&&t(Tt),n&&t($l),n&&t(Y),n&&t(Bl),n&&t(A),n&&t(jl),n&&t($),n&&t(Kl),n&&t(H),n&&t(Jl),n&&t(M),n&&t(Ql),n&&t(_),n&&t(Xl),n&&t(m),n&&t(Zl),n&&t(I),n&&t(ec),n&&t(oe),n&&t(tc),n&&t(le),n&&t(ac),n&&t(ne),n&&t(sc),n&&t(he),n&&t(rc),n&&t(ue),n&&t(oc),n&&t(_e),n&&t(ic),n&&t(f),n&&t(lc),n&&t(Mt),n&&t(cc),n&&t(Rt),n&&t(nc),n&&t(qt),n&&t(dc),n&&t(Lt),n&&t(hc),n&&t(Ut),n&&t(pc),n&&t(zt),n&&t(uc),n&&t(Vt),n&&t(mc),n&&t(Yt),n&&t(_c),n&&t(w),n&&t(fc),n&&t(x)}}}function L0(Fa){let y,qe;const Le=[Fa[0],g3];let N={$$slots:{default:[q0]},$$scope:{ctx:Fa}};for(let k=0;k<Le.length;k+=1)N=Ig(N,Le[k]);return y=new j3({props:N}),{c(){L3(y.$$.fragment)},l(k){U3(y.$$.fragment,k)},m(k,q){z3(y,k,q),qe=!0},p(k,[q]){const $a=q&1?V3(Le,[q&1&&WE(k[0]),q&0&&WE(g3)]):{};q&2&&($a.$$scope={dirty:q,ctx:k}),y.$set($a)},i(k){qe||(Y3(y.$$.fragment,k),qe=!0)},o(k){W3(y.$$.fragment,k),qe=!1},d(k){F3(y,k)}}}const g3={title:"Git Gudder",venue:"Shopee SG",venueLink:"https://www.google.com.sg/maps/place/Shopee+Building/@1.2923933,103.7860786,19z/data=!3m1!4b1!4m5!3m4!1s0x31da1b803e3bae77:0x154e17d66760912b!8m2!3d1.2923933!4d103.7866258",occasion:"React Knowledgeable Week 41",occasionLink:"https://github.com/Shopee/shopee-react-knowledgeable/issues/129",slides:"https://slides.com/tanhauhau/git-gudder",date:"2019-08-30",label:"talk",layout:"talk",description:'This week in React Knowledgeable, I did a sharing on Git commands.The title of the talk was called "Git Gudder", because almost a year ago I did a lightning sharing on "Git Gud", (Get Good), this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder"....',tableOfContents:[{link:"disclaimer",title:"Disclaimer"},{link:"git-merge",title:"git merge",nested:[{link:"fast-forward-merge",title:"Fast-forward merge"},{link:"non-fast-forward-merge",title:"Non Fast-forward merge"},{link:"git-pull",title:"git pull"}]},{link:"git-reset",title:"git reset"},{link:"git-cherry-pick",title:"git cherry-pick"},{link:"git-revert",title:"git revert"},{link:"git-rebase",title:"git rebase",nested:[{link:"git-rebase-interactive",title:"git rebase --interactive",nested:[{link:"pick",title:"pick"},{link:"drop",title:"drop"},{link:"squash-fixup",title:"squash & fixup"},{link:"break",title:"break"},{link:"edit",title:"edit"}]},{link:"git-pull-rebase",title:"git pull --rebase"},{link:"git-rebase-a-shared-branch",title:"git rebase a shared branch"}]},{link:"git-log",title:"git log",nested:[{link:"since-after-until-before",title:"--since, --after, --until, --before"},{link:"grep",title:"--grep"},{link:"invert-grep",title:"--invert-grep"},{link:"all-match",title:"--all-match"},{link:"min-parents-max-parents-merges-no-merges",title:"--min-parents, --max-parents, --merges, --no-merges"},{link:"first-parent",title:"--first-parent"}]},{link:"git-reflog",title:"git reflog"},{link:"git-bisect",title:"git bisect"},{link:"summary",title:"Summary"}]};function U0(Fa,y,qe){return $3("blog",{image:K3}),Fa.$$set=Le=>{qe(0,y=Ig(Ig({},y),FE(Le)))},y=FE(y),[y]}class B0 extends M3{constructor(y){super();R3(this,y,U0,L0,q3,{})}}export{B0 as default,g3 as metadata};
