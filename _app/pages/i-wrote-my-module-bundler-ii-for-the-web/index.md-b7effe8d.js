import{S as Oc,i as Hc,s as qc,C as Rr,w as Fc,x as jc,y as Nc,z as Jc,A as Vp,q as Rc,o as Uc,B as Bc,r as Vc,Y as Wp,e as o,t as n,k as p,c as t,a,h as l,d as e,m as c,b as r,X as Jr,f as w,g as d,H as s,J as Wc}from"../../chunks/vendor-da4388d4.js";import{B as Gc}from"../../chunks/BlogLayout-14cfab6f.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var $c="https://lihautan.com/_app/assets/result-a356ba6b.webp",Yc="https://lihautan.com/_app/assets/result-00c597af.webp",zc="https://lihautan.com/_app/assets/result-02d4350c.png",Gp="https://lihautan.com/_app/assets/result-fac4a0dc.png",Kc="https://lihautan.com/_app/assets/dev-server-038166db.webp",Qc="https://lihautan.com/_app/assets/dev-server-b16a52fc.webp",Xc="https://lihautan.com/_app/assets/dev-server-aa082f43.png",$p="https://lihautan.com/_app/assets/dev-server-b2c26bcc.png",Zc="https://lihautan.com/_app/assets/cli-b7ac374f.webp",sh="https://lihautan.com/_app/assets/cli-0b97d073.webp",eh="https://lihautan.com/_app/assets/cli-482582c7.png",Yp="https://lihautan.com/_app/assets/cli-ca6034f6.png",oh="https://lihautan.com/_app/assets/hero-twitter-b3917370.jpg";function th(qs){let f,j,M,ns,E,C,R,U,Fs,Ge,L,Ur,Qo,js,Tt,Xo,Ns,Pt,Zo,N,$e,Js,Mt,Ct,Ye,Rs,Lt,Dt,ze,Us,At,st,et,ot,Z,Ot,Ke,Ht,qt,tt,at,nt,_,Qe,ls,Ft,jt,Xe,Nt,Jt,Ze,Rt,Ut,Bs,Kp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules) &#123;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.transformModuleInterface</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#92;n &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bt,so,Vt,Wt,eo,Gt,$t,Vs,Qp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestPath) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (requestPath[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;.&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// relative import</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.dirname</span><span style="color: var(--shiki-color-text)">(requester)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestPath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requester</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requestPaths</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">requestPaths</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/node_modules&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// absolute import</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">require</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(requestPath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; paths</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> requestPaths &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yt,rs,zt,Ws,Kt,Qt,Xt,Gs,oo,Zt,sa,lt,y,to,is,ea,oa,ao,ta,aa,ps,na,$s,la,ra,ia,no,pa,ca,Ys,Xp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ha,lo,ka,va,zs,Zp='<pre class="prism language-yml"><code><div class="line"><span class="token punctuation">-</span> bundle.js</div></code></pre>',ya,cs,da,Ks,ua,xa,fa,Qs,sc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/bundle.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">body</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">html</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span></code></pre>`,ma,ro,io,ga,wa,po,_a,ba,Xs,ec=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;/body&gt;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> htmlTemplate </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  htmlTemplate </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">htmlTemplate</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((&#123; name &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&lt;script src=&quot;/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;&gt;&lt;/script&gt;&#96;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;index.html&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlTemplate &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ea,O,Sa,Zs,Ia,Ta,se,Pa,Ma,ee,Ca,La,Da,co,oe,Aa,ho,Oa,rt,u,ko,hs,Ha,qa,vo,Fa,ja,ks,Na,te,Ja,Ra,Ua,ae,oc='<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./style.css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Ba,ne,tc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: style.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Va,vs,Wa,le,Ga,$a,Ya,re,ac=`<pre class="prism language-"><code><span class="line">SyntaxError: unknown: Unexpected token (1:0)</span>
<span class="line">&gt; 1 | .square &#123;</span>
<span class="line">    | ^</span>
<span class="line">  2 |   color: blue;</span>
<span class="line">  3 | &#125;</span>
<span class="line">  4 | .circle &#123;</span>
<span class="line">    at Parser.raise (node_modules/@babel/parser/lib/index.js:6344:17)</span></code></pre>`,za,yo,Ka,Qa,H,Xa,ie,Za,sn,pe,en,on,ce,tn,an,nn,he,nc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">initDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transformModuleInterface</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">JSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span></code></pre>`,ln,B,rn,ke,pn,cn,ve,hn,kn,vn,ye,lc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_LOADERS</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;.css&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> CSSModule</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> JSModule</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fileExtension</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.extname</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ModuleCls</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_LOADERS</span><span style="color: var(--shiki-color-text)">[fileExtension];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">ModuleCls) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Unsupported extension &quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">fileExtension</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;.&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ModuleCls</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// hightlight-end</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,it,h,uo,ys,yn,dn,V,un,de,xn,fn,ds,mn,gn,wn,ue,_n,us,bn,xs,En,Sn,In,W,Tn,xo,Pn,Mn,fo,Cn,Ln,Dn,mo,An,On,go,wo,Hn,qn,G,Fn,xe,jn,Nn,fe,Jn,Rn,Un,_o,Bn,Vn,me,rc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wn,bo,Gn,$n,ge,ic=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">content</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;.square &#123; color: blue; &#125; .circle &#123; color: red; &#125;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create style tag</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;style&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;text/css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// for ie compatibility</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.styleSheet) </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">styleSheet</span><span style="color: var(--shiki-color-text)">.cssText </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> content;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createTextNode</span><span style="color: var(--shiki-color-text)">(content));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// append to the head</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">head</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(style);</span></span></code></pre>`,Yn,$,zn,fs,Kn,Qn,we,Xn,Zn,sl,Y,Eo,el,ol,q,tl,_e,al,nl,be,ll,rl,Ee,il,pl,cl,So,hl,kl,Io,To,vl,yl,ms,dl,gs,ul,xl,fl,ml,gl,ws,wl,_s,_l,bl,El,Se,pc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.transform</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transform</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      const content = &#39;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">content</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">/&#92;n/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#39;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      const style = document.createElement(&#39;style&#39;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      style.type = &#39;text/css&#39;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      if (style.styleSheet) style.styleSheet.cssText = content;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      else style.appendChild(document.createTextNode(content));</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      document.head.appendChild(style);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">    &#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pt,b,Po,bs,Sl,Il,Mo,Tl,Pl,z,Co,Ml,Cl,Lo,Ll,Dl,Do,Al,Ol,Es,Hl,Ss,ql,Fl,jl,F,Nl,Ie,Jl,Rl,Te,Ul,Bl,Pe,Vl,Wl,Gl,Me,cc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// build dependency graph</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">graph</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// bundle the asset</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; outputFiles</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> graph &#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// write to output folder</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dev</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> devServerOptions &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$l,K,Yl,Ce,zl,Kl,Is,Ql,Xl,Zl,Le,hc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dev</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> devServerOptions &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create a map of [filename] -&gt; content</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFileMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    outputFileMap[</span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.name] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.content;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">indexHtml</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> outputFileMap[</span><span style="color: var(--shiki-token-string-expression)">&#39;index.html&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">express</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.use</span><span style="color: var(--shiki-color-text)">((req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// trim off preceding slash &#39;/&#39;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requestFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">req</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (outputFileMap[requestFile]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(outputFileMap[requestFile]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(indexHtml);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.listen</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">devServerOptions</span><span style="color: var(--shiki-color-text)">.port</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#96;Dev server starts at http://localhost:</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">devServerOptions</span><span style="color: var(--shiki-color-text)">.port</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sr,Ao,er,ct,m,Oo,Ts,or,tr,Ps,ar,Ms,nr,lr,rr,De,kc=`<div class="filename">main.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; createElement</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> render &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;preact&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./style.css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; class</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;square&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;area of square: &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; class</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;circle&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;area of circle: &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;root&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,ir,Ae,vc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: style.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pr,Ho,cr,hr,Oe,yc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;root&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,kr,qo,vr,yr,Fo,Q,He,jo,D,Br,dr,No,ur,xr,Jo,X,qe,Ro,A,Vr,ht,P,Uo,Cs,fr,mr,Bo,gr,wr,Ls,Vo,_r,br,Wo,Er,Sr,Go,Ir,Tr,$o,Pr,kt,ss,Yo,Ds,Mr,Cr,As,zo,Os,Lr,Dr,Ko,Hs,Ar;return{c(){f=o("p"),j=n("In my "),M=o("a"),ns=n("previous article"),E=n(", I showed you how I built a module bundler. With the module bundler I built, I bundled a simple Nodejs script to calculate the area for a square and a circle:"),C=p(),R=o("p"),U=o("span"),Fs=o("picture"),Ge=o("source"),L=o("img"),Qo=p(),js=o("p"),Tt=n("Today, I am going to share with y'all how I enhanced on my basic module bundler so that I can use it to bundle not just a NodeJS script, but a web application."),Xo=p(),Ns=o("p"),Pt=n("I will be showing how I added the following features:"),Zo=p(),N=o("ul"),$e=o("li"),Js=o("a"),Mt=n("Adding HTML Template"),Ct=p(),Ye=o("li"),Rs=o("a"),Lt=n("Adding CSS"),Dt=p(),ze=o("li"),Us=o("a"),At=n("Provide a dev server"),st=p(),et=o("hr"),ot=p(),Z=o("p"),Ot=n("\u26A0\uFE0F "),Ke=o("strong"),Ht=n("Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),qt=n(" \u26A0\uFE0F"),tt=p(),at=o("hr"),nt=p(),_=o("section"),Qe=o("h2"),ls=o("a"),Ft=n("Before we begin"),jt=p(),Xe=o("p"),Nt=n("I found an edge case bug in my module bundler if the module ends with a line comment, the output bundle might have a syntax error."),Jt=p(),Ze=o("p"),Rt=n("I've fixed the bug by appending a newline character to the end of the module code:"),Ut=p(),Bs=o("div"),Bt=p(),so=o("p"),Vt=n("\u{1F60E}"),Wt=p(),eo=o("p"),Gt=n("Also, I've changed the resolver code, which used to only be able to resolve the relative path:"),$t=p(),Vs=o("div"),Yt=p(),rs=o("p"),zt=n("Now I can import libraries from "),Ws=o("code"),Kt=n("node_modules/"),Qt=n("."),Xt=p(),Gs=o("p"),oo=o("em"),Zt=n('Did I just said "import libraries"?'),sa=n(" \u{1F64A}"),lt=p(),y=o("section"),to=o("h2"),is=o("a"),ea=n("Adding HTML Template"),oa=p(),ao=o("p"),ta=n("To bundle for the web, the most important piece is to have the HTML."),aa=p(),ps=o("p"),na=n("Usually, we provide an HTML template to the module bundler. And when the module bundler finishes the bundling process, it will come up with a list of files that is required to start the application and add them into the HTML file in the form of a "),$s=o("code"),la=n("<script>"),ra=n(" tag."),ia=p(),no=o("p"),pa=n("To illustrate here is the HTML template that I've prepared:"),ca=p(),Ys=o("div"),ha=p(),lo=o("p"),ka=n("And at the end of the bundling process, the bundler generated the following files:"),va=p(),zs=o("div"),ya=p(),cs=o("p"),da=n("So the "),Ks=o("code"),ua=n("bundle.js"),xa=n(" is added into the final HTML file like this:"),fa=p(),Qs=o("div"),ma=p(),ro=o("blockquote"),io=o("small"),ga=n("**NOTE:** the preceding slash (`/`) allows us to always fetch the JavaScript file relative from the root path. This is extremely useful for Single Page Application (SPA), where we serve the same HTML file irrelevant to the URL path."),wa=p(),po=o("p"),_a=n("Code wise, it is quite straightforward to implement this:"),ba=p(),Xs=o("div"),Ea=p(),O=o("p"),Sa=n("Here, I used a "),Zs=o("code"),Ia=n(".replace(END_BODY_TAG, '...' + END_BODY_TAG)"),Ta=n(" to insert the "),se=o("code"),Pa=n("<script>"),Ma=n(" tags before the end of the "),ee=o("code"),Ca=n("</body>"),La=n(" tag."),Da=p(),co=o("blockquote"),oe=o("small"),Aa=n("**Note:** Read [here](https://www.codecademy.com/forum_questions/55dee24b937676fb5e000139) to learn why it's a best practice to add `<script>` tag at the end of the `"),ho=o("body"),Oa=n("` tag."),rt=p(),u=o("section"),ko=o("h2"),hs=o("a"),Ha=n("Adding CSS"),qa=p(),vo=o("p"),Fa=n("Every web app has to have CSS in one way or another."),ja=p(),ks=o("p"),Na=n("I added a css file and imported it from "),te=o("code"),Ja=n("index.js"),Ra=n(":"),Ua=p(),ae=o("div"),Ba=p(),ne=o("div"),Va=p(),vs=o("p"),Wa=n("If I bundle my application now, I would see a "),le=o("code"),Ga=n("SyntaxError"),$a=n(":"),Ya=p(),re=o("div"),za=p(),yo=o("p"),Ka=n("That is because I assumed all files are JavaScript files, and Babel would complain when trying to parse out the import statements."),Qa=p(),H=o("p"),Xa=n("So, I abstracted out "),ie=o("code"),Za=n("Module"),sn=n(" as a base class, and created "),pe=o("code"),en=n("JSModule"),on=n(" and "),ce=o("code"),tn=n("CSSModule"),an=n(":"),nn=p(),he=o("div"),ln=p(),B=o("p"),rn=n("In the "),ke=o("code"),pn=n("createModule"),cn=n(" function, I need to create different "),ve=o("code"),hn=n("Module"),kn=n(" based on the file extension:"),vn=p(),ye=o("div"),it=p(),h=o("section"),uo=o("h3"),ys=o("a"),yn=n("Loaders"),dn=p(),V=o("p"),un=n("Here I used the word "),de=o("code"),xn=n('"LOADERS"'),fn=n(", which I borrowed from "),ds=o("a"),mn=n("webpack"),gn=n("."),wn=p(),ue=o("p"),_n=n("According to webpack, "),us=o("em"),bn=n('"'),xs=o("a"),En=n("[loaders]"),Sn=n(' enable webpack to preprocess files, [which] allows you to bundle any static resource way beyond JavaScript."'),In=p(),W=o("p"),Tn=n("To take it from a different perspective, "),xo=o("strong"),Pn=n("loaders"),Mn=n(" are simple functions that transform any code into "),fo=o("strong"),Cn=n("browser-executable JavaScript code"),Ln=n("."),Dn=p(),mo=o("p"),An=n("For example, if you import a CSS file, the CSS code in the file will pass through the loader function to be transformed into JS code. So that you can import a CSS file as if you are importing a JS file."),On=p(),go=o("p"),wo=o("strong"),Hn=n("Wait, how are we going to transform CSS code into JS code?"),qn=p(),G=o("p"),Fn=n("Well, one way you can do that is to make the CSS code into a string by wrapping it around with quote marks "),xe=o("code"),jn=n("'"),Nn=n(", and programmatically add the CSS code into the HTML "),fe=o("code"),Jn=n("<head />"),Rn=n("."),Un=p(),_o=o("p"),Bn=n("For example, taking the following CSS code:"),Vn=p(),me=o("div"),Wn=p(),bo=o("p"),Gn=n("and transform it into the following JS code:"),$n=p(),ge=o("div"),Yn=p(),$=o("p"),zn=n("This is in essence what "),fs=o("a"),Kn=n("style-loader"),Qn=n(" is doing, except "),we=o("code"),Xn=n("style-loader"),Zn=n(" does even more:"),sl=p(),Y=o("ul"),Eo=o("li"),el=n("supports hot reloading"),ol=p(),q=o("li"),tl=n("provides different mode of injecting, "),_e=o("code"),al=n("styleTag"),nl=n(", "),be=o("code"),ll=n("singletonStyleTag"),rl=n(", "),Ee=o("code"),il=n("linkTag"),pl=n(", ... etc."),cl=p(),So=o("li"),hl=n("provides different points in dom for injecting the style tag."),kl=p(),Io=o("p"),To=o("strong"),vl=n('Did I mentioned "browser-executable JavaScript code"?'),yl=p(),ms=o("p"),dl=n("Yes, not all JavaScript code is executable in a browser if you are using next-generation syntaxes or constructs that is not yet available in the browser. That's why you need "),gs=o("a"),ul=n("babel-loader"),xl=n(" for your JavaScript files, to make sure they can be run in all supported browsers."),fl=p(),ml=o("hr"),gl=p(),ws=o("p"),wl=n("So, I implemented the loader transform in CSSModule with "),_s=o("a"),_l=n("template literals"),bl=n(":"),El=p(),Se=o("div"),pt=p(),b=o("section"),Po=o("h2"),bs=o("a"),Sl=n("Dev Server"),Il=p(),Mo=o("p"),Tl=n("Dev server is a default feature for frontend build tools nowadays, it's common feature are:"),Pl=p(),z=o("ul"),Co=o("li"),Ml=n("Serving generated assets, assets can be either served from the filesystem or in memory"),Cl=p(),Lo=o("li"),Ll=n("Supports watch mode, reloading and hot module replacement"),Dl=p(),Do=o("li"),Al=n("Act as a proxy to external APIs"),Ol=p(),Es=o("p"),Hl=n("In this post, I will show you how I created a basic dev server using "),Ss=o("a"),ql=n("Express"),Fl=n(" for serving the generated assets in memory, we will discuss the watch mode in the future post."),jl=p(),F=o("p"),Nl=n("I abstracted out the "),Ie=o("code"),Jl=n("_build"),Rl=n(" function and supports both "),Te=o("code"),Ul=n("build"),Bl=n(" and "),Pe=o("code"),Vl=n("dev"),Wl=n(" mode."),Gl=p(),Me=o("div"),$l=p(),K=o("p"),Yl=n("In "),Ce=o("code"),zl=n("dev"),Kl=n(" mode, I did not write files to the file system, instead I served them directly through the "),Is=o("a"),Ql=n("Express"),Xl=n(" server:"),Zl=p(),Le=o("div"),sr=p(),Ao=o("p"),er=n("And that's it. You have a basic dev server that serves the bundled files!"),ct=p(),m=o("section"),Oo=o("h2"),Ts=o("a"),or=n("Wrap it up"),tr=p(),Ps=o("p"),ar=n("I've added "),Ms=o("a"),nr=n("Preact"),lr=n(" and CSS into my app:"),rr=p(),De=o("div"),ir=p(),Ae=o("div"),pr=p(),Ho=o("p"),cr=n("And also an HTML template:"),hr=p(),Oe=o("div"),kr=p(),qo=o("p"),vr=n("Starting my bundler:"),yr=p(),Fo=o("p"),Q=o("span"),He=o("picture"),jo=o("source"),D=o("img"),dr=p(),No=o("p"),ur=n("And voila!"),xr=p(),Jo=o("p"),X=o("span"),qe=o("picture"),Ro=o("source"),A=o("img"),ht=p(),P=o("section"),Uo=o("h2"),Cs=o("a"),fr=n("Whats next?"),mr=p(),Bo=o("p"),gr=n("I have promised in my previous post, features that I will implement:"),wr=p(),Ls=o("ul"),Vo=o("li"),_r=n("code splitting"),br=p(),Wo=o("li"),Er=n("watch mode"),Sr=p(),Go=o("p"),Ir=n("and yes, I will implement them!"),Tr=p(),$o=o("p"),Pr=n("Till then. Cheers. \u{1F60E}"),kt=p(),ss=o("section"),Yo=o("h2"),Ds=o("a"),Mr=n("References"),Cr=p(),As=o("ul"),zo=o("li"),Os=o("a"),Lr=n("Webpack Dev Server"),Dr=p(),Ko=o("li"),Hs=o("a"),Ar=n("style-loader"),this.h()},l(i){f=t(i,"P",{});var k=a(f);j=l(k,"In my "),M=t(k,"A",{href:!0});var Wr=a(M);ns=l(Wr,"previous article"),Wr.forEach(e),E=l(k,", I showed you how I built a module bundler. With the module bundler I built, I bundled a simple Nodejs script to calculate the area for a square and a circle:"),k.forEach(e),C=c(i),R=t(i,"P",{});var Gr=a(R);U=t(Gr,"SPAN",{style:!0});var $r=a(U);Fs=t($r,"PICTURE",{});var Or=a(Fs);Ge=t(Or,"SOURCE",{type:!0,srcset:!0}),L=t(Or,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Or.forEach(e),$r.forEach(e),Gr.forEach(e),Qo=c(i),js=t(i,"P",{});var Yr=a(js);Tt=l(Yr,"Today, I am going to share with y'all how I enhanced on my basic module bundler so that I can use it to bundle not just a NodeJS script, but a web application."),Yr.forEach(e),Xo=c(i),Ns=t(i,"P",{});var zr=a(Ns);Pt=l(zr,"I will be showing how I added the following features:"),zr.forEach(e),Zo=c(i),N=t(i,"UL",{});var Fe=a(N);$e=t(Fe,"LI",{});var Kr=a($e);Js=t(Kr,"A",{href:!0});var Qr=a(Js);Mt=l(Qr,"Adding HTML Template"),Qr.forEach(e),Kr.forEach(e),Ct=c(Fe),Ye=t(Fe,"LI",{});var Xr=a(Ye);Rs=t(Xr,"A",{href:!0});var Zr=a(Rs);Lt=l(Zr,"Adding CSS"),Zr.forEach(e),Xr.forEach(e),Dt=c(Fe),ze=t(Fe,"LI",{});var si=a(ze);Us=t(si,"A",{href:!0});var ei=a(Us);At=l(ei,"Provide a dev server"),ei.forEach(e),si.forEach(e),Fe.forEach(e),st=c(i),et=t(i,"HR",{}),ot=c(i),Z=t(i,"P",{});var vt=a(Z);Ot=l(vt,"\u26A0\uFE0F "),Ke=t(vt,"STRONG",{});var oi=a(Ke);Ht=l(oi,"Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),oi.forEach(e),qt=l(vt," \u26A0\uFE0F"),vt.forEach(e),tt=c(i),at=t(i,"HR",{}),nt=c(i),_=t(i,"SECTION",{});var I=a(_);Qe=t(I,"H2",{});var ti=a(Qe);ls=t(ti,"A",{href:!0,id:!0});var ai=a(ls);Ft=l(ai,"Before we begin"),ai.forEach(e),ti.forEach(e),jt=c(I),Xe=t(I,"P",{});var ni=a(Xe);Nt=l(ni,"I found an edge case bug in my module bundler if the module ends with a line comment, the output bundle might have a syntax error."),ni.forEach(e),Jt=c(I),Ze=t(I,"P",{});var li=a(Ze);Rt=l(li,"I've fixed the bug by appending a newline character to the end of the module code:"),li.forEach(e),Ut=c(I),Bs=t(I,"DIV",{class:!0});var dc=a(Bs);dc.forEach(e),Bt=c(I),so=t(I,"P",{});var ri=a(so);Vt=l(ri,"\u{1F60E}"),ri.forEach(e),Wt=c(I),eo=t(I,"P",{});var ii=a(eo);Gt=l(ii,"Also, I've changed the resolver code, which used to only be able to resolve the relative path:"),ii.forEach(e),$t=c(I),Vs=t(I,"DIV",{class:!0});var uc=a(Vs);uc.forEach(e),Yt=c(I),rs=t(I,"P",{});var yt=a(rs);zt=l(yt,"Now I can import libraries from "),Ws=t(yt,"CODE",{class:!0});var pi=a(Ws);Kt=l(pi,"node_modules/"),pi.forEach(e),Qt=l(yt,"."),yt.forEach(e),Xt=c(I),Gs=t(I,"P",{});var Hr=a(Gs);oo=t(Hr,"EM",{});var ci=a(oo);Zt=l(ci,'Did I just said "import libraries"?'),ci.forEach(e),sa=l(Hr," \u{1F64A}"),Hr.forEach(e),I.forEach(e),lt=c(i),y=t(i,"SECTION",{});var x=a(y);to=t(x,"H2",{});var hi=a(to);is=t(hi,"A",{href:!0,id:!0});var ki=a(is);ea=l(ki,"Adding HTML Template"),ki.forEach(e),hi.forEach(e),oa=c(x),ao=t(x,"P",{});var vi=a(ao);ta=l(vi,"To bundle for the web, the most important piece is to have the HTML."),vi.forEach(e),aa=c(x),ps=t(x,"P",{});var dt=a(ps);na=l(dt,"Usually, we provide an HTML template to the module bundler. And when the module bundler finishes the bundling process, it will come up with a list of files that is required to start the application and add them into the HTML file in the form of a "),$s=t(dt,"CODE",{class:!0});var yi=a($s);la=l(yi,"<script>"),yi.forEach(e),ra=l(dt," tag."),dt.forEach(e),ia=c(x),no=t(x,"P",{});var di=a(no);pa=l(di,"To illustrate here is the HTML template that I've prepared:"),di.forEach(e),ca=c(x),Ys=t(x,"DIV",{class:!0});var xc=a(Ys);xc.forEach(e),ha=c(x),lo=t(x,"P",{});var ui=a(lo);ka=l(ui,"And at the end of the bundling process, the bundler generated the following files:"),ui.forEach(e),va=c(x),zs=t(x,"DIV",{class:!0});var fc=a(zs);fc.forEach(e),ya=c(x),cs=t(x,"P",{});var ut=a(cs);da=l(ut,"So the "),Ks=t(ut,"CODE",{class:!0});var xi=a(Ks);ua=l(xi,"bundle.js"),xi.forEach(e),xa=l(ut," is added into the final HTML file like this:"),ut.forEach(e),fa=c(x),Qs=t(x,"DIV",{class:!0});var mc=a(Qs);mc.forEach(e),ma=c(x),ro=t(x,"BLOCKQUOTE",{});var fi=a(ro);io=t(fi,"SMALL",{});var mi=a(io);ga=l(mi,"**NOTE:** the preceding slash (`/`) allows us to always fetch the JavaScript file relative from the root path. This is extremely useful for Single Page Application (SPA), where we serve the same HTML file irrelevant to the URL path."),mi.forEach(e),fi.forEach(e),wa=c(x),po=t(x,"P",{});var gi=a(po);_a=l(gi,"Code wise, it is quite straightforward to implement this:"),gi.forEach(e),ba=c(x),Xs=t(x,"DIV",{class:!0});var gc=a(Xs);gc.forEach(e),Ea=c(x),O=t(x,"P",{});var es=a(O);Sa=l(es,"Here, I used a "),Zs=t(es,"CODE",{class:!0});var wi=a(Zs);Ia=l(wi,".replace(END_BODY_TAG, '...' + END_BODY_TAG)"),wi.forEach(e),Ta=l(es," to insert the "),se=t(es,"CODE",{class:!0});var _i=a(se);Pa=l(_i,"<script>"),_i.forEach(e),Ma=l(es," tags before the end of the "),ee=t(es,"CODE",{class:!0});var bi=a(ee);Ca=l(bi,"</body>"),bi.forEach(e),La=l(es," tag."),es.forEach(e),Da=c(x),co=t(x,"BLOCKQUOTE",{});var Ei=a(co);oe=t(Ei,"SMALL",{});var qr=a(oe);Aa=l(qr,"**Note:** Read [here](https://www.codecademy.com/forum_questions/55dee24b937676fb5e000139) to learn why it's a best practice to add `<script>` tag at the end of the `"),ho=t(qr,"BODY",{});var Si=a(ho);Oa=l(Si,"` tag."),Si.forEach(e),qr.forEach(e),Ei.forEach(e),x.forEach(e),rt=c(i),u=t(i,"SECTION",{});var g=a(u);ko=t(g,"H2",{});var Ii=a(ko);hs=t(Ii,"A",{href:!0,id:!0});var Ti=a(hs);Ha=l(Ti,"Adding CSS"),Ti.forEach(e),Ii.forEach(e),qa=c(g),vo=t(g,"P",{});var Pi=a(vo);Fa=l(Pi,"Every web app has to have CSS in one way or another."),Pi.forEach(e),ja=c(g),ks=t(g,"P",{});var xt=a(ks);Na=l(xt,"I added a css file and imported it from "),te=t(xt,"CODE",{class:!0});var Mi=a(te);Ja=l(Mi,"index.js"),Mi.forEach(e),Ra=l(xt,":"),xt.forEach(e),Ua=c(g),ae=t(g,"DIV",{class:!0});var wc=a(ae);wc.forEach(e),Ba=c(g),ne=t(g,"DIV",{class:!0});var _c=a(ne);_c.forEach(e),Va=c(g),vs=t(g,"P",{});var ft=a(vs);Wa=l(ft,"If I bundle my application now, I would see a "),le=t(ft,"CODE",{class:!0});var Ci=a(le);Ga=l(Ci,"SyntaxError"),Ci.forEach(e),$a=l(ft,":"),ft.forEach(e),Ya=c(g),re=t(g,"DIV",{class:!0});var bc=a(re);bc.forEach(e),za=c(g),yo=t(g,"P",{});var Li=a(yo);Ka=l(Li,"That is because I assumed all files are JavaScript files, and Babel would complain when trying to parse out the import statements."),Li.forEach(e),Qa=c(g),H=t(g,"P",{});var os=a(H);Xa=l(os,"So, I abstracted out "),ie=t(os,"CODE",{class:!0});var Di=a(ie);Za=l(Di,"Module"),Di.forEach(e),sn=l(os," as a base class, and created "),pe=t(os,"CODE",{class:!0});var Ai=a(pe);en=l(Ai,"JSModule"),Ai.forEach(e),on=l(os," and "),ce=t(os,"CODE",{class:!0});var Oi=a(ce);tn=l(Oi,"CSSModule"),Oi.forEach(e),an=l(os,":"),os.forEach(e),nn=c(g),he=t(g,"DIV",{class:!0});var Ec=a(he);Ec.forEach(e),ln=c(g),B=t(g,"P",{});var je=a(B);rn=l(je,"In the "),ke=t(je,"CODE",{class:!0});var Hi=a(ke);pn=l(Hi,"createModule"),Hi.forEach(e),cn=l(je," function, I need to create different "),ve=t(je,"CODE",{class:!0});var qi=a(ve);hn=l(qi,"Module"),qi.forEach(e),kn=l(je," based on the file extension:"),je.forEach(e),vn=c(g),ye=t(g,"DIV",{class:!0});var Sc=a(ye);Sc.forEach(e),g.forEach(e),it=c(i),h=t(i,"SECTION",{});var v=a(h);uo=t(v,"H3",{});var Fi=a(uo);ys=t(Fi,"A",{href:!0,id:!0});var ji=a(ys);yn=l(ji,"Loaders"),ji.forEach(e),Fi.forEach(e),dn=c(v),V=t(v,"P",{});var Ne=a(V);un=l(Ne,"Here I used the word "),de=t(Ne,"CODE",{class:!0});var Ni=a(de);xn=l(Ni,'"LOADERS"'),Ni.forEach(e),fn=l(Ne,", which I borrowed from "),ds=t(Ne,"A",{href:!0,rel:!0});var Ji=a(ds);mn=l(Ji,"webpack"),Ji.forEach(e),gn=l(Ne,"."),Ne.forEach(e),wn=c(v),ue=t(v,"P",{});var Fr=a(ue);_n=l(Fr,"According to webpack, "),us=t(Fr,"EM",{});var mt=a(us);bn=l(mt,'"'),xs=t(mt,"A",{href:!0,rel:!0});var Ri=a(xs);En=l(Ri,"[loaders]"),Ri.forEach(e),Sn=l(mt,' enable webpack to preprocess files, [which] allows you to bundle any static resource way beyond JavaScript."'),mt.forEach(e),Fr.forEach(e),In=c(v),W=t(v,"P",{});var Je=a(W);Tn=l(Je,"To take it from a different perspective, "),xo=t(Je,"STRONG",{});var Ui=a(xo);Pn=l(Ui,"loaders"),Ui.forEach(e),Mn=l(Je," are simple functions that transform any code into "),fo=t(Je,"STRONG",{});var Bi=a(fo);Cn=l(Bi,"browser-executable JavaScript code"),Bi.forEach(e),Ln=l(Je,"."),Je.forEach(e),Dn=c(v),mo=t(v,"P",{});var Vi=a(mo);An=l(Vi,"For example, if you import a CSS file, the CSS code in the file will pass through the loader function to be transformed into JS code. So that you can import a CSS file as if you are importing a JS file."),Vi.forEach(e),On=c(v),go=t(v,"P",{});var Wi=a(go);wo=t(Wi,"STRONG",{});var Gi=a(wo);Hn=l(Gi,"Wait, how are we going to transform CSS code into JS code?"),Gi.forEach(e),Wi.forEach(e),qn=c(v),G=t(v,"P",{});var Re=a(G);Fn=l(Re,"Well, one way you can do that is to make the CSS code into a string by wrapping it around with quote marks "),xe=t(Re,"CODE",{class:!0});var $i=a(xe);jn=l($i,"'"),$i.forEach(e),Nn=l(Re,", and programmatically add the CSS code into the HTML "),fe=t(Re,"CODE",{class:!0});var Yi=a(fe);Jn=l(Yi,"<head />"),Yi.forEach(e),Rn=l(Re,"."),Re.forEach(e),Un=c(v),_o=t(v,"P",{});var zi=a(_o);Bn=l(zi,"For example, taking the following CSS code:"),zi.forEach(e),Vn=c(v),me=t(v,"DIV",{class:!0});var Ic=a(me);Ic.forEach(e),Wn=c(v),bo=t(v,"P",{});var Ki=a(bo);Gn=l(Ki,"and transform it into the following JS code:"),Ki.forEach(e),$n=c(v),ge=t(v,"DIV",{class:!0});var Tc=a(ge);Tc.forEach(e),Yn=c(v),$=t(v,"P",{});var Ue=a($);zn=l(Ue,"This is in essence what "),fs=t(Ue,"A",{href:!0,rel:!0});var Qi=a(fs);Kn=l(Qi,"style-loader"),Qi.forEach(e),Qn=l(Ue," is doing, except "),we=t(Ue,"CODE",{class:!0});var Xi=a(we);Xn=l(Xi,"style-loader"),Xi.forEach(e),Zn=l(Ue," does even more:"),Ue.forEach(e),sl=c(v),Y=t(v,"UL",{});var Be=a(Y);Eo=t(Be,"LI",{});var Zi=a(Eo);el=l(Zi,"supports hot reloading"),Zi.forEach(e),ol=c(Be),q=t(Be,"LI",{});var ts=a(q);tl=l(ts,"provides different mode of injecting, "),_e=t(ts,"CODE",{class:!0});var sp=a(_e);al=l(sp,"styleTag"),sp.forEach(e),nl=l(ts,", "),be=t(ts,"CODE",{class:!0});var ep=a(be);ll=l(ep,"singletonStyleTag"),ep.forEach(e),rl=l(ts,", "),Ee=t(ts,"CODE",{class:!0});var op=a(Ee);il=l(op,"linkTag"),op.forEach(e),pl=l(ts,", ... etc."),ts.forEach(e),cl=c(Be),So=t(Be,"LI",{});var tp=a(So);hl=l(tp,"provides different points in dom for injecting the style tag."),tp.forEach(e),Be.forEach(e),kl=c(v),Io=t(v,"P",{});var ap=a(Io);To=t(ap,"STRONG",{});var np=a(To);vl=l(np,'Did I mentioned "browser-executable JavaScript code"?'),np.forEach(e),ap.forEach(e),yl=c(v),ms=t(v,"P",{});var gt=a(ms);dl=l(gt,"Yes, not all JavaScript code is executable in a browser if you are using next-generation syntaxes or constructs that is not yet available in the browser. That's why you need "),gs=t(gt,"A",{href:!0,rel:!0});var lp=a(gs);ul=l(lp,"babel-loader"),lp.forEach(e),xl=l(gt," for your JavaScript files, to make sure they can be run in all supported browsers."),gt.forEach(e),fl=c(v),ml=t(v,"HR",{}),gl=c(v),ws=t(v,"P",{});var wt=a(ws);wl=l(wt,"So, I implemented the loader transform in CSSModule with "),_s=t(wt,"A",{href:!0,rel:!0});var rp=a(_s);_l=l(rp,"template literals"),rp.forEach(e),bl=l(wt,":"),wt.forEach(e),El=c(v),Se=t(v,"DIV",{class:!0});var Pc=a(Se);Pc.forEach(e),v.forEach(e),pt=c(i),b=t(i,"SECTION",{});var T=a(b);Po=t(T,"H2",{});var ip=a(Po);bs=t(ip,"A",{href:!0,id:!0});var pp=a(bs);Sl=l(pp,"Dev Server"),pp.forEach(e),ip.forEach(e),Il=c(T),Mo=t(T,"P",{});var cp=a(Mo);Tl=l(cp,"Dev server is a default feature for frontend build tools nowadays, it's common feature are:"),cp.forEach(e),Pl=c(T),z=t(T,"UL",{});var Ve=a(z);Co=t(Ve,"LI",{});var hp=a(Co);Ml=l(hp,"Serving generated assets, assets can be either served from the filesystem or in memory"),hp.forEach(e),Cl=c(Ve),Lo=t(Ve,"LI",{});var kp=a(Lo);Ll=l(kp,"Supports watch mode, reloading and hot module replacement"),kp.forEach(e),Dl=c(Ve),Do=t(Ve,"LI",{});var vp=a(Do);Al=l(vp,"Act as a proxy to external APIs"),vp.forEach(e),Ve.forEach(e),Ol=c(T),Es=t(T,"P",{});var _t=a(Es);Hl=l(_t,"In this post, I will show you how I created a basic dev server using "),Ss=t(_t,"A",{href:!0,rel:!0});var yp=a(Ss);ql=l(yp,"Express"),yp.forEach(e),Fl=l(_t," for serving the generated assets in memory, we will discuss the watch mode in the future post."),_t.forEach(e),jl=c(T),F=t(T,"P",{});var as=a(F);Nl=l(as,"I abstracted out the "),Ie=t(as,"CODE",{class:!0});var dp=a(Ie);Jl=l(dp,"_build"),dp.forEach(e),Rl=l(as," function and supports both "),Te=t(as,"CODE",{class:!0});var up=a(Te);Ul=l(up,"build"),up.forEach(e),Bl=l(as," and "),Pe=t(as,"CODE",{class:!0});var xp=a(Pe);Vl=l(xp,"dev"),xp.forEach(e),Wl=l(as," mode."),as.forEach(e),Gl=c(T),Me=t(T,"DIV",{class:!0});var Mc=a(Me);Mc.forEach(e),$l=c(T),K=t(T,"P",{});var We=a(K);Yl=l(We,"In "),Ce=t(We,"CODE",{class:!0});var fp=a(Ce);zl=l(fp,"dev"),fp.forEach(e),Kl=l(We," mode, I did not write files to the file system, instead I served them directly through the "),Is=t(We,"A",{href:!0,rel:!0});var mp=a(Is);Ql=l(mp,"Express"),mp.forEach(e),Xl=l(We," server:"),We.forEach(e),Zl=c(T),Le=t(T,"DIV",{class:!0});var Cc=a(Le);Cc.forEach(e),sr=c(T),Ao=t(T,"P",{});var gp=a(Ao);er=l(gp,"And that's it. You have a basic dev server that serves the bundled files!"),gp.forEach(e),T.forEach(e),ct=c(i),m=t(i,"SECTION",{});var S=a(m);Oo=t(S,"H2",{});var wp=a(Oo);Ts=t(wp,"A",{href:!0,id:!0});var _p=a(Ts);or=l(_p,"Wrap it up"),_p.forEach(e),wp.forEach(e),tr=c(S),Ps=t(S,"P",{});var bt=a(Ps);ar=l(bt,"I've added "),Ms=t(bt,"A",{href:!0,rel:!0});var bp=a(Ms);nr=l(bp,"Preact"),bp.forEach(e),lr=l(bt," and CSS into my app:"),bt.forEach(e),rr=c(S),De=t(S,"DIV",{class:!0});var Lc=a(De);Lc.forEach(e),ir=c(S),Ae=t(S,"DIV",{class:!0});var Dc=a(Ae);Dc.forEach(e),pr=c(S),Ho=t(S,"P",{});var Ep=a(Ho);cr=l(Ep,"And also an HTML template:"),Ep.forEach(e),hr=c(S),Oe=t(S,"DIV",{class:!0});var Ac=a(Oe);Ac.forEach(e),kr=c(S),qo=t(S,"P",{});var Sp=a(qo);vr=l(Sp,"Starting my bundler:"),Sp.forEach(e),yr=c(S),Fo=t(S,"P",{});var Ip=a(Fo);Q=t(Ip,"SPAN",{style:!0});var Tp=a(Q);He=t(Tp,"PICTURE",{});var jr=a(He);jo=t(jr,"SOURCE",{type:!0,srcset:!0}),D=t(jr,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),jr.forEach(e),Tp.forEach(e),Ip.forEach(e),dr=c(S),No=t(S,"P",{});var Pp=a(No);ur=l(Pp,"And voila!"),Pp.forEach(e),xr=c(S),Jo=t(S,"P",{});var Mp=a(Jo);X=t(Mp,"SPAN",{style:!0});var Cp=a(X);qe=t(Cp,"PICTURE",{});var Nr=a(qe);Ro=t(Nr,"SOURCE",{type:!0,srcset:!0}),A=t(Nr,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Nr.forEach(e),Cp.forEach(e),Mp.forEach(e),S.forEach(e),ht=c(i),P=t(i,"SECTION",{});var J=a(P);Uo=t(J,"H2",{});var Lp=a(Uo);Cs=t(Lp,"A",{href:!0,id:!0});var Dp=a(Cs);fr=l(Dp,"Whats next?"),Dp.forEach(e),Lp.forEach(e),mr=c(J),Bo=t(J,"P",{});var Ap=a(Bo);gr=l(Ap,"I have promised in my previous post, features that I will implement:"),Ap.forEach(e),wr=c(J),Ls=t(J,"UL",{});var Et=a(Ls);Vo=t(Et,"LI",{});var Op=a(Vo);_r=l(Op,"code splitting"),Op.forEach(e),br=c(Et),Wo=t(Et,"LI",{});var Hp=a(Wo);Er=l(Hp,"watch mode"),Hp.forEach(e),Et.forEach(e),Sr=c(J),Go=t(J,"P",{});var qp=a(Go);Ir=l(qp,"and yes, I will implement them!"),qp.forEach(e),Tr=c(J),$o=t(J,"P",{});var Fp=a($o);Pr=l(Fp,"Till then. Cheers. \u{1F60E}"),Fp.forEach(e),J.forEach(e),kt=c(i),ss=t(i,"SECTION",{});var St=a(ss);Yo=t(St,"H2",{});var jp=a(Yo);Ds=t(jp,"A",{href:!0,id:!0});var Np=a(Ds);Mr=l(Np,"References"),Np.forEach(e),jp.forEach(e),Cr=c(St),As=t(St,"UL",{});var It=a(As);zo=t(It,"LI",{});var Jp=a(zo);Os=t(Jp,"A",{href:!0,rel:!0});var Rp=a(Os);Lr=l(Rp,"Webpack Dev Server"),Rp.forEach(e),Jp.forEach(e),Dr=c(It),Ko=t(It,"LI",{});var Up=a(Ko);Hs=t(Up,"A",{href:!0,rel:!0});var Bp=a(Hs);Ar=l(Bp,"style-loader"),Bp.forEach(e),Up.forEach(e),It.forEach(e),St.forEach(e),this.h()},h(){r(M,"href","/i-wrote-my-module-bundler/"),r(Ge,"type","image/webp"),r(Ge,"srcset",sh+", "+Zc+" 2x"),Jr(L.src,Ur=Yp)||r(L,"src",Ur),r(L,"srcset",Yp+", "+eh+" 2x"),r(L,"loading","lazy"),w(L,"position","absolute"),w(L,"top","0"),w(L,"width","100%"),w(L,"height","100%"),r(L,"alt","bundled code demo"),w(U,"display","block"),w(U,"position","relative"),w(U,"padding-top","17.949%"),w(U,"width","100%"),r(Js,"href","#adding-html-template"),r(Rs,"href","#adding-css"),r(Us,"href","#dev-server"),r(ls,"href","#before-we-begin"),r(ls,"id","before-we-begin"),r(Bs,"class","code-section"),r(Vs,"class","code-section"),r(Ws,"class","inline"),r(is,"href","#adding-html-template"),r(is,"id","adding-html-template"),r($s,"class","inline"),r(Ys,"class","code-section"),r(zs,"class","code-section"),r(Ks,"class","inline"),r(Qs,"class","code-section"),r(Xs,"class","code-section"),r(Zs,"class","inline"),r(se,"class","inline"),r(ee,"class","inline"),r(hs,"href","#adding-css"),r(hs,"id","adding-css"),r(te,"class","inline"),r(ae,"class","code-section"),r(ne,"class","code-section"),r(le,"class","inline"),r(re,"class","code-section"),r(ie,"class","inline"),r(pe,"class","inline"),r(ce,"class","inline"),r(he,"class","code-section"),r(ke,"class","inline"),r(ve,"class","inline"),r(ye,"class","code-section"),r(ys,"href","#loaders"),r(ys,"id","loaders"),r(de,"class","inline"),r(ds,"href","https://webpack.js.org/loaders/"),r(ds,"rel","nofollow"),r(xs,"href","https://webpack.js.org/loaders/"),r(xs,"rel","nofollow"),r(xe,"class","inline"),r(fe,"class","inline"),r(me,"class","code-section"),r(ge,"class","code-section"),r(fs,"href","https://github.com/webpack-contrib/style-loader"),r(fs,"rel","nofollow"),r(we,"class","inline"),r(_e,"class","inline"),r(be,"class","inline"),r(Ee,"class","inline"),r(gs,"href","https://github.com/babel/babel-loader"),r(gs,"rel","nofollow"),r(_s,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"),r(_s,"rel","nofollow"),r(Se,"class","code-section"),r(bs,"href","#dev-server"),r(bs,"id","dev-server"),r(Ss,"href","https://expressjs.com"),r(Ss,"rel","nofollow"),r(Ie,"class","inline"),r(Te,"class","inline"),r(Pe,"class","inline"),r(Me,"class","code-section"),r(Ce,"class","inline"),r(Is,"href","https://expressjs.com"),r(Is,"rel","nofollow"),r(Le,"class","code-section"),r(Ts,"href","#wrap-it-up"),r(Ts,"id","wrap-it-up"),r(Ms,"href","https://preactjs.com/"),r(Ms,"rel","nofollow"),r(De,"class","code-section"),r(Ae,"class","code-section"),r(Oe,"class","code-section"),r(jo,"type","image/webp"),r(jo,"srcset",Qc+", "+Kc+" 2x"),Jr(D.src,Br=$p)||r(D,"src",Br),r(D,"srcset",$p+", "+Xc+" 2x"),r(D,"loading","lazy"),w(D,"position","absolute"),w(D,"top","0"),w(D,"width","100%"),w(D,"height","100%"),r(D,"alt","Running bundler + dev server"),w(Q,"display","block"),w(Q,"position","relative"),w(Q,"padding-top","9.486%"),w(Q,"width","100%"),r(Ro,"type","image/webp"),r(Ro,"srcset",Yc+", "+$c+" 2x"),Jr(A.src,Vr=Gp)||r(A,"src",Vr),r(A,"srcset",Gp+", "+zc+" 2x"),r(A,"loading","lazy"),w(A,"position","absolute"),w(A,"top","0"),w(A,"width","100%"),w(A,"height","100%"),r(A,"alt","Served results"),w(X,"display","block"),w(X,"position","relative"),w(X,"padding-top","62.409%"),w(X,"width","100%"),r(Cs,"href","#whats-next"),r(Cs,"id","whats-next"),r(Ds,"href","#references"),r(Ds,"id","references"),r(Os,"href","https://github.com/webpack/webpack-dev-server"),r(Os,"rel","nofollow"),r(Hs,"href","https://github.com/webpack-contrib/style-loader"),r(Hs,"rel","nofollow")},m(i,k){d(i,f,k),s(f,j),s(f,M),s(M,ns),s(f,E),d(i,C,k),d(i,R,k),s(R,U),s(U,Fs),s(Fs,Ge),s(Fs,L),d(i,Qo,k),d(i,js,k),s(js,Tt),d(i,Xo,k),d(i,Ns,k),s(Ns,Pt),d(i,Zo,k),d(i,N,k),s(N,$e),s($e,Js),s(Js,Mt),s(N,Ct),s(N,Ye),s(Ye,Rs),s(Rs,Lt),s(N,Dt),s(N,ze),s(ze,Us),s(Us,At),d(i,st,k),d(i,et,k),d(i,ot,k),d(i,Z,k),s(Z,Ot),s(Z,Ke),s(Ke,Ht),s(Z,qt),d(i,tt,k),d(i,at,k),d(i,nt,k),d(i,_,k),s(_,Qe),s(Qe,ls),s(ls,Ft),s(_,jt),s(_,Xe),s(Xe,Nt),s(_,Jt),s(_,Ze),s(Ze,Rt),s(_,Ut),s(_,Bs),Bs.innerHTML=Kp,s(_,Bt),s(_,so),s(so,Vt),s(_,Wt),s(_,eo),s(eo,Gt),s(_,$t),s(_,Vs),Vs.innerHTML=Qp,s(_,Yt),s(_,rs),s(rs,zt),s(rs,Ws),s(Ws,Kt),s(rs,Qt),s(_,Xt),s(_,Gs),s(Gs,oo),s(oo,Zt),s(Gs,sa),d(i,lt,k),d(i,y,k),s(y,to),s(to,is),s(is,ea),s(y,oa),s(y,ao),s(ao,ta),s(y,aa),s(y,ps),s(ps,na),s(ps,$s),s($s,la),s(ps,ra),s(y,ia),s(y,no),s(no,pa),s(y,ca),s(y,Ys),Ys.innerHTML=Xp,s(y,ha),s(y,lo),s(lo,ka),s(y,va),s(y,zs),zs.innerHTML=Zp,s(y,ya),s(y,cs),s(cs,da),s(cs,Ks),s(Ks,ua),s(cs,xa),s(y,fa),s(y,Qs),Qs.innerHTML=sc,s(y,ma),s(y,ro),s(ro,io),s(io,ga),s(y,wa),s(y,po),s(po,_a),s(y,ba),s(y,Xs),Xs.innerHTML=ec,s(y,Ea),s(y,O),s(O,Sa),s(O,Zs),s(Zs,Ia),s(O,Ta),s(O,se),s(se,Pa),s(O,Ma),s(O,ee),s(ee,Ca),s(O,La),s(y,Da),s(y,co),s(co,oe),s(oe,Aa),s(oe,ho),s(ho,Oa),d(i,rt,k),d(i,u,k),s(u,ko),s(ko,hs),s(hs,Ha),s(u,qa),s(u,vo),s(vo,Fa),s(u,ja),s(u,ks),s(ks,Na),s(ks,te),s(te,Ja),s(ks,Ra),s(u,Ua),s(u,ae),ae.innerHTML=oc,s(u,Ba),s(u,ne),ne.innerHTML=tc,s(u,Va),s(u,vs),s(vs,Wa),s(vs,le),s(le,Ga),s(vs,$a),s(u,Ya),s(u,re),re.innerHTML=ac,s(u,za),s(u,yo),s(yo,Ka),s(u,Qa),s(u,H),s(H,Xa),s(H,ie),s(ie,Za),s(H,sn),s(H,pe),s(pe,en),s(H,on),s(H,ce),s(ce,tn),s(H,an),s(u,nn),s(u,he),he.innerHTML=nc,s(u,ln),s(u,B),s(B,rn),s(B,ke),s(ke,pn),s(B,cn),s(B,ve),s(ve,hn),s(B,kn),s(u,vn),s(u,ye),ye.innerHTML=lc,d(i,it,k),d(i,h,k),s(h,uo),s(uo,ys),s(ys,yn),s(h,dn),s(h,V),s(V,un),s(V,de),s(de,xn),s(V,fn),s(V,ds),s(ds,mn),s(V,gn),s(h,wn),s(h,ue),s(ue,_n),s(ue,us),s(us,bn),s(us,xs),s(xs,En),s(us,Sn),s(h,In),s(h,W),s(W,Tn),s(W,xo),s(xo,Pn),s(W,Mn),s(W,fo),s(fo,Cn),s(W,Ln),s(h,Dn),s(h,mo),s(mo,An),s(h,On),s(h,go),s(go,wo),s(wo,Hn),s(h,qn),s(h,G),s(G,Fn),s(G,xe),s(xe,jn),s(G,Nn),s(G,fe),s(fe,Jn),s(G,Rn),s(h,Un),s(h,_o),s(_o,Bn),s(h,Vn),s(h,me),me.innerHTML=rc,s(h,Wn),s(h,bo),s(bo,Gn),s(h,$n),s(h,ge),ge.innerHTML=ic,s(h,Yn),s(h,$),s($,zn),s($,fs),s(fs,Kn),s($,Qn),s($,we),s(we,Xn),s($,Zn),s(h,sl),s(h,Y),s(Y,Eo),s(Eo,el),s(Y,ol),s(Y,q),s(q,tl),s(q,_e),s(_e,al),s(q,nl),s(q,be),s(be,ll),s(q,rl),s(q,Ee),s(Ee,il),s(q,pl),s(Y,cl),s(Y,So),s(So,hl),s(h,kl),s(h,Io),s(Io,To),s(To,vl),s(h,yl),s(h,ms),s(ms,dl),s(ms,gs),s(gs,ul),s(ms,xl),s(h,fl),s(h,ml),s(h,gl),s(h,ws),s(ws,wl),s(ws,_s),s(_s,_l),s(ws,bl),s(h,El),s(h,Se),Se.innerHTML=pc,d(i,pt,k),d(i,b,k),s(b,Po),s(Po,bs),s(bs,Sl),s(b,Il),s(b,Mo),s(Mo,Tl),s(b,Pl),s(b,z),s(z,Co),s(Co,Ml),s(z,Cl),s(z,Lo),s(Lo,Ll),s(z,Dl),s(z,Do),s(Do,Al),s(b,Ol),s(b,Es),s(Es,Hl),s(Es,Ss),s(Ss,ql),s(Es,Fl),s(b,jl),s(b,F),s(F,Nl),s(F,Ie),s(Ie,Jl),s(F,Rl),s(F,Te),s(Te,Ul),s(F,Bl),s(F,Pe),s(Pe,Vl),s(F,Wl),s(b,Gl),s(b,Me),Me.innerHTML=cc,s(b,$l),s(b,K),s(K,Yl),s(K,Ce),s(Ce,zl),s(K,Kl),s(K,Is),s(Is,Ql),s(K,Xl),s(b,Zl),s(b,Le),Le.innerHTML=hc,s(b,sr),s(b,Ao),s(Ao,er),d(i,ct,k),d(i,m,k),s(m,Oo),s(Oo,Ts),s(Ts,or),s(m,tr),s(m,Ps),s(Ps,ar),s(Ps,Ms),s(Ms,nr),s(Ps,lr),s(m,rr),s(m,De),De.innerHTML=kc,s(m,ir),s(m,Ae),Ae.innerHTML=vc,s(m,pr),s(m,Ho),s(Ho,cr),s(m,hr),s(m,Oe),Oe.innerHTML=yc,s(m,kr),s(m,qo),s(qo,vr),s(m,yr),s(m,Fo),s(Fo,Q),s(Q,He),s(He,jo),s(He,D),s(m,dr),s(m,No),s(No,ur),s(m,xr),s(m,Jo),s(Jo,X),s(X,qe),s(qe,Ro),s(qe,A),d(i,ht,k),d(i,P,k),s(P,Uo),s(Uo,Cs),s(Cs,fr),s(P,mr),s(P,Bo),s(Bo,gr),s(P,wr),s(P,Ls),s(Ls,Vo),s(Vo,_r),s(Ls,br),s(Ls,Wo),s(Wo,Er),s(P,Sr),s(P,Go),s(Go,Ir),s(P,Tr),s(P,$o),s($o,Pr),d(i,kt,k),d(i,ss,k),s(ss,Yo),s(Yo,Ds),s(Ds,Mr),s(ss,Cr),s(ss,As),s(As,zo),s(zo,Os),s(Os,Lr),s(As,Dr),s(As,Ko),s(Ko,Hs),s(Hs,Ar)},p:Wc,d(i){i&&e(f),i&&e(C),i&&e(R),i&&e(Qo),i&&e(js),i&&e(Xo),i&&e(Ns),i&&e(Zo),i&&e(N),i&&e(st),i&&e(et),i&&e(ot),i&&e(Z),i&&e(tt),i&&e(at),i&&e(nt),i&&e(_),i&&e(lt),i&&e(y),i&&e(rt),i&&e(u),i&&e(it),i&&e(h),i&&e(pt),i&&e(b),i&&e(ct),i&&e(m),i&&e(ht),i&&e(P),i&&e(kt),i&&e(ss)}}}function ah(qs){let f,j;const M=[qs[0],zp];let ns={$$slots:{default:[th]},$$scope:{ctx:qs}};for(let E=0;E<M.length;E+=1)ns=Rr(ns,M[E]);return f=new Gc({props:ns}),{c(){Fc(f.$$.fragment)},l(E){jc(f.$$.fragment,E)},m(E,C){Nc(f,E,C),j=!0},p(E,[C]){const R=C&1?Jc(M,[C&1&&Vp(E[0]),C&0&&Vp(zp)]):{};C&2&&(R.$$scope={dirty:C,ctx:E}),f.$set(R)},i(E){j||(Rc(f.$$.fragment,E),j=!0)},o(E){Uc(f.$$.fragment,E),j=!1},d(E){Bc(f,E)}}}const zp={title:"I wrote my module bundler II",date:"2019-10-16T08:00:00Z",tags:["JavaScript","module bundler","dev tool","webpack"],description:"We've built a simple bundler to bundle javascript code. Let's add CSS, HTML and serve it in the browser!",series:"Write a module bundler",label:"blog",tableOfContents:[{link:"before-we-begin",title:"Before we begin"},{link:"adding-html-template",title:"Adding HTML Template"},{link:"adding-css",title:"Adding CSS",nested:[{link:"loaders",title:"Loaders"}]},{link:"dev-server",title:"Dev Server"},{link:"wrap-it-up",title:"Wrap it up"},{link:"whats-next",title:"Whats next?"},{link:"references",title:"References"}]};function nh(qs,f,j){return Vc("blog",{image:oh}),qs.$$set=M=>{j(0,f=Rr(Rr({},f),Wp(M)))},f=Wp(f),[f]}class hh extends Oc{constructor(f){super();Hc(this,f,nh,ah,qc,{})}}export{hh as default,zp as metadata};
