import{S as su,i as ou,s as au,C as ah,w as eu,x as tu,y as nu,z as lu,A as bv,q as ru,o as iu,B as cu,r as pu,Y as Dv,e as t,t as o,k as i,c as n,a as l,h as a,d as e,m as c,b as r,X as ku,f as is,g as _,H as s,J as hu}from"../../chunks/vendor-da4388d4.js";import{B as yu}from"../../chunks/BlogLayout-14cfab6f.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var vu="https://lihautan.com/_app/assets/recursive-4fb6e38d.webp",du="https://lihautan.com/_app/assets/recursive-78d11ada.webp",uu="https://lihautan.com/_app/assets/recursive-25803996.png",Cv="https://lihautan.com/_app/assets/recursive-4f6ef114.png",xu="https://lihautan.com/_app/assets/hero-twitter-d9078b01.jpg";function fu(ao){let w,j,A,V,m,D,N,tn,dt,v,Se,cs,nn,ln,ps,rn,ks,cn,pn,kn,hs,Me,hn,yn,je,vn,dn,eo,Tv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> result) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,un,T,xn,to,fn,wn,no,mn,gn,lo,_n,En,bn,ro,Ov=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Dn,ys,Cn,io,Pn,Tn,On,co,Iv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,In,vs,Ln,po,Hn,Sn,Mn,ko,Lv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jn,Ae,An,Vn,ho,Hv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// 3rd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)">// failed for 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fn,ds,Nn,yo,qn,Wn,$n,us,Jn,xs,Un,Bn,Rn,Ve,zn,Gn,vo,Sv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// 3rd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)">// failed for 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yn,fs,Xn,uo,Zn,Kn,Qn,ws,sl,xo,ol,al,el,ms,tl,fo,nl,ll,rl,wo,Mv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> attempt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* this goes forever ...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,il,gs,cl,mo,pl,kl,hl,Fe,yl,vl,Ne,q,go,qe,C,eh,dl,We,ul,xl,$e,fl,wl,_o,jv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> attempt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ml,Je,gl,_l,Ue,El,ut,h,Be,_s,bl,Dl,Es,Cl,bs,Pl,Tl,Ol,b,Il,Eo,Ll,Hl,bo,Sl,Ml,Do,jl,Al,Co,Vl,Fl,Nl,Po,Av=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">getPromiseA</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// a promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(handleA) </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(handleB); </span><span style="color: var(--shiki-token-comment)">// returns another new promise</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">getPromiseB</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// a promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(handleA) </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(handleB); </span><span style="color: var(--shiki-token-comment)">// returns another new promise</span></span></code></pre>`,ql,O,Wl,To,$l,Jl,Oo,Ul,Bl,Ds,Rl,zl,Gl,W,Yl,Io,Xl,Zl,Lo,Kl,Ql,sr,Ho,Vv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,or,Cs,ar,So,er,tr,nr,Mo,Fv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,lr,$,rr,jo,ir,cr,Ao,pr,kr,hr,Vo,Nv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,yr,Ps,vr,Fo,dr,ur,xr,No,qv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,fr,I,wr,Re,mr,gr,qo,_r,Er,Wo,br,Dr,Cr,J,Pr,$o,Tr,Or,Jo,Ir,Lr,Hr,U,Sr,Uo,Mr,jr,Bo,Ar,Vr,Fr,Ro,Wv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Nr,ze,qr,Wr,zo,$v=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is equivalent to</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">promise3 </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span></code></pre>`,$r,Ts,Jr,Go,Ur,Br,Rr,Yo,Jv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// prettier-ignore</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zr,Os,Gr,Xo,Yr,Xr,Zr,Is,Kr,Zo,Qr,si,oi,Ko,Uv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// prettier-ignore</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// attempt #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// attempt #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// attempt #n</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">); &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ai,B,ei,Qo,ti,ni,sa,li,ri,ii,Ge,Ls,ci,oa,pi,ki,hi,aa,Bv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,yi,L,vi,ea,di,ui,ta,xi,fi,na,wi,mi,gi,la,Rv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">promise) promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_i,R,Ei,ra,bi,Di,ia,Ci,Pi,Ti,ca,zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.reject</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Oi,Ye,Ii,xt,p,Xe,Hs,Li,Hi,Ss,Si,pa,Mi,ji,Ai,Ze,Vi,Fi,ka,Gv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> data;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;resolved&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;here&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value);</span></span></code></pre>`,Ni,Ke,qi,Wi,ha,Yv='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;here&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span></span></code></pre>',$i,Qe,Ji,Ui,ya,Xv='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;resolved&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;value&quot;</span></span></code></pre>',Bi,Ms,Ri,va,zi,Gi,Yi,z,Xi,da,Zi,Ki,ua,Qi,sc,oc,js,ac,xa,ec,tc,nc,As,lc,fa,rc,ic,cc,wa,Zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// timeline #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data2 </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// timeline #3</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">doAnotherThing</span><span style="color: var(--shiki-color-text)">(data2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pc,G,kc,ma,hc,yc,ga,vc,dc,uc,_a,Kv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #3</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">doAnotherThing</span><span style="color: var(--shiki-color-text)">(data2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xc,H,fc,Ea,wc,mc,ba,gc,_c,Da,Ec,bc,Dc,Ca,Qv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cc,Vs,Pc,Pa,Tc,Oc,Ic,Ta,sd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lc,E,Hc,Oa,Sc,Mc,Ia,jc,Ac,La,Vc,Fc,Ha,Nc,qc,Sa,Wc,$c,Ma,od=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jc,Y,Uc,ja,Bc,Rc,Aa,zc,Gc,Yc,Va,ad=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xc,Fs,Zc,Fa,Kc,Qc,sp,Na,ed=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,op,qa,ap,Wa,ep,tp,$a,td=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,np,X,lp,Ja,rp,ip,Ua,cp,pp,kp,Ba,nd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,hp,Ns,yp,Ra,vp,dp,up,qs,xp,za,fp,wp,mp,Ga,ld=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// nth attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gp,Z,_p,Ya,Ep,bp,Xa,Dp,Cp,Pp,Za,rd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Tp,K,Op,Ka,Ip,Lp,Qa,Hp,Sp,ft,x,st,Ws,Mp,jp,Q,Ap,se,Vp,Fp,oe,Np,qp,Wp,ot,$p,Jp,S,$s,ae,Up,Bp,Js,Us,Rp,ee,zp,Gp,Yp,at,Xp,Zp,Bs,te,Kp,Qp,Rs,zs,sk,ne,ok,ak,ek,et,tk,nk,Gs,le,lk,rk,Ys,Xs,ik,re,ck,pk,kk,tt,hk,yk,Zs,ie,vk,dk,Ks,Qs,uk,ce,xk,fk,wk,nt,mk,gk,so,_k,pe,Ek,bk,Dk,lt,Ck,Pk,ke,id=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Tk,rt,Ok,Ik,he,cd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lk,it,Hk,Sk,ye,pd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mk,ct,jk,Ak,ve,kd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// calback version</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (numCalls </span><span style="color: var(--shiki-token-keyword)">&lt;=</span><span style="color: var(--shiki-color-text)"> numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> numCalls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// promise version</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (numCalls </span><span style="color: var(--shiki-token-keyword)">&lt;=</span><span style="color: var(--shiki-color-text)"> numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.reject</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(numCalls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vk,pt,Fk,Nk,de,hd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      numCalled</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> numCalled;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qk,kt,Wk,$k,ue,yd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#96;fn&#96; failed on 1st attempt, and succeed thereafter (callback based)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// retry at most 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)">.fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify &#96;fn&#96; get called only 2 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-token-function)">.getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify we get the return value from the 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#96;fn&#96; failed on 1st attempt, and succeed thereafter (promise based)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// retry at most 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)">.fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// verify &#96;fn&#96; get called only 2 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-token-function)">.getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// verify we get the return value from the 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    error </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,wt,P,ht,oo,Jk,Uk,ss,Bk,xe,Rk,zk,fe,Gk,Yk,Xk,yt,Zk,Kk,vt,Qk;return{c(){w=t("p"),j=o("JavaScript is a single-threaded programming language, which means only one thing can happen at a time in a single thread."),A=i(),V=t("p"),m=o("That\u2019s where asynchronous JavaScript comes into play. Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread."),D=i(),N=t("p"),tn=o("In this article, I'm going to show how you can retry an asynchronous function in JavaScript, using the callback pattern, promise chain pattern and async await. Also, I'll show you how to write test to verify it works."),dt=i(),v=t("section"),Se=t("h2"),cs=t("a"),nn=o("The callback pattern"),ln=i(),ps=t("p"),rn=o("Let's take a look at retrying asynchronous function that takes in a callback function that follows "),ks=t("a"),cn=o("the callback convention"),pn=o(":"),kn=i(),hs=t("ul"),Me=t("li"),hn=o("The first argument of the callback function is an error object"),yn=i(),je=t("li"),vn=o("The second argument contains the callback results."),dn=i(),eo=t("div"),un=i(),T=t("p"),xn=o("So we are going to implement the "),to=t("code"),fn=o("retry"),wn=o(" function, that takes in the asynchronous function to retry, "),no=t("code"),mn=o("fn"),gn=o(" and a callback function, "),lo=t("code"),_n=o("cb"),En=o(", that will be called when the function succeeded or failed after all the retry attempts."),bn=i(),ro=t("div"),Dn=i(),ys=t("p"),Cn=o("The first thing we are going to do is to call the function "),io=t("code"),Pn=o("fn"),Tn=o(":"),On=i(),co=t("div"),In=i(),vs=t("p"),Ln=o("We check if there's an error, if there's no error, we can call the "),po=t("code"),Hn=o("cb"),Sn=o(" function to indicate the function succeeded. However, if there's an error, we are going to call the function again to retry."),Mn=i(),ko=t("div"),jn=i(),Ae=t("p"),An=o("Let's retry at most 3 times:"),Vn=i(),ho=t("div"),Fn=i(),ds=t("p"),Nn=o("Notice that it starts to get unwieldy as we are nesting more callback functions. It's hard to figure out which close bracket "),yo=t("code"),qn=o("}"),Wn=o(" is belong to without proper indentation."),$n=i(),us=t("p"),Jn=o("This is the so-called "),xs=t("a"),Un=o('"Callback Hell"'),Bn=o(" in JavaScript."),Rn=i(),Ve=t("p"),zn=o("Let's make it more unbearable to prove the point by flipping the if case:"),Gn=i(),vo=t("div"),Yn=i(),fs=t("p"),Xn=o("Now can you tell which "),uo=t("code"),Zn=o("data"),Kn=o(" is belong to which function?"),Qn=i(),ws=t("p"),sl=o("Now, instead of always retry at most 3 times, we are going to retry at most "),xo=t("code"),ol=o("n"),al=o(" times."),el=i(),ms=t("p"),tl=o("So we are going to introduce a new argument, "),fo=t("code"),nl=o("n"),ll=o(":"),rl=i(),wo=t("div"),il=i(),gs=t("p"),cl=o("The function keeps going forever, until it reaches "),mo=t("code"),pl=o("n"),kl=o(" attempt."),hl=i(),Fe=t("p"),yl=o("If you stare at the code hard enough, you would notice that the code starts to repeat itself:"),vl=i(),Ne=t("p"),q=t("span"),go=t("picture"),qe=t("source"),C=t("img"),dl=i(),We=t("p"),ul=o("Note that the code within the outer red square is the same as the code within the inner red square, which is the same as the inner inner red square ..."),xl=i(),$e=t("p"),fl=o("So, let's extract the code within the red square out into a function and replace the red squares with the function:"),wl=i(),_o=t("div"),ml=i(),Je=t("p"),gl=o("And there you go, retrying an asynchronous function with callback pattern."),_l=i(),Ue=t("p"),El=o("Does it work? Well, we have to test it to verify it. Stay till the end to see how we are going to write unit test to verify it."),ut=i(),h=t("section"),Be=t("h2"),_s=t("a"),bl=o("The promise chain"),Dl=i(),Es=t("p"),Cl=o("A "),bs=t("a"),Pl=o("Promise"),Tl=o(", according to MDN, object represents the eventual completion of an asynchronous operation, and its resulting value."),Ol=i(),b=t("p"),Il=o("A Promise object provides "),Eo=t("code"),Ll=o(".then"),Hl=o(" and "),bo=t("code"),Sl=o(".catch"),Ml=o(" method, which takes in callback function to be called when the promise is resolved or rejected respectively. The "),Do=t("code"),jl=o(".then"),Al=o(" and "),Co=t("code"),Vl=o(".catch"),Fl=o(" method then returns a new Promise of the return value of the callback function."),Nl=i(),Po=t("div"),ql=i(),O=t("p"),Wl=o("The chaining of "),To=t("code"),$l=o(".then"),Jl=o(" and "),Oo=t("code"),Ul=o(".catch"),Bl=o(" is a common pattern, called "),Ds=t("a"),Rl=o("Promise chaining"),zl=o("."),Gl=i(),W=t("p"),Yl=o("Now, lets implement the "),Io=t("code"),Xl=o("retry"),Zl=o(" function, which takes in the asynchronous function to retry, "),Lo=t("code"),Kl=o("fn"),Ql=o(" and return a promise, which resolved when the function succeeded or resolved after failing all the retry attempts."),sr=i(),Ho=t("div"),or=i(),Cs=t("p"),ar=o("The first thing we are going to do is to call the function "),So=t("code"),er=o("fn"),tr=o(":"),nr=i(),Mo=t("div"),lr=i(),$=t("p"),rr=o("We need to retry calling "),jo=t("code"),ir=o("fn"),cr=o(" again, if the first "),Ao=t("code"),pr=o("fn"),kr=o(" is rejected"),hr=i(),Vo=t("div"),yr=i(),Ps=t("p"),vr=o("If that new promise rejected again, we retry by calling "),Fo=t("code"),dr=o("fn"),ur=o(" again"),xr=i(),No=t("div"),fr=i(),I=t("p"),wr=o("The last promise "),Re=t("em"),mr=o("(promise#3)"),gr=o(" will reject if the 3rd "),qo=t("code"),_r=o("fn()"),Er=o(" attempt rejects, and resolve if any of the "),Wo=t("code"),br=o("fn()"),Dr=o(" attempts resolve."),Cr=i(),J=t("p"),Pr=o("The callback method within "),$o=t("code"),Tr=o(".catch"),Or=o(" will be called only when the previous "),Jo=t("code"),Ir=o("fn()"),Lr=o(" attempt rejects."),Hr=i(),U=t("p"),Sr=o("We are going to return a rejected promise with the error indicating max retries has met, if the last promise "),Uo=t("code"),Mr=o("(promise#3)"),jr=o(" rejected, and a resolved promise with the result from "),Bo=t("code"),Ar=o("fn()"),Vr=o("."),Fr=i(),Ro=t("div"),Nr=i(),ze=t("p"),qr=o("And we can make the code more concise, as the following two are equivalent, in terms of what is being resolved and rejected:"),Wr=i(),zo=t("div"),$r=i(),Ts=t("p"),Jr=o("Also, we can substitute the variable "),Go=t("code"),Ur=o("promise3"),Br=o(" with it's promise chain value:"),Rr=i(),Yo=t("div"),zr=i(),Os=t("p"),Gr=o("Now, instead of always retry at most 3 times, we are going to retry at most "),Xo=t("code"),Yr=o("n"),Xr=o(" times."),Zr=i(),Is=t("p"),Kr=o("So we are going to introduce a new argument, "),Zo=t("code"),Qr=o("n"),si=o(":"),oi=i(),Ko=t("div"),ai=i(),B=t("p"),ei=o("Instead of writing "),Qo=t("code"),ti=o(".catch(() => fn())"),ni=i(),sa=t("code"),li=o("n"),ri=o(" number of times, we can build the Promise up using a for loop."),ii=i(),Ge=t("p"),Ls=t("strong"),ci=o("Assuming "),oa=t("code"),pi=o("n"),ki=o(" is always greater or equal to 1,"),hi=i(),aa=t("div"),yi=i(),L=t("p"),vi=o("What if "),ea=t("code"),di=o("n"),ui=o(" is "),ta=t("code"),xi=o("0"),fi=o(" or negative? We shouldn't call "),na=t("code"),wi=o("fn()"),mi=o(" at all!"),gi=i(),la=t("div"),_i=i(),R=t("p"),Ei=o("Well, this maybe a little bit inelegant, having to execute the "),ra=t("code"),bi=o("if (!promise) ... else ..."),Di=o(" on every loop, we can initialise the promise with a rejected promise, so that we can treat the 1st "),ia=t("code"),Ci=o("fn()"),Pi=o(" called as the 1st retry:"),Ti=i(),ca=t("div"),Oi=i(),Ye=t("p"),Ii=o("And there you go, retrying an asynchronous function with promise chain."),xt=i(),p=t("section"),Xe=t("h2"),Hs=t("a"),Li=o("Async await"),Hi=i(),Ss=t("p"),Si=o("When you use a promise, you need to use "),pa=t("code"),Mi=o(".then"),ji=o(" to get the resolved value, and that happened asynchronously."),Ai=i(),Ze=t("p"),Vi=o("Meaning, if you have"),Fi=i(),ka=t("div"),Ni=i(),Ke=t("p"),qi=o("You would see"),Wi=i(),ha=t("div"),$i=i(),Qe=t("p"),Ji=o("first, and then some time later,"),Ui=i(),ya=t("div"),Bi=i(),Ms=t("p"),Ri=o("This is because the function in the "),va=t("code"),zi=o(".then"),Gi=o(" is called asynchronously, it is executed in a separate timeline of execution, so to speak."),Yi=i(),z=t("p"),Xi=o("And "),da=t("code"),Zi=o("async"),Ki=o(" + "),ua=t("code"),Qi=o("await"),sc=o(" in JavaScript allow us to stitch multiple separate timeline of execution into disguisedly 1 timeline of execution flow."),oc=i(),js=t("p"),ac=o("Everytime when we "),xa=t("code"),ec=o("await"),tc=o(", we jump into a different asynchronous timeline."),nc=i(),As=t("p"),lc=o("So, with the code with Promise + "),fa=t("code"),rc=o(".then"),ic=o(":"),cc=i(),wa=t("div"),pc=i(),G=t("p"),kc=o("can be written in "),ma=t("code"),hc=o("async"),yc=o(" + "),ga=t("code"),vc=o("await"),dc=o(" in the following manner:"),uc=i(),_a=t("div"),xc=i(),H=t("p"),fc=o("Now, lets implement the "),Ea=t("code"),wc=o("retry"),mc=o(" function using "),ba=t("code"),gc=o("async"),_c=o(" + "),Da=t("code"),Ec=o("await"),bc=o("."),Dc=i(),Ca=t("div"),Cc=i(),Vs=t("p"),Pc=o("The first thing we are going to do is to call the function "),Pa=t("code"),Tc=o("fn"),Oc=o(":"),Ic=i(),Ta=t("div"),Lc=i(),E=t("p"),Hc=o("We need to retry calling "),Oa=t("code"),Sc=o("fn"),Mc=o(" again, if the first "),Ia=t("code"),jc=o("fn"),Ac=o(" is rejected. Instead of "),La=t("code"),Vc=o(".catch"),Fc=o(", we use "),Ha=t("code"),Nc=o("await"),qc=o(" + "),Sa=t("code"),Wc=o("try catch"),$c=i(),Ma=t("div"),Jc=i(),Y=t("p"),Uc=o("If the 2nd "),ja=t("code"),Bc=o("fn()"),Rc=o(" rejected again, we retry by calling "),Aa=t("code"),zc=o("fn"),Gc=o(" again"),Yc=i(),Va=t("div"),Xc=i(),Fs=t("p"),Zc=o("And if the last "),Fa=t("code"),Kc=o("fn()"),Qc=o(" rejected again, we are going to return a rejected promise with an error indicating max retries has met by throw the error"),sp=i(),Na=t("div"),op=i(),qa=t("p"),ap=o("Now, if we need to return a Promise resolved with the resolved value from "),Wa=t("code"),ep=o("fn()"),tp=i(),$a=t("div"),np=i(),X=t("p"),lp=o("Since we are ending early in the "),Ja=t("code"),rp=o("try"),ip=o(" block, and we are not using the error from the "),Ua=t("code"),cp=o("catch"),pp=o(" block, we can make the code less nested"),kp=i(),Ba=t("div"),hp=i(),Ns=t("p"),yp=o("Now, instead of always retry at most 3 times, we are going to retry at most "),Ra=t("code"),vp=o("n"),dp=o(" times."),up=i(),qs=t("p"),xp=o("So we are going to introduce a new argument, "),za=t("code"),fp=o("n"),wp=o(":"),mp=i(),Ga=t("div"),gp=i(),Z=t("p"),_p=o("Instead of writing it "),Ya=t("code"),Ep=o("n"),bp=o(" number of times, we can achieve it using a "),Xa=t("code"),Dp=o("for"),Cp=o(" loop:"),Pp=i(),Za=t("div"),Tp=i(),K=t("p"),Op=o("And there you go, retrying an asynchronous function using "),Ka=t("code"),Ip=o("async"),Lp=o(" + "),Qa=t("code"),Hp=o("await"),Sp=o("."),ft=i(),x=t("section"),st=t("h2"),Ws=t("a"),Mp=o("Testing"),jp=i(),Q=t("p"),Ap=o("To test whether our "),se=t("code"),Vp=o("retry"),Fp=o(" function works, we need to have a max number of retry in mind, say 3. And we need a function, "),oe=t("code"),Np=o("fn"),qp=o(" that we can control when it succeed and when it failed."),Wp=i(),ot=t("p"),$p=o("So we can have the following test cases:"),Jp=i(),S=t("ul"),$s=t("li"),ae=t("code"),Up=o("fn"),Bp=o(" always succeed;"),Js=t("ul"),Us=t("li"),Rp=o("verify "),ee=t("code"),zp=o("fn"),Gp=o(" get called only 1 time"),Yp=i(),at=t("li"),Xp=o("verify we get the return value from the 1st attempt"),Zp=i(),Bs=t("li"),te=t("code"),Kp=o("fn"),Qp=o(" failed on 1st attempt, and succeed thereafter;"),Rs=t("ul"),zs=t("li"),sk=o("verify "),ne=t("code"),ok=o("fn"),ak=o(" get called only 2 times"),ek=i(),et=t("li"),tk=o("verify we get the return value from the 2nd attempt"),nk=i(),Gs=t("li"),le=t("code"),lk=o("fn"),rk=o(" failed on 1st, 2nd attempt, and succeed thereafter;"),Ys=t("ul"),Xs=t("li"),ik=o("verify "),re=t("code"),ck=o("fn"),pk=o(" get called only 3 times"),kk=i(),tt=t("li"),hk=o("verify we get the return value from the 3rd attempt"),yk=i(),Zs=t("li"),ie=t("code"),vk=o("fn"),dk=o(" failed on 1st, 2nd, 3rd attempt, and succeed thereafter;"),Ks=t("ul"),Qs=t("li"),uk=o("verify "),ce=t("code"),xk=o("fn"),fk=o(" get called only 3 times"),wk=i(),nt=t("li"),mk=o("verify we get the max retry error"),gk=i(),so=t("p"),_k=o("So, the key is to devise such "),pe=t("code"),Ek=o("fn"),bk=o(" that we can control when it succeed and when it failed."),Dk=i(),lt=t("p"),Ck=o("We can create a function that returns such function"),Pk=i(),ke=t("div"),Tk=i(),rt=t("p"),Ok=o("The function takes in number indicating how many time the return function would fail, before succeeding thereafter"),Ik=i(),he=t("div"),Lk=i(),it=t("p"),Hk=o("To know how many times the function is called, we can track it with a variable"),Sk=i(),ye=t("div"),Mk=i(),ct=t("p"),jk=o("As long as the number of times called is less than the number of time it should fail, it will fail."),Ak=i(),ve=t("div"),Vk=i(),pt=t("p"),Fk=o('Next, to verify the function get called a certain number of times, we can create a "spy" function:'),Nk=i(),de=t("div"),qk=i(),kt=t("p"),Wk=o("So, let's put all of them together:"),$k=i(),ue=t("div"),wt=i(),P=t("section"),ht=t("h2"),oo=t("a"),Jk=o("Closing Note"),Uk=i(),ss=t("p"),Bk=o("We've seen how we can retry an asynchronous function using the callback pattern, promise chain pattern and "),xe=t("code"),Rk=o("async"),zk=o(" + "),fe=t("code"),Gk=o("await"),Yk=o("."),Xk=i(),yt=t("p"),Zk=o("Each of the 3 methods is important in its on right, albeit some is more verbose than another."),Kk=i(),vt=t("p"),Qk=o("Lastly, we also cover how to write test to verify our code, and also how to create the mock function to facilitate our test cases."),this.h()},l(u){w=n(u,"P",{});var g=l(w);j=a(g,"JavaScript is a single-threaded programming language, which means only one thing can happen at a time in a single thread."),g.forEach(e),A=c(u),V=n(u,"P",{});var th=l(V);m=a(th,"That\u2019s where asynchronous JavaScript comes into play. Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread."),th.forEach(e),D=c(u),N=n(u,"P",{});var nh=l(N);tn=a(nh,"In this article, I'm going to show how you can retry an asynchronous function in JavaScript, using the callback pattern, promise chain pattern and async await. Also, I'll show you how to write test to verify it works."),nh.forEach(e),dt=c(u),v=n(u,"SECTION",{});var d=l(v);Se=n(d,"H2",{});var lh=l(Se);cs=n(lh,"A",{href:!0,id:!0});var rh=l(cs);nn=a(rh,"The callback pattern"),rh.forEach(e),lh.forEach(e),ln=c(d),ps=n(d,"P",{});var mt=l(ps);rn=a(mt,"Let's take a look at retrying asynchronous function that takes in a callback function that follows "),ks=n(mt,"A",{href:!0,rel:!0});var ih=l(ks);cn=a(ih,"the callback convention"),ih.forEach(e),pn=a(mt,":"),mt.forEach(e),kn=c(d),hs=n(d,"UL",{});var gt=l(hs);Me=n(gt,"LI",{});var ch=l(Me);hn=a(ch,"The first argument of the callback function is an error object"),ch.forEach(e),yn=c(gt),je=n(gt,"LI",{});var ph=l(je);vn=a(ph,"The second argument contains the callback results."),ph.forEach(e),gt.forEach(e),dn=c(d),eo=n(d,"DIV",{class:!0});var vd=l(eo);vd.forEach(e),un=c(d),T=n(d,"P",{});var os=l(T);xn=a(os,"So we are going to implement the "),to=n(os,"CODE",{class:!0});var kh=l(to);fn=a(kh,"retry"),kh.forEach(e),wn=a(os," function, that takes in the asynchronous function to retry, "),no=n(os,"CODE",{class:!0});var hh=l(no);mn=a(hh,"fn"),hh.forEach(e),gn=a(os," and a callback function, "),lo=n(os,"CODE",{class:!0});var yh=l(lo);_n=a(yh,"cb"),yh.forEach(e),En=a(os,", that will be called when the function succeeded or failed after all the retry attempts."),os.forEach(e),bn=c(d),ro=n(d,"DIV",{class:!0});var dd=l(ro);dd.forEach(e),Dn=c(d),ys=n(d,"P",{});var _t=l(ys);Cn=a(_t,"The first thing we are going to do is to call the function "),io=n(_t,"CODE",{class:!0});var vh=l(io);Pn=a(vh,"fn"),vh.forEach(e),Tn=a(_t,":"),_t.forEach(e),On=c(d),co=n(d,"DIV",{class:!0});var ud=l(co);ud.forEach(e),In=c(d),vs=n(d,"P",{});var Et=l(vs);Ln=a(Et,"We check if there's an error, if there's no error, we can call the "),po=n(Et,"CODE",{class:!0});var dh=l(po);Hn=a(dh,"cb"),dh.forEach(e),Sn=a(Et," function to indicate the function succeeded. However, if there's an error, we are going to call the function again to retry."),Et.forEach(e),Mn=c(d),ko=n(d,"DIV",{class:!0});var xd=l(ko);xd.forEach(e),jn=c(d),Ae=n(d,"P",{});var uh=l(Ae);An=a(uh,"Let's retry at most 3 times:"),uh.forEach(e),Vn=c(d),ho=n(d,"DIV",{class:!0});var fd=l(ho);fd.forEach(e),Fn=c(d),ds=n(d,"P",{});var bt=l(ds);Nn=a(bt,"Notice that it starts to get unwieldy as we are nesting more callback functions. It's hard to figure out which close bracket "),yo=n(bt,"CODE",{class:!0});var xh=l(yo);qn=a(xh,"}"),xh.forEach(e),Wn=a(bt," is belong to without proper indentation."),bt.forEach(e),$n=c(d),us=n(d,"P",{});var Dt=l(us);Jn=a(Dt,"This is the so-called "),xs=n(Dt,"A",{href:!0,rel:!0});var fh=l(xs);Un=a(fh,'"Callback Hell"'),fh.forEach(e),Bn=a(Dt," in JavaScript."),Dt.forEach(e),Rn=c(d),Ve=n(d,"P",{});var wh=l(Ve);zn=a(wh,"Let's make it more unbearable to prove the point by flipping the if case:"),wh.forEach(e),Gn=c(d),vo=n(d,"DIV",{class:!0});var wd=l(vo);wd.forEach(e),Yn=c(d),fs=n(d,"P",{});var Ct=l(fs);Xn=a(Ct,"Now can you tell which "),uo=n(Ct,"CODE",{class:!0});var mh=l(uo);Zn=a(mh,"data"),mh.forEach(e),Kn=a(Ct," is belong to which function?"),Ct.forEach(e),Qn=c(d),ws=n(d,"P",{});var Pt=l(ws);sl=a(Pt,"Now, instead of always retry at most 3 times, we are going to retry at most "),xo=n(Pt,"CODE",{class:!0});var gh=l(xo);ol=a(gh,"n"),gh.forEach(e),al=a(Pt," times."),Pt.forEach(e),el=c(d),ms=n(d,"P",{});var Tt=l(ms);tl=a(Tt,"So we are going to introduce a new argument, "),fo=n(Tt,"CODE",{class:!0});var _h=l(fo);nl=a(_h,"n"),_h.forEach(e),ll=a(Tt,":"),Tt.forEach(e),rl=c(d),wo=n(d,"DIV",{class:!0});var md=l(wo);md.forEach(e),il=c(d),gs=n(d,"P",{});var Ot=l(gs);cl=a(Ot,"The function keeps going forever, until it reaches "),mo=n(Ot,"CODE",{class:!0});var Eh=l(mo);pl=a(Eh,"n"),Eh.forEach(e),kl=a(Ot," attempt."),Ot.forEach(e),hl=c(d),Fe=n(d,"P",{});var bh=l(Fe);yl=a(bh,"If you stare at the code hard enough, you would notice that the code starts to repeat itself:"),bh.forEach(e),vl=c(d),Ne=n(d,"P",{});var Dh=l(Ne);q=n(Dh,"SPAN",{style:!0});var Ch=l(q);go=n(Ch,"PICTURE",{});var sh=l(go);qe=n(sh,"SOURCE",{type:!0,srcset:!0}),C=n(sh,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),sh.forEach(e),Ch.forEach(e),Dh.forEach(e),dl=c(d),We=n(d,"P",{});var Ph=l(We);ul=a(Ph,"Note that the code within the outer red square is the same as the code within the inner red square, which is the same as the inner inner red square ..."),Ph.forEach(e),xl=c(d),$e=n(d,"P",{});var Th=l($e);fl=a(Th,"So, let's extract the code within the red square out into a function and replace the red squares with the function:"),Th.forEach(e),wl=c(d),_o=n(d,"DIV",{class:!0});var gd=l(_o);gd.forEach(e),ml=c(d),Je=n(d,"P",{});var Oh=l(Je);gl=a(Oh,"And there you go, retrying an asynchronous function with callback pattern."),Oh.forEach(e),_l=c(d),Ue=n(d,"P",{});var Ih=l(Ue);El=a(Ih,"Does it work? Well, we have to test it to verify it. Stay till the end to see how we are going to write unit test to verify it."),Ih.forEach(e),d.forEach(e),ut=c(u),h=n(u,"SECTION",{});var y=l(h);Be=n(y,"H2",{});var Lh=l(Be);_s=n(Lh,"A",{href:!0,id:!0});var Hh=l(_s);bl=a(Hh,"The promise chain"),Hh.forEach(e),Lh.forEach(e),Dl=c(y),Es=n(y,"P",{});var It=l(Es);Cl=a(It,"A "),bs=n(It,"A",{href:!0,rel:!0});var Sh=l(bs);Pl=a(Sh,"Promise"),Sh.forEach(e),Tl=a(It,", according to MDN, object represents the eventual completion of an asynchronous operation, and its resulting value."),It.forEach(e),Ol=c(y),b=n(y,"P",{});var F=l(b);Il=a(F,"A Promise object provides "),Eo=n(F,"CODE",{class:!0});var Mh=l(Eo);Ll=a(Mh,".then"),Mh.forEach(e),Hl=a(F," and "),bo=n(F,"CODE",{class:!0});var jh=l(bo);Sl=a(jh,".catch"),jh.forEach(e),Ml=a(F," method, which takes in callback function to be called when the promise is resolved or rejected respectively. The "),Do=n(F,"CODE",{class:!0});var Ah=l(Do);jl=a(Ah,".then"),Ah.forEach(e),Al=a(F," and "),Co=n(F,"CODE",{class:!0});var Vh=l(Co);Vl=a(Vh,".catch"),Vh.forEach(e),Fl=a(F," method then returns a new Promise of the return value of the callback function."),F.forEach(e),Nl=c(y),Po=n(y,"DIV",{class:!0});var _d=l(Po);_d.forEach(e),ql=c(y),O=n(y,"P",{});var as=l(O);Wl=a(as,"The chaining of "),To=n(as,"CODE",{class:!0});var Fh=l(To);$l=a(Fh,".then"),Fh.forEach(e),Jl=a(as," and "),Oo=n(as,"CODE",{class:!0});var Nh=l(Oo);Ul=a(Nh,".catch"),Nh.forEach(e),Bl=a(as," is a common pattern, called "),Ds=n(as,"A",{href:!0,rel:!0});var qh=l(Ds);Rl=a(qh,"Promise chaining"),qh.forEach(e),zl=a(as,"."),as.forEach(e),Gl=c(y),W=n(y,"P",{});var we=l(W);Yl=a(we,"Now, lets implement the "),Io=n(we,"CODE",{class:!0});var Wh=l(Io);Xl=a(Wh,"retry"),Wh.forEach(e),Zl=a(we," function, which takes in the asynchronous function to retry, "),Lo=n(we,"CODE",{class:!0});var $h=l(Lo);Kl=a($h,"fn"),$h.forEach(e),Ql=a(we," and return a promise, which resolved when the function succeeded or resolved after failing all the retry attempts."),we.forEach(e),sr=c(y),Ho=n(y,"DIV",{class:!0});var Ed=l(Ho);Ed.forEach(e),or=c(y),Cs=n(y,"P",{});var Lt=l(Cs);ar=a(Lt,"The first thing we are going to do is to call the function "),So=n(Lt,"CODE",{class:!0});var Jh=l(So);er=a(Jh,"fn"),Jh.forEach(e),tr=a(Lt,":"),Lt.forEach(e),nr=c(y),Mo=n(y,"DIV",{class:!0});var bd=l(Mo);bd.forEach(e),lr=c(y),$=n(y,"P",{});var me=l($);rr=a(me,"We need to retry calling "),jo=n(me,"CODE",{class:!0});var Uh=l(jo);ir=a(Uh,"fn"),Uh.forEach(e),cr=a(me," again, if the first "),Ao=n(me,"CODE",{class:!0});var Bh=l(Ao);pr=a(Bh,"fn"),Bh.forEach(e),kr=a(me," is rejected"),me.forEach(e),hr=c(y),Vo=n(y,"DIV",{class:!0});var Dd=l(Vo);Dd.forEach(e),yr=c(y),Ps=n(y,"P",{});var Ht=l(Ps);vr=a(Ht,"If that new promise rejected again, we retry by calling "),Fo=n(Ht,"CODE",{class:!0});var Rh=l(Fo);dr=a(Rh,"fn"),Rh.forEach(e),ur=a(Ht," again"),Ht.forEach(e),xr=c(y),No=n(y,"DIV",{class:!0});var Cd=l(No);Cd.forEach(e),fr=c(y),I=n(y,"P",{});var es=l(I);wr=a(es,"The last promise "),Re=n(es,"EM",{});var zh=l(Re);mr=a(zh,"(promise#3)"),zh.forEach(e),gr=a(es," will reject if the 3rd "),qo=n(es,"CODE",{class:!0});var Gh=l(qo);_r=a(Gh,"fn()"),Gh.forEach(e),Er=a(es," attempt rejects, and resolve if any of the "),Wo=n(es,"CODE",{class:!0});var Yh=l(Wo);br=a(Yh,"fn()"),Yh.forEach(e),Dr=a(es," attempts resolve."),es.forEach(e),Cr=c(y),J=n(y,"P",{});var ge=l(J);Pr=a(ge,"The callback method within "),$o=n(ge,"CODE",{class:!0});var Xh=l($o);Tr=a(Xh,".catch"),Xh.forEach(e),Or=a(ge," will be called only when the previous "),Jo=n(ge,"CODE",{class:!0});var Zh=l(Jo);Ir=a(Zh,"fn()"),Zh.forEach(e),Lr=a(ge," attempt rejects."),ge.forEach(e),Hr=c(y),U=n(y,"P",{});var _e=l(U);Sr=a(_e,"We are going to return a rejected promise with the error indicating max retries has met, if the last promise "),Uo=n(_e,"CODE",{class:!0});var Kh=l(Uo);Mr=a(Kh,"(promise#3)"),Kh.forEach(e),jr=a(_e," rejected, and a resolved promise with the result from "),Bo=n(_e,"CODE",{class:!0});var Qh=l(Bo);Ar=a(Qh,"fn()"),Qh.forEach(e),Vr=a(_e,"."),_e.forEach(e),Fr=c(y),Ro=n(y,"DIV",{class:!0});var Pd=l(Ro);Pd.forEach(e),Nr=c(y),ze=n(y,"P",{});var sy=l(ze);qr=a(sy,"And we can make the code more concise, as the following two are equivalent, in terms of what is being resolved and rejected:"),sy.forEach(e),Wr=c(y),zo=n(y,"DIV",{class:!0});var Td=l(zo);Td.forEach(e),$r=c(y),Ts=n(y,"P",{});var St=l(Ts);Jr=a(St,"Also, we can substitute the variable "),Go=n(St,"CODE",{class:!0});var oy=l(Go);Ur=a(oy,"promise3"),oy.forEach(e),Br=a(St," with it's promise chain value:"),St.forEach(e),Rr=c(y),Yo=n(y,"DIV",{class:!0});var Od=l(Yo);Od.forEach(e),zr=c(y),Os=n(y,"P",{});var Mt=l(Os);Gr=a(Mt,"Now, instead of always retry at most 3 times, we are going to retry at most "),Xo=n(Mt,"CODE",{class:!0});var ay=l(Xo);Yr=a(ay,"n"),ay.forEach(e),Xr=a(Mt," times."),Mt.forEach(e),Zr=c(y),Is=n(y,"P",{});var jt=l(Is);Kr=a(jt,"So we are going to introduce a new argument, "),Zo=n(jt,"CODE",{class:!0});var ey=l(Zo);Qr=a(ey,"n"),ey.forEach(e),si=a(jt,":"),jt.forEach(e),oi=c(y),Ko=n(y,"DIV",{class:!0});var Id=l(Ko);Id.forEach(e),ai=c(y),B=n(y,"P",{});var Ee=l(B);ei=a(Ee,"Instead of writing "),Qo=n(Ee,"CODE",{class:!0});var ty=l(Qo);ti=a(ty,".catch(() => fn())"),ty.forEach(e),ni=c(Ee),sa=n(Ee,"CODE",{class:!0});var ny=l(sa);li=a(ny,"n"),ny.forEach(e),ri=a(Ee," number of times, we can build the Promise up using a for loop."),Ee.forEach(e),ii=c(y),Ge=n(y,"P",{});var ly=l(Ge);Ls=n(ly,"STRONG",{});var At=l(Ls);ci=a(At,"Assuming "),oa=n(At,"CODE",{class:!0});var ry=l(oa);pi=a(ry,"n"),ry.forEach(e),ki=a(At," is always greater or equal to 1,"),At.forEach(e),ly.forEach(e),hi=c(y),aa=n(y,"DIV",{class:!0});var Ld=l(aa);Ld.forEach(e),yi=c(y),L=n(y,"P",{});var ts=l(L);vi=a(ts,"What if "),ea=n(ts,"CODE",{class:!0});var iy=l(ea);di=a(iy,"n"),iy.forEach(e),ui=a(ts," is "),ta=n(ts,"CODE",{class:!0});var cy=l(ta);xi=a(cy,"0"),cy.forEach(e),fi=a(ts," or negative? We shouldn't call "),na=n(ts,"CODE",{class:!0});var py=l(na);wi=a(py,"fn()"),py.forEach(e),mi=a(ts," at all!"),ts.forEach(e),gi=c(y),la=n(y,"DIV",{class:!0});var Hd=l(la);Hd.forEach(e),_i=c(y),R=n(y,"P",{});var be=l(R);Ei=a(be,"Well, this maybe a little bit inelegant, having to execute the "),ra=n(be,"CODE",{class:!0});var ky=l(ra);bi=a(ky,"if (!promise) ... else ..."),ky.forEach(e),Di=a(be," on every loop, we can initialise the promise with a rejected promise, so that we can treat the 1st "),ia=n(be,"CODE",{class:!0});var hy=l(ia);Ci=a(hy,"fn()"),hy.forEach(e),Pi=a(be," called as the 1st retry:"),be.forEach(e),Ti=c(y),ca=n(y,"DIV",{class:!0});var Sd=l(ca);Sd.forEach(e),Oi=c(y),Ye=n(y,"P",{});var yy=l(Ye);Ii=a(yy,"And there you go, retrying an asynchronous function with promise chain."),yy.forEach(e),y.forEach(e),xt=c(u),p=n(u,"SECTION",{});var k=l(p);Xe=n(k,"H2",{});var vy=l(Xe);Hs=n(vy,"A",{href:!0,id:!0});var dy=l(Hs);Li=a(dy,"Async await"),dy.forEach(e),vy.forEach(e),Hi=c(k),Ss=n(k,"P",{});var Vt=l(Ss);Si=a(Vt,"When you use a promise, you need to use "),pa=n(Vt,"CODE",{class:!0});var uy=l(pa);Mi=a(uy,".then"),uy.forEach(e),ji=a(Vt," to get the resolved value, and that happened asynchronously."),Vt.forEach(e),Ai=c(k),Ze=n(k,"P",{});var xy=l(Ze);Vi=a(xy,"Meaning, if you have"),xy.forEach(e),Fi=c(k),ka=n(k,"DIV",{class:!0});var Md=l(ka);Md.forEach(e),Ni=c(k),Ke=n(k,"P",{});var fy=l(Ke);qi=a(fy,"You would see"),fy.forEach(e),Wi=c(k),ha=n(k,"DIV",{class:!0});var jd=l(ha);jd.forEach(e),$i=c(k),Qe=n(k,"P",{});var wy=l(Qe);Ji=a(wy,"first, and then some time later,"),wy.forEach(e),Ui=c(k),ya=n(k,"DIV",{class:!0});var Ad=l(ya);Ad.forEach(e),Bi=c(k),Ms=n(k,"P",{});var Ft=l(Ms);Ri=a(Ft,"This is because the function in the "),va=n(Ft,"CODE",{class:!0});var my=l(va);zi=a(my,".then"),my.forEach(e),Gi=a(Ft," is called asynchronously, it is executed in a separate timeline of execution, so to speak."),Ft.forEach(e),Yi=c(k),z=n(k,"P",{});var De=l(z);Xi=a(De,"And "),da=n(De,"CODE",{class:!0});var gy=l(da);Zi=a(gy,"async"),gy.forEach(e),Ki=a(De," + "),ua=n(De,"CODE",{class:!0});var _y=l(ua);Qi=a(_y,"await"),_y.forEach(e),sc=a(De," in JavaScript allow us to stitch multiple separate timeline of execution into disguisedly 1 timeline of execution flow."),De.forEach(e),oc=c(k),js=n(k,"P",{});var Nt=l(js);ac=a(Nt,"Everytime when we "),xa=n(Nt,"CODE",{class:!0});var Ey=l(xa);ec=a(Ey,"await"),Ey.forEach(e),tc=a(Nt,", we jump into a different asynchronous timeline."),Nt.forEach(e),nc=c(k),As=n(k,"P",{});var qt=l(As);lc=a(qt,"So, with the code with Promise + "),fa=n(qt,"CODE",{class:!0});var by=l(fa);rc=a(by,".then"),by.forEach(e),ic=a(qt,":"),qt.forEach(e),cc=c(k),wa=n(k,"DIV",{class:!0});var Vd=l(wa);Vd.forEach(e),pc=c(k),G=n(k,"P",{});var Ce=l(G);kc=a(Ce,"can be written in "),ma=n(Ce,"CODE",{class:!0});var Dy=l(ma);hc=a(Dy,"async"),Dy.forEach(e),yc=a(Ce," + "),ga=n(Ce,"CODE",{class:!0});var Cy=l(ga);vc=a(Cy,"await"),Cy.forEach(e),dc=a(Ce," in the following manner:"),Ce.forEach(e),uc=c(k),_a=n(k,"DIV",{class:!0});var Fd=l(_a);Fd.forEach(e),xc=c(k),H=n(k,"P",{});var ns=l(H);fc=a(ns,"Now, lets implement the "),Ea=n(ns,"CODE",{class:!0});var Py=l(Ea);wc=a(Py,"retry"),Py.forEach(e),mc=a(ns," function using "),ba=n(ns,"CODE",{class:!0});var Ty=l(ba);gc=a(Ty,"async"),Ty.forEach(e),_c=a(ns," + "),Da=n(ns,"CODE",{class:!0});var Oy=l(Da);Ec=a(Oy,"await"),Oy.forEach(e),bc=a(ns,"."),ns.forEach(e),Dc=c(k),Ca=n(k,"DIV",{class:!0});var Nd=l(Ca);Nd.forEach(e),Cc=c(k),Vs=n(k,"P",{});var Wt=l(Vs);Pc=a(Wt,"The first thing we are going to do is to call the function "),Pa=n(Wt,"CODE",{class:!0});var Iy=l(Pa);Tc=a(Iy,"fn"),Iy.forEach(e),Oc=a(Wt,":"),Wt.forEach(e),Ic=c(k),Ta=n(k,"DIV",{class:!0});var qd=l(Ta);qd.forEach(e),Lc=c(k),E=n(k,"P",{});var M=l(E);Hc=a(M,"We need to retry calling "),Oa=n(M,"CODE",{class:!0});var Ly=l(Oa);Sc=a(Ly,"fn"),Ly.forEach(e),Mc=a(M," again, if the first "),Ia=n(M,"CODE",{class:!0});var Hy=l(Ia);jc=a(Hy,"fn"),Hy.forEach(e),Ac=a(M," is rejected. Instead of "),La=n(M,"CODE",{class:!0});var Sy=l(La);Vc=a(Sy,".catch"),Sy.forEach(e),Fc=a(M,", we use "),Ha=n(M,"CODE",{class:!0});var My=l(Ha);Nc=a(My,"await"),My.forEach(e),qc=a(M," + "),Sa=n(M,"CODE",{class:!0});var jy=l(Sa);Wc=a(jy,"try catch"),jy.forEach(e),M.forEach(e),$c=c(k),Ma=n(k,"DIV",{class:!0});var Wd=l(Ma);Wd.forEach(e),Jc=c(k),Y=n(k,"P",{});var Pe=l(Y);Uc=a(Pe,"If the 2nd "),ja=n(Pe,"CODE",{class:!0});var Ay=l(ja);Bc=a(Ay,"fn()"),Ay.forEach(e),Rc=a(Pe," rejected again, we retry by calling "),Aa=n(Pe,"CODE",{class:!0});var Vy=l(Aa);zc=a(Vy,"fn"),Vy.forEach(e),Gc=a(Pe," again"),Pe.forEach(e),Yc=c(k),Va=n(k,"DIV",{class:!0});var $d=l(Va);$d.forEach(e),Xc=c(k),Fs=n(k,"P",{});var $t=l(Fs);Zc=a($t,"And if the last "),Fa=n($t,"CODE",{class:!0});var Fy=l(Fa);Kc=a(Fy,"fn()"),Fy.forEach(e),Qc=a($t," rejected again, we are going to return a rejected promise with an error indicating max retries has met by throw the error"),$t.forEach(e),sp=c(k),Na=n(k,"DIV",{class:!0});var Jd=l(Na);Jd.forEach(e),op=c(k),qa=n(k,"P",{});var oh=l(qa);ap=a(oh,"Now, if we need to return a Promise resolved with the resolved value from "),Wa=n(oh,"CODE",{class:!0});var Ny=l(Wa);ep=a(Ny,"fn()"),Ny.forEach(e),oh.forEach(e),tp=c(k),$a=n(k,"DIV",{class:!0});var Ud=l($a);Ud.forEach(e),np=c(k),X=n(k,"P",{});var Te=l(X);lp=a(Te,"Since we are ending early in the "),Ja=n(Te,"CODE",{class:!0});var qy=l(Ja);rp=a(qy,"try"),qy.forEach(e),ip=a(Te," block, and we are not using the error from the "),Ua=n(Te,"CODE",{class:!0});var Wy=l(Ua);cp=a(Wy,"catch"),Wy.forEach(e),pp=a(Te," block, we can make the code less nested"),Te.forEach(e),kp=c(k),Ba=n(k,"DIV",{class:!0});var Bd=l(Ba);Bd.forEach(e),hp=c(k),Ns=n(k,"P",{});var Jt=l(Ns);yp=a(Jt,"Now, instead of always retry at most 3 times, we are going to retry at most "),Ra=n(Jt,"CODE",{class:!0});var $y=l(Ra);vp=a($y,"n"),$y.forEach(e),dp=a(Jt," times."),Jt.forEach(e),up=c(k),qs=n(k,"P",{});var Ut=l(qs);xp=a(Ut,"So we are going to introduce a new argument, "),za=n(Ut,"CODE",{class:!0});var Jy=l(za);fp=a(Jy,"n"),Jy.forEach(e),wp=a(Ut,":"),Ut.forEach(e),mp=c(k),Ga=n(k,"DIV",{class:!0});var Rd=l(Ga);Rd.forEach(e),gp=c(k),Z=n(k,"P",{});var Oe=l(Z);_p=a(Oe,"Instead of writing it "),Ya=n(Oe,"CODE",{class:!0});var Uy=l(Ya);Ep=a(Uy,"n"),Uy.forEach(e),bp=a(Oe," number of times, we can achieve it using a "),Xa=n(Oe,"CODE",{class:!0});var By=l(Xa);Dp=a(By,"for"),By.forEach(e),Cp=a(Oe," loop:"),Oe.forEach(e),Pp=c(k),Za=n(k,"DIV",{class:!0});var zd=l(Za);zd.forEach(e),Tp=c(k),K=n(k,"P",{});var Ie=l(K);Op=a(Ie,"And there you go, retrying an asynchronous function using "),Ka=n(Ie,"CODE",{class:!0});var Ry=l(Ka);Ip=a(Ry,"async"),Ry.forEach(e),Lp=a(Ie," + "),Qa=n(Ie,"CODE",{class:!0});var zy=l(Qa);Hp=a(zy,"await"),zy.forEach(e),Sp=a(Ie,"."),Ie.forEach(e),k.forEach(e),ft=c(u),x=n(u,"SECTION",{});var f=l(x);st=n(f,"H2",{});var Gy=l(st);Ws=n(Gy,"A",{href:!0,id:!0});var Yy=l(Ws);Mp=a(Yy,"Testing"),Yy.forEach(e),Gy.forEach(e),jp=c(f),Q=n(f,"P",{});var Le=l(Q);Ap=a(Le,"To test whether our "),se=n(Le,"CODE",{class:!0});var Xy=l(se);Vp=a(Xy,"retry"),Xy.forEach(e),Fp=a(Le," function works, we need to have a max number of retry in mind, say 3. And we need a function, "),oe=n(Le,"CODE",{class:!0});var Zy=l(oe);Np=a(Zy,"fn"),Zy.forEach(e),qp=a(Le," that we can control when it succeed and when it failed."),Le.forEach(e),Wp=c(f),ot=n(f,"P",{});var Ky=l(ot);$p=a(Ky,"So we can have the following test cases:"),Ky.forEach(e),Jp=c(f),S=n(f,"UL",{});var ls=l(S);$s=n(ls,"LI",{});var Bt=l($s);ae=n(Bt,"CODE",{class:!0});var Qy=l(ae);Up=a(Qy,"fn"),Qy.forEach(e),Bp=a(Bt," always succeed;"),Js=n(Bt,"UL",{});var Rt=l(Js);Us=n(Rt,"LI",{});var zt=l(Us);Rp=a(zt,"verify "),ee=n(zt,"CODE",{class:!0});var sv=l(ee);zp=a(sv,"fn"),sv.forEach(e),Gp=a(zt," get called only 1 time"),zt.forEach(e),Yp=c(Rt),at=n(Rt,"LI",{});var ov=l(at);Xp=a(ov,"verify we get the return value from the 1st attempt"),ov.forEach(e),Rt.forEach(e),Bt.forEach(e),Zp=c(ls),Bs=n(ls,"LI",{});var Gt=l(Bs);te=n(Gt,"CODE",{class:!0});var av=l(te);Kp=a(av,"fn"),av.forEach(e),Qp=a(Gt," failed on 1st attempt, and succeed thereafter;"),Rs=n(Gt,"UL",{});var Yt=l(Rs);zs=n(Yt,"LI",{});var Xt=l(zs);sk=a(Xt,"verify "),ne=n(Xt,"CODE",{class:!0});var ev=l(ne);ok=a(ev,"fn"),ev.forEach(e),ak=a(Xt," get called only 2 times"),Xt.forEach(e),ek=c(Yt),et=n(Yt,"LI",{});var tv=l(et);tk=a(tv,"verify we get the return value from the 2nd attempt"),tv.forEach(e),Yt.forEach(e),Gt.forEach(e),nk=c(ls),Gs=n(ls,"LI",{});var Zt=l(Gs);le=n(Zt,"CODE",{class:!0});var nv=l(le);lk=a(nv,"fn"),nv.forEach(e),rk=a(Zt," failed on 1st, 2nd attempt, and succeed thereafter;"),Ys=n(Zt,"UL",{});var Kt=l(Ys);Xs=n(Kt,"LI",{});var Qt=l(Xs);ik=a(Qt,"verify "),re=n(Qt,"CODE",{class:!0});var lv=l(re);ck=a(lv,"fn"),lv.forEach(e),pk=a(Qt," get called only 3 times"),Qt.forEach(e),kk=c(Kt),tt=n(Kt,"LI",{});var rv=l(tt);hk=a(rv,"verify we get the return value from the 3rd attempt"),rv.forEach(e),Kt.forEach(e),Zt.forEach(e),yk=c(ls),Zs=n(ls,"LI",{});var sn=l(Zs);ie=n(sn,"CODE",{class:!0});var iv=l(ie);vk=a(iv,"fn"),iv.forEach(e),dk=a(sn," failed on 1st, 2nd, 3rd attempt, and succeed thereafter;"),Ks=n(sn,"UL",{});var on=l(Ks);Qs=n(on,"LI",{});var an=l(Qs);uk=a(an,"verify "),ce=n(an,"CODE",{class:!0});var cv=l(ce);xk=a(cv,"fn"),cv.forEach(e),fk=a(an," get called only 3 times"),an.forEach(e),wk=c(on),nt=n(on,"LI",{});var pv=l(nt);mk=a(pv,"verify we get the max retry error"),pv.forEach(e),on.forEach(e),sn.forEach(e),ls.forEach(e),gk=c(f),so=n(f,"P",{});var en=l(so);_k=a(en,"So, the key is to devise such "),pe=n(en,"CODE",{class:!0});var kv=l(pe);Ek=a(kv,"fn"),kv.forEach(e),bk=a(en," that we can control when it succeed and when it failed."),en.forEach(e),Dk=c(f),lt=n(f,"P",{});var hv=l(lt);Ck=a(hv,"We can create a function that returns such function"),hv.forEach(e),Pk=c(f),ke=n(f,"DIV",{class:!0});var Gd=l(ke);Gd.forEach(e),Tk=c(f),rt=n(f,"P",{});var yv=l(rt);Ok=a(yv,"The function takes in number indicating how many time the return function would fail, before succeeding thereafter"),yv.forEach(e),Ik=c(f),he=n(f,"DIV",{class:!0});var Yd=l(he);Yd.forEach(e),Lk=c(f),it=n(f,"P",{});var vv=l(it);Hk=a(vv,"To know how many times the function is called, we can track it with a variable"),vv.forEach(e),Sk=c(f),ye=n(f,"DIV",{class:!0});var Xd=l(ye);Xd.forEach(e),Mk=c(f),ct=n(f,"P",{});var dv=l(ct);jk=a(dv,"As long as the number of times called is less than the number of time it should fail, it will fail."),dv.forEach(e),Ak=c(f),ve=n(f,"DIV",{class:!0});var Zd=l(ve);Zd.forEach(e),Vk=c(f),pt=n(f,"P",{});var uv=l(pt);Fk=a(uv,'Next, to verify the function get called a certain number of times, we can create a "spy" function:'),uv.forEach(e),Nk=c(f),de=n(f,"DIV",{class:!0});var Kd=l(de);Kd.forEach(e),qk=c(f),kt=n(f,"P",{});var xv=l(kt);Wk=a(xv,"So, let's put all of them together:"),xv.forEach(e),$k=c(f),ue=n(f,"DIV",{class:!0});var Qd=l(ue);Qd.forEach(e),f.forEach(e),wt=c(u),P=n(u,"SECTION",{});var rs=l(P);ht=n(rs,"H2",{});var fv=l(ht);oo=n(fv,"A",{href:!0,id:!0});var wv=l(oo);Jk=a(wv,"Closing Note"),wv.forEach(e),fv.forEach(e),Uk=c(rs),ss=n(rs,"P",{});var He=l(ss);Bk=a(He,"We've seen how we can retry an asynchronous function using the callback pattern, promise chain pattern and "),xe=n(He,"CODE",{class:!0});var mv=l(xe);Rk=a(mv,"async"),mv.forEach(e),zk=a(He," + "),fe=n(He,"CODE",{class:!0});var gv=l(fe);Gk=a(gv,"await"),gv.forEach(e),Yk=a(He,"."),He.forEach(e),Xk=c(rs),yt=n(rs,"P",{});var _v=l(yt);Zk=a(_v,"Each of the 3 methods is important in its on right, albeit some is more verbose than another."),_v.forEach(e),Kk=c(rs),vt=n(rs,"P",{});var Ev=l(vt);Qk=a(Ev,"Lastly, we also cover how to write test to verify our code, and also how to create the mock function to facilitate our test cases."),Ev.forEach(e),rs.forEach(e),this.h()},h(){r(cs,"href","#the-callback-pattern"),r(cs,"id","the-callback-pattern"),r(ks,"href","https://gist.github.com/sunnycmf/b2ad4f80a3b627f04ff2"),r(ks,"rel","nofollow"),r(eo,"class","code-section"),r(to,"class","inline"),r(no,"class","inline"),r(lo,"class","inline"),r(ro,"class","code-section"),r(io,"class","inline"),r(co,"class","code-section"),r(po,"class","inline"),r(ko,"class","code-section"),r(ho,"class","code-section"),r(yo,"class","inline"),r(xs,"href","http://callbackhell.com/"),r(xs,"rel","nofollow"),r(vo,"class","code-section"),r(uo,"class","inline"),r(xo,"class","inline"),r(fo,"class","inline"),r(wo,"class","code-section"),r(mo,"class","inline"),r(qe,"type","image/webp"),r(qe,"srcset",du+", "+vu+" 2x"),ku(C.src,eh=Cv)||r(C,"src",eh),r(C,"srcset",Cv+", "+uu+" 2x"),r(C,"loading","lazy"),is(C,"position","absolute"),is(C,"top","0"),is(C,"width","100%"),is(C,"height","100%"),r(C,"alt","recursive pattern"),is(q,"display","block"),is(q,"position","relative"),is(q,"padding-top","118.716%"),is(q,"width","100%"),r(_o,"class","code-section"),r(_s,"href","#the-promise-chain"),r(_s,"id","the-promise-chain"),r(bs,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"),r(bs,"rel","nofollow"),r(Eo,"class","inline"),r(bo,"class","inline"),r(Do,"class","inline"),r(Co,"class","inline"),r(Po,"class","code-section"),r(To,"class","inline"),r(Oo,"class","inline"),r(Ds,"href","https://www.javascripttutorial.net/es6/promise-chaining/"),r(Ds,"rel","nofollow"),r(Io,"class","inline"),r(Lo,"class","inline"),r(Ho,"class","code-section"),r(So,"class","inline"),r(Mo,"class","code-section"),r(jo,"class","inline"),r(Ao,"class","inline"),r(Vo,"class","code-section"),r(Fo,"class","inline"),r(No,"class","code-section"),r(qo,"class","inline"),r(Wo,"class","inline"),r($o,"class","inline"),r(Jo,"class","inline"),r(Uo,"class","inline"),r(Bo,"class","inline"),r(Ro,"class","code-section"),r(zo,"class","code-section"),r(Go,"class","inline"),r(Yo,"class","code-section"),r(Xo,"class","inline"),r(Zo,"class","inline"),r(Ko,"class","code-section"),r(Qo,"class","inline"),r(sa,"class","inline"),r(oa,"class","inline"),r(aa,"class","code-section"),r(ea,"class","inline"),r(ta,"class","inline"),r(na,"class","inline"),r(la,"class","code-section"),r(ra,"class","inline"),r(ia,"class","inline"),r(ca,"class","code-section"),r(Hs,"href","#async-await"),r(Hs,"id","async-await"),r(pa,"class","inline"),r(ka,"class","code-section"),r(ha,"class","code-section"),r(ya,"class","code-section"),r(va,"class","inline"),r(da,"class","inline"),r(ua,"class","inline"),r(xa,"class","inline"),r(fa,"class","inline"),r(wa,"class","code-section"),r(ma,"class","inline"),r(ga,"class","inline"),r(_a,"class","code-section"),r(Ea,"class","inline"),r(ba,"class","inline"),r(Da,"class","inline"),r(Ca,"class","code-section"),r(Pa,"class","inline"),r(Ta,"class","code-section"),r(Oa,"class","inline"),r(Ia,"class","inline"),r(La,"class","inline"),r(Ha,"class","inline"),r(Sa,"class","inline"),r(Ma,"class","code-section"),r(ja,"class","inline"),r(Aa,"class","inline"),r(Va,"class","code-section"),r(Fa,"class","inline"),r(Na,"class","code-section"),r(Wa,"class","inline"),r($a,"class","code-section"),r(Ja,"class","inline"),r(Ua,"class","inline"),r(Ba,"class","code-section"),r(Ra,"class","inline"),r(za,"class","inline"),r(Ga,"class","code-section"),r(Ya,"class","inline"),r(Xa,"class","inline"),r(Za,"class","code-section"),r(Ka,"class","inline"),r(Qa,"class","inline"),r(Ws,"href","#testing"),r(Ws,"id","testing"),r(se,"class","inline"),r(oe,"class","inline"),r(ae,"class","inline"),r(ee,"class","inline"),r(te,"class","inline"),r(ne,"class","inline"),r(le,"class","inline"),r(re,"class","inline"),r(ie,"class","inline"),r(ce,"class","inline"),r(pe,"class","inline"),r(ke,"class","code-section"),r(he,"class","code-section"),r(ye,"class","code-section"),r(ve,"class","code-section"),r(de,"class","code-section"),r(ue,"class","code-section"),r(oo,"href","#closing-note"),r(oo,"id","closing-note"),r(xe,"class","inline"),r(fe,"class","inline")},m(u,g){_(u,w,g),s(w,j),_(u,A,g),_(u,V,g),s(V,m),_(u,D,g),_(u,N,g),s(N,tn),_(u,dt,g),_(u,v,g),s(v,Se),s(Se,cs),s(cs,nn),s(v,ln),s(v,ps),s(ps,rn),s(ps,ks),s(ks,cn),s(ps,pn),s(v,kn),s(v,hs),s(hs,Me),s(Me,hn),s(hs,yn),s(hs,je),s(je,vn),s(v,dn),s(v,eo),eo.innerHTML=Tv,s(v,un),s(v,T),s(T,xn),s(T,to),s(to,fn),s(T,wn),s(T,no),s(no,mn),s(T,gn),s(T,lo),s(lo,_n),s(T,En),s(v,bn),s(v,ro),ro.innerHTML=Ov,s(v,Dn),s(v,ys),s(ys,Cn),s(ys,io),s(io,Pn),s(ys,Tn),s(v,On),s(v,co),co.innerHTML=Iv,s(v,In),s(v,vs),s(vs,Ln),s(vs,po),s(po,Hn),s(vs,Sn),s(v,Mn),s(v,ko),ko.innerHTML=Lv,s(v,jn),s(v,Ae),s(Ae,An),s(v,Vn),s(v,ho),ho.innerHTML=Hv,s(v,Fn),s(v,ds),s(ds,Nn),s(ds,yo),s(yo,qn),s(ds,Wn),s(v,$n),s(v,us),s(us,Jn),s(us,xs),s(xs,Un),s(us,Bn),s(v,Rn),s(v,Ve),s(Ve,zn),s(v,Gn),s(v,vo),vo.innerHTML=Sv,s(v,Yn),s(v,fs),s(fs,Xn),s(fs,uo),s(uo,Zn),s(fs,Kn),s(v,Qn),s(v,ws),s(ws,sl),s(ws,xo),s(xo,ol),s(ws,al),s(v,el),s(v,ms),s(ms,tl),s(ms,fo),s(fo,nl),s(ms,ll),s(v,rl),s(v,wo),wo.innerHTML=Mv,s(v,il),s(v,gs),s(gs,cl),s(gs,mo),s(mo,pl),s(gs,kl),s(v,hl),s(v,Fe),s(Fe,yl),s(v,vl),s(v,Ne),s(Ne,q),s(q,go),s(go,qe),s(go,C),s(v,dl),s(v,We),s(We,ul),s(v,xl),s(v,$e),s($e,fl),s(v,wl),s(v,_o),_o.innerHTML=jv,s(v,ml),s(v,Je),s(Je,gl),s(v,_l),s(v,Ue),s(Ue,El),_(u,ut,g),_(u,h,g),s(h,Be),s(Be,_s),s(_s,bl),s(h,Dl),s(h,Es),s(Es,Cl),s(Es,bs),s(bs,Pl),s(Es,Tl),s(h,Ol),s(h,b),s(b,Il),s(b,Eo),s(Eo,Ll),s(b,Hl),s(b,bo),s(bo,Sl),s(b,Ml),s(b,Do),s(Do,jl),s(b,Al),s(b,Co),s(Co,Vl),s(b,Fl),s(h,Nl),s(h,Po),Po.innerHTML=Av,s(h,ql),s(h,O),s(O,Wl),s(O,To),s(To,$l),s(O,Jl),s(O,Oo),s(Oo,Ul),s(O,Bl),s(O,Ds),s(Ds,Rl),s(O,zl),s(h,Gl),s(h,W),s(W,Yl),s(W,Io),s(Io,Xl),s(W,Zl),s(W,Lo),s(Lo,Kl),s(W,Ql),s(h,sr),s(h,Ho),Ho.innerHTML=Vv,s(h,or),s(h,Cs),s(Cs,ar),s(Cs,So),s(So,er),s(Cs,tr),s(h,nr),s(h,Mo),Mo.innerHTML=Fv,s(h,lr),s(h,$),s($,rr),s($,jo),s(jo,ir),s($,cr),s($,Ao),s(Ao,pr),s($,kr),s(h,hr),s(h,Vo),Vo.innerHTML=Nv,s(h,yr),s(h,Ps),s(Ps,vr),s(Ps,Fo),s(Fo,dr),s(Ps,ur),s(h,xr),s(h,No),No.innerHTML=qv,s(h,fr),s(h,I),s(I,wr),s(I,Re),s(Re,mr),s(I,gr),s(I,qo),s(qo,_r),s(I,Er),s(I,Wo),s(Wo,br),s(I,Dr),s(h,Cr),s(h,J),s(J,Pr),s(J,$o),s($o,Tr),s(J,Or),s(J,Jo),s(Jo,Ir),s(J,Lr),s(h,Hr),s(h,U),s(U,Sr),s(U,Uo),s(Uo,Mr),s(U,jr),s(U,Bo),s(Bo,Ar),s(U,Vr),s(h,Fr),s(h,Ro),Ro.innerHTML=Wv,s(h,Nr),s(h,ze),s(ze,qr),s(h,Wr),s(h,zo),zo.innerHTML=$v,s(h,$r),s(h,Ts),s(Ts,Jr),s(Ts,Go),s(Go,Ur),s(Ts,Br),s(h,Rr),s(h,Yo),Yo.innerHTML=Jv,s(h,zr),s(h,Os),s(Os,Gr),s(Os,Xo),s(Xo,Yr),s(Os,Xr),s(h,Zr),s(h,Is),s(Is,Kr),s(Is,Zo),s(Zo,Qr),s(Is,si),s(h,oi),s(h,Ko),Ko.innerHTML=Uv,s(h,ai),s(h,B),s(B,ei),s(B,Qo),s(Qo,ti),s(B,ni),s(B,sa),s(sa,li),s(B,ri),s(h,ii),s(h,Ge),s(Ge,Ls),s(Ls,ci),s(Ls,oa),s(oa,pi),s(Ls,ki),s(h,hi),s(h,aa),aa.innerHTML=Bv,s(h,yi),s(h,L),s(L,vi),s(L,ea),s(ea,di),s(L,ui),s(L,ta),s(ta,xi),s(L,fi),s(L,na),s(na,wi),s(L,mi),s(h,gi),s(h,la),la.innerHTML=Rv,s(h,_i),s(h,R),s(R,Ei),s(R,ra),s(ra,bi),s(R,Di),s(R,ia),s(ia,Ci),s(R,Pi),s(h,Ti),s(h,ca),ca.innerHTML=zv,s(h,Oi),s(h,Ye),s(Ye,Ii),_(u,xt,g),_(u,p,g),s(p,Xe),s(Xe,Hs),s(Hs,Li),s(p,Hi),s(p,Ss),s(Ss,Si),s(Ss,pa),s(pa,Mi),s(Ss,ji),s(p,Ai),s(p,Ze),s(Ze,Vi),s(p,Fi),s(p,ka),ka.innerHTML=Gv,s(p,Ni),s(p,Ke),s(Ke,qi),s(p,Wi),s(p,ha),ha.innerHTML=Yv,s(p,$i),s(p,Qe),s(Qe,Ji),s(p,Ui),s(p,ya),ya.innerHTML=Xv,s(p,Bi),s(p,Ms),s(Ms,Ri),s(Ms,va),s(va,zi),s(Ms,Gi),s(p,Yi),s(p,z),s(z,Xi),s(z,da),s(da,Zi),s(z,Ki),s(z,ua),s(ua,Qi),s(z,sc),s(p,oc),s(p,js),s(js,ac),s(js,xa),s(xa,ec),s(js,tc),s(p,nc),s(p,As),s(As,lc),s(As,fa),s(fa,rc),s(As,ic),s(p,cc),s(p,wa),wa.innerHTML=Zv,s(p,pc),s(p,G),s(G,kc),s(G,ma),s(ma,hc),s(G,yc),s(G,ga),s(ga,vc),s(G,dc),s(p,uc),s(p,_a),_a.innerHTML=Kv,s(p,xc),s(p,H),s(H,fc),s(H,Ea),s(Ea,wc),s(H,mc),s(H,ba),s(ba,gc),s(H,_c),s(H,Da),s(Da,Ec),s(H,bc),s(p,Dc),s(p,Ca),Ca.innerHTML=Qv,s(p,Cc),s(p,Vs),s(Vs,Pc),s(Vs,Pa),s(Pa,Tc),s(Vs,Oc),s(p,Ic),s(p,Ta),Ta.innerHTML=sd,s(p,Lc),s(p,E),s(E,Hc),s(E,Oa),s(Oa,Sc),s(E,Mc),s(E,Ia),s(Ia,jc),s(E,Ac),s(E,La),s(La,Vc),s(E,Fc),s(E,Ha),s(Ha,Nc),s(E,qc),s(E,Sa),s(Sa,Wc),s(p,$c),s(p,Ma),Ma.innerHTML=od,s(p,Jc),s(p,Y),s(Y,Uc),s(Y,ja),s(ja,Bc),s(Y,Rc),s(Y,Aa),s(Aa,zc),s(Y,Gc),s(p,Yc),s(p,Va),Va.innerHTML=ad,s(p,Xc),s(p,Fs),s(Fs,Zc),s(Fs,Fa),s(Fa,Kc),s(Fs,Qc),s(p,sp),s(p,Na),Na.innerHTML=ed,s(p,op),s(p,qa),s(qa,ap),s(qa,Wa),s(Wa,ep),s(p,tp),s(p,$a),$a.innerHTML=td,s(p,np),s(p,X),s(X,lp),s(X,Ja),s(Ja,rp),s(X,ip),s(X,Ua),s(Ua,cp),s(X,pp),s(p,kp),s(p,Ba),Ba.innerHTML=nd,s(p,hp),s(p,Ns),s(Ns,yp),s(Ns,Ra),s(Ra,vp),s(Ns,dp),s(p,up),s(p,qs),s(qs,xp),s(qs,za),s(za,fp),s(qs,wp),s(p,mp),s(p,Ga),Ga.innerHTML=ld,s(p,gp),s(p,Z),s(Z,_p),s(Z,Ya),s(Ya,Ep),s(Z,bp),s(Z,Xa),s(Xa,Dp),s(Z,Cp),s(p,Pp),s(p,Za),Za.innerHTML=rd,s(p,Tp),s(p,K),s(K,Op),s(K,Ka),s(Ka,Ip),s(K,Lp),s(K,Qa),s(Qa,Hp),s(K,Sp),_(u,ft,g),_(u,x,g),s(x,st),s(st,Ws),s(Ws,Mp),s(x,jp),s(x,Q),s(Q,Ap),s(Q,se),s(se,Vp),s(Q,Fp),s(Q,oe),s(oe,Np),s(Q,qp),s(x,Wp),s(x,ot),s(ot,$p),s(x,Jp),s(x,S),s(S,$s),s($s,ae),s(ae,Up),s($s,Bp),s($s,Js),s(Js,Us),s(Us,Rp),s(Us,ee),s(ee,zp),s(Us,Gp),s(Js,Yp),s(Js,at),s(at,Xp),s(S,Zp),s(S,Bs),s(Bs,te),s(te,Kp),s(Bs,Qp),s(Bs,Rs),s(Rs,zs),s(zs,sk),s(zs,ne),s(ne,ok),s(zs,ak),s(Rs,ek),s(Rs,et),s(et,tk),s(S,nk),s(S,Gs),s(Gs,le),s(le,lk),s(Gs,rk),s(Gs,Ys),s(Ys,Xs),s(Xs,ik),s(Xs,re),s(re,ck),s(Xs,pk),s(Ys,kk),s(Ys,tt),s(tt,hk),s(S,yk),s(S,Zs),s(Zs,ie),s(ie,vk),s(Zs,dk),s(Zs,Ks),s(Ks,Qs),s(Qs,uk),s(Qs,ce),s(ce,xk),s(Qs,fk),s(Ks,wk),s(Ks,nt),s(nt,mk),s(x,gk),s(x,so),s(so,_k),s(so,pe),s(pe,Ek),s(so,bk),s(x,Dk),s(x,lt),s(lt,Ck),s(x,Pk),s(x,ke),ke.innerHTML=id,s(x,Tk),s(x,rt),s(rt,Ok),s(x,Ik),s(x,he),he.innerHTML=cd,s(x,Lk),s(x,it),s(it,Hk),s(x,Sk),s(x,ye),ye.innerHTML=pd,s(x,Mk),s(x,ct),s(ct,jk),s(x,Ak),s(x,ve),ve.innerHTML=kd,s(x,Vk),s(x,pt),s(pt,Fk),s(x,Nk),s(x,de),de.innerHTML=hd,s(x,qk),s(x,kt),s(kt,Wk),s(x,$k),s(x,ue),ue.innerHTML=yd,_(u,wt,g),_(u,P,g),s(P,ht),s(ht,oo),s(oo,Jk),s(P,Uk),s(P,ss),s(ss,Bk),s(ss,xe),s(xe,Rk),s(ss,zk),s(ss,fe),s(fe,Gk),s(ss,Yk),s(P,Xk),s(P,yt),s(yt,Zk),s(P,Kk),s(P,vt),s(vt,Qk)},p:hu,d(u){u&&e(w),u&&e(A),u&&e(V),u&&e(D),u&&e(N),u&&e(dt),u&&e(v),u&&e(ut),u&&e(h),u&&e(xt),u&&e(p),u&&e(ft),u&&e(x),u&&e(wt),u&&e(P)}}}function wu(ao){let w,j;const A=[ao[0],Pv];let V={$$slots:{default:[fu]},$$scope:{ctx:ao}};for(let m=0;m<A.length;m+=1)V=ah(V,A[m]);return w=new yu({props:V}),{c(){eu(w.$$.fragment)},l(m){tu(w.$$.fragment,m)},m(m,D){nu(w,m,D),j=!0},p(m,[D]){const N=D&1?lu(A,[D&1&&bv(m[0]),D&0&&bv(Pv)]):{};D&2&&(N.$$scope={dirty:D,ctx:m}),w.$set(N)},i(m){j||(ru(w.$$.fragment,m),j=!0)},o(m){iu(w.$$.fragment,m),j=!1},d(m){cu(w,m)}}}const Pv={title:"Retry asynchronous function using the callback pattern, promise chain and async await",date:"2020-06-21T08:00:00Z",tags:["JavaScript","Asynchronous","Problem Solving"],description:"How to retry asynchronous function using the callback pattern, promise chain and async await. Mental model for asynchronous JavaScript.",label:"blog",tableOfContents:[{link:"the-callback-pattern",title:"The callback pattern"},{link:"the-promise-chain",title:"The promise chain"},{link:"async-await",title:"Async await"},{link:"testing",title:"Testing"},{link:"closing-note",title:"Closing Note"}]};function mu(ao,w,j){return pu("blog",{image:xu}),ao.$$set=A=>{j(0,w=ah(ah({},w),Dv(A)))},w=Dv(w),[w]}class Cu extends su{constructor(w){super();ou(this,w,mu,wu,au,{})}}export{Cu as default,Pv as metadata};
