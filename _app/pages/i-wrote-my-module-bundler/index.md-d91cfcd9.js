import{S as Cf,i as jf,s as Df,C as Uv,w as Mf,x as Lf,y as Nf,z as Hf,A as hx,q as Gf,o as Rf,B as Vf,r as Jf,Y as kx,e,t as a,k as i,c as t,a as l,h as n,d as o,m as p,b as r,X as Bf,f as Ps,g as f,H as s,J as Wf}from"../../chunks/vendor-da4388d4.js";import{B as Ff}from"../../chunks/BlogLayout-14cfab6f.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var Uf="https://lihautan.com/_app/assets/ast-import-0512f895.webp",$f="https://lihautan.com/_app/assets/ast-import-1b4b97d2.webp",Yf="https://lihautan.com/_app/assets/ast-import-9d7dfc40.png",vx="https://lihautan.com/_app/assets/ast-import-9eb42f5d.png",Kf="https://lihautan.com/_app/assets/hero-twitter-43549bfa.jpg";function zf(Po){let w,Z,J,qs,I,C,qo,rl,Ts,il,pl,fn,To,cl,mn,wn,gn,ms,hl,ja,kl,vl,bn,_n,En,D,Da,As,yl,dl,Os,ul,Ao,xl,fl,ml,Ss,wl,Ma,gl,bl,_l,Cs,Oo,El,La,Il,Pl,So,ql,Na,Tl,Al,Ha,js,Ol,Ga,Sl,Cl,In,A,Ra,Ds,jl,Dl,Va,Ml,Ll,Co,dx=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Nl,jo,ux=`<div class="filename">square.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,Hl,Do,xx=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,Gl,U,Rl,Ms,Vl,Jl,Mo,Bl,Wl,Lo,Fl,Ul,Pn,h,Ja,Ls,$l,Yl,Ba,Kl,zl,No,fx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// build dependency graph</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">graph</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// bundle the asset</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// write to output folder</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.name)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Zl,Wa,ns,Ql,Fa,Xl,sr,Ns,or,er,ar,Ho,mx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rootModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> rootModule;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tr,Ua,nr,lr,ls,rr,Go,ir,pr,Ro,cr,hr,kr,Vo,wx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vr,Hs,yr,Jo,dr,ur,xr,Bo,gx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,fr,$,mr,Wo,wr,gr,Gs,br,_r,$a,Er,Ir,Pr,Fo,bx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qr,Ya,Tr,Ar,Uo,_x=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.findDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Or,Ka,Sr,Cr,rs,jr,$o,Dr,Mr,Rs,Lr,Nr,Hr,za,is,Yo,Za,N,$v,Gr,j,Rr,Ko,Vr,Jr,zo,Br,Wr,Zo,Fr,Ur,Qo,$r,Yr,Xo,Kr,zr,Zr,se,Ex=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qr,H,Xr,oe,si,oi,ee,ei,ai,ae,ti,ni,Qa,li,ri,ii,Vs,pi,Xa,ci,hi,ki,te,Ix=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(relativePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> relativePath))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// resolving</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vi,st,ot,yi,qn,k,et,Js,di,ui,ps,xi,ne,fi,mi,le,wi,gi,bi,re,Px='<div class="filename">project/a.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',_i,ie,qx='<div class="filename">project/foo/a.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Ei,at,Ii,Pi,Bs,qi,Ws,Ti,Ai,Oi,cs,Si,pe,Ci,ji,ce,Di,Mi,Li,he,Tx=`<pre class="prism language-"><code><span class="line">b</span>
<span class="line">b.js</span>
<span class="line">b.json</span>
<span class="line">b.node</span></code></pre>`,Ni,Fs,Hi,ke,Gi,Ri,Vi,ve,Ax=`<pre class="prism language-"><code><span class="line">&quot;main&quot; in b/package.json</span>
<span class="line">b/index.js</span>
<span class="line">b/index.json</span>
<span class="line">b/index.node</span></code></pre>`,Ji,hs,Bi,ye,Wi,Fi,de,Ui,$i,Yi,ks,Ki,ue,zi,Zi,Us,Qi,Xi,sp,$s,op,tt,ep,ap,tp,xe,Ox=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;path&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// resolving</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.dirname</span><span style="color: var(--shiki-color-text)">(requester)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,np,nt,lt,lp,rp,rt,ip,pp,fe,Sx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(relativePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> relativePath))</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(absolutePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(absolutePath))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,cp,it,hp,kp,me,Cx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  filePath</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/index.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  content</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-string-expression)">&#39;import squareArea from &#39;./square.js&#39;;&#92;nimport circleArea from &#39;./circle.js&#39;;&#92;n&#92;nconsole.log(&#39;Area of square: &#39;, squareArea(5));&#92;nconsole.log(&#39;Area of circle&#39;, circleArea(5));&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ast</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   Node &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  dependencies</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   [ Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       filePath</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/square.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       content</span><span style="color: var(--shiki-token-keyword)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;function area(side) &#123;&#92;n  return side * side;&#92;n&#125;&#92;nexport default area;&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       ast</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> Node &#123;</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       dependencies</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       filePath</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/circle.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       content</span><span style="color: var(--shiki-token-keyword)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;const PI = 3.141;&#92;nfunction area(radius) &#123;&#92;n    return PI * radius * radius;&#92;n&#125;&#92;nexport default area;&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       ast</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> Node &#123;</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       dependencies</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vp,G,yp,we,dp,up,ge,xp,fp,be,mp,wp,_e,gp,bp,_p,pt,ct,Ep,Tn,P,ht,Ys,Ip,Pp,kt,qp,Tp,R,Ap,vt,Op,Sp,yt,Cp,jp,dt,Dp,Mp,ut,Lp,Np,Hp,xt,Y,Gp,ft,Rp,Vp,mt,Jp,Bp,Ee,Wp,Fp,Up,wt,$p,Yp,Ie,jx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  modules</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Kp,gt,zp,Zp,vs,bt,_t,Qp,Xp,Pe,Et,sc,oc,ec,qe,It,ac,tc,An,O,Pt,Ks,nc,lc,ys,rc,zs,ic,pc,Zs,cc,hc,kc,qt,vc,yc,Tt,dc,uc,Te,Dx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(graph</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> modules;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(module</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dependency </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(dependency</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xc,At,fc,On,y,Ot,Qs,mc,wc,St,gc,bc,ds,_c,Ae,Ec,Ic,Oe,Pc,qc,Tc,K,Ac,Se,Oc,Sc,Xs,Cc,jc,Ce,Dc,Mc,Lc,je,Mx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> moduleMap </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: &#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> moduleMap;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Nc,so,Hc,De,Gc,Rc,Vc,oo,Me,Le,Jc,Bc,Wc,Ne,He,Fc,Uc,$c,Ct,Yc,Kc,Ge,Lx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;index.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;square.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;circle.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zc,V,Zc,Re,Qc,Xc,Ve,sh,oh,Je,eh,ah,Be,th,nh,lh,jt,rh,ih,Dt,ph,ch,We,Nx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// #1</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// from</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> a;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; c &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> a;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> c;</span></span></code></pre>`,hh,Mt,eo,kh,Fe,vh,yh,dh,us,uh,Lt,xh,fh,Nt,mh,wh,gh,Ue,Hx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.transformModuleInterface</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transformModuleInterface</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformFromAstSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> code;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bh,$e,_h,ao,Eh,Ih,Ht,Ph,qh,Ye,Gx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;index.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;square.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;circle.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Th,to,Ah,Ke,Oh,Sh,Sn,g,Gt,no,Rt,Ch,jh,Vt,Dh,Mh,Jt,Lh,Nh,ze,Rx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleCode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    const modules = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">moduleMap</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    const entry = &quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">entryPoint</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    function webpackStart(&#123; modules, entry &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      const moduleCache = &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      const require = moduleName =&gt; &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // if in cache, return the cached version</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        if (moduleCache[moduleName]) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">          return moduleCache[moduleName];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        const exports = &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // this will prevent infinite &quot;require&quot; loop</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // from circular dependencies</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        moduleCache[moduleName] = exports;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // &quot;require&quot;-ing the module,</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // exported stuff will assigned to &quot;exports&quot;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        modules[moduleName](exports, require);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        return moduleCache[moduleName];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      // start the program</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      require(entry);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    webpackStart(&#123; modules, entry &#125;);&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// trim away spaces before the line</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lines</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Boolean</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">padLength</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> lines[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> lines[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.trimLeft</span><span style="color: var(--shiki-color-text)">().</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">RegExp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;^\\s&#123;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">padLength</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#125;&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lines</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(line </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">line</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(regex</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Hh,xs,Gh,Ze,Rh,Vh,Qe,Jh,Bh,Wh,lo,Fh,Xe,Uh,$h,Yh,sa,Vx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleCode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].filePath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;bundle.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> moduleCode &#125;];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Kh,ro,zh,oa,Zh,Qh,Xh,ea,Jx=`<pre class="prism language-"><code><span class="line">Area of square:  25</span>
<span class="line">Area of circle 78.525</span></code></pre>`,sk,Bt,ok,ek,io,ak,Wt,tk,nk,Cn,q,Ft,po,lk,rk,co,ik,Ut,pk,ck,hk,$t,kk,vk,aa,Bx=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,yk,ta,Wx=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-comment)">// const PI = 3.141;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; PI &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./index.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,dk,Yt,uk,xk,na,Fx='<pre class="prism language-"><code><span class="line">RangeError: Maximum call stack size exceeded</span></code></pre>',jn,m,Kt,ho,fk,mk,zt,wk,gk,ko,Zt,bk,_k,Qt,Ek,Ik,la,Ux=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// fixing circular dependencies when generating module graph</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Map</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(filePath)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.initDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">initDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.findDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// fixing circular dependencies when traversing module graph</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(graph</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(module</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dependency </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(dependency</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Pk,Xt,qk,Tk,ra,$x=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ node output/bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Area of square:  25</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Area of circle NaN</span></span></code></pre>`,Ak,sn,Ok,Sk,ia,Yx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. require circle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. define PI on exports</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 4. call &#96;circleArea&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2. at the point of executing this, PI is not yet defined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; PI: </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 5. PI is undefined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ck,E,jk,pa,Dk,Mk,ca,Lk,Nk,ha,Hk,Gk,ka,Rk,Vk,va,Jk,Bk,ya,Wk,Fk,da,Uk,$k,ua,Yk,Kk,zk,on,Zk,Qk,xa,Kx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">square_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. require circle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circle_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. define PI on exports</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> square_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-color-text)">](</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 4. call &#96;circleArea&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> circle_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-color-text)">](</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2. we keep a reference of the &#96;index.js&#96;&#39;s &#96;exports&#96; object</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">index_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 5. we get PI from the &#96;exports&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> index_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;PI&#39;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xk,vo,sv,fa,ov,ev,av,yo,tv,uo,nv,lv,Dn,Q,en,xo,rv,iv,fs,pv,an,cv,hv,tn,kv,vv,yv,fo,dv,nn,uv,xv,Mn,M,ln,mo,fv,mv,rn,wv,gv,wo,pn,bv,_v,cn,Ev,Iv,hn,Pv,qv,kn,Tv,Ln,ws,vn,go,Av,Ov,z,yn,bo,Sv,Cv,dn,_o,jv,Dv,un,Eo,Mv,Lv,xn,Io,Nv;return{c(){w=e("p"),Z=a("In my "),J=e("a"),qs=a("previous article"),I=a(", I explained how module bundler works. I used "),C=e("a"),qo=a("webpack"),rl=a(" and "),Ts=e("a"),il=a("rollup"),pl=a(" as example, how each of them gave us a different perspective on how we can bundle our JavaScript application."),fn=i(),To=e("p"),cl=a("In this article, I am going to show you how I wrote my module bundler. The module bundler itself is not production-ready, yet I learned a ton through the exercise, and I am ever more appreciative of what modern module bundlers have provided."),mn=i(),wn=e("hr"),gn=i(),ms=e("p"),hl=a("\u26A0\uFE0F "),ja=e("strong"),kl=a("Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),vl=a(" \u26A0\uFE0F"),bn=i(),_n=e("hr"),En=i(),D=e("section"),Da=e("h2"),As=e("a"),yl=a("Getting Started"),dl=i(),Os=e("p"),ul=a("I talked about the input (the JavaScript modules) and the output (the bundled JavaScript file) of a module bundler in "),Ao=e("a"),xl=a("my previous article"),fl=a(". Now it's time to write a module bundler that takes in the input and produces the output."),ml=i(),Ss=e("p"),wl=a("A "),Ma=e("em"),gl=a("basic"),bl=a(" module bundler can be broken down into 2 parts:"),_l=i(),Cs=e("ul"),Oo=e("li"),El=a("Understands the code and constructs the dependency graph "),La=e("strong"),Il=a("(Dependency Resolution)"),Pl=i(),So=e("li"),ql=a("Assembles the module into a single (or multiple) JavaScript file "),Na=e("strong"),Tl=a("(Bundle)"),Al=i(),Ha=e("blockquote"),js=e("p"),Ol=a("A "),Ga=e("strong"),Sl=a("dependency graph"),Cl=a(" is a graph representation of the dependency relationship between modules."),In=i(),A=e("section"),Ra=e("h3"),Ds=e("a"),jl=a("The Input"),Dl=i(),Va=e("p"),Ml=a("In this article, I will be using following files as my input to the bundler:"),Ll=i(),Co=e("div"),Nl=i(),jo=e("div"),Hl=i(),Do=e("div"),Gl=i(),U=e("p"),Rl=a("I've created the project on "),Ms=e("a"),Vl=a("Github"),Jl=a(", so if you are interested to try out yourself, you can clone it and checkout the "),Mo=e("code"),Bl=a("fixture-1"),Wl=a(" tag. The input files are in the "),Lo=e("code"),Fl=a("fixture/"),Ul=a(" folder."),Pn=i(),h=e("section"),Ja=e("h2"),Ls=e("a"),$l=a("Writing"),Yl=i(),Ba=e("p"),Kl=a("I started with the main structure of the module bundler:"),zl=i(),No=e("div"),Zl=i(),Wa=e("blockquote"),ns=e("p"),Ql=a("The "),Fa=e("strong"),Xl=a("dependency graph"),sr=a(" is a "),Ns=e("a"),or=a("directed graph"),er=a(", where the vertex is the module, and the directed edge is the dependency relationship between the modules."),ar=i(),Ho=e("div"),tr=i(),Ua=e("p"),nr=a('So, the entry module is "the root" of the graph.'),lr=i(),ls=e("p"),rr=a("In "),Go=e("code"),ir=a("createModule"),pr=a(", I instantiate a new "),Ro=e("code"),cr=a("Module"),hr=a(" instance:"),kr=i(),Vo=e("div"),vr=i(),Hs=e("p"),yr=a("The class "),Jo=e("code"),dr=a("Module"),ur=a(" will be used to record module properties, such as the content, the dependencies, exported keys, etc."),xr=i(),Bo=e("div"),fr=i(),$=e("p"),mr=a("While the "),Wo=e("code"),wr=a("content"),gr=a(" is the string content of the module, to understand what it actually means, I used "),Gs=e("a"),br=a("babel"),_r=a(" to "),$a=e("em"),Er=a("parse the content"),Ir=a(" into AST (Abstract Syntax Tree):"),Pr=i(),Fo=e("div"),qr=i(),Ya=e("p"),Tr=a("Next, I need to find out the dependency of this module:"),Ar=i(),Uo=e("div"),Or=i(),Ka=e("p"),Sr=a("So, how can I know what are the dependencies of this module?"),Cr=i(),rs=e("p"),jr=a("I can look for the "),$o=e("code"),Dr=a("import"),Mr=a(` statement from the AST with the help of the
`),Rs=e("a"),Lr=a("babel-ast-explorer"),Nr=a("."),Hr=i(),za=e("p"),is=e("span"),Yo=e("picture"),Za=e("source"),N=e("img"),Gr=i(),j=e("p"),Rr=a("I found out that the "),Ko=e("code"),Vr=a("import"),Jr=a(" statement in the AST is called the "),zo=e("code"),Br=a("ImportDeclaration"),Wr=a(". It has "),Zo=e("code"),Fr=a("specifiers"),Ur=a(" and "),Qo=e("code"),$r=a("source"),Yr=a(", which the "),Xo=e("code"),Kr=a("source.value"),zr=a(" tells us what this module is importing from:"),Zr=i(),se=e("div"),Qr=i(),H=e("p"),Xr=a("So I had the path that the module is requesting, but it could be relative to the current file, eg "),oe=e("code"),si=a('"./foo/bar"'),oi=a(", or from the "),ee=e("code"),ei=a("node_modules"),ai=a(", eg: "),ae=e("code"),ti=a('"lodash"'),ni=a(". How do I know what is the "),Qa=e("strong"),li=a("actual file path"),ri=a(" that the module is requesting?"),ii=i(),Vs=e("p"),pi=a("The step of figuring out the actual path based on the requested path, is called "),Xa=e("strong"),ci=a('"Resolving"'),hi=a(":"),ki=i(),te=e("div"),vi=i(),st=e("p"),ot=e("em"),yi=a("Resolving path to the actual file path"),qn=i(),k=e("section"),et=e("h2"),Js=e("a"),di=a("Resolving"),ui=i(),ps=e("p"),xi=a(`Let's talk about resolving. We know that "import"ing `),ne=e("code"),fi=a("./b.js"),mi=a(" in the following examples will result in getting a different file, because when we specify "),le=e("code"),wi=a("./"),gi=a(', we are "import"ing relative to the current file.'),bi=i(),re=e("div"),_i=i(),ie=e("div"),Ei=i(),at=e("p"),Ii=a("So, what are the rules of resolving a module?"),Pi=i(),Bs=e("p"),qi=a("The Node.js documentation has listed out the "),Ws=e("a"),Ti=a("detailed step of the module resolving algorithm"),Ai=a(":"),Oi=i(),cs=e("p"),Si=a("When we specify a relative path, "),pe=e("code"),Ci=a("./b"),ji=a(", Node.js will first assume that "),ce=e("code"),Di=a("./b"),Mi=a(" is a file, and tries the following extension if it doesn't exactly match the file name:"),Li=i(),he=e("div"),Ni=i(),Fs=e("p"),Hi=a("If the file does not exist, Node.js will then try to treat "),ke=e("code"),Gi=a("./b"),Ri=a(" as a directory, and try the following:"),Vi=i(),ve=e("div"),Ji=i(),hs=e("p"),Bi=a("If we specify "),ye=e("code"),Wi=a("import 'b'"),Fi=a(" instead, Node.js will treat it as a package within "),de=e("code"),Ui=a("node_modules/"),$i=a(", and have a different resolving strategy."),Yi=i(),ks=e("p"),Ki=a("Through the above illustration, we can see that resolving "),ue=e("code"),zi=a("import './b'"),Zi=a(" is not as simple as it seems. Besides the default Node.js resolving behaviour, "),Us=e("a"),Qi=a("webpack provides a lot more customisation options"),Xi=a(", such as custom extensions, alias, modules folders, etc."),sp=i(),$s=e("p"),op=a("Here, I am showing you the "),tt=e("em"),ep=a('"simplest"'),ap=a(" resolver, which is to resolve relative path only:"),tp=i(),xe=e("div"),np=i(),nt=e("blockquote"),lt=e("small"),lp=a("**Note:** You should try out writing a full node resolvers that resolve relatively as well as absolutely from `node_modules/`"),rp=i(),rt=e("p"),ip=a("Now I know the actual requested file paths, I then create modules out of them."),pp=i(),fe=e("div"),cp=i(),it=e("p"),hp=a("So, for each module, I find their dependencies, parse them, and find each dependency's dependencies, parse them as well, and find their dependencies, and so forth recursively. At the end of the process, I get a module dependency graph that looks something like this:"),kp=i(),me=e("div"),vp=i(),G=e("p"),yp=a("The root of the graph is our entry module, and you can traverse the graph through the "),we=e("code"),dp=a("dependencies"),up=a(" of the module. As you can see, the "),ge=e("code"),xp=a("index.js"),fp=a(" has 2 dependencies, the "),be=e("code"),mp=a("square.js"),wp=a(" and the "),_e=e("code"),gp=a("circle.js"),bp=a("."),_p=i(),pt=e("blockquote"),ct=e("small"),Ep=a("**Note:** If you are following along, you can checkout the tag `feat-1-module-dependency-graph`, to see the code that I had written up till this point."),Tn=i(),P=e("section"),ht=e("h2"),Ys=e("a"),Ip=a("Bundling"),Pp=i(),kt=e("p"),qp=a("With the module dependency graph, it's time to bundle them into a file!"),Tp=i(),R=e("p"),Ap=a("At this point in time, we can choose whether we want to bundle it in the "),vt=e("strong"),Op=a('"webpack way"'),Sp=a(" or the "),yt=e("strong"),Cp=a('"rollup way"'),jp=a(". In this article I am showing you how I did it the "),dt=e("strong"),Dp=a('"webpack way"'),Mp=a(". I'll write about bundling in the "),ut=e("strong"),Lp=a('"rollup way"'),Np=a(" in the coming article."),Hp=i(),xt=e("blockquote"),Y=e("p"),Gp=a("If you have no idea about what is the "),ft=e("strong"),Rp=a('"webpack way"'),Vp=a(" or "),mt=e("strong"),Jp=a('"rollup way"'),Bp=a(', I have "coined" the term in my '),Ee=e("a"),Wp=a("previous article"),Fp=a(" and have detailed explanation about them!"),Up=i(),wt=e("p"),$p=a("Let's take a look how the final bundled file would look like:"),Yp=i(),Ie=e("div"),Kp=i(),gt=e("p"),zp=a("Let's break it down to a few steps:"),Zp=i(),vs=e("ul"),bt=e("li"),_t=e("strong"),Qp=a("Group modules into files"),Xp=i(),Pe=e("li"),Et=e("strong"),sc=a("Create the module map"),oc=a(' and wrapping each module in a "special" module factory function'),ec=i(),qe=e("li"),It=e("strong"),ac=a('Create the "runtime"'),tc=a(", the glue that links each module together."),An=i(),O=e("section"),Pt=e("h3"),Ks=e("a"),nc=a("Grouping modules into files"),lc=i(),ys=e("p"),rc=a("This step is to decide which modules goes to which file. We can split modules into different files because of "),zs=e("a"),ic=a("code splitting"),pc=a(" due to dynamic import as well as optimisation, such as the webpack's "),Zs=e("a"),cc=a("Chunk Splitting"),hc=a("."),kc=i(),qt=e("p"),vc=a("I will support code splitting in the future. For now, I grouped all modules into 1 file."),yc=i(),Tt=e("p"),dc=a("To collect all the modules from module graph into a list of modules, I did a graph traversal:"),uc=i(),Te=e("div"),xc=i(),At=e("p"),fc=a("...and I used the list of modules to create a module map."),On=i(),y=e("section"),Ot=e("h3"),Qs=e("a"),mc=a("Creating module map"),wc=i(),St=e("p"),gc=a("The module map I created is a string, that would be inlined into the final bundle file."),bc=i(),ds=e("p"),_c=a("I looped through each module, and used "),Ae=e("code"),Ec=a("module.filePath"),Ic=a(" as the key, and "),Oe=e("code"),Pc=a("module.content"),qc=a(" as the value."),Tc=i(),K=e("p"),Ac=a("The reason I dont use "),Se=e("code"),Oc=a("JSON.stringify(moduleMap)"),Sc=a(" instead of manually concatenating to build up the module map, is because JSON can only takes in "),Xs=e("a"),Cc=a("JSON primitive data type"),jc=a(" as value, but what I built here is a JavaScript map, with "),Ce=e("code"),Dc=a("function"),Mc=a(" as value, but in string."),Lc=i(),je=e("div"),Nc=i(),so=e("p"),Hc=a("The function that wraps around the "),De=e("code"),Gc=a("module.content"),Rc=a(" is called the module factory function. It provides 2 parameter to the module:"),Vc=i(),oo=e("ul"),Me=e("li"),Le=e("code"),Jc=a("exports"),Bc=a(", an object that the module can assign its exported value onto"),Wc=i(),Ne=e("li"),He=e("code"),Fc=a("require"),Uc=a(", a function that the module can invoke with module path to import exported value from another module"),$c=i(),Ct=e("p"),Yc=a("The module map right now is not something that can be executed:"),Kc=i(),Ge=e("div"),zc=i(),V=e("p"),Zc=a("because it still uses "),Re=e("code"),Qc=a("import"),Xc=a(" and "),Ve=e("code"),sh=a("export"),oh=a(". I had to transform them to use the "),Je=e("code"),eh=a("exports"),ah=a(" and "),Be=e("code"),th=a("require"),nh=a(" that we pass in."),lh=i(),jt=e("p"),rh=a("To transform the code, I used the AST of the module again: trasform the ast and generate the new code from the transformed ast."),ih=i(),Dt=e("p"),ph=a('What I need is to trasform the "from" to "to" of the following:'),ch=i(),We=e("div"),hh=i(),Mt=e("blockquote"),eo=e("p"),kh=a("I wrote a "),Fe=e("a"),vh=a("step by step guide"),yh=a(" on how to write babel transformation, please do check it out."),dh=i(),us=e("p"),uh=a("Knowing "),Lt=e("strong"),xh=a("what to target on AST"),fh=a(" and "),Nt=e("strong"),mh=a("how the transformed AST look like"),wh=a(", I wrote my transformation code:"),gh=i(),Ue=e("div"),bh=i(),$e=e("p"),_h=a("I omitted the actual babel transformation code, because it is lengthy. If you are interested to read about it, you can check out "),ao=e("a"),Eh=a("from my Github repo"),Ih=i(),Ht=e("p"),Ph=a("So, now the module map looks ready:"),qh=i(),Ye=e("div"),Th=i(),to=e("p"),Ah=a("One thing to take note is that, for the "),Ke=e("code"),Oh=a("require"),Sh=a(" statements, I replaced the requested path to the actual resolved path, because I used the actual resolved path as the key to the module map."),Sn=i(),g=e("section"),Gt=e("h3"),no=e("a"),Rt=e("strong"),Ch=a('Create the "runtime"'),jh=i(),Vt=e("p"),Dh=a("Now it's time to create the runtime. The runtime is a piece of code that is part of the output bundle, that runs when the application code is running, therefore, the runtime."),Mh=i(),Jt=e("p"),Lh=a("The runtime code can be from a template file, but for simplicity sake, I kept the runtime code as a string:"),Nh=i(),ze=e("div"),Hh=i(),xs=e("p"),Gh=a("The code above is self explanatory, except if you have no idea what does the "),Ze=e("code"),Rh=a("webpackStart()"),Vh=a(" do, you can read more about it in "),Qe=e("a"),Jh=a("my previous post"),Bh=a("."),Wh=i(),lo=e("p"),Fh=a("Finally, I returned the module code from the "),Xe=e("code"),Uh=a("bundle"),$h=a(" function:"),Yh=i(),sa=e("div"),Kh=i(),ro=e("p"),zh=a("Now I run my bundler, it generates a "),oa=e("code"),Zh=a("output/bundle.js"),Qh=a(" file. I run the generated file with node and I see:"),Xh=i(),ea=e("div"),sk=i(),Bt=e("p"),ok=a("That's it! A working module bundler!"),ek=i(),io=e("p"),ak=a("Of course, the module bundler I've shown here is "),Wt=e("strong"),tk=a("nowhere near webpack"),nk=a(". Webpack supports more module system, resolving strategies, loading strategies, plugin system, optimisation, and many many more."),Cn=i(),q=e("section"),Ft=e("h2"),po=e("a"),lk=a("Optimisation"),rk=i(),co=e("p"),ik=a("I played around my module bundler, and I quickly noticed a bug: "),Ut=e("strong"),pk=a("Circular Dependency"),ck=a("."),hk=i(),$t=e("p"),kk=a("Here's my input files that I've tweaked:"),vk=i(),aa=e("div"),yk=i(),ta=e("div"),dk=i(),Yt=e("p"),uk=a("When I ran it through my module bunlder, immediately it ran into a stack overflow:"),xk=i(),na=e("div"),jn=i(),m=e("section"),Kt=e("h3"),ho=e("a"),fk=a("Circular dependency"),mk=i(),zt=e("p"),wk=a("There were 2 junctures that the code did recursive traversal which have led to the endless loop:"),gk=i(),ko=e("ul"),Zt=e("li"),bk=a("Generating dependency graphs"),_k=i(),Qt=e("li"),Ek=a("Traversing module graph for bundling"),Ik=i(),la=e("div"),Pk=i(),Xt=e("p"),qk=a("Bundle with the latest code, the stack overflow is gone. However when I executed the output bundle, I saw"),Tk=i(),ra=e("div"),Ak=i(),sn=e("p"),Ok=a("So I took a look at the output bundle:"),Sk=i(),ia=e("div"),Ck=i(),E=e("p"),jk=a("So, the problem is that I destructed "),pa=e("code"),Dk=a("PI"),Mk=a(" from the exports of "),ca=e("code"),Lk=a("index.js"),Nk=a(" before it is defined, so naturally "),ha=e("code"),Hk=a("PI"),Gk=a(" within "),ka=e("code"),Rk=a("circle.js"),Vk=a(" would stay as "),va=e("code"),Jk=a("undefined"),Bk=a(" throughout the application. However before I called "),ya=e("code"),Wk=a("circleArea"),Fk=a(", we defined "),da=e("code"),Uk=a("PI"),$k=a(" on the "),ua=e("code"),Yk=a("index.js"),Kk=a("'s export, I am expecting it to be available."),zk=i(),on=e("p"),Zk=a("So I built my application with webpack and took a look at how webpack solved this problem."),Qk=i(),xa=e("div"),Xk=i(),vo=e("p"),sv=a("Brilliant! The key is to lazily get the value of "),fa=e("code"),ov=a("PI"),ev=a(" when needed!"),av=i(),yo=e("p"),tv=a("I changed my babel transformation code, which I am not showing it here. If you are curious enough, you can check out "),uo=e("a"),nv=a("the changes I made from Github"),lv=a("."),Dn=i(),Q=e("section"),en=e("h2"),xo=e("a"),rv=a("Summary"),iv=i(),fs=e("p"),pv=a("There's two phases in module bundling: "),an=e("strong"),cv=a("Dependency Resolution"),hv=a(" and "),tn=e("strong"),kv=a("Bundling"),vv=a("."),yv=i(),fo=e("p"),dv=a("I showed you how I constructed the dependency graph, by finding import statements and resolving modules. I shared how I created module maps and transformed the imports / exports syntax during "),nn=e("strong"),uv=a("bundling"),xv=a(". Lastly, I fixed the circular dependency bug that was in the first version of my module bundler."),Mn=i(),M=e("section"),ln=e("h3"),mo=e("a"),fv=a("Whats next?"),mv=i(),rn=e("p"),wv=a("I have a few ideas that I will add to my module bundler, such as:"),gv=i(),wo=e("ul"),pn=e("li"),bv=a("code spliting"),_v=i(),cn=e("li"),Ev=a("watch mode and reloading"),Iv=i(),hn=e("p"),Pv=a("which I will cover them in my next article when they are ready."),qv=i(),kn=e("p"),Tv=a("Till then. Cheers. \u{1F60E}"),Ln=i(),ws=e("section"),vn=e("h2"),go=e("a"),Av=a("Further Readings"),Ov=i(),z=e("ul"),yn=e("li"),bo=e("a"),Sv=a("Ronen Amiel, Build Your Own Webpack - You Gotta Love Frontend 2018"),Cv=i(),dn=e("li"),_o=e("a"),jv=a("Luciano Mammino, Unbundling the JavaScript module bundler - DublinJS July 2018"),Dv=i(),un=e("li"),Eo=e("a"),Mv=a("Adam Kelly, Let\u2019s learn how module bundlers work and then write one ourselves"),Lv=i(),xn=e("li"),Io=e("a"),Nv=a("Webpack founder Tobias Koppers demos bundling live by hand"),this.h()},l(c){w=t(c,"P",{});var d=l(w);Z=n(d,"In my "),J=t(d,"A",{href:!0});var Yv=l(J);qs=n(Yv,"previous article"),Yv.forEach(o),I=n(d,", I explained how module bundler works. I used "),C=t(d,"A",{href:!0,rel:!0});var Kv=l(C);qo=n(Kv,"webpack"),Kv.forEach(o),rl=n(d," and "),Ts=t(d,"A",{href:!0,rel:!0});var zv=l(Ts);il=n(zv,"rollup"),zv.forEach(o),pl=n(d," as example, how each of them gave us a different perspective on how we can bundle our JavaScript application."),d.forEach(o),fn=p(c),To=t(c,"P",{});var Zv=l(To);cl=n(Zv,"In this article, I am going to show you how I wrote my module bundler. The module bundler itself is not production-ready, yet I learned a ton through the exercise, and I am ever more appreciative of what modern module bundlers have provided."),Zv.forEach(o),mn=p(c),wn=t(c,"HR",{}),gn=p(c),ms=t(c,"P",{});var Nn=l(ms);hl=n(Nn,"\u26A0\uFE0F "),ja=t(Nn,"STRONG",{});var Qv=l(ja);kl=n(Qv,"Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),Qv.forEach(o),vl=n(Nn," \u26A0\uFE0F"),Nn.forEach(o),bn=p(c),_n=t(c,"HR",{}),En=p(c),D=t(c,"SECTION",{});var X=l(D);Da=t(X,"H2",{});var Xv=l(Da);As=t(Xv,"A",{href:!0,id:!0});var sy=l(As);yl=n(sy,"Getting Started"),sy.forEach(o),Xv.forEach(o),dl=p(X),Os=t(X,"P",{});var Hn=l(Os);ul=n(Hn,"I talked about the input (the JavaScript modules) and the output (the bundled JavaScript file) of a module bundler in "),Ao=t(Hn,"A",{href:!0});var oy=l(Ao);xl=n(oy,"my previous article"),oy.forEach(o),fl=n(Hn,". Now it's time to write a module bundler that takes in the input and produces the output."),Hn.forEach(o),ml=p(X),Ss=t(X,"P",{});var Gn=l(Ss);wl=n(Gn,"A "),Ma=t(Gn,"EM",{});var ey=l(Ma);gl=n(ey,"basic"),ey.forEach(o),bl=n(Gn," module bundler can be broken down into 2 parts:"),Gn.forEach(o),_l=p(X),Cs=t(X,"UL",{});var Rn=l(Cs);Oo=t(Rn,"LI",{});var Hv=l(Oo);El=n(Hv,"Understands the code and constructs the dependency graph "),La=t(Hv,"STRONG",{});var ay=l(La);Il=n(ay,"(Dependency Resolution)"),ay.forEach(o),Hv.forEach(o),Pl=p(Rn),So=t(Rn,"LI",{});var Gv=l(So);ql=n(Gv,"Assembles the module into a single (or multiple) JavaScript file "),Na=t(Gv,"STRONG",{});var ty=l(Na);Tl=n(ty,"(Bundle)"),ty.forEach(o),Gv.forEach(o),Rn.forEach(o),Al=p(X),Ha=t(X,"BLOCKQUOTE",{});var ny=l(Ha);js=t(ny,"P",{});var Vn=l(js);Ol=n(Vn,"A "),Ga=t(Vn,"STRONG",{});var ly=l(Ga);Sl=n(ly,"dependency graph"),ly.forEach(o),Cl=n(Vn," is a graph representation of the dependency relationship between modules."),Vn.forEach(o),ny.forEach(o),X.forEach(o),In=p(c),A=t(c,"SECTION",{});var B=l(A);Ra=t(B,"H3",{});var ry=l(Ra);Ds=t(ry,"A",{href:!0,id:!0});var iy=l(Ds);jl=n(iy,"The Input"),iy.forEach(o),ry.forEach(o),Dl=p(B),Va=t(B,"P",{});var py=l(Va);Ml=n(py,"In this article, I will be using following files as my input to the bundler:"),py.forEach(o),Ll=p(B),Co=t(B,"DIV",{class:!0});var zx=l(Co);zx.forEach(o),Nl=p(B),jo=t(B,"DIV",{class:!0});var Zx=l(jo);Zx.forEach(o),Hl=p(B),Do=t(B,"DIV",{class:!0});var Qx=l(Do);Qx.forEach(o),Gl=p(B),U=t(B,"P",{});var gs=l(U);Rl=n(gs,"I've created the project on "),Ms=t(gs,"A",{href:!0,rel:!0});var cy=l(Ms);Vl=n(cy,"Github"),cy.forEach(o),Jl=n(gs,", so if you are interested to try out yourself, you can clone it and checkout the "),Mo=t(gs,"CODE",{class:!0});var hy=l(Mo);Bl=n(hy,"fixture-1"),hy.forEach(o),Wl=n(gs," tag. The input files are in the "),Lo=t(gs,"CODE",{class:!0});var ky=l(Lo);Fl=n(ky,"fixture/"),ky.forEach(o),Ul=n(gs," folder."),gs.forEach(o),B.forEach(o),Pn=p(c),h=t(c,"SECTION",{});var v=l(h);Ja=t(v,"H2",{});var vy=l(Ja);Ls=t(vy,"A",{href:!0,id:!0});var yy=l(Ls);$l=n(yy,"Writing"),yy.forEach(o),vy.forEach(o),Yl=p(v),Ba=t(v,"P",{});var dy=l(Ba);Kl=n(dy,"I started with the main structure of the module bundler:"),dy.forEach(o),zl=p(v),No=t(v,"DIV",{class:!0});var Xx=l(No);Xx.forEach(o),Zl=p(v),Wa=t(v,"BLOCKQUOTE",{});var uy=l(Wa);ns=t(uy,"P",{});var ma=l(ns);Ql=n(ma,"The "),Fa=t(ma,"STRONG",{});var xy=l(Fa);Xl=n(xy,"dependency graph"),xy.forEach(o),sr=n(ma," is a "),Ns=t(ma,"A",{href:!0,rel:!0});var fy=l(Ns);or=n(fy,"directed graph"),fy.forEach(o),er=n(ma,", where the vertex is the module, and the directed edge is the dependency relationship between the modules."),ma.forEach(o),uy.forEach(o),ar=p(v),Ho=t(v,"DIV",{class:!0});var sf=l(Ho);sf.forEach(o),tr=p(v),Ua=t(v,"P",{});var my=l(Ua);nr=n(my,'So, the entry module is "the root" of the graph.'),my.forEach(o),lr=p(v),ls=t(v,"P",{});var wa=l(ls);rr=n(wa,"In "),Go=t(wa,"CODE",{class:!0});var wy=l(Go);ir=n(wy,"createModule"),wy.forEach(o),pr=n(wa,", I instantiate a new "),Ro=t(wa,"CODE",{class:!0});var gy=l(Ro);cr=n(gy,"Module"),gy.forEach(o),hr=n(wa," instance:"),wa.forEach(o),kr=p(v),Vo=t(v,"DIV",{class:!0});var of=l(Vo);of.forEach(o),vr=p(v),Hs=t(v,"P",{});var Jn=l(Hs);yr=n(Jn,"The class "),Jo=t(Jn,"CODE",{class:!0});var by=l(Jo);dr=n(by,"Module"),by.forEach(o),ur=n(Jn," will be used to record module properties, such as the content, the dependencies, exported keys, etc."),Jn.forEach(o),xr=p(v),Bo=t(v,"DIV",{class:!0});var ef=l(Bo);ef.forEach(o),fr=p(v),$=t(v,"P",{});var bs=l($);mr=n(bs,"While the "),Wo=t(bs,"CODE",{class:!0});var _y=l(Wo);wr=n(_y,"content"),_y.forEach(o),gr=n(bs," is the string content of the module, to understand what it actually means, I used "),Gs=t(bs,"A",{href:!0,rel:!0});var Ey=l(Gs);br=n(Ey,"babel"),Ey.forEach(o),_r=n(bs," to "),$a=t(bs,"EM",{});var Iy=l($a);Er=n(Iy,"parse the content"),Iy.forEach(o),Ir=n(bs," into AST (Abstract Syntax Tree):"),bs.forEach(o),Pr=p(v),Fo=t(v,"DIV",{class:!0});var af=l(Fo);af.forEach(o),qr=p(v),Ya=t(v,"P",{});var Py=l(Ya);Tr=n(Py,"Next, I need to find out the dependency of this module:"),Py.forEach(o),Ar=p(v),Uo=t(v,"DIV",{class:!0});var tf=l(Uo);tf.forEach(o),Or=p(v),Ka=t(v,"P",{});var qy=l(Ka);Sr=n(qy,"So, how can I know what are the dependencies of this module?"),qy.forEach(o),Cr=p(v),rs=t(v,"P",{});var ga=l(rs);jr=n(ga,"I can look for the "),$o=t(ga,"CODE",{class:!0});var Ty=l($o);Dr=n(Ty,"import"),Ty.forEach(o),Mr=n(ga,` statement from the AST with the help of the
`),Rs=t(ga,"A",{href:!0,rel:!0});var Ay=l(Rs);Lr=n(Ay,"babel-ast-explorer"),Ay.forEach(o),Nr=n(ga,"."),ga.forEach(o),Hr=p(v),za=t(v,"P",{});var Oy=l(za);is=t(Oy,"SPAN",{style:!0});var Sy=l(is);Yo=t(Sy,"PICTURE",{});var Rv=l(Yo);Za=t(Rv,"SOURCE",{type:!0,srcset:!0}),N=t(Rv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),Rv.forEach(o),Sy.forEach(o),Oy.forEach(o),Gr=p(v),j=t(v,"P",{});var W=l(j);Rr=n(W,"I found out that the "),Ko=t(W,"CODE",{class:!0});var Cy=l(Ko);Vr=n(Cy,"import"),Cy.forEach(o),Jr=n(W," statement in the AST is called the "),zo=t(W,"CODE",{class:!0});var jy=l(zo);Br=n(jy,"ImportDeclaration"),jy.forEach(o),Wr=n(W,". It has "),Zo=t(W,"CODE",{class:!0});var Dy=l(Zo);Fr=n(Dy,"specifiers"),Dy.forEach(o),Ur=n(W," and "),Qo=t(W,"CODE",{class:!0});var My=l(Qo);$r=n(My,"source"),My.forEach(o),Yr=n(W,", which the "),Xo=t(W,"CODE",{class:!0});var Ly=l(Xo);Kr=n(Ly,"source.value"),Ly.forEach(o),zr=n(W," tells us what this module is importing from:"),W.forEach(o),Zr=p(v),se=t(v,"DIV",{class:!0});var nf=l(se);nf.forEach(o),Qr=p(v),H=t(v,"P",{});var ss=l(H);Xr=n(ss,"So I had the path that the module is requesting, but it could be relative to the current file, eg "),oe=t(ss,"CODE",{class:!0});var Ny=l(oe);si=n(Ny,'"./foo/bar"'),Ny.forEach(o),oi=n(ss,", or from the "),ee=t(ss,"CODE",{class:!0});var Hy=l(ee);ei=n(Hy,"node_modules"),Hy.forEach(o),ai=n(ss,", eg: "),ae=t(ss,"CODE",{class:!0});var Gy=l(ae);ti=n(Gy,'"lodash"'),Gy.forEach(o),ni=n(ss,". How do I know what is the "),Qa=t(ss,"STRONG",{});var Ry=l(Qa);li=n(Ry,"actual file path"),Ry.forEach(o),ri=n(ss," that the module is requesting?"),ss.forEach(o),ii=p(v),Vs=t(v,"P",{});var Bn=l(Vs);pi=n(Bn,"The step of figuring out the actual path based on the requested path, is called "),Xa=t(Bn,"STRONG",{});var Vy=l(Xa);ci=n(Vy,'"Resolving"'),Vy.forEach(o),hi=n(Bn,":"),Bn.forEach(o),ki=p(v),te=t(v,"DIV",{class:!0});var lf=l(te);lf.forEach(o),vi=p(v),st=t(v,"P",{});var Jy=l(st);ot=t(Jy,"EM",{});var By=l(ot);yi=n(By,"Resolving path to the actual file path"),By.forEach(o),Jy.forEach(o),v.forEach(o),qn=p(c),k=t(c,"SECTION",{});var u=l(k);et=t(u,"H2",{});var Wy=l(et);Js=t(Wy,"A",{href:!0,id:!0});var Fy=l(Js);di=n(Fy,"Resolving"),Fy.forEach(o),Wy.forEach(o),ui=p(u),ps=t(u,"P",{});var ba=l(ps);xi=n(ba,`Let's talk about resolving. We know that "import"ing `),ne=t(ba,"CODE",{class:!0});var Uy=l(ne);fi=n(Uy,"./b.js"),Uy.forEach(o),mi=n(ba," in the following examples will result in getting a different file, because when we specify "),le=t(ba,"CODE",{class:!0});var $y=l(le);wi=n($y,"./"),$y.forEach(o),gi=n(ba,', we are "import"ing relative to the current file.'),ba.forEach(o),bi=p(u),re=t(u,"DIV",{class:!0});var rf=l(re);rf.forEach(o),_i=p(u),ie=t(u,"DIV",{class:!0});var pf=l(ie);pf.forEach(o),Ei=p(u),at=t(u,"P",{});var Yy=l(at);Ii=n(Yy,"So, what are the rules of resolving a module?"),Yy.forEach(o),Pi=p(u),Bs=t(u,"P",{});var Wn=l(Bs);qi=n(Wn,"The Node.js documentation has listed out the "),Ws=t(Wn,"A",{href:!0,rel:!0});var Ky=l(Ws);Ti=n(Ky,"detailed step of the module resolving algorithm"),Ky.forEach(o),Ai=n(Wn,":"),Wn.forEach(o),Oi=p(u),cs=t(u,"P",{});var _a=l(cs);Si=n(_a,"When we specify a relative path, "),pe=t(_a,"CODE",{class:!0});var zy=l(pe);Ci=n(zy,"./b"),zy.forEach(o),ji=n(_a,", Node.js will first assume that "),ce=t(_a,"CODE",{class:!0});var Zy=l(ce);Di=n(Zy,"./b"),Zy.forEach(o),Mi=n(_a," is a file, and tries the following extension if it doesn't exactly match the file name:"),_a.forEach(o),Li=p(u),he=t(u,"DIV",{class:!0});var cf=l(he);cf.forEach(o),Ni=p(u),Fs=t(u,"P",{});var Fn=l(Fs);Hi=n(Fn,"If the file does not exist, Node.js will then try to treat "),ke=t(Fn,"CODE",{class:!0});var Qy=l(ke);Gi=n(Qy,"./b"),Qy.forEach(o),Ri=n(Fn," as a directory, and try the following:"),Fn.forEach(o),Vi=p(u),ve=t(u,"DIV",{class:!0});var hf=l(ve);hf.forEach(o),Ji=p(u),hs=t(u,"P",{});var Ea=l(hs);Bi=n(Ea,"If we specify "),ye=t(Ea,"CODE",{class:!0});var Xy=l(ye);Wi=n(Xy,"import 'b'"),Xy.forEach(o),Fi=n(Ea," instead, Node.js will treat it as a package within "),de=t(Ea,"CODE",{class:!0});var sd=l(de);Ui=n(sd,"node_modules/"),sd.forEach(o),$i=n(Ea,", and have a different resolving strategy."),Ea.forEach(o),Yi=p(u),ks=t(u,"P",{});var Ia=l(ks);Ki=n(Ia,"Through the above illustration, we can see that resolving "),ue=t(Ia,"CODE",{class:!0});var od=l(ue);zi=n(od,"import './b'"),od.forEach(o),Zi=n(Ia," is not as simple as it seems. Besides the default Node.js resolving behaviour, "),Us=t(Ia,"A",{href:!0,rel:!0});var ed=l(Us);Qi=n(ed,"webpack provides a lot more customisation options"),ed.forEach(o),Xi=n(Ia,", such as custom extensions, alias, modules folders, etc."),Ia.forEach(o),sp=p(u),$s=t(u,"P",{});var Un=l($s);op=n(Un,"Here, I am showing you the "),tt=t(Un,"EM",{});var ad=l(tt);ep=n(ad,'"simplest"'),ad.forEach(o),ap=n(Un," resolver, which is to resolve relative path only:"),Un.forEach(o),tp=p(u),xe=t(u,"DIV",{class:!0});var kf=l(xe);kf.forEach(o),np=p(u),nt=t(u,"BLOCKQUOTE",{});var td=l(nt);lt=t(td,"SMALL",{});var nd=l(lt);lp=n(nd,"**Note:** You should try out writing a full node resolvers that resolve relatively as well as absolutely from `node_modules/`"),nd.forEach(o),td.forEach(o),rp=p(u),rt=t(u,"P",{});var ld=l(rt);ip=n(ld,"Now I know the actual requested file paths, I then create modules out of them."),ld.forEach(o),pp=p(u),fe=t(u,"DIV",{class:!0});var vf=l(fe);vf.forEach(o),cp=p(u),it=t(u,"P",{});var rd=l(it);hp=n(rd,"So, for each module, I find their dependencies, parse them, and find each dependency's dependencies, parse them as well, and find their dependencies, and so forth recursively. At the end of the process, I get a module dependency graph that looks something like this:"),rd.forEach(o),kp=p(u),me=t(u,"DIV",{class:!0});var yf=l(me);yf.forEach(o),vp=p(u),G=t(u,"P",{});var os=l(G);yp=n(os,"The root of the graph is our entry module, and you can traverse the graph through the "),we=t(os,"CODE",{class:!0});var id=l(we);dp=n(id,"dependencies"),id.forEach(o),up=n(os," of the module. As you can see, the "),ge=t(os,"CODE",{class:!0});var pd=l(ge);xp=n(pd,"index.js"),pd.forEach(o),fp=n(os," has 2 dependencies, the "),be=t(os,"CODE",{class:!0});var cd=l(be);mp=n(cd,"square.js"),cd.forEach(o),wp=n(os," and the "),_e=t(os,"CODE",{class:!0});var hd=l(_e);gp=n(hd,"circle.js"),hd.forEach(o),bp=n(os,"."),os.forEach(o),_p=p(u),pt=t(u,"BLOCKQUOTE",{});var kd=l(pt);ct=t(kd,"SMALL",{});var vd=l(ct);Ep=n(vd,"**Note:** If you are following along, you can checkout the tag `feat-1-module-dependency-graph`, to see the code that I had written up till this point."),vd.forEach(o),kd.forEach(o),u.forEach(o),Tn=p(c),P=t(c,"SECTION",{});var S=l(P);ht=t(S,"H2",{});var yd=l(ht);Ys=t(yd,"A",{href:!0,id:!0});var dd=l(Ys);Ip=n(dd,"Bundling"),dd.forEach(o),yd.forEach(o),Pp=p(S),kt=t(S,"P",{});var ud=l(kt);qp=n(ud,"With the module dependency graph, it's time to bundle them into a file!"),ud.forEach(o),Tp=p(S),R=t(S,"P",{});var es=l(R);Ap=n(es,"At this point in time, we can choose whether we want to bundle it in the "),vt=t(es,"STRONG",{});var xd=l(vt);Op=n(xd,'"webpack way"'),xd.forEach(o),Sp=n(es," or the "),yt=t(es,"STRONG",{});var fd=l(yt);Cp=n(fd,'"rollup way"'),fd.forEach(o),jp=n(es,". In this article I am showing you how I did it the "),dt=t(es,"STRONG",{});var md=l(dt);Dp=n(md,'"webpack way"'),md.forEach(o),Mp=n(es,". I'll write about bundling in the "),ut=t(es,"STRONG",{});var wd=l(ut);Lp=n(wd,'"rollup way"'),wd.forEach(o),Np=n(es," in the coming article."),es.forEach(o),Hp=p(S),xt=t(S,"BLOCKQUOTE",{});var gd=l(xt);Y=t(gd,"P",{});var _s=l(Y);Gp=n(_s,"If you have no idea about what is the "),ft=t(_s,"STRONG",{});var bd=l(ft);Rp=n(bd,'"webpack way"'),bd.forEach(o),Vp=n(_s," or "),mt=t(_s,"STRONG",{});var _d=l(mt);Jp=n(_d,'"rollup way"'),_d.forEach(o),Bp=n(_s,', I have "coined" the term in my '),Ee=t(_s,"A",{href:!0});var Ed=l(Ee);Wp=n(Ed,"previous article"),Ed.forEach(o),Fp=n(_s," and have detailed explanation about them!"),_s.forEach(o),gd.forEach(o),Up=p(S),wt=t(S,"P",{});var Id=l(wt);$p=n(Id,"Let's take a look how the final bundled file would look like:"),Id.forEach(o),Yp=p(S),Ie=t(S,"DIV",{class:!0});var df=l(Ie);df.forEach(o),Kp=p(S),gt=t(S,"P",{});var Pd=l(gt);zp=n(Pd,"Let's break it down to a few steps:"),Pd.forEach(o),Zp=p(S),vs=t(S,"UL",{});var Pa=l(vs);bt=t(Pa,"LI",{});var qd=l(bt);_t=t(qd,"STRONG",{});var Td=l(_t);Qp=n(Td,"Group modules into files"),Td.forEach(o),qd.forEach(o),Xp=p(Pa),Pe=t(Pa,"LI",{});var Vv=l(Pe);Et=t(Vv,"STRONG",{});var Ad=l(Et);sc=n(Ad,"Create the module map"),Ad.forEach(o),oc=n(Vv,' and wrapping each module in a "special" module factory function'),Vv.forEach(o),ec=p(Pa),qe=t(Pa,"LI",{});var Jv=l(qe);It=t(Jv,"STRONG",{});var Od=l(It);ac=n(Od,'Create the "runtime"'),Od.forEach(o),tc=n(Jv,", the glue that links each module together."),Jv.forEach(o),Pa.forEach(o),S.forEach(o),An=p(c),O=t(c,"SECTION",{});var F=l(O);Pt=t(F,"H3",{});var Sd=l(Pt);Ks=t(Sd,"A",{href:!0,id:!0});var Cd=l(Ks);nc=n(Cd,"Grouping modules into files"),Cd.forEach(o),Sd.forEach(o),lc=p(F),ys=t(F,"P",{});var qa=l(ys);rc=n(qa,"This step is to decide which modules goes to which file. We can split modules into different files because of "),zs=t(qa,"A",{href:!0,rel:!0});var jd=l(zs);ic=n(jd,"code splitting"),jd.forEach(o),pc=n(qa," due to dynamic import as well as optimisation, such as the webpack's "),Zs=t(qa,"A",{href:!0,rel:!0});var Dd=l(Zs);cc=n(Dd,"Chunk Splitting"),Dd.forEach(o),hc=n(qa,"."),qa.forEach(o),kc=p(F),qt=t(F,"P",{});var Md=l(qt);vc=n(Md,"I will support code splitting in the future. For now, I grouped all modules into 1 file."),Md.forEach(o),yc=p(F),Tt=t(F,"P",{});var Ld=l(Tt);dc=n(Ld,"To collect all the modules from module graph into a list of modules, I did a graph traversal:"),Ld.forEach(o),uc=p(F),Te=t(F,"DIV",{class:!0});var uf=l(Te);uf.forEach(o),xc=p(F),At=t(F,"P",{});var Nd=l(At);fc=n(Nd,"...and I used the list of modules to create a module map."),Nd.forEach(o),F.forEach(o),On=p(c),y=t(c,"SECTION",{});var x=l(y);Ot=t(x,"H3",{});var Hd=l(Ot);Qs=t(Hd,"A",{href:!0,id:!0});var Gd=l(Qs);mc=n(Gd,"Creating module map"),Gd.forEach(o),Hd.forEach(o),wc=p(x),St=t(x,"P",{});var Rd=l(St);gc=n(Rd,"The module map I created is a string, that would be inlined into the final bundle file."),Rd.forEach(o),bc=p(x),ds=t(x,"P",{});var Ta=l(ds);_c=n(Ta,"I looped through each module, and used "),Ae=t(Ta,"CODE",{class:!0});var Vd=l(Ae);Ec=n(Vd,"module.filePath"),Vd.forEach(o),Ic=n(Ta," as the key, and "),Oe=t(Ta,"CODE",{class:!0});var Jd=l(Oe);Pc=n(Jd,"module.content"),Jd.forEach(o),qc=n(Ta," as the value."),Ta.forEach(o),Tc=p(x),K=t(x,"P",{});var Es=l(K);Ac=n(Es,"The reason I dont use "),Se=t(Es,"CODE",{class:!0});var Bd=l(Se);Oc=n(Bd,"JSON.stringify(moduleMap)"),Bd.forEach(o),Sc=n(Es," instead of manually concatenating to build up the module map, is because JSON can only takes in "),Xs=t(Es,"A",{href:!0,rel:!0});var Wd=l(Xs);Cc=n(Wd,"JSON primitive data type"),Wd.forEach(o),jc=n(Es," as value, but what I built here is a JavaScript map, with "),Ce=t(Es,"CODE",{class:!0});var Fd=l(Ce);Dc=n(Fd,"function"),Fd.forEach(o),Mc=n(Es," as value, but in string."),Es.forEach(o),Lc=p(x),je=t(x,"DIV",{class:!0});var xf=l(je);xf.forEach(o),Nc=p(x),so=t(x,"P",{});var $n=l(so);Hc=n($n,"The function that wraps around the "),De=t($n,"CODE",{class:!0});var Ud=l(De);Gc=n(Ud,"module.content"),Ud.forEach(o),Rc=n($n," is called the module factory function. It provides 2 parameter to the module:"),$n.forEach(o),Vc=p(x),oo=t(x,"UL",{});var Yn=l(oo);Me=t(Yn,"LI",{});var Bv=l(Me);Le=t(Bv,"CODE",{class:!0});var $d=l(Le);Jc=n($d,"exports"),$d.forEach(o),Bc=n(Bv,", an object that the module can assign its exported value onto"),Bv.forEach(o),Wc=p(Yn),Ne=t(Yn,"LI",{});var Wv=l(Ne);He=t(Wv,"CODE",{class:!0});var Yd=l(He);Fc=n(Yd,"require"),Yd.forEach(o),Uc=n(Wv,", a function that the module can invoke with module path to import exported value from another module"),Wv.forEach(o),Yn.forEach(o),$c=p(x),Ct=t(x,"P",{});var Kd=l(Ct);Yc=n(Kd,"The module map right now is not something that can be executed:"),Kd.forEach(o),Kc=p(x),Ge=t(x,"DIV",{class:!0});var ff=l(Ge);ff.forEach(o),zc=p(x),V=t(x,"P",{});var as=l(V);Zc=n(as,"because it still uses "),Re=t(as,"CODE",{class:!0});var zd=l(Re);Qc=n(zd,"import"),zd.forEach(o),Xc=n(as," and "),Ve=t(as,"CODE",{class:!0});var Zd=l(Ve);sh=n(Zd,"export"),Zd.forEach(o),oh=n(as,". I had to transform them to use the "),Je=t(as,"CODE",{class:!0});var Qd=l(Je);eh=n(Qd,"exports"),Qd.forEach(o),ah=n(as," and "),Be=t(as,"CODE",{class:!0});var Xd=l(Be);th=n(Xd,"require"),Xd.forEach(o),nh=n(as," that we pass in."),as.forEach(o),lh=p(x),jt=t(x,"P",{});var su=l(jt);rh=n(su,"To transform the code, I used the AST of the module again: trasform the ast and generate the new code from the transformed ast."),su.forEach(o),ih=p(x),Dt=t(x,"P",{});var ou=l(Dt);ph=n(ou,'What I need is to trasform the "from" to "to" of the following:'),ou.forEach(o),ch=p(x),We=t(x,"DIV",{class:!0});var mf=l(We);mf.forEach(o),hh=p(x),Mt=t(x,"BLOCKQUOTE",{});var eu=l(Mt);eo=t(eu,"P",{});var Kn=l(eo);kh=n(Kn,"I wrote a "),Fe=t(Kn,"A",{href:!0});var au=l(Fe);vh=n(au,"step by step guide"),au.forEach(o),yh=n(Kn," on how to write babel transformation, please do check it out."),Kn.forEach(o),eu.forEach(o),dh=p(x),us=t(x,"P",{});var Aa=l(us);uh=n(Aa,"Knowing "),Lt=t(Aa,"STRONG",{});var tu=l(Lt);xh=n(tu,"what to target on AST"),tu.forEach(o),fh=n(Aa," and "),Nt=t(Aa,"STRONG",{});var nu=l(Nt);mh=n(nu,"how the transformed AST look like"),nu.forEach(o),wh=n(Aa,", I wrote my transformation code:"),Aa.forEach(o),gh=p(x),Ue=t(x,"DIV",{class:!0});var wf=l(Ue);wf.forEach(o),bh=p(x),$e=t(x,"P",{});var Fv=l($e);_h=n(Fv,"I omitted the actual babel transformation code, because it is lengthy. If you are interested to read about it, you can check out "),ao=t(Fv,"A",{href:!0,rel:!0});var lu=l(ao);Eh=n(lu,"from my Github repo"),lu.forEach(o),Fv.forEach(o),Ih=p(x),Ht=t(x,"P",{});var ru=l(Ht);Ph=n(ru,"So, now the module map looks ready:"),ru.forEach(o),qh=p(x),Ye=t(x,"DIV",{class:!0});var gf=l(Ye);gf.forEach(o),Th=p(x),to=t(x,"P",{});var zn=l(to);Ah=n(zn,"One thing to take note is that, for the "),Ke=t(zn,"CODE",{class:!0});var iu=l(Ke);Oh=n(iu,"require"),iu.forEach(o),Sh=n(zn," statements, I replaced the requested path to the actual resolved path, because I used the actual resolved path as the key to the module map."),zn.forEach(o),x.forEach(o),Sn=p(c),g=t(c,"SECTION",{});var _=l(g);Gt=t(_,"H3",{});var pu=l(Gt);no=t(pu,"A",{href:!0,id:!0});var cu=l(no);Rt=t(cu,"STRONG",{});var hu=l(Rt);Ch=n(hu,'Create the "runtime"'),hu.forEach(o),cu.forEach(o),pu.forEach(o),jh=p(_),Vt=t(_,"P",{});var ku=l(Vt);Dh=n(ku,"Now it's time to create the runtime. The runtime is a piece of code that is part of the output bundle, that runs when the application code is running, therefore, the runtime."),ku.forEach(o),Mh=p(_),Jt=t(_,"P",{});var vu=l(Jt);Lh=n(vu,"The runtime code can be from a template file, but for simplicity sake, I kept the runtime code as a string:"),vu.forEach(o),Nh=p(_),ze=t(_,"DIV",{class:!0});var bf=l(ze);bf.forEach(o),Hh=p(_),xs=t(_,"P",{});var Oa=l(xs);Gh=n(Oa,"The code above is self explanatory, except if you have no idea what does the "),Ze=t(Oa,"CODE",{class:!0});var yu=l(Ze);Rh=n(yu,"webpackStart()"),yu.forEach(o),Vh=n(Oa," do, you can read more about it in "),Qe=t(Oa,"A",{href:!0});var du=l(Qe);Jh=n(du,"my previous post"),du.forEach(o),Bh=n(Oa,"."),Oa.forEach(o),Wh=p(_),lo=t(_,"P",{});var Zn=l(lo);Fh=n(Zn,"Finally, I returned the module code from the "),Xe=t(Zn,"CODE",{class:!0});var uu=l(Xe);Uh=n(uu,"bundle"),uu.forEach(o),$h=n(Zn," function:"),Zn.forEach(o),Yh=p(_),sa=t(_,"DIV",{class:!0});var _f=l(sa);_f.forEach(o),Kh=p(_),ro=t(_,"P",{});var Qn=l(ro);zh=n(Qn,"Now I run my bundler, it generates a "),oa=t(Qn,"CODE",{class:!0});var xu=l(oa);Zh=n(xu,"output/bundle.js"),xu.forEach(o),Qh=n(Qn," file. I run the generated file with node and I see:"),Qn.forEach(o),Xh=p(_),ea=t(_,"DIV",{class:!0});var Ef=l(ea);Ef.forEach(o),sk=p(_),Bt=t(_,"P",{});var fu=l(Bt);ok=n(fu,"That's it! A working module bundler!"),fu.forEach(o),ek=p(_),io=t(_,"P",{});var Xn=l(io);ak=n(Xn,"Of course, the module bundler I've shown here is "),Wt=t(Xn,"STRONG",{});var mu=l(Wt);tk=n(mu,"nowhere near webpack"),mu.forEach(o),nk=n(Xn,". Webpack supports more module system, resolving strategies, loading strategies, plugin system, optimisation, and many many more."),Xn.forEach(o),_.forEach(o),Cn=p(c),q=t(c,"SECTION",{});var L=l(q);Ft=t(L,"H2",{});var wu=l(Ft);po=t(wu,"A",{href:!0,id:!0});var gu=l(po);lk=n(gu,"Optimisation"),gu.forEach(o),wu.forEach(o),rk=p(L),co=t(L,"P",{});var sl=l(co);ik=n(sl,"I played around my module bundler, and I quickly noticed a bug: "),Ut=t(sl,"STRONG",{});var bu=l(Ut);pk=n(bu,"Circular Dependency"),bu.forEach(o),ck=n(sl,"."),sl.forEach(o),hk=p(L),$t=t(L,"P",{});var _u=l($t);kk=n(_u,"Here's my input files that I've tweaked:"),_u.forEach(o),vk=p(L),aa=t(L,"DIV",{class:!0});var If=l(aa);If.forEach(o),yk=p(L),ta=t(L,"DIV",{class:!0});var Pf=l(ta);Pf.forEach(o),dk=p(L),Yt=t(L,"P",{});var Eu=l(Yt);uk=n(Eu,"When I ran it through my module bunlder, immediately it ran into a stack overflow:"),Eu.forEach(o),xk=p(L),na=t(L,"DIV",{class:!0});var qf=l(na);qf.forEach(o),L.forEach(o),jn=p(c),m=t(c,"SECTION",{});var b=l(m);Kt=t(b,"H3",{});var Iu=l(Kt);ho=t(Iu,"A",{href:!0,id:!0});var Pu=l(ho);fk=n(Pu,"Circular dependency"),Pu.forEach(o),Iu.forEach(o),mk=p(b),zt=t(b,"P",{});var qu=l(zt);wk=n(qu,"There were 2 junctures that the code did recursive traversal which have led to the endless loop:"),qu.forEach(o),gk=p(b),ko=t(b,"UL",{});var ol=l(ko);Zt=t(ol,"LI",{});var Tu=l(Zt);bk=n(Tu,"Generating dependency graphs"),Tu.forEach(o),_k=p(ol),Qt=t(ol,"LI",{});var Au=l(Qt);Ek=n(Au,"Traversing module graph for bundling"),Au.forEach(o),ol.forEach(o),Ik=p(b),la=t(b,"DIV",{class:!0});var Tf=l(la);Tf.forEach(o),Pk=p(b),Xt=t(b,"P",{});var Ou=l(Xt);qk=n(Ou,"Bundle with the latest code, the stack overflow is gone. However when I executed the output bundle, I saw"),Ou.forEach(o),Tk=p(b),ra=t(b,"DIV",{class:!0});var Af=l(ra);Af.forEach(o),Ak=p(b),sn=t(b,"P",{});var Su=l(sn);Ok=n(Su,"So I took a look at the output bundle:"),Su.forEach(o),Sk=p(b),ia=t(b,"DIV",{class:!0});var Of=l(ia);Of.forEach(o),Ck=p(b),E=t(b,"P",{});var T=l(E);jk=n(T,"So, the problem is that I destructed "),pa=t(T,"CODE",{class:!0});var Cu=l(pa);Dk=n(Cu,"PI"),Cu.forEach(o),Mk=n(T," from the exports of "),ca=t(T,"CODE",{class:!0});var ju=l(ca);Lk=n(ju,"index.js"),ju.forEach(o),Nk=n(T," before it is defined, so naturally "),ha=t(T,"CODE",{class:!0});var Du=l(ha);Hk=n(Du,"PI"),Du.forEach(o),Gk=n(T," within "),ka=t(T,"CODE",{class:!0});var Mu=l(ka);Rk=n(Mu,"circle.js"),Mu.forEach(o),Vk=n(T," would stay as "),va=t(T,"CODE",{class:!0});var Lu=l(va);Jk=n(Lu,"undefined"),Lu.forEach(o),Bk=n(T," throughout the application. However before I called "),ya=t(T,"CODE",{class:!0});var Nu=l(ya);Wk=n(Nu,"circleArea"),Nu.forEach(o),Fk=n(T,", we defined "),da=t(T,"CODE",{class:!0});var Hu=l(da);Uk=n(Hu,"PI"),Hu.forEach(o),$k=n(T," on the "),ua=t(T,"CODE",{class:!0});var Gu=l(ua);Yk=n(Gu,"index.js"),Gu.forEach(o),Kk=n(T,"'s export, I am expecting it to be available."),T.forEach(o),zk=p(b),on=t(b,"P",{});var Ru=l(on);Zk=n(Ru,"So I built my application with webpack and took a look at how webpack solved this problem."),Ru.forEach(o),Qk=p(b),xa=t(b,"DIV",{class:!0});var Sf=l(xa);Sf.forEach(o),Xk=p(b),vo=t(b,"P",{});var el=l(vo);sv=n(el,"Brilliant! The key is to lazily get the value of "),fa=t(el,"CODE",{class:!0});var Vu=l(fa);ov=n(Vu,"PI"),Vu.forEach(o),ev=n(el," when needed!"),el.forEach(o),av=p(b),yo=t(b,"P",{});var al=l(yo);tv=n(al,"I changed my babel transformation code, which I am not showing it here. If you are curious enough, you can check out "),uo=t(al,"A",{href:!0,rel:!0});var Ju=l(uo);nv=n(Ju,"the changes I made from Github"),Ju.forEach(o),lv=n(al,"."),al.forEach(o),b.forEach(o),Dn=p(c),Q=t(c,"SECTION",{});var Sa=l(Q);en=t(Sa,"H2",{});var Bu=l(en);xo=t(Bu,"A",{href:!0,id:!0});var Wu=l(xo);rv=n(Wu,"Summary"),Wu.forEach(o),Bu.forEach(o),iv=p(Sa),fs=t(Sa,"P",{});var Ca=l(fs);pv=n(Ca,"There's two phases in module bundling: "),an=t(Ca,"STRONG",{});var Fu=l(an);cv=n(Fu,"Dependency Resolution"),Fu.forEach(o),hv=n(Ca," and "),tn=t(Ca,"STRONG",{});var Uu=l(tn);kv=n(Uu,"Bundling"),Uu.forEach(o),vv=n(Ca,"."),Ca.forEach(o),yv=p(Sa),fo=t(Sa,"P",{});var tl=l(fo);dv=n(tl,"I showed you how I constructed the dependency graph, by finding import statements and resolving modules. I shared how I created module maps and transformed the imports / exports syntax during "),nn=t(tl,"STRONG",{});var $u=l(nn);uv=n($u,"bundling"),$u.forEach(o),xv=n(tl,". Lastly, I fixed the circular dependency bug that was in the first version of my module bundler."),tl.forEach(o),Sa.forEach(o),Mn=p(c),M=t(c,"SECTION",{});var ts=l(M);ln=t(ts,"H3",{});var Yu=l(ln);mo=t(Yu,"A",{href:!0,id:!0});var Ku=l(mo);fv=n(Ku,"Whats next?"),Ku.forEach(o),Yu.forEach(o),mv=p(ts),rn=t(ts,"P",{});var zu=l(rn);wv=n(zu,"I have a few ideas that I will add to my module bundler, such as:"),zu.forEach(o),gv=p(ts),wo=t(ts,"UL",{});var nl=l(wo);pn=t(nl,"LI",{});var Zu=l(pn);bv=n(Zu,"code spliting"),Zu.forEach(o),_v=p(nl),cn=t(nl,"LI",{});var Qu=l(cn);Ev=n(Qu,"watch mode and reloading"),Qu.forEach(o),nl.forEach(o),Iv=p(ts),hn=t(ts,"P",{});var Xu=l(hn);Pv=n(Xu,"which I will cover them in my next article when they are ready."),Xu.forEach(o),qv=p(ts),kn=t(ts,"P",{});var sx=l(kn);Tv=n(sx,"Till then. Cheers. \u{1F60E}"),sx.forEach(o),ts.forEach(o),Ln=p(c),ws=t(c,"SECTION",{});var ll=l(ws);vn=t(ll,"H2",{});var ox=l(vn);go=t(ox,"A",{href:!0,id:!0});var ex=l(go);Av=n(ex,"Further Readings"),ex.forEach(o),ox.forEach(o),Ov=p(ll),z=t(ll,"UL",{});var Is=l(z);yn=t(Is,"LI",{});var ax=l(yn);bo=t(ax,"A",{href:!0,rel:!0});var tx=l(bo);Sv=n(tx,"Ronen Amiel, Build Your Own Webpack - You Gotta Love Frontend 2018"),tx.forEach(o),ax.forEach(o),Cv=p(Is),dn=t(Is,"LI",{});var nx=l(dn);_o=t(nx,"A",{href:!0,rel:!0});var lx=l(_o);jv=n(lx,"Luciano Mammino, Unbundling the JavaScript module bundler - DublinJS July 2018"),lx.forEach(o),nx.forEach(o),Dv=p(Is),un=t(Is,"LI",{});var rx=l(un);Eo=t(rx,"A",{href:!0,rel:!0});var ix=l(Eo);Mv=n(ix,"Adam Kelly, Let\u2019s learn how module bundlers work and then write one ourselves"),ix.forEach(o),rx.forEach(o),Lv=p(Is),xn=t(Is,"LI",{});var px=l(xn);Io=t(px,"A",{href:!0,rel:!0});var cx=l(Io);Nv=n(cx,"Webpack founder Tobias Koppers demos bundling live by hand"),cx.forEach(o),px.forEach(o),Is.forEach(o),ll.forEach(o),this.h()},h(){r(J,"href","/what-is-module-bundler-and-how-does-it-work/"),r(C,"href","https://webpack.js.org"),r(C,"rel","nofollow"),r(Ts,"href","https://rollupjs.org"),r(Ts,"rel","nofollow"),r(As,"href","#getting-started"),r(As,"id","getting-started"),r(Ao,"href","/what-is-module-bundler-and-how-does-it-work/"),r(Ds,"href","#the-input"),r(Ds,"id","the-input"),r(Co,"class","code-section"),r(jo,"class","code-section"),r(Do,"class","code-section"),r(Ms,"href","https://github.com/tanhauhau/byo-bundler/tree/master/fixture"),r(Ms,"rel","nofollow"),r(Mo,"class","inline"),r(Lo,"class","inline"),r(Ls,"href","#writing"),r(Ls,"id","writing"),r(No,"class","code-section"),r(Ns,"href","https://en.wikipedia.org/wiki/Directed_graph"),r(Ns,"rel","nofollow"),r(Ho,"class","code-section"),r(Go,"class","inline"),r(Ro,"class","inline"),r(Vo,"class","code-section"),r(Jo,"class","inline"),r(Bo,"class","code-section"),r(Wo,"class","inline"),r(Gs,"href","http://babeljs.io"),r(Gs,"rel","nofollow"),r(Fo,"class","code-section"),r(Uo,"class","code-section"),r($o,"class","inline"),r(Rs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImltcG9ydCBzcXVhcmVBcmVhIGZyb20gJy4vc3F1YXJlLmpzJztcbmltcG9ydCBjaXJjbGVBcmVhIGZyb20gJy4vY2lyY2xlLmpzJztcblxuY29uc29sZS5sb2coJ0FyZWEgb2Ygc3F1YXJlOiAnLCBzcXVhcmVBcmVhKDUpKTtcbmNvbnNvbGUubG9nKCdBcmVhIG9mIGNpcmNsZScsIGNpcmNsZUFyZWEoNSkpO1xuIn0="),r(Rs,"rel","nofollow"),r(Za,"type","image/webp"),r(Za,"srcset",$f+", "+Uf+" 2x"),Bf(N.src,$v=vx)||r(N,"src",$v),r(N,"srcset",vx+", "+Yf+" 2x"),r(N,"loading","lazy"),Ps(N,"position","absolute"),Ps(N,"top","0"),Ps(N,"width","100%"),Ps(N,"height","100%"),r(N,"alt","babel-ast-explorer"),r(N,"title","Visualizing AST through babel-ast-explorer"),Ps(is,"display","block"),Ps(is,"position","relative"),Ps(is,"padding-top","38.672%"),Ps(is,"width","100%"),r(Ko,"class","inline"),r(zo,"class","inline"),r(Zo,"class","inline"),r(Qo,"class","inline"),r(Xo,"class","inline"),r(se,"class","code-section"),r(oe,"class","inline"),r(ee,"class","inline"),r(ae,"class","inline"),r(te,"class","code-section"),r(Js,"href","#resolving"),r(Js,"id","resolving"),r(ne,"class","inline"),r(le,"class","inline"),r(re,"class","code-section"),r(ie,"class","code-section"),r(Ws,"href","http://nodejs.org/api/modules.html#modules_all_together"),r(Ws,"rel","nofollow"),r(pe,"class","inline"),r(ce,"class","inline"),r(he,"class","code-section"),r(ke,"class","inline"),r(ve,"class","code-section"),r(ye,"class","inline"),r(de,"class","inline"),r(ue,"class","inline"),r(Us,"href","https://webpack.js.org/configuration/resolve/"),r(Us,"rel","nofollow"),r(xe,"class","code-section"),r(fe,"class","code-section"),r(me,"class","code-section"),r(we,"class","inline"),r(ge,"class","inline"),r(be,"class","inline"),r(_e,"class","inline"),r(Ys,"href","#bundling"),r(Ys,"id","bundling"),r(Ee,"href","/what-is-module-bundler-and-how-does-it-work/"),r(Ie,"class","code-section"),r(Ks,"href","#grouping-modules-into-files"),r(Ks,"id","grouping-modules-into-files"),r(zs,"href","https://webpack.js.org/guides/code-splitting/"),r(zs,"rel","nofollow"),r(Zs,"href","https://webpack.js.org/plugins/split-chunks-plugin/"),r(Zs,"rel","nofollow"),r(Te,"class","code-section"),r(Qs,"href","#creating-module-map"),r(Qs,"id","creating-module-map"),r(Ae,"class","inline"),r(Oe,"class","inline"),r(Se,"class","inline"),r(Xs,"href","https://documentation.progress.com/output/ua/OpenEdge_latest/index.html#page/dvjsn/json-data-types.html"),r(Xs,"rel","nofollow"),r(Ce,"class","inline"),r(je,"class","code-section"),r(De,"class","inline"),r(Le,"class","inline"),r(He,"class","inline"),r(Ge,"class","code-section"),r(Re,"class","inline"),r(Ve,"class","inline"),r(Je,"class","inline"),r(Be,"class","inline"),r(We,"class","code-section"),r(Fe,"href","/step-by-step-guide-for-writing-a-babel-transformation"),r(Ue,"class","code-section"),r(ao,"href","https://github.com/tanhauhau/byo-bundler/blob/feat-2-bundling/src/index.js#L46-L138"),r(ao,"rel","nofollow"),r(Ye,"class","code-section"),r(Ke,"class","inline"),r(no,"href","#create-the-runtime"),r(no,"id","create-the-runtime"),r(ze,"class","code-section"),r(Ze,"class","inline"),r(Qe,"href","/what-is-module-bundler-and-how-does-it-work/"),r(Xe,"class","inline"),r(sa,"class","code-section"),r(oa,"class","inline"),r(ea,"class","code-section"),r(po,"href","#optimisation"),r(po,"id","optimisation"),r(aa,"class","code-section"),r(ta,"class","code-section"),r(na,"class","code-section"),r(ho,"href","#circular-dependency"),r(ho,"id","circular-dependency"),r(la,"class","code-section"),r(ra,"class","code-section"),r(ia,"class","code-section"),r(pa,"class","inline"),r(ca,"class","inline"),r(ha,"class","inline"),r(ka,"class","inline"),r(va,"class","inline"),r(ya,"class","inline"),r(da,"class","inline"),r(ua,"class","inline"),r(xa,"class","code-section"),r(fa,"class","inline"),r(uo,"href","https://github.com/tanhauhau/byo-bundler/compare/feat-2-bundling...feat-3-circular-dependency"),r(uo,"rel","nofollow"),r(xo,"href","#summary"),r(xo,"id","summary"),r(mo,"href","#whats-next"),r(mo,"id","whats-next"),r(go,"href","#further-readings"),r(go,"id","further-readings"),r(bo,"href","https://www.youtube.com/watch?v=Gc9-7PBqOC8"),r(bo,"rel","nofollow"),r(_o,"href","https://slides.com/lucianomammino/unbundling-the-javascript-module-bundler-dublinjs"),r(_o,"rel","nofollow"),r(Eo,"href","https://www.freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),r(Eo,"rel","nofollow"),r(Io,"href","https://www.youtube.com/watch?v=UNMkLHzofQI"),r(Io,"rel","nofollow")},m(c,d){f(c,w,d),s(w,Z),s(w,J),s(J,qs),s(w,I),s(w,C),s(C,qo),s(w,rl),s(w,Ts),s(Ts,il),s(w,pl),f(c,fn,d),f(c,To,d),s(To,cl),f(c,mn,d),f(c,wn,d),f(c,gn,d),f(c,ms,d),s(ms,hl),s(ms,ja),s(ja,kl),s(ms,vl),f(c,bn,d),f(c,_n,d),f(c,En,d),f(c,D,d),s(D,Da),s(Da,As),s(As,yl),s(D,dl),s(D,Os),s(Os,ul),s(Os,Ao),s(Ao,xl),s(Os,fl),s(D,ml),s(D,Ss),s(Ss,wl),s(Ss,Ma),s(Ma,gl),s(Ss,bl),s(D,_l),s(D,Cs),s(Cs,Oo),s(Oo,El),s(Oo,La),s(La,Il),s(Cs,Pl),s(Cs,So),s(So,ql),s(So,Na),s(Na,Tl),s(D,Al),s(D,Ha),s(Ha,js),s(js,Ol),s(js,Ga),s(Ga,Sl),s(js,Cl),f(c,In,d),f(c,A,d),s(A,Ra),s(Ra,Ds),s(Ds,jl),s(A,Dl),s(A,Va),s(Va,Ml),s(A,Ll),s(A,Co),Co.innerHTML=dx,s(A,Nl),s(A,jo),jo.innerHTML=ux,s(A,Hl),s(A,Do),Do.innerHTML=xx,s(A,Gl),s(A,U),s(U,Rl),s(U,Ms),s(Ms,Vl),s(U,Jl),s(U,Mo),s(Mo,Bl),s(U,Wl),s(U,Lo),s(Lo,Fl),s(U,Ul),f(c,Pn,d),f(c,h,d),s(h,Ja),s(Ja,Ls),s(Ls,$l),s(h,Yl),s(h,Ba),s(Ba,Kl),s(h,zl),s(h,No),No.innerHTML=fx,s(h,Zl),s(h,Wa),s(Wa,ns),s(ns,Ql),s(ns,Fa),s(Fa,Xl),s(ns,sr),s(ns,Ns),s(Ns,or),s(ns,er),s(h,ar),s(h,Ho),Ho.innerHTML=mx,s(h,tr),s(h,Ua),s(Ua,nr),s(h,lr),s(h,ls),s(ls,rr),s(ls,Go),s(Go,ir),s(ls,pr),s(ls,Ro),s(Ro,cr),s(ls,hr),s(h,kr),s(h,Vo),Vo.innerHTML=wx,s(h,vr),s(h,Hs),s(Hs,yr),s(Hs,Jo),s(Jo,dr),s(Hs,ur),s(h,xr),s(h,Bo),Bo.innerHTML=gx,s(h,fr),s(h,$),s($,mr),s($,Wo),s(Wo,wr),s($,gr),s($,Gs),s(Gs,br),s($,_r),s($,$a),s($a,Er),s($,Ir),s(h,Pr),s(h,Fo),Fo.innerHTML=bx,s(h,qr),s(h,Ya),s(Ya,Tr),s(h,Ar),s(h,Uo),Uo.innerHTML=_x,s(h,Or),s(h,Ka),s(Ka,Sr),s(h,Cr),s(h,rs),s(rs,jr),s(rs,$o),s($o,Dr),s(rs,Mr),s(rs,Rs),s(Rs,Lr),s(rs,Nr),s(h,Hr),s(h,za),s(za,is),s(is,Yo),s(Yo,Za),s(Yo,N),s(h,Gr),s(h,j),s(j,Rr),s(j,Ko),s(Ko,Vr),s(j,Jr),s(j,zo),s(zo,Br),s(j,Wr),s(j,Zo),s(Zo,Fr),s(j,Ur),s(j,Qo),s(Qo,$r),s(j,Yr),s(j,Xo),s(Xo,Kr),s(j,zr),s(h,Zr),s(h,se),se.innerHTML=Ex,s(h,Qr),s(h,H),s(H,Xr),s(H,oe),s(oe,si),s(H,oi),s(H,ee),s(ee,ei),s(H,ai),s(H,ae),s(ae,ti),s(H,ni),s(H,Qa),s(Qa,li),s(H,ri),s(h,ii),s(h,Vs),s(Vs,pi),s(Vs,Xa),s(Xa,ci),s(Vs,hi),s(h,ki),s(h,te),te.innerHTML=Ix,s(h,vi),s(h,st),s(st,ot),s(ot,yi),f(c,qn,d),f(c,k,d),s(k,et),s(et,Js),s(Js,di),s(k,ui),s(k,ps),s(ps,xi),s(ps,ne),s(ne,fi),s(ps,mi),s(ps,le),s(le,wi),s(ps,gi),s(k,bi),s(k,re),re.innerHTML=Px,s(k,_i),s(k,ie),ie.innerHTML=qx,s(k,Ei),s(k,at),s(at,Ii),s(k,Pi),s(k,Bs),s(Bs,qi),s(Bs,Ws),s(Ws,Ti),s(Bs,Ai),s(k,Oi),s(k,cs),s(cs,Si),s(cs,pe),s(pe,Ci),s(cs,ji),s(cs,ce),s(ce,Di),s(cs,Mi),s(k,Li),s(k,he),he.innerHTML=Tx,s(k,Ni),s(k,Fs),s(Fs,Hi),s(Fs,ke),s(ke,Gi),s(Fs,Ri),s(k,Vi),s(k,ve),ve.innerHTML=Ax,s(k,Ji),s(k,hs),s(hs,Bi),s(hs,ye),s(ye,Wi),s(hs,Fi),s(hs,de),s(de,Ui),s(hs,$i),s(k,Yi),s(k,ks),s(ks,Ki),s(ks,ue),s(ue,zi),s(ks,Zi),s(ks,Us),s(Us,Qi),s(ks,Xi),s(k,sp),s(k,$s),s($s,op),s($s,tt),s(tt,ep),s($s,ap),s(k,tp),s(k,xe),xe.innerHTML=Ox,s(k,np),s(k,nt),s(nt,lt),s(lt,lp),s(k,rp),s(k,rt),s(rt,ip),s(k,pp),s(k,fe),fe.innerHTML=Sx,s(k,cp),s(k,it),s(it,hp),s(k,kp),s(k,me),me.innerHTML=Cx,s(k,vp),s(k,G),s(G,yp),s(G,we),s(we,dp),s(G,up),s(G,ge),s(ge,xp),s(G,fp),s(G,be),s(be,mp),s(G,wp),s(G,_e),s(_e,gp),s(G,bp),s(k,_p),s(k,pt),s(pt,ct),s(ct,Ep),f(c,Tn,d),f(c,P,d),s(P,ht),s(ht,Ys),s(Ys,Ip),s(P,Pp),s(P,kt),s(kt,qp),s(P,Tp),s(P,R),s(R,Ap),s(R,vt),s(vt,Op),s(R,Sp),s(R,yt),s(yt,Cp),s(R,jp),s(R,dt),s(dt,Dp),s(R,Mp),s(R,ut),s(ut,Lp),s(R,Np),s(P,Hp),s(P,xt),s(xt,Y),s(Y,Gp),s(Y,ft),s(ft,Rp),s(Y,Vp),s(Y,mt),s(mt,Jp),s(Y,Bp),s(Y,Ee),s(Ee,Wp),s(Y,Fp),s(P,Up),s(P,wt),s(wt,$p),s(P,Yp),s(P,Ie),Ie.innerHTML=jx,s(P,Kp),s(P,gt),s(gt,zp),s(P,Zp),s(P,vs),s(vs,bt),s(bt,_t),s(_t,Qp),s(vs,Xp),s(vs,Pe),s(Pe,Et),s(Et,sc),s(Pe,oc),s(vs,ec),s(vs,qe),s(qe,It),s(It,ac),s(qe,tc),f(c,An,d),f(c,O,d),s(O,Pt),s(Pt,Ks),s(Ks,nc),s(O,lc),s(O,ys),s(ys,rc),s(ys,zs),s(zs,ic),s(ys,pc),s(ys,Zs),s(Zs,cc),s(ys,hc),s(O,kc),s(O,qt),s(qt,vc),s(O,yc),s(O,Tt),s(Tt,dc),s(O,uc),s(O,Te),Te.innerHTML=Dx,s(O,xc),s(O,At),s(At,fc),f(c,On,d),f(c,y,d),s(y,Ot),s(Ot,Qs),s(Qs,mc),s(y,wc),s(y,St),s(St,gc),s(y,bc),s(y,ds),s(ds,_c),s(ds,Ae),s(Ae,Ec),s(ds,Ic),s(ds,Oe),s(Oe,Pc),s(ds,qc),s(y,Tc),s(y,K),s(K,Ac),s(K,Se),s(Se,Oc),s(K,Sc),s(K,Xs),s(Xs,Cc),s(K,jc),s(K,Ce),s(Ce,Dc),s(K,Mc),s(y,Lc),s(y,je),je.innerHTML=Mx,s(y,Nc),s(y,so),s(so,Hc),s(so,De),s(De,Gc),s(so,Rc),s(y,Vc),s(y,oo),s(oo,Me),s(Me,Le),s(Le,Jc),s(Me,Bc),s(oo,Wc),s(oo,Ne),s(Ne,He),s(He,Fc),s(Ne,Uc),s(y,$c),s(y,Ct),s(Ct,Yc),s(y,Kc),s(y,Ge),Ge.innerHTML=Lx,s(y,zc),s(y,V),s(V,Zc),s(V,Re),s(Re,Qc),s(V,Xc),s(V,Ve),s(Ve,sh),s(V,oh),s(V,Je),s(Je,eh),s(V,ah),s(V,Be),s(Be,th),s(V,nh),s(y,lh),s(y,jt),s(jt,rh),s(y,ih),s(y,Dt),s(Dt,ph),s(y,ch),s(y,We),We.innerHTML=Nx,s(y,hh),s(y,Mt),s(Mt,eo),s(eo,kh),s(eo,Fe),s(Fe,vh),s(eo,yh),s(y,dh),s(y,us),s(us,uh),s(us,Lt),s(Lt,xh),s(us,fh),s(us,Nt),s(Nt,mh),s(us,wh),s(y,gh),s(y,Ue),Ue.innerHTML=Hx,s(y,bh),s(y,$e),s($e,_h),s($e,ao),s(ao,Eh),s(y,Ih),s(y,Ht),s(Ht,Ph),s(y,qh),s(y,Ye),Ye.innerHTML=Gx,s(y,Th),s(y,to),s(to,Ah),s(to,Ke),s(Ke,Oh),s(to,Sh),f(c,Sn,d),f(c,g,d),s(g,Gt),s(Gt,no),s(no,Rt),s(Rt,Ch),s(g,jh),s(g,Vt),s(Vt,Dh),s(g,Mh),s(g,Jt),s(Jt,Lh),s(g,Nh),s(g,ze),ze.innerHTML=Rx,s(g,Hh),s(g,xs),s(xs,Gh),s(xs,Ze),s(Ze,Rh),s(xs,Vh),s(xs,Qe),s(Qe,Jh),s(xs,Bh),s(g,Wh),s(g,lo),s(lo,Fh),s(lo,Xe),s(Xe,Uh),s(lo,$h),s(g,Yh),s(g,sa),sa.innerHTML=Vx,s(g,Kh),s(g,ro),s(ro,zh),s(ro,oa),s(oa,Zh),s(ro,Qh),s(g,Xh),s(g,ea),ea.innerHTML=Jx,s(g,sk),s(g,Bt),s(Bt,ok),s(g,ek),s(g,io),s(io,ak),s(io,Wt),s(Wt,tk),s(io,nk),f(c,Cn,d),f(c,q,d),s(q,Ft),s(Ft,po),s(po,lk),s(q,rk),s(q,co),s(co,ik),s(co,Ut),s(Ut,pk),s(co,ck),s(q,hk),s(q,$t),s($t,kk),s(q,vk),s(q,aa),aa.innerHTML=Bx,s(q,yk),s(q,ta),ta.innerHTML=Wx,s(q,dk),s(q,Yt),s(Yt,uk),s(q,xk),s(q,na),na.innerHTML=Fx,f(c,jn,d),f(c,m,d),s(m,Kt),s(Kt,ho),s(ho,fk),s(m,mk),s(m,zt),s(zt,wk),s(m,gk),s(m,ko),s(ko,Zt),s(Zt,bk),s(ko,_k),s(ko,Qt),s(Qt,Ek),s(m,Ik),s(m,la),la.innerHTML=Ux,s(m,Pk),s(m,Xt),s(Xt,qk),s(m,Tk),s(m,ra),ra.innerHTML=$x,s(m,Ak),s(m,sn),s(sn,Ok),s(m,Sk),s(m,ia),ia.innerHTML=Yx,s(m,Ck),s(m,E),s(E,jk),s(E,pa),s(pa,Dk),s(E,Mk),s(E,ca),s(ca,Lk),s(E,Nk),s(E,ha),s(ha,Hk),s(E,Gk),s(E,ka),s(ka,Rk),s(E,Vk),s(E,va),s(va,Jk),s(E,Bk),s(E,ya),s(ya,Wk),s(E,Fk),s(E,da),s(da,Uk),s(E,$k),s(E,ua),s(ua,Yk),s(E,Kk),s(m,zk),s(m,on),s(on,Zk),s(m,Qk),s(m,xa),xa.innerHTML=Kx,s(m,Xk),s(m,vo),s(vo,sv),s(vo,fa),s(fa,ov),s(vo,ev),s(m,av),s(m,yo),s(yo,tv),s(yo,uo),s(uo,nv),s(yo,lv),f(c,Dn,d),f(c,Q,d),s(Q,en),s(en,xo),s(xo,rv),s(Q,iv),s(Q,fs),s(fs,pv),s(fs,an),s(an,cv),s(fs,hv),s(fs,tn),s(tn,kv),s(fs,vv),s(Q,yv),s(Q,fo),s(fo,dv),s(fo,nn),s(nn,uv),s(fo,xv),f(c,Mn,d),f(c,M,d),s(M,ln),s(ln,mo),s(mo,fv),s(M,mv),s(M,rn),s(rn,wv),s(M,gv),s(M,wo),s(wo,pn),s(pn,bv),s(wo,_v),s(wo,cn),s(cn,Ev),s(M,Iv),s(M,hn),s(hn,Pv),s(M,qv),s(M,kn),s(kn,Tv),f(c,Ln,d),f(c,ws,d),s(ws,vn),s(vn,go),s(go,Av),s(ws,Ov),s(ws,z),s(z,yn),s(yn,bo),s(bo,Sv),s(z,Cv),s(z,dn),s(dn,_o),s(_o,jv),s(z,Dv),s(z,un),s(un,Eo),s(Eo,Mv),s(z,Lv),s(z,xn),s(xn,Io),s(Io,Nv)},p:Wf,d(c){c&&o(w),c&&o(fn),c&&o(To),c&&o(mn),c&&o(wn),c&&o(gn),c&&o(ms),c&&o(bn),c&&o(_n),c&&o(En),c&&o(D),c&&o(In),c&&o(A),c&&o(Pn),c&&o(h),c&&o(qn),c&&o(k),c&&o(Tn),c&&o(P),c&&o(An),c&&o(O),c&&o(On),c&&o(y),c&&o(Sn),c&&o(g),c&&o(Cn),c&&o(q),c&&o(jn),c&&o(m),c&&o(Dn),c&&o(Q),c&&o(Mn),c&&o(M),c&&o(Ln),c&&o(ws)}}}function Zf(Po){let w,Z;const J=[Po[0],yx];let qs={$$slots:{default:[zf]},$$scope:{ctx:Po}};for(let I=0;I<J.length;I+=1)qs=Uv(qs,J[I]);return w=new Ff({props:qs}),{c(){Mf(w.$$.fragment)},l(I){Lf(w.$$.fragment,I)},m(I,C){Nf(w,I,C),Z=!0},p(I,[C]){const qo=C&1?Hf(J,[C&1&&hx(I[0]),C&0&&hx(yx)]):{};C&2&&(qo.$$scope={dirty:C,ctx:I}),w.$set(qo)},i(I){Z||(Gf(w.$$.fragment,I),Z=!0)},o(I){Rf(w.$$.fragment,I),Z=!1},d(I){Vf(w,I)}}}const yx={title:"I wrote my module bundler",date:"2019-09-18T08:00:00Z",tags:["JavaScript","module bundler","dev tool","webpack"],description:"In my previous article, I explained how module bundler works. In this article, I am going to show you how I wrote my module bundler...",series:"Write a module bundler",label:"blog",tableOfContents:[{link:"getting-started",title:"Getting Started",nested:[{link:"the-input",title:"The Input"}]},{link:"writing",title:"Writing"},{link:"resolving",title:"Resolving"},{link:"bundling",title:"Bundling",nested:[{link:"grouping-modules-into-files",title:"Grouping modules into files"},{link:"creating-module-map",title:"Creating module map"},{link:"create-the-runtime",title:'Create the "runtime"'}]},{link:"optimisation",title:"Optimisation",nested:[{link:"circular-dependency",title:"Circular dependency"}]},{link:"summary",title:"Summary",nested:[{link:"whats-next",title:"Whats next?"}]},{link:"further-readings",title:"Further Readings"}]};function Qf(Po,w,Z){return Jf("blog",{image:Kf}),Po.$$set=J=>{Z(0,w=Uv(Uv({},w),kx(J)))},w=kx(w),[w]}class tm extends Cf{constructor(w){super();jf(this,w,Qf,Zf,Df,{})}}export{tm as default,yx as metadata};
