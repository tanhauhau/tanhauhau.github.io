import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as ts,g as es,d as os,b as ls,s as a,f as is,e as s,t as ps,a as cs,n as e,r as n}from"../chunks/C2PHntuy.js";import{h as t}from"../chunks/C3QlhiH-.js";import{s as o}from"../chunks/CEusTUg_.js";import{i as rs}from"../chunks/BQOOHHT8.js";import{l as hs,s as ks}from"../chunks/gzNpScmH.js";import{B as ds}from"../chunks/B1caYEk9.js";const P=""+new URL("../assets/bug.CcEm5Igw.gif",import.meta.url).href,vs=""+new URL("../assets/bug.3B7h4nY5.gif",import.meta.url).href,F=""+new URL("../assets/changelog.DbmZaRKN.png",import.meta.url).href,us=""+new URL("../assets/changelog.5h5xi7xt.png",import.meta.url).href,ys=""+new URL("../assets/changelog.Bp_8OHx9.webp",import.meta.url).href,gs=""+new URL("../assets/changelog.CDkSk48Z.webp",import.meta.url).href,ms=""+new URL("../assets/hero-twitter.BeyrBUbC.jpg",import.meta.url).href,U={title:"Contributing to Svelte - Fixing issue #5012",date:"2020-06-25T08:00:00Z",tags:["Svelte","JavaScript","Open Source"],series:"Contributing to Svelte",description:"Svelte issue #5012 - Slot containing only {@html value} renders in wrong place on update",label:"blog",tableOfContents:[{link:"background",title:"Background"},{link:"the-bug",title:"The bug"},{link:"verifying-the-bug",title:"Verifying the bug"},{link:"investigating-the-bug",title:"Investigating the bug",nested:[{link:"htmltag",title:"HtmlTag"}]},{link:"fixing-the-bug",title:"Fixing the bug"}]},{title:js,date:Rs,tags:Cs,series:Es,description:Ms,label:$s,tableOfContents:As}=U;var xs=ls(`<section><h2><a href="#background" id="background">Background</a></h2> <p>Following <a href="/contributing-to-svelte-fixing-issue-4392">Contributing to Svelte - Fixing issue #4392</a>, I find it interesting to write my thought process down on fixing a Svelte issue.</p> <p>So today, I'm going to walk through a new issue, <a href="https://github.com/sveltejs/svelte/issues/5012" rel="nofollow">#5012</a>.</p></section> <section><h2><a href="#the-bug" id="the-bug">The bug</a></h2> <div class="issue svelte-t9d7ix"><p class="svelte-t9d7ix"><strong>Slot containing only <!> renders in wrong place on update <a href="https://github.com/sveltejs/svelte/issues/5012" rel="nofollow">#5012</a></strong></p> <p class="svelte-t9d7ix">When a slotted component is instantiated and the only contents of the slot is <!>, changing value will cause the HTML-ized value to render at the end of the slot's parent element (i.e. after all sibling elements) instead of in the correct place.</p> <p class="svelte-t9d7ix"><strong>To Reproduce</strong></p> <p class="svelte-t9d7ix"><a href="https://svelte.dev/repl/1f9da40bca4b44a089041e826648de2f" rel="nofollow">https://svelte.dev/repl/1f9da40bca4b44a089041e826648de2f</a></p> <p class="svelte-t9d7ix">Click the Switch button and see that the contents of the slot moves to the end.</p> <p class="svelte-t9d7ix"><strong>Expected behavior</strong></p> <p class="svelte-t9d7ix">Slot continues to render in the correct place.</p> <p class="svelte-t9d7ix"><strong>Information about your Svelte project:</strong></p> <p class="svelte-t9d7ix">Looks like this appeared in version 3.7 and is still present in 3.23.2. If I run the REPL on 3.6.11 it behaves properly.</p> <p class="svelte-t9d7ix"><strong>Severity</strong></p> <p class="svelte-t9d7ix">Potentially serious, but not serious for me.</p> <p class="svelte-t9d7ix">Can be worked around by changing the slot contents to <code class="inline">&lt;div&gt;&#123;@html value&#125;&lt;/div&gt;</code> or changing the child component to use <code class="inline">&lt;div&gt;&lt;slot /&gt;&lt;div&gt;</code>, which works fine for me.</p></div></section> <section><h2><a href="#verifying-the-bug" id="verifying-the-bug">Verifying the bug</a></h2> <p>I clicked into the REPL and tried to understand about the bug.</p> <p>Initially, you see 2 lines of text, "Another first line", "This line should be last.".</p> <p>But as soon as I updated the <code class="inline">&#123;@html content&#125;</code>, the <code class="inline">&#123;@html content&#125;</code> moved to be after the "This line should be last." and stayed there.</p> <p><span style="display: block; position: relative; padding-top: 44.643%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="screen recording of the bug behavior"/></span></p> <p>Yup. This is indeed a bug! üêõ</p></section> <section><h2><a href="#investigating-the-bug" id="investigating-the-bug">Investigating the bug</a></h2> <p>It's amazing that the issue author tracked down the regression behavior of this issue, stating that it started happening since 3.7. Probably because the author just upgraded Svelte from <!> 3.7, or maybe he tried every versions to figure out whether it is regression bug or an undiscovered bug. Anyway, kudos to the issue author! üí™ üí™</p> <p>Most open source projects maintain a change log file, usually named <code class="inline">CHANGELOG.md</code> located at the root of the project folder, so that you can figured out what's added / removed / updated in each version.</p> <p>You can find Svelte's <a href="https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md" rel="nofollow"><code class="inline">CHANGELOG.md</code> here</a>.</p> <p><span style="display: block; position: relative; padding-top: 33.380%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="changelog"/></picture></span></p> <p>From the changelog, the most relevant commits seemed to be <strong>"Remount HTML tags correctly (<a href="https://github.com/sveltejs/svelte/pull/3329" rel="nofollow">#3329</a>)"</strong></p> <p>Reading through the PR, it seemed that <a href="https://github.com/sveltejs/svelte/pull/3329" rel="nofollow">#3329</a> was when <code class="inline">HtmlTag</code> is first introduced!</p></section> <section><h3><a href="#htmltag" id="htmltag">HtmlTag</a></h3> <p><a href="https://github.com/sveltejs/svelte/blob/1c39f6079f630ea549984b8e9eda1853cd5fa883/src/runtime/internal/dom.ts#L321-L362" rel="nofollow"><code class="inline">HtmlTag</code></a> is a helper class that helps Svelte manage raw <a href="https://svelte.dev/tutorial/html-tags" rel="nofollow"><code class="inline">&#123;@html ...&#125;</code> tag</a>.</p> <div class="code-section"><!></div> <p>The HtmlTag instance provides the <code class="inline">m</code>, <code class="inline">p</code>, <code class="inline">d</code> method, and it will maintain the HTML elements created through the HTML string.</p> <p>So, before v3.7, <code class="inline">&#123;@html ...&#125;</code> was handled differently, and from the PR, I assume it was more buggy than the current implementation, albeit getting the case reported by this issue #5012 right. So, there's no reverting back, nor taking the implementation pre-v3.7 as a reference to figure this bug out.</p> <p>Reading through the implementation of the <code class="inline">HtmlTag</code>, it seemed that the <code class="inline">anchor</code> is a key to this issue.</p> <p><code class="inline">HtmlTag</code> uses <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore" rel="nofollow"><code class="inline">insertBefore</code></a> to insert HTML elements into the DOM. There's a nullable 2nd argument for <code class="inline">insertBefore</code>, if it is <code class="inline">null</code>, the element will be inserted at the end of the parent.</p> <p>In this case, the <code class="inline">anchor</code> is indeed <code class="inline">null</code>, so when there's a change in the HTML content, the previous HTML elements were removed and the new HTML elements were inserted at the end of the parent.</p> <div class="code-section"><!></div> <p><strong>Why doesn't the <code class="inline">&#123;@html content&#125;</code> added at the end of the parent in the initial render?</strong> Well, the elements are added in order during mounting. The HTML elements from <code class="inline">HtmlTag</code> was added at the end of the parent, followed by the <code class="inline">&lt;p&gt;This line should be last&lt;/p&gt;</code>.</p> <p>The <code class="inline">anchor</code> is an argument to the <code class="inline">HtmlTag</code> constructor, so one can safely assume that it is not always <code class="inline">null</code>.</p> <p>So, I tried out using <code class="inline">&#123;@html content&#125;</code> in various ways, to figure out what may be an anchor for the <code class="inline">HtmlTag</code></p> <p><strong>Repro #1</strong> (<a href="https://svelte.dev/repl/f31104585d974a54a76808aa5d0820a8?version=3.23.2" rel="nofollow">REPL</a>)</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <p>In this case, the <code class="inline">&lt;button /&gt;</code> element turns out to be the anchor, which totally make sense, as the html content should be inserted before <code class="inline">&lt;button /&gt;</code>.</p> <p>So, it seemed like the anchor is the next element right after <code class="inline">&#123;@html ...&#125;</code>. ü§î</p> <p><strong>Repro #2</strong> (<a href="https://svelte.dev/repl/d469d63a77c94998839603738ea97451?version=3.23.2" rel="nofollow">REPL</a>)</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <p>If the next element right after <code class="inline">&#123;@html ...&#125;</code> is a component, then Svelte will insert a empty <a href="https://developer.mozilla.org/en-US/docs/Web/API/Text" rel="nofollow">Text</a> node in between <code class="inline">&#123;@html ...&#125;</code> and the component, and the anchor is the empty Text node.</p> <p>Well, that make sense too, because we can't see what's inside the component, we can't get the first element rendered in the component as the anchor. So, an extra empty Text node is used for anchoring.</p> <p>So, it seemed like the anchor for the <code class="inline">HtmlTag</code> depends on the next element, and the <code class="inline">HtmlTag</code> itself is the last element, then the anchor would be <code class="inline">null</code>.</p> <p>This seemed fine in most cases, as in if the <code class="inline">HtmlTag</code> is indeed the last element of its parent, then, we don't need an anchor. Adding and updating <code class="inline">HtmlTag</code> will always add HTML elements at the end of its parent.</p> <p>However, I figured there are 2 edge cases that this assumption may not be true.</p> <p>The 1st edge case is the one reported in the issue #5012, if the <code class="inline">&#123;@html ...&#125;</code> is the last element within a slot. As we can't tell how the slot would be used in the component, it may not be the last element of it's parent.</p> <div class="code-section"><!></div> <p>The 2nd edge case is that <code class="inline">&#123;@html ...&#125;</code> is the last element, but it is a the root of the Component.</p> <div class="code-section"><!></div> <p><a href="https://svelte.dev/repl/9d19540d1eb249c3af519894e42f0f75?version=3.23.2" rel="nofollow">REPL</a></p> <p>As you can see in this contrived example, we can't assume where the component is being used by its parent, so, even it seemed to be the last element in the component, it may not be the case in the parent component.</p></section> <section><h2><a href="#fixing-the-bug" id="fixing-the-bug">Fixing the bug</a></h2> <p>Once we figured out the cause of the bug, the fix is much simpler.</p> <p>Just as how Svelte will add a empty Text node as an anchor if the next element is a component, we are going to add the same anchor if</p> <ul><li>the <code class="inline">&#123;@html ...&#125;</code> has no next element, and</li> <li>either <ul><li><code class="inline">&#123;@html ...&#125;</code> is at the root of a slot, or</li> <li><code class="inline">&#123;@html ...&#125;</code> is at the root of a component.</li></ul></li></ul> <p>I know my way in the Svelte repo, good enough to know where to add this extra condition.</p> <p>But if you are new, you can try global search the keyword <code class="inline">html_anchor</code>, the variable name of the anchor added by Svelte, it should lead you to it.</p> <div class="code-section"><!></div> <p><a href="https://github.com/sveltejs/svelte/blob/1c39f6079f630ea549984b8e9eda1853cd5fa883/src/compiler/compile/render_dom/wrappers/RawMustacheTag.ts#L42" rel="nofollow">Link to Github</a></p> <p>Here we see that the condition of adding an anchor is that if</p> <ul><li>it is in the <code class="inline">&lt;svelte:head&gt;</code>, or</li> <li>the next element is not a dom element, (which could be a component, or logic blocks <em>(oh why didn't I think about this case too?)</em>)</li></ul> <div class="code-section"><!></div> <p>So, we check if</p> <ul><li>it has a parent (if it is at the root of component), or</li> <li>if the parent is not an element (it could be within a slot, or a logic block <code class="inline">&#123;#if&#125;</code>)</li></ul> <p>For the test case, I used to 2 edge case examples, try to simulate some clicks, and make sure that the <code class="inline">&#123;@html ...&#125;</code> stay in place even after the HTML content changes.</p> <div class="code-section"><!></div> <p>You can read the <a href="https://github.com/sveltejs/svelte/pull/5061" rel="nofollow">Pull Request #5061</a> to see all the test cases written up.</p> <hr/> <p>If you wish to learn more about Svelte, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>If you have anything unclear about this article, find me on <a href="https://twitter.com/lihautan" rel="nofollow">Twitter</a> too!</p></section>`,1);function Bs(O,b){const q=hs(b,["children","$$slots","$$events","$$legacy"]);ts(b,!1),es("blog",{image:ms}),rs(),ds(O,ks(()=>q,()=>U,{children:(z,fs)=>{var w=xs(),l=a(is(w),2),_=a(s(l),2),i=s(_),T=s(i),G=a(s(T));t(G,()=>"{@html value}"),e(2),n(T),n(i);var S=a(i,2),W=a(s(S));t(W,()=>"{@html value}"),e(),n(S),e(20),n(_),n(l);var p=a(l,2),H=a(s(p),8),L=s(H),I=s(L);n(L),n(H),e(2),n(p);var c=a(p,2),r=a(s(c),2),N=a(s(r));t(N,()=>"<"),e(),n(r);var j=a(r,6),R=s(j),C=s(R),E=s(C),M=a(E);n(C),n(R),n(j),e(4),n(c);var h=a(c,2),k=a(s(h),4),Y=s(k);t(Y,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// in the compiled Svelte code,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// you would see the use of &#96;HtmlTag&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// when you use &#96;&#123;@html ...&#125;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">html_tag</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HtmlTag</span><span style="color: var(--shiki-color-text)">(anchor);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mounting raw html string, call the &#96;m&#96;ount method</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">html_tag</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;div&gt;content&lt;/div&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// when the html string content change, call the u&#96;p&#96;date method</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">html_tag</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;b&gt;new&lt;/b&gt;html&lt;br /&gt;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// when unmount, call the &#96;d&#96;etach method</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">html_tag</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`),n(k);var d=a(k,12),D=s(d);t(D,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- Initially --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">article</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">&lt;!-- slot --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#123;@html content&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">&lt;!-- slot --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    This line should be last.</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">article</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- when the html content changed --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">article</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">&lt;!-- slot --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">&lt;!-- &#123;@html content&#125; removed --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">&lt;!-- slot --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    This line should be last.</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#123;@html content&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">&lt;!-- inserted at the end of the parent --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">article</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),n(d);var v=a(d,10),Z=s(v);t(Z,()=>`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">'first line'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>@html content<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>content <span class="token operator">=</span> <span class="token string">'line first'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>`),n(v);var u=a(v,2),J=s(u);t(J,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// compiled js</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    button </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;button&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html_tag </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HtmlTag</span><span style="color: var(--shiki-color-text)">(button);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`),n(u);var y=a(u,8),V=s(y);t(V,()=>`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">'./Foo.svelte'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">'first line'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>content <span class="token operator">=</span> <span class="token string">'line first'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>@html content<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Foo</span> <span class="token punctuation">/></span></span></div></code></pre>`),n(y);var g=a(y,2),K=s(g);t(K,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// compiled js</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    button </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;button&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">space</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html_anchor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">create_component</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html_tag </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HtmlTag</span><span style="color: var(--shiki-color-text)">(html_anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`),n(g);var m=a(g,14),Q=s(m);t(Q,()=>'<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>This is the last child<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>'),n(m);var $=a(m,4),X=s($);t(X,()=>`<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- Component.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> content<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>@html content<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- App.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> Component <span class="token keyword">from</span> <span class="token string">'./Component.svelte'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name">content=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token string">'&lt;div>html string&lt;/div>'</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>This is the last child<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>`),n($),e(4),n(h);var A=a(h,2),x=a(s(A),12),ss=s(x);t(ss,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// src/compiler/compile/render_dom/wrappers/RawMustacheTag.ts#L42</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">needs_anchor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> in_head </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.next </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">next</span><span style="color: var(--shiki-token-function)">.is_dom_node</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (needs_anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.add_element</span><span style="color: var(--shiki-color-text)">(html_anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;@empty()&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;@empty()&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),n(x);var f=a(x,8),ns=s(f);t(ns,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">needs_anchor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  in_head </span><span style="color: var(--shiki-token-keyword)">||</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.next</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">next</span><span style="color: var(--shiki-token-function)">.is_dom_node</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.parent </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parent</span><span style="color: var(--shiki-token-function)">.is_dom_node</span><span style="color: var(--shiki-color-text)">());</span></span></code></pre>`),n(f);var B=a(f,8),as=s(B);t(as,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &lt;button&gt;Switch&lt;/button&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &lt;p&gt;Another first line&lt;/p&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &lt;p&gt;This line should be last.&lt;/p&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)">(&#123; assert</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> window &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">btn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">clickEvent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.MouseEvent</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// simulate clicks</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">btn</span><span style="color: var(--shiki-token-function)">.dispatchEvent</span><span style="color: var(--shiki-color-text)">(clickEvent);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.htmlEqual</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-color-text)">.innerHTML</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &lt;button&gt;Switch&lt;/button&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &lt;p&gt;First line&lt;/p&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &lt;p&gt;This line should be last.&lt;/p&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      &#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// simulate clicks</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">btn</span><span style="color: var(--shiki-token-function)">.dispatchEvent</span><span style="color: var(--shiki-color-text)">(clickEvent);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.htmlEqual</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-color-text)">.innerHTML</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &lt;button&gt;Switch&lt;/button&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &lt;p&gt;Another first line&lt;/p&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &lt;p&gt;This line should be last.&lt;/p&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      &#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`),n(B),e(8),n(A),ps(()=>{o(I,"src",P),o(I,"srcset",`${P}, ${vs} 2x`),o(E,"srcset",`${ys}, ${gs} 2x`),o(M,"src",F),o(M,"srcset",`${F}, ${us} 2x`)}),cs(z,w)},$$slots:{default:!0}})),os()}export{Bs as component};
