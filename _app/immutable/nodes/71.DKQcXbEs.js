import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as y,g as v,d as f,b as k,s as o,f as S,e as l,a as x,r as s,n as r}from"../chunks/C2PHntuy.js";import{h as c}from"../chunks/C3QlhiH-.js";import{i as b}from"../chunks/BQOOHHT8.js";import{l as w,s as C}from"../chunks/gzNpScmH.js";import{B as _}from"../chunks/B1caYEk9.js";import{t as z}from"../chunks/C3bQ3Oc7.js";const p={title:"The CSS Podcast: 026: Houdini Series: Properties & Values",tags:["css houdini","The CSS Podcast"],description:"CSS HoudiniUmbrella term that covers a set of low-level APIs that exposes parts of the CSS rendering engineGive developers access to CSS Object Model.Enable developers to extends CSS by hooking into the styling and layout processes...",tableOfContents:[{link:"css-houdini",title:"CSS Houdini"},{link:"properties-and-values-api",title:"Properties and Values API"},{link:"2-ways-to-register-houdini-custom-properties",title:"2 ways to register houdini custom properties"},{link:"syntax",title:"Syntax",nested:[{link:"multipliers",title:"Multipliers"},{link:"combinators",title:"Combinators"}]},{link:"references",title:"References"}]},{title:O,tags:B,description:E,tableOfContents:G}=p;var U=k(`<section><h2><a href="#css-houdini" id="css-houdini">CSS Houdini</a></h2> <ul><li>Umbrella term that covers a set of low-level APIs that exposes parts of the CSS rendering engine</li> <li>Give developers access to CSS Object Model.</li> <li>Enable developers to extends CSS by hooking into the styling and layout processes</li> <li>No need to wait for browsers to implement CSS primitives</li> <li>Write your own painting and layout algorithm using worklet</li> <li>Write less JS dependencies and polyfills, allow users write true CSS polyfills that browser can better understand</li> <li>Allow more semantic CSS, allow performance optimisations in how the browser actually reads and parses CSS</li> <li>Allow typechecking CSS</li></ul></section> <section><h2><a href="#properties-and-values-api" id="properties-and-values-api">Properties and Values API</a></h2> <ul><li>create rich and typed property</li> <li>error free, error gracefully, fallback to initial value</li> <li>provide semantic meaning to the variable</li> <li>custom property values are no longer a string</li> <li>allow you to interpolate the value as you transition from 1 value to another</li> <li>be known and passed to the function as accepted and identified parameter</li> <li>cascade still applies</li></ul></section> <section><h2><a href="#2-ways-to-register-houdini-custom-properties" id="2-ways-to-register-houdini-custom-properties">2 ways to register houdini custom properties</a></h2> <ul><li><code class="inline">CSS.registerProperty</code> in JS</li> <li><code class="inline">@property</code> in CSS</li></ul> <div class="code-section"><!></div> <div class="code-section"><!></div> <ul><li>enforces it the <code class="inline">--colorPrimary</code> to be a value of color</li> <li>if it is not a color, will error gracefully by fallback to its initial value</li> <li>trying to see the console, but haven't see it in the console yet</li></ul></section> <section><h2><a href="#syntax" id="syntax">Syntax</a></h2> <ul><li>CSS definition syntax <a href="https://web.dev/at-property/#syntax" rel="nofollow">https://web.dev/at-property/#syntax</a></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length" rel="nofollow"><code class="inline">&lt;length&gt;</code></a>, eg: 1px, 2rem, 3vw</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/percentage" rel="nofollow"><code class="inline">&lt;percentage&gt;</code></a>, eg: 4% <ul><li>in linear-gradient</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage" rel="nofollow"><code class="inline">&lt;length-percentage&gt;</code></a> <ul><li>superset of length + percentage</li> <li>you can use <code class="inline">calc()</code> of mixing percentage and length, eg: <code class="inline">calc(100% - 35px)</code></li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/angle" rel="nofollow"><code class="inline">&lt;angle&gt;</code></a>, eg: 1deg <ul><li>in hsl, conic-gradient</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/time" rel="nofollow"><code class="inline">&lt;time&gt;</code></a>, eg: 1s <ul><li>in animation, transition</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/resolution" rel="nofollow"><code class="inline">&lt;resolution&gt;</code></a> , eg: 300dpi <ul><li>in media query</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/integer" rel="nofollow"><code class="inline">&lt;integer&gt;</code></a>, positive / negative whole number <ul><li>in z-index, grid-row</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/number" rel="nofollow"><code class="inline">&lt;number&gt;</code></a></li> <li><code class="inline">&lt;color&gt;</code></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function" rel="nofollow"><code class="inline">&lt;transform-function&gt;</code></a>, 2d / 3d transform function</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident" rel="nofollow"><code class="inline">&lt;custom-ident&gt;</code></a> <ul><li>eg: animation-name</li></ul></li></ul></section> <section><h3><a href="#multipliers" id="multipliers">Multipliers</a></h3> <p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax#Component_value_multipliers" rel="nofollow">Component value multipliers</a></p> <ul><li><code class="inline">&lt;length&gt;+</code>, length can appear one or more times, eg: <code class="inline">"1px 2px 3px"</code></li> <li><code class="inline">&lt;length&gt;#</code>, length appear one or more times with comma separated, eg: <code class="inline">"1px, 2px 3px"</code></li></ul></section> <section><h3><a href="#combinators" id="combinators">Combinators</a></h3> <p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax#Component_value_combinators" rel="nofollow">Component value combinators</a></p> <ul><li><code class="inline">|</code>, eg: <code class="inline">&lt;percentage&gt; | &lt;length&gt;</code>, must be either percentage or length, and appear only once</li></ul></section> <section><h2><a href="#references" id="references">References</a></h2> <ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax</a></li> <li><a href="https://heyjiawei.com/how-to-read-css-specification-syntax" rel="nofollow">https://heyjiawei.com/how-to-read-css-specification-syntax</a></li> <li><a href="https://web.dev/at-property" rel="nofollow">https://web.dev/at-property</a></li></ul></section>`,1);function J(d,i){const h=w(i,["children","$$slots","$$events","$$legacy"]);y(i,!1),v("blog",{image:z}),b(),_(d,C(()=>h,()=>p,{children:(u,W)=>{var t=U(),n=o(S(t),4),e=o(l(n),4),m=l(e);c(m,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.registerProperty</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;--colorPrimary&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// start with &#96;--&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;color&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">       </span><span style="color: var(--shiki-token-comment)">// syntax value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  initialValue</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;magenta&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// initial value if not defined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">         </span><span style="color: var(--shiki-token-comment)">// inherit from parent</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`),s(e);var a=o(e,2),g=l(a);c(g,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* Included in Chromium 85 */</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@property</span><span style="color: var(--shiki-color-text)"> --colorPrimary &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax: &#39;&lt;color</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">&#39;;      </span><span style="color: var(--shiki-token-comment)">/* syntax value */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">initial-value</span><span style="color: var(--shiki-color-text)">: magenta; </span><span style="color: var(--shiki-token-comment)">/* does not need to be a string */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits: false;        </span><span style="color: var(--shiki-token-comment)">/* inherit from parent */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),s(a),r(2),s(n),r(8),x(u,t)},$$slots:{default:!0}})),f()}export{J as component};
