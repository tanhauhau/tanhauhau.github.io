import{s as _t,d as Je,e as Tt,f as nt,n as Ct}from"../chunks/scheduler.D6VJxl8L.js";import{S as Lt,i as Pt,m as Mt,n as Ht,o as jt,t as qt,a as Et,p as It,e,s as t,H as f,c as o,q as p,h as a,d as x,r as w,g as r,u as b,j as y,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as St,a as lt}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Dt}from"../chunks/BlogLayout.BMJM32nZ.js";import{t as Vt}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function At(V){let v,T="If you are using webpack to bundle your library, you most likely will export something in your entry file:",_,g,d,C=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// weback.config.js</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./src/index.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// src/index.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,L,P,Xe='And if you build it with webpack just like that, out-of-the-box, you may be surprised that if you try to <code class="inline">require()</code> the built file, you would find that there&#39;s nothing being exported by the built file.',Is,M,Ss,rt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/bundle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(foo); </span><span style="color: var(--shiki-token-comment)">// prints &#96;&#123;&#125;&#96; (empty object)</span></span></code></pre>`,Ds,H,so='If you&#39;ve read <a href="/i-wrote-my-module-bundler/">my previous article on writing a module bundler</a>, you can imagine that the output bundle looks something like this:',Vs,j,As,pt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Os,q,eo='<em>(Everything should be familiar, except the fact that instead of calling <code class="inline">webpackStart</code> in a separate statement, I made it into a IIFE (Immediately Invoked Function Expression) for reasons that will be apparent later)</em>',Ns,E,oo="In order to build for a library, ie: to expose whatever is exported by the entry file, webpack provides 3 options that you can play with:",Us,I,to='<li><a href="https://webpack.js.org/configuration/output/#outputlibrary" rel="nofollow">output.library</a></li> <li><a href="https://webpack.js.org/configuration/output/#outputlibraryexport" rel="nofollow">output.libraryExport</a></li> <li><a href="https://webpack.js.org/configuration/output/#outputlibrarytarget" rel="nofollow">output.libraryTarget</a></li>',Bs,S,ao='<h2><a href="#webpack-s-output-library-options" id="webpack-s-output-library-options">Webpack&#39;s output.library* options</a></h2> <p>To understand how each of them works, let&#39;s start with <code class="inline">output.libraryTarget</code>.</p> <p><code class="inline">output.libraryTarget</code> accepts <code class="inline">string</code> as value, there are 2 main groups of values that you can provide to the <code class="inline">output.libraryTarget</code> option:</p>',Ws,u,A,no='<a href="#1-name-of-a-module-system-commonjs-commonjs2-amd-umd" id="1-name-of-a-module-system-commonjs-commonjs2-amd-umd">1. Name of a module system: <code class="inline">&quot;commonjs&quot;</code>, <code class="inline">&quot;commonjs2&quot;</code>, <code class="inline">&quot;amd&quot;</code>, <code class="inline">&quot;umd&quot;</code>, ...</a>',ne,O,lo="Webpack allows you to specify the name of the module system that you want to use to expose the exported values of the entry file.",le,N,io="You can specify a module system that is different from the one that you are using in your library.",ie,U,ro='Let&#39;s try <code class="inline">commonjs2</code> as an example:',re,B,Rs,ct=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryTarget</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;commonjs2&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,pe,W,po='<code class="inline">commonjs2</code> uses <code class="inline">module.exports</code> to export values from a module. In this example, webpack assigns the return value of the IIFE to <code class="inline">module.exports</code>.',ce,R,co='If you look at the bundled code, it is not much different than the one without specifying <code class="inline">output.libraryTarget</code>. The only difference is that the bundled code is prefixed with <code class="inline">module.exports =</code>;',ke,$,ko='<p>By the way, if you are curious about the difference between commonjs and commonjs2, you can follow the thread of <a href="https://github.com/webpack/webpack/issues/1114" rel="nofollow">this issue</a>.</p>',$s,c,z,ho='<a href="#2-name-of-a-variable-var-this-self-window-global" id="2-name-of-a-variable-var-this-self-window-global">2. Name of a variable: <code class="inline">&quot;var&quot;</code>, <code class="inline">&quot;this&quot;</code>, <code class="inline">&quot;self&quot;</code>, <code class="inline">&quot;window&quot;</code>, <code class="inline">&quot;global&quot;</code></a>',he,F,yo="On the other hand, instead of exposing the library content through a module system, you can specify the variable name which the export object is assigned to.",ye,G,vo='Let&#39;s take <code class="inline">self</code> as an example:',ve,K,zs,kt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryTarget</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;self&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.assign</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  self</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  (</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;)(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// self.default === &#39;foo&#39;</span></span></code></pre>`,de,Q,uo='All the exported values are assigned to <code class="inline">self</code>.',ue,Y,xo='Again observe the bundled code, this time round we prefixed the bundled code with <code class="inline">Object.assign(self,</code> and suffixed it with <code class="inline">);</code>.',xe,Z,mo='Specifiying the <code class="inline">output.libraryTarget</code> as <code class="inline">var</code> on the other hand, allows you to assign it to a variable name, which you can provide in <code class="inline">output.library</code> option:',me,J,Fs,ht=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  library</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;myApp&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryTarget</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;var&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> myApp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// myApp === &#123; default: &#39;foo&#39; &#125;</span></span></code></pre>`,fe,X,fo='If you don&#39;t want <code class="inline">myApp</code> to contain all the exported value of the entry file, you can provide the key that you want to export only in the <code class="inline">output.libraryExport</code> option:',we,ss,Gs,yt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  library</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;myApp&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryTarget</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;var&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryExport</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> myApp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;).default;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// myApp === &#39;foo&#39;</span></span></code></pre>`,be,es,wo='Again you can observe that by playing different option values of <code class="inline">output.library</code>, <code class="inline">output.libraryTarget</code>, <code class="inline">output.libraryExport</code>, webpack adds different prefix and suffix to the bundled code:',ge,os,Ks,vt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// libraryTarget: &#39;commonjs2&#39;:</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// libraryTarget: &#39;self&#39;:</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.assign</span><span style="color: var(--shiki-color-text)">(self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// library: &#39;myApp&#39;, libraryTarget: &#39;var&#39;:</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> myApp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// library: &#39;myApp&#39;, libraryTarget: &#39;var&#39;, libraryExport: &#39;default&#39;:</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> myApp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;.default;</span></span></code></pre>`,_e,ts,bo="So, instead of using the webpack built-in library targets, what should we do if we want to support a custom library target that looks something like below:",Te,as,Qs,dt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// libraryTarget: ???</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">customRegistry</span><span style="color: var(--shiki-token-function)">.register</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;my-app&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;);</span></span></code></pre>`,Ce,ns,go='I searched through the <a href="https://webpack.js.org/configuration/output/" rel="nofollow">webpack official docs</a> and found no options that allows that. So the only solution at the moment is to write a webpack plugin.',Ys,n,ls,_o='<a href="#writing-a-webpack-plugin" id="writing-a-webpack-plugin">Writing a webpack plugin</a>',Le,is,To='After digging around the <a href="https://github.com/webpack/webpack" rel="nofollow">webpack source code</a>, I found out that <a href="https://github.com/webpack/webpack/blob/master/lib/LibraryTemplatePlugin.js" rel="nofollow">LibraryTemplatePlugin</a> instantiates different TemplatePlugins based on the value of the <code class="inline">output.libraryTarget</code> option:',Pe,rs,Zs,ut=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// webpack/lib/LibraryTemplatePlugin.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">LibraryTemplatePlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)"> (compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.libraryTarget) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;amd&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;amd-require&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">AmdTemplatePlugin</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">break</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;var&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SetVarTemplatePlugin</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">break</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;this&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;self&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;window&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SetVarTemplatePlugin</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">break</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Me,ps,Co='I went to look into one of the TemplatePlugins, the <a href="https://github.com/webpack/webpack/blob/master/lib/SetVarTemplatePlugin.js" rel="nofollow">SetVarTemplatePlugin</a>:',He,cs,Js,xt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">ConcatSource</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-sources&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SetVarTemplatePlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;SetVarTemplatePlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">render</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;SetVarTemplatePlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        (source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; chunk</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> chunkGraph &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">varExpression</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> =&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(prefix</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,je,ks,Lo='I don&#39;t understand line-by-line everything that happened in the file, but I do know that the line highlighted above, is where webpack concats the <code class="inline">varExpression =</code> (in the case of <code class="inline">commonjs</code>, <code class="inline">varExpression</code> is <code class="inline">module.exports</code>, thus <code class="inline">module.exports =</code>) and the source (which in this case is the bundled code).',qe,hs,Po="So, to have the following:",Ee,ys,Xs,mt='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">customRegistry</span><span style="color: var(--shiki-token-function)">.register</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;my-app&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;);</span></span></code></pre>',Ie,vs,Mo="we need:",Se,ds,se,ft='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;customRegistry.register(&#39;my-app&#39;, &#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>',De,us,Ho="So, I did the following:",Ve,xs,jo='<li>Created a new file and pasted the entire source from <a href="https://github.com/webpack/webpack/blob/master/lib/SetVarTemplatePlugin.js" rel="nofollow">SetVarTemplatePlugin.js</a></li> <li>Searched + replaced to rename the plugin name to something more appropriate, (SetModuleTemplatePlugin)</li> <li>Replaced relative import, <code class="inline">require(&quot;./RuntimeGlobals&quot;)</code> to require from webpack, <code class="inline">require(&quot;webpack/lib/RuntimeGlobals&quot;)</code></li> <li>Replaced the line <code class="inline">return new ConcatSource(prefix, source);</code> to the following:</li>',Ae,ms,ee,wt='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;customRegistry.register(&#39;my-app&#39;, &#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>',Oe,fs,qo='<li>Removed <code class="inline">output.library</code>, <code class="inline">output.libraryTarget</code> from webpack config</li> <li>Added my new plugin:</li>',Ne,ws,oe,bt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SetModuleTemplatePlugin</span><span style="color: var(--shiki-color-text)">()]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Ue,bs,Eo="To my surprise, it worked! Almost.",Be,gs,Io="When I run the bundled code, the customRegistry registered an empty object, nothing is exported from the bundled code.",We,_s,So='I went into <a href="https://github.com/webpack/webpack/blob/master/lib/LibraryTemplatePlugin.js" rel="nofollow">LibraryTemplatePlugin.js</a> to look about, because that&#39;s the most obvious place to start looking, since I&#39;ve copied line-by-line from <a href="https://github.com/webpack/webpack/blob/master/lib/SetVarTemplatePlugin.js" rel="nofollow">SetVarTemplatePlugin.js</a>.',Re,Ts,Do="I found a pretty obvious line that says:",$e,Cs,te,gt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">FlagEntryExportAsUsedPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;./FlagEntryExportAsUsedPlugin&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FlagEntryExportAsUsedPlugin</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.libraryTarget </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;module&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;used a library export&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span></code></pre>`,ze,Ls,Vo="If I would have to guess, I think that what this line is doing is to mark the export of the entry file as used, so that webpack would not <em>treeshake them away</em>.",Fe,Ps,Ao="<p>Which, <strong>treeshake</strong> is a cool word that means remove them.</p> <blockquote><p>Which you could argue that <strong>treeshake</strong> does way more that just remove the entry exports, it removes things that is only used by the entry exports, recursively.</p></blockquote>",Ge,Ms,Oo='I added these 2 lines into my <code class="inline">SetModuleTemplatePlugin</code>, and it worked! Perfectly this time. 🎉',Ke,Hs,No='I created <a href="https://gist.github.com/tanhauhau/b6b355fbbabe224c9242a5257baa4dec" rel="nofollow">a gist</a> for the complete code, if you are lazy.',Qe,js,Uo='Lastly, if you noticed, this example is based on the latest master webpack source (at the time writing), which is <code class="inline">webpack@5.0.0-beta.12</code>.',Ye,qs,Bo='If you want a similar plugin with <code class="inline">webpack^4</code>, you can trust me that this article serves as a good enough entry point for you to write the plugin on your own.',Ze,Es,Wo="<strong>And I trust you that you can do it. 😎</strong>",ae,D,Ro='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>Writing a webpack plugin is not impossible. It will especially be easier if you have a good understanding how webpack as a bundler works.</p> <p><em>(Plug: if you want to know more, you can read my <a href="/what-is-module-bundler-and-how-does-it-work/">&quot;What is module bundler and how does it work?&quot;</a>)</em></p>';return{c(){v=e("p"),v.textContent=T,_=t(),g=e("div"),d=new f(!1),L=t(),P=e("p"),P.innerHTML=Xe,Is=t(),M=e("div"),Ss=new f(!1),Ds=t(),H=e("p"),H.innerHTML=so,Vs=t(),j=e("div"),As=new f(!1),Os=t(),q=e("p"),q.innerHTML=eo,Ns=t(),E=e("p"),E.textContent=oo,Us=t(),I=e("ul"),I.innerHTML=to,Bs=t(),S=e("section"),S.innerHTML=ao,Ws=t(),u=e("section"),A=e("h3"),A.innerHTML=no,ne=t(),O=e("p"),O.textContent=lo,le=t(),N=e("p"),N.textContent=io,ie=t(),U=e("p"),U.innerHTML=ro,re=t(),B=e("div"),Rs=new f(!1),pe=t(),W=e("p"),W.innerHTML=po,ce=t(),R=e("p"),R.innerHTML=co,ke=t(),$=e("blockquote"),$.innerHTML=ko,$s=t(),c=e("section"),z=e("h3"),z.innerHTML=ho,he=t(),F=e("p"),F.textContent=yo,ye=t(),G=e("p"),G.innerHTML=vo,ve=t(),K=e("div"),zs=new f(!1),de=t(),Q=e("p"),Q.innerHTML=uo,ue=t(),Y=e("p"),Y.innerHTML=xo,xe=t(),Z=e("p"),Z.innerHTML=mo,me=t(),J=e("div"),Fs=new f(!1),fe=t(),X=e("p"),X.innerHTML=fo,we=t(),ss=e("div"),Gs=new f(!1),be=t(),es=e("p"),es.innerHTML=wo,ge=t(),os=e("div"),Ks=new f(!1),_e=t(),ts=e("p"),ts.textContent=bo,Te=t(),as=e("div"),Qs=new f(!1),Ce=t(),ns=e("p"),ns.innerHTML=go,Ys=t(),n=e("section"),ls=e("h2"),ls.innerHTML=_o,Le=t(),is=e("p"),is.innerHTML=To,Pe=t(),rs=e("div"),Zs=new f(!1),Me=t(),ps=e("p"),ps.innerHTML=Co,He=t(),cs=e("div"),Js=new f(!1),je=t(),ks=e("p"),ks.innerHTML=Lo,qe=t(),hs=e("p"),hs.textContent=Po,Ee=t(),ys=e("div"),Xs=new f(!1),Ie=t(),vs=e("p"),vs.textContent=Mo,Se=t(),ds=e("div"),se=new f(!1),De=t(),us=e("p"),us.textContent=Ho,Ve=t(),xs=e("ol"),xs.innerHTML=jo,Ae=t(),ms=e("div"),ee=new f(!1),Oe=t(),fs=e("ol"),fs.innerHTML=qo,Ne=t(),ws=e("div"),oe=new f(!1),Ue=t(),bs=e("p"),bs.textContent=Eo,Be=t(),gs=e("p"),gs.textContent=Io,We=t(),_s=e("p"),_s.innerHTML=So,Re=t(),Ts=e("p"),Ts.textContent=Do,$e=t(),Cs=e("div"),te=new f(!1),ze=t(),Ls=e("p"),Ls.innerHTML=Vo,Fe=t(),Ps=e("blockquote"),Ps.innerHTML=Ao,Ge=t(),Ms=e("p"),Ms.innerHTML=Oo,Ke=t(),Hs=e("p"),Hs.innerHTML=No,Qe=t(),js=e("p"),js.innerHTML=Uo,Ye=t(),qs=e("p"),qs.innerHTML=Bo,Ze=t(),Es=e("p"),Es.innerHTML=Wo,ae=t(),D=e("section"),D.innerHTML=Ro,this.h()},l(l){v=o(l,"P",{"data-svelte-h":!0}),p(v)!=="svelte-1kgerfg"&&(v.textContent=T),_=a(l),g=o(l,"DIV",{class:!0});var k=x(g);d=w(k,!1),k.forEach(r),L=a(l),P=o(l,"P",{"data-svelte-h":!0}),p(P)!=="svelte-1a5028d"&&(P.innerHTML=Xe),Is=a(l),M=o(l,"DIV",{class:!0});var $o=x(M);Ss=w($o,!1),$o.forEach(r),Ds=a(l),H=o(l,"P",{"data-svelte-h":!0}),p(H)!=="svelte-1v0fcab"&&(H.innerHTML=so),Vs=a(l),j=o(l,"DIV",{class:!0});var zo=x(j);As=w(zo,!1),zo.forEach(r),Os=a(l),q=o(l,"P",{"data-svelte-h":!0}),p(q)!=="svelte-t7jpzl"&&(q.innerHTML=eo),Ns=a(l),E=o(l,"P",{"data-svelte-h":!0}),p(E)!=="svelte-ag3k83"&&(E.textContent=oo),Us=a(l),I=o(l,"UL",{"data-svelte-h":!0}),p(I)!=="svelte-zhq66"&&(I.innerHTML=to),Bs=a(l),S=o(l,"SECTION",{"data-svelte-h":!0}),p(S)!=="svelte-1bz5kmk"&&(S.innerHTML=ao),Ws=a(l),u=o(l,"SECTION",{});var m=x(u);A=o(m,"H3",{"data-svelte-h":!0}),p(A)!=="svelte-7xybk3"&&(A.innerHTML=no),ne=a(m),O=o(m,"P",{"data-svelte-h":!0}),p(O)!=="svelte-v6rcmy"&&(O.textContent=lo),le=a(m),N=o(m,"P",{"data-svelte-h":!0}),p(N)!=="svelte-1hpv3y4"&&(N.textContent=io),ie=a(m),U=o(m,"P",{"data-svelte-h":!0}),p(U)!=="svelte-k20xo4"&&(U.innerHTML=ro),re=a(m),B=o(m,"DIV",{class:!0});var Fo=x(B);Rs=w(Fo,!1),Fo.forEach(r),pe=a(m),W=o(m,"P",{"data-svelte-h":!0}),p(W)!=="svelte-gdxoiz"&&(W.innerHTML=po),ce=a(m),R=o(m,"P",{"data-svelte-h":!0}),p(R)!=="svelte-14cf01j"&&(R.innerHTML=co),ke=a(m),$=o(m,"BLOCKQUOTE",{"data-svelte-h":!0}),p($)!=="svelte-15rtk5i"&&($.innerHTML=ko),m.forEach(r),$s=a(l),c=o(l,"SECTION",{});var h=x(c);z=o(h,"H3",{"data-svelte-h":!0}),p(z)!=="svelte-qcyq6e"&&(z.innerHTML=ho),he=a(h),F=o(h,"P",{"data-svelte-h":!0}),p(F)!=="svelte-11n3s8t"&&(F.textContent=yo),ye=a(h),G=o(h,"P",{"data-svelte-h":!0}),p(G)!=="svelte-wyw1xk"&&(G.innerHTML=vo),ve=a(h),K=o(h,"DIV",{class:!0});var Go=x(K);zs=w(Go,!1),Go.forEach(r),de=a(h),Q=o(h,"P",{"data-svelte-h":!0}),p(Q)!=="svelte-1hejyed"&&(Q.innerHTML=uo),ue=a(h),Y=o(h,"P",{"data-svelte-h":!0}),p(Y)!=="svelte-ged8vm"&&(Y.innerHTML=xo),xe=a(h),Z=o(h,"P",{"data-svelte-h":!0}),p(Z)!=="svelte-jocf0z"&&(Z.innerHTML=mo),me=a(h),J=o(h,"DIV",{class:!0});var Ko=x(J);Fs=w(Ko,!1),Ko.forEach(r),fe=a(h),X=o(h,"P",{"data-svelte-h":!0}),p(X)!=="svelte-3tkdts"&&(X.innerHTML=fo),we=a(h),ss=o(h,"DIV",{class:!0});var Qo=x(ss);Gs=w(Qo,!1),Qo.forEach(r),be=a(h),es=o(h,"P",{"data-svelte-h":!0}),p(es)!=="svelte-ss0ptb"&&(es.innerHTML=wo),ge=a(h),os=o(h,"DIV",{class:!0});var Yo=x(os);Ks=w(Yo,!1),Yo.forEach(r),_e=a(h),ts=o(h,"P",{"data-svelte-h":!0}),p(ts)!=="svelte-csfvpi"&&(ts.textContent=bo),Te=a(h),as=o(h,"DIV",{class:!0});var Zo=x(as);Qs=w(Zo,!1),Zo.forEach(r),Ce=a(h),ns=o(h,"P",{"data-svelte-h":!0}),p(ns)!=="svelte-bbay8c"&&(ns.innerHTML=go),h.forEach(r),Ys=a(l),n=o(l,"SECTION",{});var i=x(n);ls=o(i,"H2",{"data-svelte-h":!0}),p(ls)!=="svelte-1q56ojr"&&(ls.innerHTML=_o),Le=a(i),is=o(i,"P",{"data-svelte-h":!0}),p(is)!=="svelte-1szcsx4"&&(is.innerHTML=To),Pe=a(i),rs=o(i,"DIV",{class:!0});var Jo=x(rs);Zs=w(Jo,!1),Jo.forEach(r),Me=a(i),ps=o(i,"P",{"data-svelte-h":!0}),p(ps)!=="svelte-1x3i0i5"&&(ps.innerHTML=Co),He=a(i),cs=o(i,"DIV",{class:!0});var Xo=x(cs);Js=w(Xo,!1),Xo.forEach(r),je=a(i),ks=o(i,"P",{"data-svelte-h":!0}),p(ks)!=="svelte-1hnd2mw"&&(ks.innerHTML=Lo),qe=a(i),hs=o(i,"P",{"data-svelte-h":!0}),p(hs)!=="svelte-13dmjlh"&&(hs.textContent=Po),Ee=a(i),ys=o(i,"DIV",{class:!0});var st=x(ys);Xs=w(st,!1),st.forEach(r),Ie=a(i),vs=o(i,"P",{"data-svelte-h":!0}),p(vs)!=="svelte-4u362a"&&(vs.textContent=Mo),Se=a(i),ds=o(i,"DIV",{class:!0});var et=x(ds);se=w(et,!1),et.forEach(r),De=a(i),us=o(i,"P",{"data-svelte-h":!0}),p(us)!=="svelte-h88aye"&&(us.textContent=Ho),Ve=a(i),xs=o(i,"OL",{"data-svelte-h":!0}),p(xs)!=="svelte-k8eo63"&&(xs.innerHTML=jo),Ae=a(i),ms=o(i,"DIV",{class:!0});var ot=x(ms);ee=w(ot,!1),ot.forEach(r),Oe=a(i),fs=o(i,"OL",{"data-svelte-h":!0}),p(fs)!=="svelte-1o4w2sb"&&(fs.innerHTML=qo),Ne=a(i),ws=o(i,"DIV",{class:!0});var tt=x(ws);oe=w(tt,!1),tt.forEach(r),Ue=a(i),bs=o(i,"P",{"data-svelte-h":!0}),p(bs)!=="svelte-ws7j5q"&&(bs.textContent=Eo),Be=a(i),gs=o(i,"P",{"data-svelte-h":!0}),p(gs)!=="svelte-1sybcww"&&(gs.textContent=Io),We=a(i),_s=o(i,"P",{"data-svelte-h":!0}),p(_s)!=="svelte-8n6h1j"&&(_s.innerHTML=So),Re=a(i),Ts=o(i,"P",{"data-svelte-h":!0}),p(Ts)!=="svelte-1asp0ao"&&(Ts.textContent=Do),$e=a(i),Cs=o(i,"DIV",{class:!0});var at=x(Cs);te=w(at,!1),at.forEach(r),ze=a(i),Ls=o(i,"P",{"data-svelte-h":!0}),p(Ls)!=="svelte-mc49t5"&&(Ls.innerHTML=Vo),Fe=a(i),Ps=o(i,"BLOCKQUOTE",{"data-svelte-h":!0}),p(Ps)!=="svelte-1j3vrvy"&&(Ps.innerHTML=Ao),Ge=a(i),Ms=o(i,"P",{"data-svelte-h":!0}),p(Ms)!=="svelte-1mt8j06"&&(Ms.innerHTML=Oo),Ke=a(i),Hs=o(i,"P",{"data-svelte-h":!0}),p(Hs)!=="svelte-x7p1xi"&&(Hs.innerHTML=No),Qe=a(i),js=o(i,"P",{"data-svelte-h":!0}),p(js)!=="svelte-pq9yj7"&&(js.innerHTML=Uo),Ye=a(i),qs=o(i,"P",{"data-svelte-h":!0}),p(qs)!=="svelte-6978kt"&&(qs.innerHTML=Bo),Ze=a(i),Es=o(i,"P",{"data-svelte-h":!0}),p(Es)!=="svelte-rrk64z"&&(Es.innerHTML=Wo),i.forEach(r),ae=a(l),D=o(l,"SECTION",{"data-svelte-h":!0}),p(D)!=="svelte-thrcbf"&&(D.innerHTML=Ro),this.h()},h(){d.a=null,b(g,"class","code-section"),Ss.a=null,b(M,"class","code-section"),As.a=null,b(j,"class","code-section"),Rs.a=null,b(B,"class","code-section"),zs.a=null,b(K,"class","code-section"),Fs.a=null,b(J,"class","code-section"),Gs.a=null,b(ss,"class","code-section"),Ks.a=null,b(os,"class","code-section"),Qs.a=null,b(as,"class","code-section"),Zs.a=null,b(rs,"class","code-section"),Js.a=null,b(cs,"class","code-section"),Xs.a=null,b(ys,"class","code-section"),se.a=null,b(ds,"class","code-section"),ee.a=null,b(ms,"class","code-section"),oe.a=null,b(ws,"class","code-section"),te.a=null,b(Cs,"class","code-section")},m(l,k){y(l,v,k),y(l,_,k),y(l,g,k),d.m(C,g),y(l,L,k),y(l,P,k),y(l,Is,k),y(l,M,k),Ss.m(rt,M),y(l,Ds,k),y(l,H,k),y(l,Vs,k),y(l,j,k),As.m(pt,j),y(l,Os,k),y(l,q,k),y(l,Ns,k),y(l,E,k),y(l,Us,k),y(l,I,k),y(l,Bs,k),y(l,S,k),y(l,Ws,k),y(l,u,k),s(u,A),s(u,ne),s(u,O),s(u,le),s(u,N),s(u,ie),s(u,U),s(u,re),s(u,B),Rs.m(ct,B),s(u,pe),s(u,W),s(u,ce),s(u,R),s(u,ke),s(u,$),y(l,$s,k),y(l,c,k),s(c,z),s(c,he),s(c,F),s(c,ye),s(c,G),s(c,ve),s(c,K),zs.m(kt,K),s(c,de),s(c,Q),s(c,ue),s(c,Y),s(c,xe),s(c,Z),s(c,me),s(c,J),Fs.m(ht,J),s(c,fe),s(c,X),s(c,we),s(c,ss),Gs.m(yt,ss),s(c,be),s(c,es),s(c,ge),s(c,os),Ks.m(vt,os),s(c,_e),s(c,ts),s(c,Te),s(c,as),Qs.m(dt,as),s(c,Ce),s(c,ns),y(l,Ys,k),y(l,n,k),s(n,ls),s(n,Le),s(n,is),s(n,Pe),s(n,rs),Zs.m(ut,rs),s(n,Me),s(n,ps),s(n,He),s(n,cs),Js.m(xt,cs),s(n,je),s(n,ks),s(n,qe),s(n,hs),s(n,Ee),s(n,ys),Xs.m(mt,ys),s(n,Ie),s(n,vs),s(n,Se),s(n,ds),se.m(ft,ds),s(n,De),s(n,us),s(n,Ve),s(n,xs),s(n,Ae),s(n,ms),ee.m(wt,ms),s(n,Oe),s(n,fs),s(n,Ne),s(n,ws),oe.m(bt,ws),s(n,Ue),s(n,bs),s(n,Be),s(n,gs),s(n,We),s(n,_s),s(n,Re),s(n,Ts),s(n,$e),s(n,Cs),te.m(gt,Cs),s(n,ze),s(n,Ls),s(n,Fe),s(n,Ps),s(n,Ge),s(n,Ms),s(n,Ke),s(n,Hs),s(n,Qe),s(n,js),s(n,Ye),s(n,qs),s(n,Ze),s(n,Es),y(l,ae,k),y(l,D,k)},p:Ct,d(l){l&&(r(v),r(_),r(g),r(L),r(P),r(Is),r(M),r(Ds),r(H),r(Vs),r(j),r(Os),r(q),r(Ns),r(E),r(Us),r(I),r(Bs),r(S),r(Ws),r(u),r($s),r(c),r(Ys),r(n),r(ae),r(D))}}}function Ot(V){let v,T;const _=[V[0],it];let g={$$slots:{default:[At]},$$scope:{ctx:V}};for(let d=0;d<_.length;d+=1)g=Je(g,_[d]);return v=new Dt({props:g}),{c(){Mt(v.$$.fragment)},l(d){Ht(v.$$.fragment,d)},m(d,C){jt(v,d,C),T=!0},p(d,[C]){const L=C&1?St(_,[C&1&&lt(d[0]),C&0&&lt(it)]):{};C&2&&(L.$$scope={dirty:C,ctx:d}),v.$set(L)},i(d){T||(qt(v.$$.fragment,d),T=!0)},o(d){Et(v.$$.fragment,d),T=!1},d(d){It(v,d)}}}const it={title:"Webpack's TemplatePlugin",date:"2020-01-21T08:00:00Z",label:"blog",description:"If you are using webpack to bundle your library, you most likely will export something in your entry file:And if you build it with webpack just like that, out-of-the-box, you may be surprised that if you try to ...",tableOfContents:[{link:"webpack-s-output-library-options",title:"Webpack's output.library *  options",nested:[{link:"1-name-of-a-module-system-commonjs-commonjs2-amd-umd",title:'1. Name of a module system:  `"commonjs"` ,  `"commonjs2"` ,  `"amd"` ,  `"umd"` , ...'},{link:"2-name-of-a-variable-var-this-self-window-global",title:'2. Name of a variable:  `"var"` ,  `"this"` ,  `"self"` ,  `"window"` ,  `"global"`'}]},{link:"writing-a-webpack-plugin",title:"Writing a webpack plugin"},{link:"closing-note",title:"Closing Note"}]};function Nt(V,v,T){return Tt("blog",{image:Vt}),V.$$set=_=>{T(0,v=Je(Je({},v),nt(_)))},v=nt(v),[v]}class zt extends Lt{constructor(v){super(),Pt(this,v,Nt,Ot,_t,{})}}export{zt as component};
