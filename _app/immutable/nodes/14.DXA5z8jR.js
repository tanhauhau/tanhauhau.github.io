import{s as O,d as w,e as q,f as P,n as I}from"../chunks/scheduler.D6VJxl8L.js";import{S as j,i as F,m as L,n as M,o as S,t as A,a as E,p as B,e as u,s as f,H as D,c as x,q as _,h as g,d as U,r as Z,g as l,u as R,j as p}from"../chunks/index.CLAVN-Y5.js";import{g as V,a as T}from"../chunks/code-snippet.Gym6WUAG.js";import{B as z}from"../chunks/BlogLayout.BPekX0dI.js";import{t as G}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function J(v){let s,r="A general template that I used:",e,o,a,i=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">promisify</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;util&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">writeFile</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">promisify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;fs&#39;</span><span style="color: var(--shiki-color-text)">).writeFile);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformFileAsync</span><span style="color: var(--shiki-color-text)">(filename</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">manipulateOptions</span><span style="color: var(--shiki-color-text)">(opts</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parserOpts) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">/*</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">             add to parserOpts.plugins to enable the syntax</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">             eg: </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">              jsx, flow, typescript, objectRestSpread, pipelineOperator, </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">              throwExpressions, optionalChaining, nullishCoalescingOperator, </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">              exportDefaultFrom, dynamicImport, ...</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">            */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">parserOpts</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">plugins</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&#39;classProperties&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&#39;classPrivateProperties&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">// fill in a transformer here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">writeFile</span><span style="color: var(--shiki-color-text)">(filename</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)();</span></span></code></pre>`,c,k,b="[Updated on 2019-09-13]",m,h,C='I have written a <a href="/step-by-step-guide-for-writing-a-babel-transformation">step-by-step guide</a> on how to write a babel transformation plugin.',d,y,$='The only difference in this template than the guide is that there&#39;s this <code class="inline">manipulateOptions</code> where you can add additional parser options to enable ES2015+ syntax.';return{c(){s=u("p"),s.textContent=r,e=f(),o=u("div"),a=new D(!1),c=f(),k=u("p"),k.textContent=b,m=f(),h=u("p"),h.innerHTML=C,d=f(),y=u("p"),y.innerHTML=$,this.h()},l(n){s=x(n,"P",{"data-svelte-h":!0}),_(s)!=="svelte-uvmu8q"&&(s.textContent=r),e=g(n),o=x(n,"DIV",{class:!0});var t=U(o);a=Z(t,!1),t.forEach(l),c=g(n),k=x(n,"P",{"data-svelte-h":!0}),_(k)!=="svelte-717k9r"&&(k.textContent=b),m=g(n),h=x(n,"P",{"data-svelte-h":!0}),_(h)!=="svelte-1fjsspy"&&(h.innerHTML=C),d=g(n),y=x(n,"P",{"data-svelte-h":!0}),_(y)!=="svelte-gpdr0o"&&(y.innerHTML=$),this.h()},h(){a.a=null,R(o,"class","code-section")},m(n,t){p(n,s,t),p(n,e,t),p(n,o,t),a.m(i,o),p(n,c,t),p(n,k,t),p(n,m,t),p(n,h,t),p(n,d,t),p(n,y,t)},p:I,d(n){n&&(l(s),l(e),l(o),l(c),l(k),l(m),l(h),l(d),l(y))}}}function K(v){let s,r;const e=[v[0],H];let o={$$slots:{default:[J]},$$scope:{ctx:v}};for(let a=0;a<e.length;a+=1)o=w(o,e[a]);return s=new z({props:o}),{c(){L(s.$$.fragment)},l(a){M(s.$$.fragment,a)},m(a,i){S(s,a,i),r=!0},p(a,[i]){const c=i&1?V(e,[i&1&&T(a[0]),i&0&&T(H)]):{};i&2&&(c.$$scope={dirty:i,ctx:a}),s.$set(c)},i(a){r||(A(s.$$.fragment,a),r=!0)},o(a){E(s.$$.fragment,a),r=!1},d(a){B(s,a)}}}const H={title:"Codemod with babel",date:"2019-03-13T08:00:00Z",lastUpdated:"2019-09-13T08:00:00Z",description:"A template which I used",label:"blog"};function N(v,s,r){return q("blog",{image:G}),v.$$set=e=>{r(0,s=w(w({},s),P(e)))},s=P(s),[s]}class as extends j{constructor(s){super(),F(this,s,N,K,O,{})}}export{as as component};
