import{s as Br,d as $t,e as $r,f as rr,n as Wr}from"../chunks/scheduler.85ImRbsk.js";import{S as Zr,i as Yr,m as Kr,n as Qr,o as Xr,t as si,a as oi,p as ei,e as o,s as a,H as u,c as e,q as n,h as t,d as y,r as x,g as l,u as m,j as f,k as s}from"../chunks/index.JMRAb4ib.js";import{g as ai,a as ir}from"../chunks/code-snippet.p32Anx_S.js";import{B as ti}from"../chunks/BlogLayout.n3Egsk1p.js";const ni=""+new URL("../assets/ast-import.ZuvzYI7r.webp",import.meta.url).href,li=""+new URL("../assets/ast-import.TRbpnuJg.webp",import.meta.url).href,ri=""+new URL("../assets/ast-import.zSA2VJHL.png",import.meta.url).href,pr=""+new URL("../assets/ast-import.0uKlbU4b.png",import.meta.url).href,ii=""+new URL("../assets/hero-twitter.QhGVjgc_.jpg",import.meta.url).href;function pi(U){let _,D='In my <a href="/what-is-module-bundler-and-how-does-it-work/">previous article</a>, I explained how module bundler works. I used <a href="https://webpack.js.org" rel="nofollow">webpack</a> and <a href="https://rollupjs.org" rel="nofollow">rollup</a> as example, how each of them gave us a different perspective on how we can bundle our JavaScript application.',S,A,q="In this article, I am going to show you how I wrote my module bundler. The module bundler itself is not production-ready, yet I learned a ton through the exercise, and I am ever more appreciative of what modern module bundlers have provided.",j,V,Qo,N,Wt="‚ö†Ô∏è <strong>Warning: Tons of JavaScript code ahead. üôàüò±üò®</strong> ‚ö†Ô∏è",Xo,se,oe,O,Zt='<h2><a href="#getting-started" id="getting-started">Getting Started</a></h2> <p>I talked about the input (the JavaScript modules) and the output (the bundled JavaScript file) of a module bundler in <a href="/what-is-module-bundler-and-how-does-it-work/">my previous article</a>. Now it&#39;s time to write a module bundler that takes in the input and produces the output.</p> <p>A <em>basic</em> module bundler can be broken down into 2 parts:</p> <ul><li>Understands the code and constructs the dependency graph <strong>(Dependency Resolution)</strong></li> <li>Assembles the module into a single (or multiple) JavaScript file <strong>(Bundle)</strong></li></ul> <blockquote><p>A <strong>dependency graph</strong> is a graph representation of the dependency relationship between modules.</p></blockquote>',ee,T,z,Yt='<a href="#the-input" id="the-input">The Input</a>',Ze,F,Kt="In this article, I will be using following files as my input to the bundler:",Ye,B,ae,kr=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Ke,$,te,hr=`<div class="filename">square.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,Qe,W,ne,yr=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,Xe,Z,Qt='I&#39;ve created the project on <a href="https://github.com/tanhauhau/byo-bundler/tree/master/fixture" rel="nofollow">Github</a>, so if you are interested to try out yourself, you can clone it and checkout the <code class="inline">fixture-1</code> tag. The input files are in the <code class="inline">fixture/</code> folder.',le,i,Y,Xt='<a href="#writing" id="writing">Writing</a>',sa,K,sn="I started with the main structure of the module bundler:",oa,Q,re,vr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// build dependency graph</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">graph</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// bundle the asset</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// write to output folder</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.name)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ea,X,on='<p>The <strong>dependency graph</strong> is a <a href="https://en.wikipedia.org/wiki/Directed_graph" rel="nofollow">directed graph</a>, where the vertex is the module, and the directed edge is the dependency relationship between the modules.</p>',aa,ss,ie,dr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rootModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> rootModule;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ta,os,en='So, the entry module is "the root" of the graph.',na,es,an='In <code class="inline">createModule</code>, I instantiate a new <code class="inline">Module</code> instance:',la,as,pe,ur=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ra,ts,tn='The class <code class="inline">Module</code> will be used to record module properties, such as the content, the dependencies, exported keys, etc.',ia,ns,ce,xr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pa,ls,nn='While the <code class="inline">content</code> is the string content of the module, to understand what it actually means, I used <a href="http://babeljs.io" rel="nofollow">babel</a> to <em>parse the content</em> into AST (Abstract Syntax Tree):',ca,rs,ke,mr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ka,is,ln="Next, I need to find out the dependency of this module:",ha,ps,he,fr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.findDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ya,cs,rn="So, how can I know what are the dependencies of this module?",va,ks,pn=`I can look for the <code class="inline">import</code> statement from the AST with the help of the
<a href="https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImltcG9ydCBzcXVhcmVBcmVhIGZyb20gJy4vc3F1YXJlLmpzJztcbmltcG9ydCBjaXJjbGVBcmVhIGZyb20gJy4vY2lyY2xlLmpzJztcblxuY29uc29sZS5sb2coJ0FyZWEgb2Ygc3F1YXJlOiAnLCBzcXVhcmVBcmVhKDUpKTtcbmNvbnNvbGUubG9nKCdBcmVhIG9mIGNpcmNsZScsIGNpcmNsZUFyZWEoNSkpO1xuIn0=" rel="nofollow">babel-ast-explorer</a>.`,da,hs,cn=`<span style="display: block; position: relative; padding-top: 38.672%; width: 100%;"><picture><source type="image/webp" srcset="${li}, ${ni} 2x"/><img src="${pr}" srcset="${pr}, ${ri} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="babel-ast-explorer" title="Visualizing AST through babel-ast-explorer"/></picture></span>`,ua,ys,kn='I found out that the <code class="inline">import</code> statement in the AST is called the <code class="inline">ImportDeclaration</code>. It has <code class="inline">specifiers</code> and <code class="inline">source</code>, which the <code class="inline">source.value</code> tells us what this module is importing from:',xa,vs,ye,wr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ma,ds,hn='So I had the path that the module is requesting, but it could be relative to the current file, eg <code class="inline">&quot;./foo/bar&quot;</code>, or from the <code class="inline">node_modules</code>, eg: <code class="inline">&quot;lodash&quot;</code>. How do I know what is the <strong>actual file path</strong> that the module is requesting?',fa,us,yn="The step of figuring out the actual path based on the requested path, is called <strong>&quot;Resolving&quot;</strong>:",wa,xs,ve,gr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(relativePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> relativePath))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// resolving</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ga,ms,vn="<em>Resolving path to the actual file path</em>",de,c,fs,dn='<a href="#resolving" id="resolving">Resolving</a>',ba,ws,un='Let&#39;s talk about resolving. We know that &quot;import&quot;ing <code class="inline">./b.js</code> in the following examples will result in getting a different file, because when we specify <code class="inline">./</code>, we are &quot;import&quot;ing relative to the current file.',_a,gs,ue,br='<div class="filename">project/a.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Ca,bs,xe,_r='<div class="filename">project/foo/a.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Ia,_s,xn="So, what are the rules of resolving a module?",qa,Cs,mn='The Node.js documentation has listed out the <a href="http://nodejs.org/api/modules.html#modules_all_together" rel="nofollow">detailed step of the module resolving algorithm</a>:',Ma,Is,fn='When we specify a relative path, <code class="inline">./b</code>, Node.js will first assume that <code class="inline">./b</code> is a file, and tries the following extension if it doesn&#39;t exactly match the file name:',Ta,qs,me,Cr=`<pre class="prism language-"><code><span class="line">b</span>
<span class="line">b.js</span>
<span class="line">b.json</span>
<span class="line">b.node</span></code></pre>`,La,Ms,wn='If the file does not exist, Node.js will then try to treat <code class="inline">./b</code> as a directory, and try the following:',Ha,Ts,fe,Ir=`<pre class="prism language-"><code><span class="line">&quot;main&quot; in b/package.json</span>
<span class="line">b/index.js</span>
<span class="line">b/index.json</span>
<span class="line">b/index.node</span></code></pre>`,Pa,Ls,gn='If we specify <code class="inline">import &#39;b&#39;</code> instead, Node.js will treat it as a package within <code class="inline">node_modules/</code>, and have a different resolving strategy.',ja,Hs,bn='Through the above illustration, we can see that resolving <code class="inline">import &#39;./b&#39;</code> is not as simple as it seems. Besides the default Node.js resolving behaviour, <a href="https://webpack.js.org/configuration/resolve/" rel="nofollow">webpack provides a lot more customisation options</a>, such as custom extensions, alias, modules folders, etc.',Ea,Ps,_n="Here, I am showing you the <em>&quot;simplest&quot;</em> resolver, which is to resolve relative path only:",Aa,js,we,qr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;path&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// resolving</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.dirname</span><span style="color: var(--shiki-color-text)">(requester)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Sa,Es,Cn="<small>**Note:** You should try out writing a full node resolvers that resolve relatively as well as absolutely from `node_modules/`</small>",Da,As,In="Now I know the actual requested file paths, I then create modules out of them.",Va,Ss,ge,Mr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(relativePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> relativePath))</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(absolutePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(absolutePath))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Na,Ds,qn="So, for each module, I find their dependencies, parse them, and find each dependency's dependencies, parse them as well, and find their dependencies, and so forth recursively. At the end of the process, I get a module dependency graph that looks something like this:",Oa,Vs,be,Tr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  filePath</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/index.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  content</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-string-expression)">&#39;import squareArea from &#39;./square.js&#39;;&#92;nimport circleArea from &#39;./circle.js&#39;;&#92;n&#92;nconsole.log(&#39;Area of square: &#39;, squareArea(5));&#92;nconsole.log(&#39;Area of circle&#39;, circleArea(5));&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ast</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   Node &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  dependencies</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   [ Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       filePath</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/square.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       content</span><span style="color: var(--shiki-token-keyword)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;function area(side) &#123;&#92;n  return side * side;&#92;n&#125;&#92;nexport default area;&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       ast</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> Node &#123;</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       dependencies</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       filePath</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/circle.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       content</span><span style="color: var(--shiki-token-keyword)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;const PI = 3.141;&#92;nfunction area(radius) &#123;&#92;n    return PI * radius * radius;&#92;n&#125;&#92;nexport default area;&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       ast</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> Node &#123;</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       dependencies</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ra,Ns,Mn='The root of the graph is our entry module, and you can traverse the graph through the <code class="inline">dependencies</code> of the module. As you can see, the <code class="inline">index.js</code> has 2 dependencies, the <code class="inline">square.js</code> and the <code class="inline">circle.js</code>.',Ga,Os,Tn="<small>**Note:** If you are following along, you can checkout the tag `feat-1-module-dependency-graph`, to see the code that I had written up till this point.</small>",_e,I,Rs,Ln='<a href="#bundling" id="bundling">Bundling</a>',Ja,Gs,Hn="With the module dependency graph, it's time to bundle them into a file!",Ua,Js,Pn="At this point in time, we can choose whether we want to bundle it in the <strong>&quot;webpack way&quot;</strong> or the <strong>&quot;rollup way&quot;</strong>. In this article I am showing you how I did it the <strong>&quot;webpack way&quot;</strong>. I&#39;ll write about bundling in the <strong>&quot;rollup way&quot;</strong> in the coming article.",za,Us,jn='<p>If you have no idea about what is the <strong>&quot;webpack way&quot;</strong> or <strong>&quot;rollup way&quot;</strong>, I have &quot;coined&quot; the term in my <a href="/what-is-module-bundler-and-how-does-it-work/">previous article</a> and have detailed explanation about them!</p>',Fa,zs,En="Let's take a look how the final bundled file would look like:",Ba,Fs,Ce,Lr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  modules</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,$a,Bs,An="Let's break it down to a few steps:",Wa,$s,Sn="<li><strong>Group modules into files</strong></li> <li><strong>Create the module map</strong> and wrapping each module in a &quot;special&quot; module factory function</li> <li><strong>Create the &quot;runtime&quot;</strong>, the glue that links each module together.</li>",Ie,L,Ws,Dn='<a href="#grouping-modules-into-files" id="grouping-modules-into-files">Grouping modules into files</a>',Za,Zs,Vn='This step is to decide which modules goes to which file. We can split modules into different files because of <a href="https://webpack.js.org/guides/code-splitting/" rel="nofollow">code splitting</a> due to dynamic import as well as optimisation, such as the webpack&#39;s <a href="https://webpack.js.org/plugins/split-chunks-plugin/" rel="nofollow">Chunk Splitting</a>.',Ya,Ys,Nn="I will support code splitting in the future. For now, I grouped all modules into 1 file.",Ka,Ks,On="To collect all the modules from module graph into a list of modules, I did a graph traversal:",Qa,Qs,qe,Hr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(graph</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> modules;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(module</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dependency </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(dependency</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xa,Xs,Rn="...and I used the list of modules to create a module map.",Me,h,so,Gn='<a href="#creating-module-map" id="creating-module-map">Creating module map</a>',st,oo,Jn="The module map I created is a string, that would be inlined into the final bundle file.",ot,eo,Un='I looped through each module, and used <code class="inline">module.filePath</code> as the key, and <code class="inline">module.content</code> as the value.',et,ao,zn='The reason I dont use <code class="inline">JSON.stringify(moduleMap)</code> instead of manually concatenating to build up the module map, is because JSON can only takes in <a href="https://documentation.progress.com/output/ua/OpenEdge_latest/index.html#page/dvjsn/json-data-types.html" rel="nofollow">JSON primitive data type</a> as value, but what I built here is a JavaScript map, with <code class="inline">function</code> as value, but in string.',at,to,Te,Pr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> moduleMap </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: &#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> moduleMap;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tt,no,Fn='The function that wraps around the <code class="inline">module.content</code> is called the module factory function. It provides 2 parameter to the module:',nt,lo,Bn='<li><code class="inline">exports</code>, an object that the module can assign its exported value onto</li> <li><code class="inline">require</code>, a function that the module can invoke with module path to import exported value from another module</li>',lt,ro,$n="The module map right now is not something that can be executed:",rt,io,Le,jr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;index.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;square.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;circle.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,it,po,Wn='because it still uses <code class="inline">import</code> and <code class="inline">export</code>. I had to transform them to use the <code class="inline">exports</code> and <code class="inline">require</code> that we pass in.',pt,co,Zn="To transform the code, I used the AST of the module again: trasform the ast and generate the new code from the transformed ast.",ct,ko,Yn='What I need is to trasform the "from" to "to" of the following:',kt,ho,He,Er=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// #1</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// from</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> a;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; c &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> a;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> c;</span></span></code></pre>`,ht,yo,Kn='<p>I wrote a <a href="/step-by-step-guide-for-writing-a-babel-transformation">step by step guide</a> on how to write babel transformation, please do check it out.</p>',yt,vo,Qn="Knowing <strong>what to target on AST</strong> and <strong>how the transformed AST look like</strong>, I wrote my transformation code:",vt,uo,Pe,Ar=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.transformModuleInterface</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transformModuleInterface</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformFromAstSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> code;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,dt,xo,Xn='I omitted the actual babel transformation code, because it is lengthy. If you are interested to read about it, you can check out <a href="https://github.com/tanhauhau/byo-bundler/blob/feat-2-bundling/src/index.js#L46-L138" rel="nofollow">from my Github repo</a>',ut,mo,sl="So, now the module map looks ready:",xt,fo,je,Sr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;index.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;square.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;circle.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,mt,wo,ol='One thing to take note is that, for the <code class="inline">require</code> statements, I replaced the requested path to the actual resolved path, because I used the actual resolved path as the key to the module map.',Ee,g,go,el='<a href="#create-the-runtime" id="create-the-runtime"><strong>Create the &quot;runtime&quot;</strong></a>',ft,bo,al="Now it's time to create the runtime. The runtime is a piece of code that is part of the output bundle, that runs when the application code is running, therefore, the runtime.",wt,_o,tl="The runtime code can be from a template file, but for simplicity sake, I kept the runtime code as a string:",gt,Co,Ae,Dr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleCode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    const modules = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">moduleMap</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    const entry = &quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">entryPoint</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    function webpackStart(&#123; modules, entry &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      const moduleCache = &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      const require = moduleName =&gt; &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // if in cache, return the cached version</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        if (moduleCache[moduleName]) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">          return moduleCache[moduleName];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        const exports = &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // this will prevent infinite &quot;require&quot; loop</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // from circular dependencies</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        moduleCache[moduleName] = exports;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // &quot;require&quot;-ing the module,</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // exported stuff will assigned to &quot;exports&quot;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        modules[moduleName](exports, require);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        return moduleCache[moduleName];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      // start the program</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      require(entry);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    webpackStart(&#123; modules, entry &#125;);&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// trim away spaces before the line</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lines</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Boolean</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">padLength</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> lines[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> lines[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.trimLeft</span><span style="color: var(--shiki-color-text)">().</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">RegExp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;^\\s&#123;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">padLength</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#125;&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lines</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(line </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">line</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(regex</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bt,Io,nl='The code above is self explanatory, except if you have no idea what does the <code class="inline">webpackStart()</code> do, you can read more about it in <a href="/what-is-module-bundler-and-how-does-it-work/">my previous post</a>.',_t,qo,ll='Finally, I returned the module code from the <code class="inline">bundle</code> function:',Ct,Mo,Se,Vr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleCode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].filePath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;bundle.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> moduleCode &#125;];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,It,To,rl='Now I run my bundler, it generates a <code class="inline">output/bundle.js</code> file. I run the generated file with node and I see:',qt,Lo,De,Nr=`<pre class="prism language-"><code><span class="line">Area of square:  25</span>
<span class="line">Area of circle 78.525</span></code></pre>`,Mt,Ho,il="That's it! A working module bundler!",Tt,Po,pl="Of course, the module bundler I&#39;ve shown here is <strong>nowhere near webpack</strong>. Webpack supports more module system, resolving strategies, loading strategies, plugin system, optimisation, and many many more.",Ve,M,jo,cl='<a href="#optimisation" id="optimisation">Optimisation</a>',Lt,Eo,kl="I played around my module bundler, and I quickly noticed a bug: <strong>Circular Dependency</strong>.",Ht,Ao,hl="Here's my input files that I've tweaked:",Pt,So,Ne,Or=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,jt,Do,Oe,Rr=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-comment)">// const PI = 3.141;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; PI &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./index.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,Et,Vo,yl="When I ran it through my module bunlder, immediately it ran into a stack overflow:",At,No,Re,Gr='<pre class="prism language-"><code><span class="line">RangeError: Maximum call stack size exceeded</span></code></pre>',Ge,w,Oo,vl='<a href="#circular-dependency" id="circular-dependency">Circular dependency</a>',St,Ro,dl="There were 2 junctures that the code did recursive traversal which have led to the endless loop:",Dt,Go,ul="<li>Generating dependency graphs</li> <li>Traversing module graph for bundling</li>",Vt,Jo,Je,Jr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// fixing circular dependencies when generating module graph</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Map</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(filePath)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.initDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">initDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.findDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// fixing circular dependencies when traversing module graph</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(graph</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(module</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dependency </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(dependency</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Nt,Uo,xl="Bundle with the latest code, the stack overflow is gone. However when I executed the output bundle, I saw",Ot,zo,Ue,Ur=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ node output/bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Area of square:  25</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Area of circle NaN</span></span></code></pre>`,Rt,Fo,ml="So I took a look at the output bundle:",Gt,Bo,ze,zr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. require circle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. define PI on exports</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 4. call &#96;circleArea&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2. at the point of executing this, PI is not yet defined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; PI: </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 5. PI is undefined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jt,$o,fl='So, the problem is that I destructed <code class="inline">PI</code> from the exports of <code class="inline">index.js</code> before it is defined, so naturally <code class="inline">PI</code> within <code class="inline">circle.js</code> would stay as <code class="inline">undefined</code> throughout the application. However before I called <code class="inline">circleArea</code>, we defined <code class="inline">PI</code> on the <code class="inline">index.js</code>&#39;s export, I am expecting it to be available.',Ut,Wo,wl="So I built my application with webpack and took a look at how webpack solved this problem.",zt,Zo,Fe,Fr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">square_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. require circle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circle_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. define PI on exports</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> square_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-color-text)">](</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 4. call &#96;circleArea&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> circle_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-color-text)">](</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2. we keep a reference of the &#96;index.js&#96;&#39;s &#96;exports&#96; object</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">index_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 5. we get PI from the &#96;exports&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> index_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;PI&#39;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ft,Yo,gl='Brilliant! The key is to lazily get the value of <code class="inline">PI</code> when needed!',Bt,Ko,bl='I changed my babel transformation code, which I am not showing it here. If you are curious enough, you can check out <a href="https://github.com/tanhauhau/byo-bundler/compare/feat-2-bundling...feat-3-circular-dependency" rel="nofollow">the changes I made from Github</a>.',Be,R,_l='<h2><a href="#summary" id="summary">Summary</a></h2> <p>There&#39;s two phases in module bundling: <strong>Dependency Resolution</strong> and <strong>Bundling</strong>.</p> <p>I showed you how I constructed the dependency graph, by finding import statements and resolving modules. I shared how I created module maps and transformed the imports / exports syntax during <strong>bundling</strong>. Lastly, I fixed the circular dependency bug that was in the first version of my module bundler.</p>',$e,G,Cl='<h3><a href="#whats-next" id="whats-next">Whats next?</a></h3> <p>I have a few ideas that I will add to my module bundler, such as:</p> <ul><li>code spliting</li> <li>watch mode and reloading</li></ul> <p>which I will cover them in my next article when they are ready.</p> <p>Till then. Cheers. üòé</p>',We,J,Il='<h2><a href="#further-readings" id="further-readings">Further Readings</a></h2> <ul><li><a href="https://www.youtube.com/watch?v=Gc9-7PBqOC8" rel="nofollow">Ronen Amiel, Build Your Own Webpack - You Gotta Love Frontend 2018</a></li> <li><a href="https://slides.com/lucianomammino/unbundling-the-javascript-module-bundler-dublinjs" rel="nofollow">Luciano Mammino, Unbundling the JavaScript module bundler - DublinJS July 2018</a></li> <li><a href="https://www.freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/" rel="nofollow">Adam Kelly, Let‚Äôs learn how module bundlers work and then write one ourselves</a></li> <li><a href="https://www.youtube.com/watch?v=UNMkLHzofQI" rel="nofollow">Webpack founder Tobias Koppers demos bundling live by hand</a></li></ul>';return{c(){_=o("p"),_.innerHTML=D,S=a(),A=o("p"),A.textContent=q,j=a(),V=o("hr"),Qo=a(),N=o("p"),N.innerHTML=Wt,Xo=a(),se=o("hr"),oe=a(),O=o("section"),O.innerHTML=Zt,ee=a(),T=o("section"),z=o("h3"),z.innerHTML=Yt,Ze=a(),F=o("p"),F.textContent=Kt,Ye=a(),B=o("div"),ae=new u(!1),Ke=a(),$=o("div"),te=new u(!1),Qe=a(),W=o("div"),ne=new u(!1),Xe=a(),Z=o("p"),Z.innerHTML=Qt,le=a(),i=o("section"),Y=o("h2"),Y.innerHTML=Xt,sa=a(),K=o("p"),K.textContent=sn,oa=a(),Q=o("div"),re=new u(!1),ea=a(),X=o("blockquote"),X.innerHTML=on,aa=a(),ss=o("div"),ie=new u(!1),ta=a(),os=o("p"),os.textContent=en,na=a(),es=o("p"),es.innerHTML=an,la=a(),as=o("div"),pe=new u(!1),ra=a(),ts=o("p"),ts.innerHTML=tn,ia=a(),ns=o("div"),ce=new u(!1),pa=a(),ls=o("p"),ls.innerHTML=nn,ca=a(),rs=o("div"),ke=new u(!1),ka=a(),is=o("p"),is.textContent=ln,ha=a(),ps=o("div"),he=new u(!1),ya=a(),cs=o("p"),cs.textContent=rn,va=a(),ks=o("p"),ks.innerHTML=pn,da=a(),hs=o("p"),hs.innerHTML=cn,ua=a(),ys=o("p"),ys.innerHTML=kn,xa=a(),vs=o("div"),ye=new u(!1),ma=a(),ds=o("p"),ds.innerHTML=hn,fa=a(),us=o("p"),us.innerHTML=yn,wa=a(),xs=o("div"),ve=new u(!1),ga=a(),ms=o("p"),ms.innerHTML=vn,de=a(),c=o("section"),fs=o("h2"),fs.innerHTML=dn,ba=a(),ws=o("p"),ws.innerHTML=un,_a=a(),gs=o("div"),ue=new u(!1),Ca=a(),bs=o("div"),xe=new u(!1),Ia=a(),_s=o("p"),_s.textContent=xn,qa=a(),Cs=o("p"),Cs.innerHTML=mn,Ma=a(),Is=o("p"),Is.innerHTML=fn,Ta=a(),qs=o("div"),me=new u(!1),La=a(),Ms=o("p"),Ms.innerHTML=wn,Ha=a(),Ts=o("div"),fe=new u(!1),Pa=a(),Ls=o("p"),Ls.innerHTML=gn,ja=a(),Hs=o("p"),Hs.innerHTML=bn,Ea=a(),Ps=o("p"),Ps.innerHTML=_n,Aa=a(),js=o("div"),we=new u(!1),Sa=a(),Es=o("blockquote"),Es.innerHTML=Cn,Da=a(),As=o("p"),As.textContent=In,Va=a(),Ss=o("div"),ge=new u(!1),Na=a(),Ds=o("p"),Ds.textContent=qn,Oa=a(),Vs=o("div"),be=new u(!1),Ra=a(),Ns=o("p"),Ns.innerHTML=Mn,Ga=a(),Os=o("blockquote"),Os.innerHTML=Tn,_e=a(),I=o("section"),Rs=o("h2"),Rs.innerHTML=Ln,Ja=a(),Gs=o("p"),Gs.textContent=Hn,Ua=a(),Js=o("p"),Js.innerHTML=Pn,za=a(),Us=o("blockquote"),Us.innerHTML=jn,Fa=a(),zs=o("p"),zs.textContent=En,Ba=a(),Fs=o("div"),Ce=new u(!1),$a=a(),Bs=o("p"),Bs.textContent=An,Wa=a(),$s=o("ul"),$s.innerHTML=Sn,Ie=a(),L=o("section"),Ws=o("h3"),Ws.innerHTML=Dn,Za=a(),Zs=o("p"),Zs.innerHTML=Vn,Ya=a(),Ys=o("p"),Ys.textContent=Nn,Ka=a(),Ks=o("p"),Ks.textContent=On,Qa=a(),Qs=o("div"),qe=new u(!1),Xa=a(),Xs=o("p"),Xs.textContent=Rn,Me=a(),h=o("section"),so=o("h3"),so.innerHTML=Gn,st=a(),oo=o("p"),oo.textContent=Jn,ot=a(),eo=o("p"),eo.innerHTML=Un,et=a(),ao=o("p"),ao.innerHTML=zn,at=a(),to=o("div"),Te=new u(!1),tt=a(),no=o("p"),no.innerHTML=Fn,nt=a(),lo=o("ul"),lo.innerHTML=Bn,lt=a(),ro=o("p"),ro.textContent=$n,rt=a(),io=o("div"),Le=new u(!1),it=a(),po=o("p"),po.innerHTML=Wn,pt=a(),co=o("p"),co.textContent=Zn,ct=a(),ko=o("p"),ko.textContent=Yn,kt=a(),ho=o("div"),He=new u(!1),ht=a(),yo=o("blockquote"),yo.innerHTML=Kn,yt=a(),vo=o("p"),vo.innerHTML=Qn,vt=a(),uo=o("div"),Pe=new u(!1),dt=a(),xo=o("p"),xo.innerHTML=Xn,ut=a(),mo=o("p"),mo.textContent=sl,xt=a(),fo=o("div"),je=new u(!1),mt=a(),wo=o("p"),wo.innerHTML=ol,Ee=a(),g=o("section"),go=o("h3"),go.innerHTML=el,ft=a(),bo=o("p"),bo.textContent=al,wt=a(),_o=o("p"),_o.textContent=tl,gt=a(),Co=o("div"),Ae=new u(!1),bt=a(),Io=o("p"),Io.innerHTML=nl,_t=a(),qo=o("p"),qo.innerHTML=ll,Ct=a(),Mo=o("div"),Se=new u(!1),It=a(),To=o("p"),To.innerHTML=rl,qt=a(),Lo=o("div"),De=new u(!1),Mt=a(),Ho=o("p"),Ho.textContent=il,Tt=a(),Po=o("p"),Po.innerHTML=pl,Ve=a(),M=o("section"),jo=o("h2"),jo.innerHTML=cl,Lt=a(),Eo=o("p"),Eo.innerHTML=kl,Ht=a(),Ao=o("p"),Ao.textContent=hl,Pt=a(),So=o("div"),Ne=new u(!1),jt=a(),Do=o("div"),Oe=new u(!1),Et=a(),Vo=o("p"),Vo.textContent=yl,At=a(),No=o("div"),Re=new u(!1),Ge=a(),w=o("section"),Oo=o("h3"),Oo.innerHTML=vl,St=a(),Ro=o("p"),Ro.textContent=dl,Dt=a(),Go=o("ul"),Go.innerHTML=ul,Vt=a(),Jo=o("div"),Je=new u(!1),Nt=a(),Uo=o("p"),Uo.textContent=xl,Ot=a(),zo=o("div"),Ue=new u(!1),Rt=a(),Fo=o("p"),Fo.textContent=ml,Gt=a(),Bo=o("div"),ze=new u(!1),Jt=a(),$o=o("p"),$o.innerHTML=fl,Ut=a(),Wo=o("p"),Wo.textContent=wl,zt=a(),Zo=o("div"),Fe=new u(!1),Ft=a(),Yo=o("p"),Yo.innerHTML=gl,Bt=a(),Ko=o("p"),Ko.innerHTML=bl,Be=a(),R=o("section"),R.innerHTML=_l,$e=a(),G=o("section"),G.innerHTML=Cl,We=a(),J=o("section"),J.innerHTML=Il,this.h()},l(r){_=e(r,"P",{"data-svelte-h":!0}),n(_)!=="svelte-10pnrce"&&(_.innerHTML=D),S=t(r),A=e(r,"P",{"data-svelte-h":!0}),n(A)!=="svelte-17m2sol"&&(A.textContent=q),j=t(r),V=e(r,"HR",{}),Qo=t(r),N=e(r,"P",{"data-svelte-h":!0}),n(N)!=="svelte-bwiku5"&&(N.innerHTML=Wt),Xo=t(r),se=e(r,"HR",{}),oe=t(r),O=e(r,"SECTION",{"data-svelte-h":!0}),n(O)!=="svelte-1ceei00"&&(O.innerHTML=Zt),ee=t(r),T=e(r,"SECTION",{});var p=y(T);z=e(p,"H3",{"data-svelte-h":!0}),n(z)!=="svelte-1use2st"&&(z.innerHTML=Yt),Ze=t(p),F=e(p,"P",{"data-svelte-h":!0}),n(F)!=="svelte-1in5ue9"&&(F.textContent=Kt),Ye=t(p),B=e(p,"DIV",{class:!0});var ql=y(B);ae=x(ql,!1),ql.forEach(l),Ke=t(p),$=e(p,"DIV",{class:!0});var Ml=y($);te=x(Ml,!1),Ml.forEach(l),Qe=t(p),W=e(p,"DIV",{class:!0});var Tl=y(W);ne=x(Tl,!1),Tl.forEach(l),Xe=t(p),Z=e(p,"P",{"data-svelte-h":!0}),n(Z)!=="svelte-h70xrv"&&(Z.innerHTML=Qt),p.forEach(l),le=t(r),i=e(r,"SECTION",{});var k=y(i);Y=e(k,"H2",{"data-svelte-h":!0}),n(Y)!=="svelte-w12l04"&&(Y.innerHTML=Xt),sa=t(k),K=e(k,"P",{"data-svelte-h":!0}),n(K)!=="svelte-u3c8u9"&&(K.textContent=sn),oa=t(k),Q=e(k,"DIV",{class:!0});var Ll=y(Q);re=x(Ll,!1),Ll.forEach(l),ea=t(k),X=e(k,"BLOCKQUOTE",{"data-svelte-h":!0}),n(X)!=="svelte-1rrxg2o"&&(X.innerHTML=on),aa=t(k),ss=e(k,"DIV",{class:!0});var Hl=y(ss);ie=x(Hl,!1),Hl.forEach(l),ta=t(k),os=e(k,"P",{"data-svelte-h":!0}),n(os)!=="svelte-1i0nezc"&&(os.textContent=en),na=t(k),es=e(k,"P",{"data-svelte-h":!0}),n(es)!=="svelte-n8p56k"&&(es.innerHTML=an),la=t(k),as=e(k,"DIV",{class:!0});var Pl=y(as);pe=x(Pl,!1),Pl.forEach(l),ra=t(k),ts=e(k,"P",{"data-svelte-h":!0}),n(ts)!=="svelte-1pi3x3j"&&(ts.innerHTML=tn),ia=t(k),ns=e(k,"DIV",{class:!0});var jl=y(ns);ce=x(jl,!1),jl.forEach(l),pa=t(k),ls=e(k,"P",{"data-svelte-h":!0}),n(ls)!=="svelte-1ii9urd"&&(ls.innerHTML=nn),ca=t(k),rs=e(k,"DIV",{class:!0});var El=y(rs);ke=x(El,!1),El.forEach(l),ka=t(k),is=e(k,"P",{"data-svelte-h":!0}),n(is)!=="svelte-bj98o1"&&(is.textContent=ln),ha=t(k),ps=e(k,"DIV",{class:!0});var Al=y(ps);he=x(Al,!1),Al.forEach(l),ya=t(k),cs=e(k,"P",{"data-svelte-h":!0}),n(cs)!=="svelte-7rpoa"&&(cs.textContent=rn),va=t(k),ks=e(k,"P",{"data-svelte-h":!0}),n(ks)!=="svelte-pn8atx"&&(ks.innerHTML=pn),da=t(k),hs=e(k,"P",{"data-svelte-h":!0}),n(hs)!=="svelte-ex083r"&&(hs.innerHTML=cn),ua=t(k),ys=e(k,"P",{"data-svelte-h":!0}),n(ys)!=="svelte-1dz5q7o"&&(ys.innerHTML=kn),xa=t(k),vs=e(k,"DIV",{class:!0});var Sl=y(vs);ye=x(Sl,!1),Sl.forEach(l),ma=t(k),ds=e(k,"P",{"data-svelte-h":!0}),n(ds)!=="svelte-1wclt2n"&&(ds.innerHTML=hn),fa=t(k),us=e(k,"P",{"data-svelte-h":!0}),n(us)!=="svelte-1rypwzq"&&(us.innerHTML=yn),wa=t(k),xs=e(k,"DIV",{class:!0});var Dl=y(xs);ve=x(Dl,!1),Dl.forEach(l),ga=t(k),ms=e(k,"P",{"data-svelte-h":!0}),n(ms)!=="svelte-10sa2ea"&&(ms.innerHTML=vn),k.forEach(l),de=t(r),c=e(r,"SECTION",{});var v=y(c);fs=e(v,"H2",{"data-svelte-h":!0}),n(fs)!=="svelte-9fwq0f"&&(fs.innerHTML=dn),ba=t(v),ws=e(v,"P",{"data-svelte-h":!0}),n(ws)!=="svelte-wzhi86"&&(ws.innerHTML=un),_a=t(v),gs=e(v,"DIV",{class:!0});var Vl=y(gs);ue=x(Vl,!1),Vl.forEach(l),Ca=t(v),bs=e(v,"DIV",{class:!0});var Nl=y(bs);xe=x(Nl,!1),Nl.forEach(l),Ia=t(v),_s=e(v,"P",{"data-svelte-h":!0}),n(_s)!=="svelte-1xb40iy"&&(_s.textContent=xn),qa=t(v),Cs=e(v,"P",{"data-svelte-h":!0}),n(Cs)!=="svelte-1gd6esd"&&(Cs.innerHTML=mn),Ma=t(v),Is=e(v,"P",{"data-svelte-h":!0}),n(Is)!=="svelte-qyz2ly"&&(Is.innerHTML=fn),Ta=t(v),qs=e(v,"DIV",{class:!0});var Ol=y(qs);me=x(Ol,!1),Ol.forEach(l),La=t(v),Ms=e(v,"P",{"data-svelte-h":!0}),n(Ms)!=="svelte-zg6qxv"&&(Ms.innerHTML=wn),Ha=t(v),Ts=e(v,"DIV",{class:!0});var Rl=y(Ts);fe=x(Rl,!1),Rl.forEach(l),Pa=t(v),Ls=e(v,"P",{"data-svelte-h":!0}),n(Ls)!=="svelte-1nfvy9l"&&(Ls.innerHTML=gn),ja=t(v),Hs=e(v,"P",{"data-svelte-h":!0}),n(Hs)!=="svelte-10rejgv"&&(Hs.innerHTML=bn),Ea=t(v),Ps=e(v,"P",{"data-svelte-h":!0}),n(Ps)!=="svelte-x6mh7f"&&(Ps.innerHTML=_n),Aa=t(v),js=e(v,"DIV",{class:!0});var Gl=y(js);we=x(Gl,!1),Gl.forEach(l),Sa=t(v),Es=e(v,"BLOCKQUOTE",{"data-svelte-h":!0}),n(Es)!=="svelte-1bb3ooa"&&(Es.innerHTML=Cn),Da=t(v),As=e(v,"P",{"data-svelte-h":!0}),n(As)!=="svelte-gu0l1f"&&(As.textContent=In),Va=t(v),Ss=e(v,"DIV",{class:!0});var Jl=y(Ss);ge=x(Jl,!1),Jl.forEach(l),Na=t(v),Ds=e(v,"P",{"data-svelte-h":!0}),n(Ds)!=="svelte-1o8prvt"&&(Ds.textContent=qn),Oa=t(v),Vs=e(v,"DIV",{class:!0});var Ul=y(Vs);be=x(Ul,!1),Ul.forEach(l),Ra=t(v),Ns=e(v,"P",{"data-svelte-h":!0}),n(Ns)!=="svelte-i7u94o"&&(Ns.innerHTML=Mn),Ga=t(v),Os=e(v,"BLOCKQUOTE",{"data-svelte-h":!0}),n(Os)!=="svelte-471a9l"&&(Os.innerHTML=Tn),v.forEach(l),_e=t(r),I=e(r,"SECTION",{});var H=y(I);Rs=e(H,"H2",{"data-svelte-h":!0}),n(Rs)!=="svelte-1l89naf"&&(Rs.innerHTML=Ln),Ja=t(H),Gs=e(H,"P",{"data-svelte-h":!0}),n(Gs)!=="svelte-vhxtbr"&&(Gs.textContent=Hn),Ua=t(H),Js=e(H,"P",{"data-svelte-h":!0}),n(Js)!=="svelte-1rueqtp"&&(Js.innerHTML=Pn),za=t(H),Us=e(H,"BLOCKQUOTE",{"data-svelte-h":!0}),n(Us)!=="svelte-1q0wuwq"&&(Us.innerHTML=jn),Fa=t(H),zs=e(H,"P",{"data-svelte-h":!0}),n(zs)!=="svelte-1we2j98"&&(zs.textContent=En),Ba=t(H),Fs=e(H,"DIV",{class:!0});var zl=y(Fs);Ce=x(zl,!1),zl.forEach(l),$a=t(H),Bs=e(H,"P",{"data-svelte-h":!0}),n(Bs)!=="svelte-1aqjhw0"&&(Bs.textContent=An),Wa=t(H),$s=e(H,"UL",{"data-svelte-h":!0}),n($s)!=="svelte-lpymj7"&&($s.innerHTML=Sn),H.forEach(l),Ie=t(r),L=e(r,"SECTION",{});var E=y(L);Ws=e(E,"H3",{"data-svelte-h":!0}),n(Ws)!=="svelte-1f39gsj"&&(Ws.innerHTML=Dn),Za=t(E),Zs=e(E,"P",{"data-svelte-h":!0}),n(Zs)!=="svelte-35i6j3"&&(Zs.innerHTML=Vn),Ya=t(E),Ys=e(E,"P",{"data-svelte-h":!0}),n(Ys)!=="svelte-1flkllz"&&(Ys.textContent=Nn),Ka=t(E),Ks=e(E,"P",{"data-svelte-h":!0}),n(Ks)!=="svelte-1yxcd54"&&(Ks.textContent=On),Qa=t(E),Qs=e(E,"DIV",{class:!0});var Fl=y(Qs);qe=x(Fl,!1),Fl.forEach(l),Xa=t(E),Xs=e(E,"P",{"data-svelte-h":!0}),n(Xs)!=="svelte-1qzqcc2"&&(Xs.textContent=Rn),E.forEach(l),Me=t(r),h=e(r,"SECTION",{});var d=y(h);so=e(d,"H3",{"data-svelte-h":!0}),n(so)!=="svelte-6dwwmj"&&(so.innerHTML=Gn),st=t(d),oo=e(d,"P",{"data-svelte-h":!0}),n(oo)!=="svelte-1dzt9ud"&&(oo.textContent=Jn),ot=t(d),eo=e(d,"P",{"data-svelte-h":!0}),n(eo)!=="svelte-1gxrvvr"&&(eo.innerHTML=Un),et=t(d),ao=e(d,"P",{"data-svelte-h":!0}),n(ao)!=="svelte-1kl0vcy"&&(ao.innerHTML=zn),at=t(d),to=e(d,"DIV",{class:!0});var Bl=y(to);Te=x(Bl,!1),Bl.forEach(l),tt=t(d),no=e(d,"P",{"data-svelte-h":!0}),n(no)!=="svelte-jmiy8l"&&(no.innerHTML=Fn),nt=t(d),lo=e(d,"UL",{"data-svelte-h":!0}),n(lo)!=="svelte-1825k34"&&(lo.innerHTML=Bn),lt=t(d),ro=e(d,"P",{"data-svelte-h":!0}),n(ro)!=="svelte-3hqxhr"&&(ro.textContent=$n),rt=t(d),io=e(d,"DIV",{class:!0});var $l=y(io);Le=x($l,!1),$l.forEach(l),it=t(d),po=e(d,"P",{"data-svelte-h":!0}),n(po)!=="svelte-iimy61"&&(po.innerHTML=Wn),pt=t(d),co=e(d,"P",{"data-svelte-h":!0}),n(co)!=="svelte-3fnyip"&&(co.textContent=Zn),ct=t(d),ko=e(d,"P",{"data-svelte-h":!0}),n(ko)!=="svelte-39w5ca"&&(ko.textContent=Yn),kt=t(d),ho=e(d,"DIV",{class:!0});var Wl=y(ho);He=x(Wl,!1),Wl.forEach(l),ht=t(d),yo=e(d,"BLOCKQUOTE",{"data-svelte-h":!0}),n(yo)!=="svelte-18tgdnh"&&(yo.innerHTML=Kn),yt=t(d),vo=e(d,"P",{"data-svelte-h":!0}),n(vo)!=="svelte-1v7jbor"&&(vo.innerHTML=Qn),vt=t(d),uo=e(d,"DIV",{class:!0});var Zl=y(uo);Pe=x(Zl,!1),Zl.forEach(l),dt=t(d),xo=e(d,"P",{"data-svelte-h":!0}),n(xo)!=="svelte-1l4uyot"&&(xo.innerHTML=Xn),ut=t(d),mo=e(d,"P",{"data-svelte-h":!0}),n(mo)!=="svelte-1qdg4yo"&&(mo.textContent=sl),xt=t(d),fo=e(d,"DIV",{class:!0});var Yl=y(fo);je=x(Yl,!1),Yl.forEach(l),mt=t(d),wo=e(d,"P",{"data-svelte-h":!0}),n(wo)!=="svelte-1dcx55t"&&(wo.innerHTML=ol),d.forEach(l),Ee=t(r),g=e(r,"SECTION",{});var C=y(g);go=e(C,"H3",{"data-svelte-h":!0}),n(go)!=="svelte-j76uhc"&&(go.innerHTML=el),ft=t(C),bo=e(C,"P",{"data-svelte-h":!0}),n(bo)!=="svelte-1ighn6q"&&(bo.textContent=al),wt=t(C),_o=e(C,"P",{"data-svelte-h":!0}),n(_o)!=="svelte-1g0r2nu"&&(_o.textContent=tl),gt=t(C),Co=e(C,"DIV",{class:!0});var Kl=y(Co);Ae=x(Kl,!1),Kl.forEach(l),bt=t(C),Io=e(C,"P",{"data-svelte-h":!0}),n(Io)!=="svelte-gfj7a8"&&(Io.innerHTML=nl),_t=t(C),qo=e(C,"P",{"data-svelte-h":!0}),n(qo)!=="svelte-1jrhoz3"&&(qo.innerHTML=ll),Ct=t(C),Mo=e(C,"DIV",{class:!0});var Ql=y(Mo);Se=x(Ql,!1),Ql.forEach(l),It=t(C),To=e(C,"P",{"data-svelte-h":!0}),n(To)!=="svelte-1wpd10d"&&(To.innerHTML=rl),qt=t(C),Lo=e(C,"DIV",{class:!0});var Xl=y(Lo);De=x(Xl,!1),Xl.forEach(l),Mt=t(C),Ho=e(C,"P",{"data-svelte-h":!0}),n(Ho)!=="svelte-d5wib2"&&(Ho.textContent=il),Tt=t(C),Po=e(C,"P",{"data-svelte-h":!0}),n(Po)!=="svelte-1hs9qpx"&&(Po.innerHTML=pl),C.forEach(l),Ve=t(r),M=e(r,"SECTION",{});var P=y(M);jo=e(P,"H2",{"data-svelte-h":!0}),n(jo)!=="svelte-1l5jjqk"&&(jo.innerHTML=cl),Lt=t(P),Eo=e(P,"P",{"data-svelte-h":!0}),n(Eo)!=="svelte-16h1q01"&&(Eo.innerHTML=kl),Ht=t(P),Ao=e(P,"P",{"data-svelte-h":!0}),n(Ao)!=="svelte-ryt9a0"&&(Ao.textContent=hl),Pt=t(P),So=e(P,"DIV",{class:!0});var sr=y(So);Ne=x(sr,!1),sr.forEach(l),jt=t(P),Do=e(P,"DIV",{class:!0});var or=y(Do);Oe=x(or,!1),or.forEach(l),Et=t(P),Vo=e(P,"P",{"data-svelte-h":!0}),n(Vo)!=="svelte-5t0khn"&&(Vo.textContent=yl),At=t(P),No=e(P,"DIV",{class:!0});var er=y(No);Re=x(er,!1),er.forEach(l),P.forEach(l),Ge=t(r),w=e(r,"SECTION",{});var b=y(w);Oo=e(b,"H3",{"data-svelte-h":!0}),n(Oo)!=="svelte-wjfsbc"&&(Oo.innerHTML=vl),St=t(b),Ro=e(b,"P",{"data-svelte-h":!0}),n(Ro)!=="svelte-1f9gafa"&&(Ro.textContent=dl),Dt=t(b),Go=e(b,"UL",{"data-svelte-h":!0}),n(Go)!=="svelte-159iguz"&&(Go.innerHTML=ul),Vt=t(b),Jo=e(b,"DIV",{class:!0});var ar=y(Jo);Je=x(ar,!1),ar.forEach(l),Nt=t(b),Uo=e(b,"P",{"data-svelte-h":!0}),n(Uo)!=="svelte-w64se1"&&(Uo.textContent=xl),Ot=t(b),zo=e(b,"DIV",{class:!0});var tr=y(zo);Ue=x(tr,!1),tr.forEach(l),Rt=t(b),Fo=e(b,"P",{"data-svelte-h":!0}),n(Fo)!=="svelte-1uju34h"&&(Fo.textContent=ml),Gt=t(b),Bo=e(b,"DIV",{class:!0});var nr=y(Bo);ze=x(nr,!1),nr.forEach(l),Jt=t(b),$o=e(b,"P",{"data-svelte-h":!0}),n($o)!=="svelte-1vcbakl"&&($o.innerHTML=fl),Ut=t(b),Wo=e(b,"P",{"data-svelte-h":!0}),n(Wo)!=="svelte-59wtym"&&(Wo.textContent=wl),zt=t(b),Zo=e(b,"DIV",{class:!0});var lr=y(Zo);Fe=x(lr,!1),lr.forEach(l),Ft=t(b),Yo=e(b,"P",{"data-svelte-h":!0}),n(Yo)!=="svelte-18u1yd3"&&(Yo.innerHTML=gl),Bt=t(b),Ko=e(b,"P",{"data-svelte-h":!0}),n(Ko)!=="svelte-ksn7sm"&&(Ko.innerHTML=bl),b.forEach(l),Be=t(r),R=e(r,"SECTION",{"data-svelte-h":!0}),n(R)!=="svelte-1cmnu2u"&&(R.innerHTML=_l),$e=t(r),G=e(r,"SECTION",{"data-svelte-h":!0}),n(G)!=="svelte-1xkirzv"&&(G.innerHTML=Cl),We=t(r),J=e(r,"SECTION",{"data-svelte-h":!0}),n(J)!=="svelte-oc8ix9"&&(J.innerHTML=Il),this.h()},h(){ae.a=null,m(B,"class","code-section"),te.a=null,m($,"class","code-section"),ne.a=null,m(W,"class","code-section"),re.a=null,m(Q,"class","code-section"),ie.a=null,m(ss,"class","code-section"),pe.a=null,m(as,"class","code-section"),ce.a=null,m(ns,"class","code-section"),ke.a=null,m(rs,"class","code-section"),he.a=null,m(ps,"class","code-section"),ye.a=null,m(vs,"class","code-section"),ve.a=null,m(xs,"class","code-section"),ue.a=null,m(gs,"class","code-section"),xe.a=null,m(bs,"class","code-section"),me.a=null,m(qs,"class","code-section"),fe.a=null,m(Ts,"class","code-section"),we.a=null,m(js,"class","code-section"),ge.a=null,m(Ss,"class","code-section"),be.a=null,m(Vs,"class","code-section"),Ce.a=null,m(Fs,"class","code-section"),qe.a=null,m(Qs,"class","code-section"),Te.a=null,m(to,"class","code-section"),Le.a=null,m(io,"class","code-section"),He.a=null,m(ho,"class","code-section"),Pe.a=null,m(uo,"class","code-section"),je.a=null,m(fo,"class","code-section"),Ae.a=null,m(Co,"class","code-section"),Se.a=null,m(Mo,"class","code-section"),De.a=null,m(Lo,"class","code-section"),Ne.a=null,m(So,"class","code-section"),Oe.a=null,m(Do,"class","code-section"),Re.a=null,m(No,"class","code-section"),Je.a=null,m(Jo,"class","code-section"),Ue.a=null,m(zo,"class","code-section"),ze.a=null,m(Bo,"class","code-section"),Fe.a=null,m(Zo,"class","code-section")},m(r,p){f(r,_,p),f(r,S,p),f(r,A,p),f(r,j,p),f(r,V,p),f(r,Qo,p),f(r,N,p),f(r,Xo,p),f(r,se,p),f(r,oe,p),f(r,O,p),f(r,ee,p),f(r,T,p),s(T,z),s(T,Ze),s(T,F),s(T,Ye),s(T,B),ae.m(kr,B),s(T,Ke),s(T,$),te.m(hr,$),s(T,Qe),s(T,W),ne.m(yr,W),s(T,Xe),s(T,Z),f(r,le,p),f(r,i,p),s(i,Y),s(i,sa),s(i,K),s(i,oa),s(i,Q),re.m(vr,Q),s(i,ea),s(i,X),s(i,aa),s(i,ss),ie.m(dr,ss),s(i,ta),s(i,os),s(i,na),s(i,es),s(i,la),s(i,as),pe.m(ur,as),s(i,ra),s(i,ts),s(i,ia),s(i,ns),ce.m(xr,ns),s(i,pa),s(i,ls),s(i,ca),s(i,rs),ke.m(mr,rs),s(i,ka),s(i,is),s(i,ha),s(i,ps),he.m(fr,ps),s(i,ya),s(i,cs),s(i,va),s(i,ks),s(i,da),s(i,hs),s(i,ua),s(i,ys),s(i,xa),s(i,vs),ye.m(wr,vs),s(i,ma),s(i,ds),s(i,fa),s(i,us),s(i,wa),s(i,xs),ve.m(gr,xs),s(i,ga),s(i,ms),f(r,de,p),f(r,c,p),s(c,fs),s(c,ba),s(c,ws),s(c,_a),s(c,gs),ue.m(br,gs),s(c,Ca),s(c,bs),xe.m(_r,bs),s(c,Ia),s(c,_s),s(c,qa),s(c,Cs),s(c,Ma),s(c,Is),s(c,Ta),s(c,qs),me.m(Cr,qs),s(c,La),s(c,Ms),s(c,Ha),s(c,Ts),fe.m(Ir,Ts),s(c,Pa),s(c,Ls),s(c,ja),s(c,Hs),s(c,Ea),s(c,Ps),s(c,Aa),s(c,js),we.m(qr,js),s(c,Sa),s(c,Es),s(c,Da),s(c,As),s(c,Va),s(c,Ss),ge.m(Mr,Ss),s(c,Na),s(c,Ds),s(c,Oa),s(c,Vs),be.m(Tr,Vs),s(c,Ra),s(c,Ns),s(c,Ga),s(c,Os),f(r,_e,p),f(r,I,p),s(I,Rs),s(I,Ja),s(I,Gs),s(I,Ua),s(I,Js),s(I,za),s(I,Us),s(I,Fa),s(I,zs),s(I,Ba),s(I,Fs),Ce.m(Lr,Fs),s(I,$a),s(I,Bs),s(I,Wa),s(I,$s),f(r,Ie,p),f(r,L,p),s(L,Ws),s(L,Za),s(L,Zs),s(L,Ya),s(L,Ys),s(L,Ka),s(L,Ks),s(L,Qa),s(L,Qs),qe.m(Hr,Qs),s(L,Xa),s(L,Xs),f(r,Me,p),f(r,h,p),s(h,so),s(h,st),s(h,oo),s(h,ot),s(h,eo),s(h,et),s(h,ao),s(h,at),s(h,to),Te.m(Pr,to),s(h,tt),s(h,no),s(h,nt),s(h,lo),s(h,lt),s(h,ro),s(h,rt),s(h,io),Le.m(jr,io),s(h,it),s(h,po),s(h,pt),s(h,co),s(h,ct),s(h,ko),s(h,kt),s(h,ho),He.m(Er,ho),s(h,ht),s(h,yo),s(h,yt),s(h,vo),s(h,vt),s(h,uo),Pe.m(Ar,uo),s(h,dt),s(h,xo),s(h,ut),s(h,mo),s(h,xt),s(h,fo),je.m(Sr,fo),s(h,mt),s(h,wo),f(r,Ee,p),f(r,g,p),s(g,go),s(g,ft),s(g,bo),s(g,wt),s(g,_o),s(g,gt),s(g,Co),Ae.m(Dr,Co),s(g,bt),s(g,Io),s(g,_t),s(g,qo),s(g,Ct),s(g,Mo),Se.m(Vr,Mo),s(g,It),s(g,To),s(g,qt),s(g,Lo),De.m(Nr,Lo),s(g,Mt),s(g,Ho),s(g,Tt),s(g,Po),f(r,Ve,p),f(r,M,p),s(M,jo),s(M,Lt),s(M,Eo),s(M,Ht),s(M,Ao),s(M,Pt),s(M,So),Ne.m(Or,So),s(M,jt),s(M,Do),Oe.m(Rr,Do),s(M,Et),s(M,Vo),s(M,At),s(M,No),Re.m(Gr,No),f(r,Ge,p),f(r,w,p),s(w,Oo),s(w,St),s(w,Ro),s(w,Dt),s(w,Go),s(w,Vt),s(w,Jo),Je.m(Jr,Jo),s(w,Nt),s(w,Uo),s(w,Ot),s(w,zo),Ue.m(Ur,zo),s(w,Rt),s(w,Fo),s(w,Gt),s(w,Bo),ze.m(zr,Bo),s(w,Jt),s(w,$o),s(w,Ut),s(w,Wo),s(w,zt),s(w,Zo),Fe.m(Fr,Zo),s(w,Ft),s(w,Yo),s(w,Bt),s(w,Ko),f(r,Be,p),f(r,R,p),f(r,$e,p),f(r,G,p),f(r,We,p),f(r,J,p)},p:Wr,d(r){r&&(l(_),l(S),l(A),l(j),l(V),l(Qo),l(N),l(Xo),l(se),l(oe),l(O),l(ee),l(T),l(le),l(i),l(de),l(c),l(_e),l(I),l(Ie),l(L),l(Me),l(h),l(Ee),l(g),l(Ve),l(M),l(Ge),l(w),l(Be),l(R),l($e),l(G),l(We),l(J))}}}function ci(U){let _,D;const S=[U[0],cr];let A={$$slots:{default:[pi]},$$scope:{ctx:U}};for(let q=0;q<S.length;q+=1)A=$t(A,S[q]);return _=new ti({props:A}),{c(){Kr(_.$$.fragment)},l(q){Qr(_.$$.fragment,q)},m(q,j){Xr(_,q,j),D=!0},p(q,[j]){const V=j&1?ai(S,[j&1&&ir(q[0]),j&0&&ir(cr)]):{};j&2&&(V.$$scope={dirty:j,ctx:q}),_.$set(V)},i(q){D||(si(_.$$.fragment,q),D=!0)},o(q){oi(_.$$.fragment,q),D=!1},d(q){ei(_,q)}}}const cr={title:"I wrote my module bundler",date:"2019-09-18T08:00:00Z",tags:["JavaScript","module bundler","dev tool","webpack"],description:"In my previous article, I explained how module bundler works. In this article, I am going to show you how I wrote my module bundler...",series:"Write a module bundler",label:"blog",tableOfContents:[{link:"getting-started",title:"Getting Started",nested:[{link:"the-input",title:"The Input"}]},{link:"writing",title:"Writing"},{link:"resolving",title:"Resolving"},{link:"bundling",title:"Bundling",nested:[{link:"grouping-modules-into-files",title:"Grouping modules into files"},{link:"creating-module-map",title:"Creating module map"},{link:"create-the-runtime",title:'Create the "runtime"'}]},{link:"optimisation",title:"Optimisation",nested:[{link:"circular-dependency",title:"Circular dependency"}]},{link:"summary",title:"Summary",nested:[{link:"whats-next",title:"Whats next?"}]},{link:"further-readings",title:"Further Readings"}]};function ki(U,_,D){return $r("blog",{image:ii}),U.$$set=S=>{D(0,_=$t($t({},_),rr(S)))},_=rr(_),[_]}class ui extends Zr{constructor(_){super(),Yr(this,_,ki,ci,Br,{})}}export{ui as component};
