import{s as _a,d as Pt,e as Ta,f as sa,n as Ca}from"../chunks/scheduler.D6VJxl8L.js";import{S as La,i as Ia,m as Ha,n as Sa,o as Ma,t as Aa,a as Ea,p as ja,e,s as o,H as w,c as t,q as n,h as a,d as f,r as g,g as i,u as _,j as u,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as Pa,a as ea}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Va}from"../chunks/BlogLayout.BLHkC4CD.js";const Wa=""+new URL("../assets/member-expression.B-KsuLeg.webp",import.meta.url).href,Ra=""+new URL("../assets/member-expression.DKa29SwA.webp",import.meta.url).href,Ja=""+new URL("../assets/member-expression.ES7Eznqa.png",import.meta.url).href,ta=""+new URL("../assets/member-expression.CTwArwjN.png",import.meta.url).href,Oa=""+new URL("../assets/output.-8INH-8b.webp",import.meta.url).href,Ua=""+new URL("../assets/output.Falurdcb.webp",import.meta.url).href,Za=""+new URL("../assets/output.CiZmfq_T.png",import.meta.url).href,oa=""+new URL("../assets/output.Dyiu_jsn.png",import.meta.url).href,Ga=""+new URL("../assets/targeting.CRt36Eyk.webp",import.meta.url).href,qa=""+new URL("../assets/targeting.BT4x3SXR.webp",import.meta.url).href,Ba=""+new URL("../assets/targeting.xaTVUejb.png",import.meta.url).href,aa=""+new URL("../assets/targeting.C8IfpLql.png",import.meta.url).href,Na=""+new URL("../assets/hero-twitter.BXRmUEGO.jpg",import.meta.url).href;function Fa(W){let x,A='Today, I will share a step-by-step guide for writing a custom <a href="https://babeljs.io/docs/en/babel-core" rel="nofollow">babel</a> transformation. You can use this technique to write your own automated code modifications, refactoring and code generation.',H,I,m='<h2><a href="#what-is-babel" id="what-is-babel">What is babel?</a></h2> <p><a href="https://babeljs.io/docs/en/" rel="nofollow">Babel</a> is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a <a href="https://babeljs.io/docs/en/plugins" rel="nofollow">plugin system</a> to do code transformation, so anyone can write their own transformation plugin for babel.</p> <p>Before you get started writing a transformation plugin for babel, you would need to know what is an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow">Abstract Syntax Tree (AST)</a>.</p>',L,S,Vt='<h3><a href="#what-is-abstract-syntax-tree-ast" id="what-is-abstract-syntax-tree-ast">What is Abstract Syntax Tree (AST)?</a></h3> <p>I am not sure I can explain this better than the amazing articles out there on the web:</p> <ul><li><a href="https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff" rel="nofollow">Leveling Up One‚Äôs Parsing Game With ASTs</a> by <a href="https://twitter.com/vaidehijoshi" rel="nofollow">Vaidehi Joshi</a> * <em>(Highly recommend this one! üëç)</em></li> <li>Wikipedia&#39;s <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow">Abstract syntax tree</a></li> <li><a href="https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27" rel="nofollow">What is an Abstract Syntax Tree</a> by <a href="https://twitter.com/ngArchangel" rel="nofollow">Chidume Nnamdi</a></li></ul> <p>To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the <a href="https://github.com/estree/estree" rel="nofollow">estree specification</a>.</p> <p>AST represents your code, the structure and the meaning of your code. So it allows the compiler like <a href="https://babeljs.io" rel="nofollow">babel</a> to understand the code and make specific meaningful transformation to it.</p> <p>So now you know what is AST, let&#39;s write a custom babel transformation to modify your code using AST.</p>',Ds,y,R,Wt='<a href="#how-to-use-babel-to-transform-code" id="how-to-use-babel-to-transform-code">How to use babel to transform code</a>',_e,J,Rt="The following is the general template of using babel to do code transformation:",Te,O,Ys,la=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; parse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/parser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> traverse </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/traverse&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> generate </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/generator&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// parse the code -&gt; ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// transform the ast</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">traverse</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">enter</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// generate code &lt;- ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generate</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> code);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`,Ce,U,Jt='<p>You would need to install <a href="https://www.npmjs.com/package/@babel/core" rel="nofollow">@babel/core</a> to run this. <code class="inline">@babel/parser</code>, <code class="inline">@babel/traverse</code>, <code class="inline">@babel/generator</code> are all dependencies of <code class="inline">@babel/core</code>, so installing <code class="inline">@babel/core</code> would suffice.</p>',Le,Z,Ot="So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST.",Ie,G,zs,ra='<pre class="prism language-"><code><span class="line">code -&gt; AST -&gt; transformed AST -&gt; transformed code</span></code></pre>',He,q,Ut='However, we can use another API from <code class="inline">babel</code> to do all the above:',Se,B,Qs,ia=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> babel </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// your first babel plugin üòéüòé</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`,Me,N,Zt='Now, you have written your first <a href="https://babeljs.io/docs/en/plugins" rel="nofollow">babel transform plugin</a> that replace all variable named <code class="inline">n</code> to <code class="inline">x</code>, how cool is that?!',Ae,F,Gt='<p>Extract out the function <code class="inline">myCustomPlugin</code> to a new file and export it. <a href="https://medium.com/@bretcameron/how-to-publish-your-first-npm-package-b224296fc57b" rel="nofollow">Package and publish your file as a npm package</a> and you can proudly say you have published a babel plugin! üéâüéâ</p>',Ee,K,qt="At this point, you must have thought: <em>&quot;Yes I&#39;ve just written a babel plugin, but I have no idea how it works...&quot;</em>, so fret not, let&#39;s dive in on how you can write the babel transformation plugin yourself!",je,X,Bt="So, here is the step-by-step guide to do it:",se,b,$,Nt='<a href="#1-have-in-mind-what-you-want-to-transform-from-and-transform-into" id="1-have-in-mind-what-you-want-to-transform-from-and-transform-into">1. Have in mind what you want to transform from and transform into</a>',Pe,D,Ft="In this example, I want to prank my colleague by creating a babel plugin that will:",Ve,Y,Kt="<li>reverse all the variables&#39; and functions&#39; names</li> <li>split out string into individual characters</li>",We,z,ee,pa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,Re,Q,Xt="into",Je,ss,te,ca=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;H&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;e&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;o&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;t&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,Oe,es,$t='Well, we have to keep the <code class="inline">console.log</code>, so that even the code is hardly readable, it is still working fine. <em>(I wouldn&#39;t want to break the production code!)</em>',oe,E,Dt=`<h3><a href="#2-know-what-to-target-on-the-ast" id="2-know-what-to-target-on-the-ast">2. Know what to target on the AST</a></h3> <p>Head down to a <a href="https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0=" rel="nofollow">babel AST explorer</a>, click on different parts of the code and see where / how it is represented on the AST:</p> <p><span style="display: block; position: relative; padding-top: 15.703%; width: 100%;"><picture><source type="image/webp" srcset="${qa}, ${Ga} 2x"/><img src="${aa}" srcset="${aa}, ${Ba} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="targeting" title="Selecting the code on the left and see the corresponding part of the AST light up on the right"/></picture></span></p> <p>If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code.</p> <p>So, now we know that we need to target:</p> <ul><li><strong>Identifier</strong> for variable and function names</li> <li><strong>StringLiteral</strong> for the string.</li></ul>`,ae,j,Yt=`<h3><a href="#3-know-how-the-transformed-ast-looks-like" id="3-know-how-the-transformed-ast-looks-like">3. Know how the transformed AST looks like</a></h3> <p>Head down to the <a href="https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlLCJoaWRlQ29tbWVudHMiOnRydWV9LCJjb2RlIjoiZnVuY3Rpb24gdGVlcmcoZW1hbikge1xuICByZXR1cm4gXCJIXCIgKyBcImVcIiArIFwibFwiICsgXCJsXCIgKyBcIm9cIiArIFwiIFwiICsgZW1hbjtcbn1cblxuY29uc29sZS5sb2codGVlcmcoXCJ0XCIgKyBcImFcIiArIFwiblwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiKSk7IC8vIEhlbGxvIHRhbmhhdWhhdVxuIn0=" rel="nofollow">babel AST explorer</a> again, but this time around with the output code you want to generate.</p> <p><span style="display: block; position: relative; padding-top: 42.782%; width: 100%;"><picture><source type="image/webp" srcset="${Ua}, ${Oa} 2x"/><img src="${oa}" srcset="${oa}, ${Za} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="output" title="You can see that what used to be a StringLiteral is now a nested BinaryExpression"/></picture></span></p> <p>Play around and think how you can transform from the previous AST to the current AST.</p> <p>For example, you can see that <code class="inline">&#39;H&#39; + &#39;e&#39; + &#39;l&#39; + &#39;l&#39; + &#39;o&#39; + &#39; &#39; + eman</code> is formed by nested <code class="inline">BinaryExpression</code> with <code class="inline">StringLiteral</code>.</p>`,ne,c,ts,zt='<a href="#4-write-code" id="4-write-code">4. Write code</a>',Ue,os,Qt="Now look at our code again:",Ze,as,le,ha=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ge,ns,so='The transformation uses <a href="https://en.wikipedia.org/wiki/Visitor_pattern" rel="nofollow">the visitor pattern</a>.',qe,ls,eo='During the traversal phase, babel will do a <a href="https://en.wikipedia.org/wiki/Depth-first_search" rel="nofollow">depth-first search traversal</a> and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting.',Be,rs,to='In the visitor object, you can specify the name of the node you want to be <code class="inline">callback</code>ed:',Ne,is,re,ka=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;identifier&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;string literal&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fe,ps,oo='Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:',Ke,cs,ie,va=`<pre class="prism language-"><code><span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span></code></pre>`,Xe,$e,De,hs,ao='Before we continue, let&#39;s look at the parameter of <code class="inline">Identifer(path) {}</code>. It says <code class="inline">path</code> instead of <code class="inline">node</code>, what is the difference between <code class="inline">path</code> and <code class="inline">node</code>? ü§∑‚Äç',Ye,ks,no='In babel, <code class="inline">path</code> is an abstraction above <code class="inline">node</code>, it provides the link between nodes, ie the <code class="inline">parent</code> of the node, as well as information such as the <code class="inline">scope</code>, <code class="inline">context</code>, etc. Besides, the <code class="inline">path</code> provides method such as <code class="inline">replaceWith</code>, <code class="inline">insertBefore</code>, <code class="inline">remove</code>, etc that will update and reflect on the underlying AST node.',ze,vs,lo='<p>You can read more detail about <code class="inline">path</code> in <a href="https://jamie.build" rel="nofollow">Jamie Kyle</a>&#39;s <a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#paths" rel="nofollow">babel handbook</a></p>',Qe,st,et,ys,ro="So let's continue writing our babel plugin.",pe,p,ds,io='<a href="#transforming-variable-name" id="transforming-variable-name">Transforming variable name</a>',tt,us,po='As we can see from the <a href="https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0=" rel="nofollow">AST explorer</a>, the name of the <code class="inline">Identifier</code> is stored in the property called <code class="inline">name</code>, so what we will do is to reverse the <code class="inline">name</code>.',ot,xs,ce,ya=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,at,fs,co="Run it and you will see:",nt,ms,he,da=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">elosnoc</span><span style="color: var(--shiki-token-function)">.gol</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,lt,bs,ho='We are almost there, except we&#39;ve accidentally reversed <code class="inline">console.log</code> as well. How can we prevent that?',rt,ws,ko="Take a look at the AST again:",it,gs,vo=`<span style="display: block; position: relative; padding-top: 18.570%; width: 100%;"><picture><source type="image/webp" srcset="${Ra}, ${Wa} 2x"/><img src="${ta}" srcset="${ta}, ${Ja} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="member expression"/></picture></span>`,pt,_s,yo='<code class="inline">console.log</code> is part of the <code class="inline">MemberExpression</code>, with the <code class="inline">object</code> as <code class="inline">&quot;console&quot;</code> and <code class="inline">property</code> as <code class="inline">&quot;log&quot;</code>.',ct,Ts,uo='So let&#39;s check that if our current <code class="inline">Identifier</code> is within this <code class="inline">MemberExpression</code> and we will not reverse the name:',ht,Cs,ke,ua=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kt,Ls,xo="And yes, now you get it right!",vt,Is,ve,xa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,yt,Hs,fo='So, why do we have to check whether the <code class="inline">Identifier</code>&#39;s parent is not a <code class="inline">console.log</code> <code class="inline">MemberExpression</code>? Why don&#39;t we just compare whether the current <code class="inline">Identifier.name === &#39;console&#39; || Identifier.name === &#39;log&#39;</code>?',dt,Ss,mo='You can do that, except that it will not reverse the variable name if it is named <code class="inline">console</code> or <code class="inline">log</code>:',ut,Ms,ye,fa='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">log</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',xt,As,bo='<p>So, how do I know the method <code class="inline">isMemberExpression</code> and <code class="inline">isIdentifier</code>? Well, all the node types specified in the <a href="https://babeljs.io/docs/en/babel-types" rel="nofollow">@babel/types</a> have the <code class="inline">isXxxx</code> validator function counterpart, eg: <code class="inline">anyTypeAnnotation</code> function will have a <code class="inline">isAnyTypeAnnotation</code> validator. If you want to know the exhaustive list of the validator functions, you can head over <a href="https://github.com/babel/babel/blob/master/packages/babel-types/src/validators/generated/index.js" rel="nofollow">to the actual source code</a>.</p>',de,k,Es,wo='<a href="#transforming-strings" id="transforming-strings">Transforming strings</a>',ft,js,go='The next step is to generate a nested <code class="inline">BinaryExpression</code> out of <code class="inline">StringLiteral</code>.',mt,Ps,_o='To create an AST node, you can use the utility function from <a href="https://babeljs.io/docs/en/babel-types" rel="nofollow"><code class="inline">@babel/types</code></a>. <code class="inline">@babel/types</code> is also available via <code class="inline">babel.types</code> from <code class="inline">@babel/core</code>.',bt,Vs,ue,ma=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wt,Ws,To='So, we split the content of the <code class="inline">StringLiteral</code>, which is in <code class="inline">path.node.value</code>, make each character a <code class="inline">StringLiteral</code>, and combine them with <code class="inline">BinaryExpression</code>. Finally, we replace the <code class="inline">StringLiteral</code> with the newly created node.',gt,Rs,Co="...And that's it! Except, we ran into Stack Overflow üòÖ:",_t,Js,xe,ba='<pre class="prism language-"><code><span class="line">RangeError: Maximum call stack size exceeded</span></code></pre>',Tt,Os,Lo="Why ü§∑‚Äç ?",Ct,Us,Io='Well, that&#39;s because for each <code class="inline">StringLiteral</code> we created more <code class="inline">StringLiteral</code>, and in each of those <code class="inline">StringLiteral</code>, we are &quot;creating&quot; more <code class="inline">StringLiteral</code>. Although we will replace a <code class="inline">StringLiteral</code> with another <code class="inline">StringLiteral</code>, babel will treat it as a new node and will visit the newly created <code class="inline">StringLiteral</code>, thus the infinite recursive and stack overflow.',Lt,Zs,Ho='So, how do we tell babel that once we replaced the <code class="inline">StringLiteral</code> with the <code class="inline">newNode</code>, babel can stop and don&#39;t have to go down and visit the newly created node anymore?',It,Gs,So='We can use <code class="inline">path.skip()</code> to skip traversing the children of the current path:',Ht,qs,fe,wa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,St,Bs,Mo="...And yes it works now with now stack overflow!",me,T,Ns,Ao='<a href="#summary" id="summary">Summary</a>',Mt,Fs,Eo="So, here we have it, our first code transformation with babel:",At,Ks,be,ga=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">function greet(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  return &#39;Hello &#39; + name;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">console.log(greet(&#39;tanhauhau&#39;)); // Hello tanhauhau</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">concat</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(concat);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code);</span></span></code></pre>`,Et,Xs,jo="A summary of the steps on how we get here:",jt,$s,Po="<li>Have in mind what you want to transform from and transform into</li> <li>Know what to target on the AST</li> <li>Know how the transformed AST looks like</li> <li>Write code</li>",we,P,Vo='<h2><a href="#further-resources" id="further-resources">Further resources</a></h2> <p>If you are interested to learn more, <a href="https://github.com/babel/babel/tree/master/packages" rel="nofollow">babel&#39;s Github repo</a> is always the best place to find out more code examples of writing a babel transformation.</p> <p>Head down to <a href="https://github.com/babel/babel/tree/master/packages" rel="nofollow">https://github.com/babel/babel</a>, and look for <code class="inline">babel-plugin-transform-*</code> or <code class="inline">babel-plugin-proposal-*</code> folders, they are all babel transformation plugin, where you can find code on how babel <a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-nullish-coalescing-operator" rel="nofollow">transform the nullish coalescing operator</a>, <a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-optional-chaining" rel="nofollow">optional chaining</a> and many more.</p> <blockquote><p><strong>Manipulating AST with JavaScript using Babel</strong></p> <p>If you like what you&#39;ve read so far, and want to learn how you could do it with Babel. I&#39;ve created a <a href="https://gum.co/manipulating-ast-with-javascript" rel="nofollow">video course</a>, showing you step-by-step, how to write a babel plugin and codemod.</p> <p>In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals.</p> <p><strong><a href="https://gum.co/manipulating-ast-with-javascript" rel="nofollow">Sounds interesting, let&#39;s take a look at the video course</a></strong></p></blockquote>',ge,V,Wo='<h2><a href="#reference" id="reference">Reference</a></h2> <ul><li><a href="https://babeljs.io/docs/en/" rel="nofollow">Babel docs</a> &amp; <a href="https://github.com/babel/babel" rel="nofollow">Github repo</a></li> <li><a href="https://github.com/jamiebuilds/babel-handbook" rel="nofollow">Babel Handbook</a> by <a href="https://jamie.build/" rel="nofollow">Jamie Kyle</a></li> <li><a href="https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff" rel="nofollow">Leveling Up One‚Äôs Parsing Game With ASTs</a> by <a href="https://twitter.com/vaidehijoshi" rel="nofollow">Vaidehi Joshi</a></li></ul>';return{c(){x=e("p"),x.innerHTML=A,H=o(),I=e("section"),I.innerHTML=m,L=o(),S=e("section"),S.innerHTML=Vt,Ds=o(),y=e("section"),R=e("h2"),R.innerHTML=Wt,_e=o(),J=e("p"),J.textContent=Rt,Te=o(),O=e("div"),Ys=new w(!1),Ce=o(),U=e("blockquote"),U.innerHTML=Jt,Le=o(),Z=e("p"),Z.textContent=Ot,Ie=o(),G=e("div"),zs=new w(!1),He=o(),q=e("p"),q.innerHTML=Ut,Se=o(),B=e("div"),Qs=new w(!1),Me=o(),N=e("p"),N.innerHTML=Zt,Ae=o(),F=e("blockquote"),F.innerHTML=Gt,Ee=o(),K=e("p"),K.innerHTML=qt,je=o(),X=e("p"),X.textContent=Bt,se=o(),b=e("section"),$=e("h3"),$.innerHTML=Nt,Pe=o(),D=e("p"),D.textContent=Ft,Ve=o(),Y=e("ul"),Y.innerHTML=Kt,We=o(),z=e("div"),ee=new w(!1),Re=o(),Q=e("p"),Q.textContent=Xt,Je=o(),ss=e("div"),te=new w(!1),Oe=o(),es=e("p"),es.innerHTML=$t,oe=o(),E=e("section"),E.innerHTML=Dt,ae=o(),j=e("section"),j.innerHTML=Yt,ne=o(),c=e("section"),ts=e("h3"),ts.innerHTML=zt,Ue=o(),os=e("p"),os.textContent=Qt,Ze=o(),as=e("div"),le=new w(!1),Ge=o(),ns=e("p"),ns.innerHTML=so,qe=o(),ls=e("p"),ls.innerHTML=eo,Be=o(),rs=e("p"),rs.innerHTML=to,Ne=o(),is=e("div"),re=new w(!1),Fe=o(),ps=e("p"),ps.textContent=oo,Ke=o(),cs=e("div"),ie=new w(!1),Xe=o(),$e=e("hr"),De=o(),hs=e("p"),hs.innerHTML=ao,Ye=o(),ks=e("p"),ks.innerHTML=no,ze=o(),vs=e("blockquote"),vs.innerHTML=lo,Qe=o(),st=e("hr"),et=o(),ys=e("p"),ys.textContent=ro,pe=o(),p=e("section"),ds=e("h4"),ds.innerHTML=io,tt=o(),us=e("p"),us.innerHTML=po,ot=o(),xs=e("div"),ce=new w(!1),at=o(),fs=e("p"),fs.textContent=co,nt=o(),ms=e("div"),he=new w(!1),lt=o(),bs=e("p"),bs.innerHTML=ho,rt=o(),ws=e("p"),ws.textContent=ko,it=o(),gs=e("p"),gs.innerHTML=vo,pt=o(),_s=e("p"),_s.innerHTML=yo,ct=o(),Ts=e("p"),Ts.innerHTML=uo,ht=o(),Cs=e("div"),ke=new w(!1),kt=o(),Ls=e("p"),Ls.textContent=xo,vt=o(),Is=e("div"),ve=new w(!1),yt=o(),Hs=e("p"),Hs.innerHTML=fo,dt=o(),Ss=e("p"),Ss.innerHTML=mo,ut=o(),Ms=e("div"),ye=new w(!1),xt=o(),As=e("blockquote"),As.innerHTML=bo,de=o(),k=e("section"),Es=e("h4"),Es.innerHTML=wo,ft=o(),js=e("p"),js.innerHTML=go,mt=o(),Ps=e("p"),Ps.innerHTML=_o,bt=o(),Vs=e("div"),ue=new w(!1),wt=o(),Ws=e("p"),Ws.innerHTML=To,gt=o(),Rs=e("p"),Rs.textContent=Co,_t=o(),Js=e("div"),xe=new w(!1),Tt=o(),Os=e("p"),Os.textContent=Lo,Ct=o(),Us=e("p"),Us.innerHTML=Io,Lt=o(),Zs=e("p"),Zs.innerHTML=Ho,It=o(),Gs=e("p"),Gs.innerHTML=So,Ht=o(),qs=e("div"),fe=new w(!1),St=o(),Bs=e("p"),Bs.textContent=Mo,me=o(),T=e("section"),Ns=e("h2"),Ns.innerHTML=Ao,Mt=o(),Fs=e("p"),Fs.textContent=Eo,At=o(),Ks=e("div"),be=new w(!1),Et=o(),Xs=e("p"),Xs.textContent=jo,jt=o(),$s=e("ol"),$s.innerHTML=Po,we=o(),P=e("section"),P.innerHTML=Vo,ge=o(),V=e("section"),V.innerHTML=Wo,this.h()},l(l){x=t(l,"P",{"data-svelte-h":!0}),n(x)!=="svelte-ibnba8"&&(x.innerHTML=A),H=a(l),I=t(l,"SECTION",{"data-svelte-h":!0}),n(I)!=="svelte-8levig"&&(I.innerHTML=m),L=a(l),S=t(l,"SECTION",{"data-svelte-h":!0}),n(S)!=="svelte-23wgra"&&(S.innerHTML=Vt),Ds=a(l),y=t(l,"SECTION",{});var r=f(y);R=t(r,"H2",{"data-svelte-h":!0}),n(R)!=="svelte-sp1ivm"&&(R.innerHTML=Wt),_e=a(r),J=t(r,"P",{"data-svelte-h":!0}),n(J)!=="svelte-1u7lst6"&&(J.textContent=Rt),Te=a(r),O=t(r,"DIV",{class:!0});var Ro=f(O);Ys=g(Ro,!1),Ro.forEach(i),Ce=a(r),U=t(r,"BLOCKQUOTE",{"data-svelte-h":!0}),n(U)!=="svelte-xksfwh"&&(U.innerHTML=Jt),Le=a(r),Z=t(r,"P",{"data-svelte-h":!0}),n(Z)!=="svelte-zkgcy6"&&(Z.textContent=Ot),Ie=a(r),G=t(r,"DIV",{class:!0});var Jo=f(G);zs=g(Jo,!1),Jo.forEach(i),He=a(r),q=t(r,"P",{"data-svelte-h":!0}),n(q)!=="svelte-1jpapq8"&&(q.innerHTML=Ut),Se=a(r),B=t(r,"DIV",{class:!0});var Oo=f(B);Qs=g(Oo,!1),Oo.forEach(i),Me=a(r),N=t(r,"P",{"data-svelte-h":!0}),n(N)!=="svelte-1tgtimc"&&(N.innerHTML=Zt),Ae=a(r),F=t(r,"BLOCKQUOTE",{"data-svelte-h":!0}),n(F)!=="svelte-ubsxpu"&&(F.innerHTML=Gt),Ee=a(r),K=t(r,"P",{"data-svelte-h":!0}),n(K)!=="svelte-1swx9az"&&(K.innerHTML=qt),je=a(r),X=t(r,"P",{"data-svelte-h":!0}),n(X)!=="svelte-1jso7w5"&&(X.textContent=Bt),r.forEach(i),se=a(l),b=t(l,"SECTION",{});var C=f(b);$=t(C,"H3",{"data-svelte-h":!0}),n($)!=="svelte-8faovx"&&($.innerHTML=Nt),Pe=a(C),D=t(C,"P",{"data-svelte-h":!0}),n(D)!=="svelte-1r3x3qd"&&(D.textContent=Ft),Ve=a(C),Y=t(C,"UL",{"data-svelte-h":!0}),n(Y)!=="svelte-6eilir"&&(Y.innerHTML=Kt),We=a(C),z=t(C,"DIV",{class:!0});var Uo=f(z);ee=g(Uo,!1),Uo.forEach(i),Re=a(C),Q=t(C,"P",{"data-svelte-h":!0}),n(Q)!=="svelte-tqgc3y"&&(Q.textContent=Xt),Je=a(C),ss=t(C,"DIV",{class:!0});var Zo=f(ss);te=g(Zo,!1),Zo.forEach(i),Oe=a(C),es=t(C,"P",{"data-svelte-h":!0}),n(es)!=="svelte-7mgdl3"&&(es.innerHTML=$t),C.forEach(i),oe=a(l),E=t(l,"SECTION",{"data-svelte-h":!0}),n(E)!=="svelte-14tim1w"&&(E.innerHTML=Dt),ae=a(l),j=t(l,"SECTION",{"data-svelte-h":!0}),n(j)!=="svelte-1rask1g"&&(j.innerHTML=Yt),ne=a(l),c=t(l,"SECTION",{});var v=f(c);ts=t(v,"H3",{"data-svelte-h":!0}),n(ts)!=="svelte-41akqe"&&(ts.innerHTML=zt),Ue=a(v),os=t(v,"P",{"data-svelte-h":!0}),n(os)!=="svelte-nw2rf"&&(os.textContent=Qt),Ze=a(v),as=t(v,"DIV",{class:!0});var Go=f(as);le=g(Go,!1),Go.forEach(i),Ge=a(v),ns=t(v,"P",{"data-svelte-h":!0}),n(ns)!=="svelte-1hm9c9s"&&(ns.innerHTML=so),qe=a(v),ls=t(v,"P",{"data-svelte-h":!0}),n(ls)!=="svelte-1ul5x2l"&&(ls.innerHTML=eo),Be=a(v),rs=t(v,"P",{"data-svelte-h":!0}),n(rs)!=="svelte-1lq16gp"&&(rs.innerHTML=to),Ne=a(v),is=t(v,"DIV",{class:!0});var qo=f(is);re=g(qo,!1),qo.forEach(i),Fe=a(v),ps=t(v,"P",{"data-svelte-h":!0}),n(ps)!=="svelte-1kjyl1x"&&(ps.textContent=oo),Ke=a(v),cs=t(v,"DIV",{class:!0});var Bo=f(cs);ie=g(Bo,!1),Bo.forEach(i),Xe=a(v),$e=t(v,"HR",{}),De=a(v),hs=t(v,"P",{"data-svelte-h":!0}),n(hs)!=="svelte-1gc6k17"&&(hs.innerHTML=ao),Ye=a(v),ks=t(v,"P",{"data-svelte-h":!0}),n(ks)!=="svelte-1lzut3c"&&(ks.innerHTML=no),ze=a(v),vs=t(v,"BLOCKQUOTE",{"data-svelte-h":!0}),n(vs)!=="svelte-4es0ny"&&(vs.innerHTML=lo),Qe=a(v),st=t(v,"HR",{}),et=a(v),ys=t(v,"P",{"data-svelte-h":!0}),n(ys)!=="svelte-1atlh4v"&&(ys.textContent=ro),v.forEach(i),pe=a(l),p=t(l,"SECTION",{});var h=f(p);ds=t(h,"H4",{"data-svelte-h":!0}),n(ds)!=="svelte-15fx2t3"&&(ds.innerHTML=io),tt=a(h),us=t(h,"P",{"data-svelte-h":!0}),n(us)!=="svelte-18x96xg"&&(us.innerHTML=po),ot=a(h),xs=t(h,"DIV",{class:!0});var No=f(xs);ce=g(No,!1),No.forEach(i),at=a(h),fs=t(h,"P",{"data-svelte-h":!0}),n(fs)!=="svelte-ipsco5"&&(fs.textContent=co),nt=a(h),ms=t(h,"DIV",{class:!0});var Fo=f(ms);he=g(Fo,!1),Fo.forEach(i),lt=a(h),bs=t(h,"P",{"data-svelte-h":!0}),n(bs)!=="svelte-6ulmwq"&&(bs.innerHTML=ho),rt=a(h),ws=t(h,"P",{"data-svelte-h":!0}),n(ws)!=="svelte-1ojuw2r"&&(ws.textContent=ko),it=a(h),gs=t(h,"P",{"data-svelte-h":!0}),n(gs)!=="svelte-qjur2z"&&(gs.innerHTML=vo),pt=a(h),_s=t(h,"P",{"data-svelte-h":!0}),n(_s)!=="svelte-1kmfmfj"&&(_s.innerHTML=yo),ct=a(h),Ts=t(h,"P",{"data-svelte-h":!0}),n(Ts)!=="svelte-1dge00e"&&(Ts.innerHTML=uo),ht=a(h),Cs=t(h,"DIV",{class:!0});var Ko=f(Cs);ke=g(Ko,!1),Ko.forEach(i),kt=a(h),Ls=t(h,"P",{"data-svelte-h":!0}),n(Ls)!=="svelte-1jws0rt"&&(Ls.textContent=xo),vt=a(h),Is=t(h,"DIV",{class:!0});var Xo=f(Is);ve=g(Xo,!1),Xo.forEach(i),yt=a(h),Hs=t(h,"P",{"data-svelte-h":!0}),n(Hs)!=="svelte-1bknbxv"&&(Hs.innerHTML=fo),dt=a(h),Ss=t(h,"P",{"data-svelte-h":!0}),n(Ss)!=="svelte-bxc2j8"&&(Ss.innerHTML=mo),ut=a(h),Ms=t(h,"DIV",{class:!0});var $o=f(Ms);ye=g($o,!1),$o.forEach(i),xt=a(h),As=t(h,"BLOCKQUOTE",{"data-svelte-h":!0}),n(As)!=="svelte-1tsqrey"&&(As.innerHTML=bo),h.forEach(i),de=a(l),k=t(l,"SECTION",{});var d=f(k);Es=t(d,"H4",{"data-svelte-h":!0}),n(Es)!=="svelte-u6em4e"&&(Es.innerHTML=wo),ft=a(d),js=t(d,"P",{"data-svelte-h":!0}),n(js)!=="svelte-1dk9vek"&&(js.innerHTML=go),mt=a(d),Ps=t(d,"P",{"data-svelte-h":!0}),n(Ps)!=="svelte-26xz2m"&&(Ps.innerHTML=_o),bt=a(d),Vs=t(d,"DIV",{class:!0});var Do=f(Vs);ue=g(Do,!1),Do.forEach(i),wt=a(d),Ws=t(d,"P",{"data-svelte-h":!0}),n(Ws)!=="svelte-1x3rcgx"&&(Ws.innerHTML=To),gt=a(d),Rs=t(d,"P",{"data-svelte-h":!0}),n(Rs)!=="svelte-1p35u6"&&(Rs.textContent=Co),_t=a(d),Js=t(d,"DIV",{class:!0});var Yo=f(Js);xe=g(Yo,!1),Yo.forEach(i),Tt=a(d),Os=t(d,"P",{"data-svelte-h":!0}),n(Os)!=="svelte-1u3m2up"&&(Os.textContent=Lo),Ct=a(d),Us=t(d,"P",{"data-svelte-h":!0}),n(Us)!=="svelte-ctv4l8"&&(Us.innerHTML=Io),Lt=a(d),Zs=t(d,"P",{"data-svelte-h":!0}),n(Zs)!=="svelte-1iaehn2"&&(Zs.innerHTML=Ho),It=a(d),Gs=t(d,"P",{"data-svelte-h":!0}),n(Gs)!=="svelte-1rekn1o"&&(Gs.innerHTML=So),Ht=a(d),qs=t(d,"DIV",{class:!0});var zo=f(qs);fe=g(zo,!1),zo.forEach(i),St=a(d),Bs=t(d,"P",{"data-svelte-h":!0}),n(Bs)!=="svelte-1w894ow"&&(Bs.textContent=Mo),d.forEach(i),me=a(l),T=t(l,"SECTION",{});var M=f(T);Ns=t(M,"H2",{"data-svelte-h":!0}),n(Ns)!=="svelte-1cfr5vw"&&(Ns.innerHTML=Ao),Mt=a(M),Fs=t(M,"P",{"data-svelte-h":!0}),n(Fs)!=="svelte-1eyg2gv"&&(Fs.textContent=Eo),At=a(M),Ks=t(M,"DIV",{class:!0});var Qo=f(Ks);be=g(Qo,!1),Qo.forEach(i),Et=a(M),Xs=t(M,"P",{"data-svelte-h":!0}),n(Xs)!=="svelte-otd5rv"&&(Xs.textContent=jo),jt=a(M),$s=t(M,"OL",{"data-svelte-h":!0}),n($s)!=="svelte-1wgu9h1"&&($s.innerHTML=Po),M.forEach(i),we=a(l),P=t(l,"SECTION",{"data-svelte-h":!0}),n(P)!=="svelte-msx113"&&(P.innerHTML=Vo),ge=a(l),V=t(l,"SECTION",{"data-svelte-h":!0}),n(V)!=="svelte-li3o9"&&(V.innerHTML=Wo),this.h()},h(){Ys.a=null,_(O,"class","code-section"),zs.a=null,_(G,"class","code-section"),Qs.a=null,_(B,"class","code-section"),ee.a=null,_(z,"class","code-section"),te.a=null,_(ss,"class","code-section"),le.a=null,_(as,"class","code-section"),re.a=null,_(is,"class","code-section"),ie.a=null,_(cs,"class","code-section"),ce.a=null,_(xs,"class","code-section"),he.a=null,_(ms,"class","code-section"),ke.a=null,_(Cs,"class","code-section"),ve.a=null,_(Is,"class","code-section"),ye.a=null,_(Ms,"class","code-section"),ue.a=null,_(Vs,"class","code-section"),xe.a=null,_(Js,"class","code-section"),fe.a=null,_(qs,"class","code-section"),be.a=null,_(Ks,"class","code-section")},m(l,r){u(l,x,r),u(l,H,r),u(l,I,r),u(l,L,r),u(l,S,r),u(l,Ds,r),u(l,y,r),s(y,R),s(y,_e),s(y,J),s(y,Te),s(y,O),Ys.m(la,O),s(y,Ce),s(y,U),s(y,Le),s(y,Z),s(y,Ie),s(y,G),zs.m(ra,G),s(y,He),s(y,q),s(y,Se),s(y,B),Qs.m(ia,B),s(y,Me),s(y,N),s(y,Ae),s(y,F),s(y,Ee),s(y,K),s(y,je),s(y,X),u(l,se,r),u(l,b,r),s(b,$),s(b,Pe),s(b,D),s(b,Ve),s(b,Y),s(b,We),s(b,z),ee.m(pa,z),s(b,Re),s(b,Q),s(b,Je),s(b,ss),te.m(ca,ss),s(b,Oe),s(b,es),u(l,oe,r),u(l,E,r),u(l,ae,r),u(l,j,r),u(l,ne,r),u(l,c,r),s(c,ts),s(c,Ue),s(c,os),s(c,Ze),s(c,as),le.m(ha,as),s(c,Ge),s(c,ns),s(c,qe),s(c,ls),s(c,Be),s(c,rs),s(c,Ne),s(c,is),re.m(ka,is),s(c,Fe),s(c,ps),s(c,Ke),s(c,cs),ie.m(va,cs),s(c,Xe),s(c,$e),s(c,De),s(c,hs),s(c,Ye),s(c,ks),s(c,ze),s(c,vs),s(c,Qe),s(c,st),s(c,et),s(c,ys),u(l,pe,r),u(l,p,r),s(p,ds),s(p,tt),s(p,us),s(p,ot),s(p,xs),ce.m(ya,xs),s(p,at),s(p,fs),s(p,nt),s(p,ms),he.m(da,ms),s(p,lt),s(p,bs),s(p,rt),s(p,ws),s(p,it),s(p,gs),s(p,pt),s(p,_s),s(p,ct),s(p,Ts),s(p,ht),s(p,Cs),ke.m(ua,Cs),s(p,kt),s(p,Ls),s(p,vt),s(p,Is),ve.m(xa,Is),s(p,yt),s(p,Hs),s(p,dt),s(p,Ss),s(p,ut),s(p,Ms),ye.m(fa,Ms),s(p,xt),s(p,As),u(l,de,r),u(l,k,r),s(k,Es),s(k,ft),s(k,js),s(k,mt),s(k,Ps),s(k,bt),s(k,Vs),ue.m(ma,Vs),s(k,wt),s(k,Ws),s(k,gt),s(k,Rs),s(k,_t),s(k,Js),xe.m(ba,Js),s(k,Tt),s(k,Os),s(k,Ct),s(k,Us),s(k,Lt),s(k,Zs),s(k,It),s(k,Gs),s(k,Ht),s(k,qs),fe.m(wa,qs),s(k,St),s(k,Bs),u(l,me,r),u(l,T,r),s(T,Ns),s(T,Mt),s(T,Fs),s(T,At),s(T,Ks),be.m(ga,Ks),s(T,Et),s(T,Xs),s(T,jt),s(T,$s),u(l,we,r),u(l,P,r),u(l,ge,r),u(l,V,r)},p:Ca,d(l){l&&(i(x),i(H),i(I),i(L),i(S),i(Ds),i(y),i(se),i(b),i(oe),i(E),i(ae),i(j),i(ne),i(c),i(pe),i(p),i(de),i(k),i(me),i(T),i(we),i(P),i(ge),i(V))}}}function Ka(W){let x,A;const H=[W[0],na];let I={$$slots:{default:[Fa]},$$scope:{ctx:W}};for(let m=0;m<H.length;m+=1)I=Pt(I,H[m]);return x=new Va({props:I}),{c(){Ha(x.$$.fragment)},l(m){Sa(x.$$.fragment,m)},m(m,L){Ma(x,m,L),A=!0},p(m,[L]){const S=L&1?Pa(H,[L&1&&ea(m[0]),L&0&&ea(na)]):{};L&2&&(S.$$scope={dirty:L,ctx:m}),x.$set(S)},i(m){A||(Aa(x.$$.fragment,m),A=!0)},o(m){Ea(x.$$.fragment,m),A=!1},d(m){ja(x,m)}}}const na={title:"Step-by-step guide for writing a custom babel transformation",date:"2019-09-12T08:00:00Z",tags:["JavaScript","babel","AST","transform"],description:"Writing your first babel plugin",series:"Intermediate Babel",label:"blog",tableOfContents:[{link:"what-is-babel",title:"What is babel?",nested:[{link:"what-is-abstract-syntax-tree-ast",title:"What is Abstract Syntax Tree (AST)?"}]},{link:"how-to-use-babel-to-transform-code",title:"How to use babel to transform code",nested:[{link:"1-have-in-mind-what-you-want-to-transform-from-and-transform-into",title:"1. Have in mind what you want to transform from and transform into"},{link:"2-know-what-to-target-on-the-ast",title:"2. Know what to target on the AST"},{link:"3-know-how-the-transformed-ast-looks-like",title:"3. Know how the transformed AST looks like"},{link:"4-write-code",title:"4. Write code",nested:[{link:"transforming-variable-name",title:"Transforming variable name"},{link:"transforming-strings",title:"Transforming strings"}]}]},{link:"summary",title:"Summary"},{link:"further-resources",title:"Further resources"},{link:"reference",title:"Reference"}]};function Xa(W,x,A){return Ta("blog",{image:Na}),W.$$set=H=>{A(0,x=Pt(Pt({},x),sa(H)))},x=sa(x),[x]}class Qa extends La{constructor(x){super(),Ia(this,x,Xa,Ka,_a,{})}}export{Qa as component};
