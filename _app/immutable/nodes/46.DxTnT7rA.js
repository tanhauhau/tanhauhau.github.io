import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as es,g as ts,d as rs,b as ls,s,f as is,e as o,a as ps,r as a,n as e}from"../chunks/C2PHntuy.js";import{h as n}from"../chunks/C3QlhiH-.js";import{i as cs}from"../chunks/BQOOHHT8.js";import{l as ks,s as hs}from"../chunks/gzNpScmH.js";import{B as ys}from"../chunks/B1caYEk9.js";const vs=""+new URL("../assets/hero-twitter.CzHJTY90.jpg",import.meta.url).href,I={title:"JSON Parser with JavaScript",date:"2019-12-12T08:00:00Z",description:"Step-by-step guide on implementing a JSON parser",tags:["JavaScript","AST"],series:"AST",label:"blog",tableOfContents:[{link:"understand-the-grammar",title:"Understand the grammar"},{link:"implementing-the-parser",title:"Implementing the parser"},{link:"handling-the-unexpected-input",title:"Handling the unexpected input",nested:[{link:"unexpected-token",title:"Unexpected token"},{link:"unexpected-end-of-string",title:"Unexpected end of string"}]},{link:"going-the-extra-mile",title:"Going the extra mile",nested:[{link:"error-code-and-standard-error-message",title:"Error code and standard error message"},{link:"a-better-view-of-what-went-wrong",title:"A better view of what went wrong"},{link:"suggestions-for-error-recovery",title:"Suggestions for error recovery"}]},{link:"summary",title:"Summary"}]},{title:_s,date:qs,description:js,tags:Os,series:Ns,label:Js,tableOfContents:Ts}=I;var ds=ls(`<p>The interview question of the week for this week on Cassidoo's weekly newsletter is,</p> <blockquote><p>Write a function that takes in a string of valid JSON and converts it to an object (or whatever your chosen language uses, dicts, maps, etc).
Example input:</p></blockquote> <div class="code-section"><!></div> <p>At one point, I was tempted to just to write:</p> <div class="code-section"><!></div> <p>But, I thought, I've written quite a few articles about AST:</p> <ul><li><a href="/creating-custom-javascript-syntax-with-babel">Creating custom JavaScript syntax with Babel</a></li> <li><a href="/step-by-step-guide-for-writing-a-babel-transformation">Step-by-step guide for writing a custom babel transformation</a></li> <li><a href="/manipulating-ast-with-javascript">Manipulating AST with JavaScript</a></li></ul> <p>which covers the overview of the compiler pipeline, as well as how to manipulate AST, but I haven't covered much on how to implement a parser.</p> <p>That's because, implementing a JavaScript compiler in an article is a task too daunting for me.</p> <p>Well, fret not. JSON is also a language. It has its own grammar, which you can refer from <a href="https://www.json.org/json-en.html" rel="nofollow">the specifications</a>. The knowledge and technique you need to write a JSON parser is transferrable to writing a JS parser.</p> <p>So, let's start writing a JSON parser!</p> <section><h2><a href="#understand-the-grammar" id="understand-the-grammar">Understand the grammar</a></h2> <p>If you look at <a href="https://www.json.org/json-en.html" rel="nofollow">the specification page</a>, there's 2 diagrams:</p> <ul><li><a href="https://en.wikipedia.org/wiki/Syntax_diagram" rel="nofollow">The syntax diagram (or railroad diagram)</a> on the left,</li></ul> <p><img src="https://www.json.org/img/object.png" alt="https://www.json.org/img/object.png"/></p> <small>Image source: https://www.json.org/img/object.png</small> <ul><li><a href="https://www.crockford.com/mckeeman.html" rel="nofollow">The McKeeman Form</a>, a variant of <a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form" rel="nofollow">Backus-Naur Form (BNF)</a>, on the right</li></ul> <div class="code-section"><!></div> <p>Both diagrams are equivalent.</p> <p>One is visual and one is text based. The text based grammar syntax, Backus-Naur Form, is usually fed to another parser that parse this grammar and generate a parser for it. Speaking of parser-ception! ðŸ¤¯</p> <p>In this article, we will focus on the railroad diagram, because it is visual and seemed to be more friendly to me.</p> <p>Lets' look at the first railroad diagram:</p> <p><img src="https://www.json.org/img/object.png" alt="https://www.json.org/img/object.png"/></p> <small>Image source: https://www.json.org/img/object.png</small> <p>So this is the grammar for <strong>"object"</strong> in JSON.</p> <p>We start from the left, following the arrow, and then we end at the right.</p> <p>The circles, eg <code class="inline">&#123;</code>, <code class="inline">,</code>, <code class="inline">:</code>, <code class="inline">&#125;</code>, are the characters, and the boxes eg: <code class="inline">whitespace</code>, <code class="inline">string</code>, and <code class="inline">value</code> is a placeholder for another grammar. So to parse the "whitespace", we will need to look at the grammar for <strong>"whitepsace"</strong>.</p> <p>So, starting from the left, for an object, the first character has to be an open curly bracket, <code class="inline">&#123;</code>. and then we have 2 options from here:</p> <ul><li><code class="inline">whitespace</code> â†’ <code class="inline">&#125;</code> â†’ end, or</li> <li><code class="inline">whitespace</code> â†’ <code class="inline">string</code> â†’ <code class="inline">whitespace</code> â†’ <code class="inline">:</code> â†’ <code class="inline">value</code> â†’ <code class="inline">&#125;</code> â†’ end</li></ul> <p>Of course, when you reach "value", you can choose to go to:</p> <ul><li>â†’ <code class="inline">&#125;</code> â†’ end, or</li> <li>â†’ <code class="inline">,</code> â†’ <code class="inline">whitespace</code> â†’ ... â†’ value</li></ul> <p>and you can keep looping, until you decide to go to:</p> <ul><li>â†’ <code class="inline">&#125;</code> â†’ end.</li></ul> <p>So, I guess we are now acquainted with the railroad diagram, let's carry on to the next section.</p></section> <section><h2><a href="#implementing-the-parser" id="implementing-the-parser">Implementing the parser</a></h2> <p>Let's start with the following structure:</p> <div class="code-section"><!></div> <p>We initialise <code class="inline">i</code> as the index for the current character, we will end as soon as <code class="inline">i</code> reaches the end of the <code class="inline">str</code>.</p> <p>Let's implement the grammar for the <strong>"object":</strong></p> <div class="code-section"><!></div> <p>In the <code class="inline">parseObject</code>, we will call parse of other grammars, like "string" and "whitespace", when we implement them, everything will work ðŸ¤ž.</p> <p>One thing that I forgot to add is the comma, <code class="inline">,</code>. The <code class="inline">,</code> only appears before we start the second loop of <code class="inline">whitespace</code> â†’ <code class="inline">string</code> â†’ <code class="inline">whitespace</code> â†’ <code class="inline">:</code> â†’ ...</p> <p>Based on that, we add the following lines:</p> <div class="code-section"><!></div> <p>Some naming convention:</p> <ul><li>We call <code class="inline">parseSomething</code>, when we parse the code based on grammar and use the return value</li> <li>We call <code class="inline">eatSomething</code>, when we expect the character(s) to be there, but we are not using the character(s)</li> <li>We call <code class="inline">skipSomething</code>, when we are okay if the character(s) is not there.</li></ul> <p>Let's implement the <code class="inline">eatComma</code> and <code class="inline">eatColon</code>:</p> <div class="code-section"><!></div> <p>So we have finished implemented the <code class="inline">parseObject</code> grammar, but what is the return value from this parse function?</p> <p>Well, we need to return a JavaScript object:</p> <div class="code-section"><!></div> <p>Now that you've seen me implementing the "object" grammar, it's time for you to try out the "array" grammar:</p> <p><img src="https://www.json.org/img/array.png" alt="https://www.json.org/img/array.png"/></p> <small>Image source: https://www.json.org/img/array.png</small> <div class="code-section"><!></div> <p>Now, move on to a more interesting grammar, "value":</p> <p><img src="https://www.json.org/img/value.png" alt="https://www.json.org/img/value.png"/></p> <small>Image source: https://www.json.org/img/value.png</small> <p>A value starts with "whitespace", then any of the following: "string", "number", "object", "array", "true", "false" or "null", and then end with a "whitespace":</p> <div class="code-section"><!></div> <p>The <code class="inline">??</code> is called the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator" rel="nofollow">nullish coalescing operator</a>, it is like the <code class="inline">||</code> that we used to use for defaulting a value <code class="inline">foo || default</code>, except that <code class="inline">||</code> will return the <code class="inline">default</code> as long as <code class="inline">foo</code> is falsy, whereas the nullish coalescing operator will only return <code class="inline">default</code> when <code class="inline">foo</code> is either <code class="inline">null</code> or <code class="inline">undefined</code>.</p> <p>The parseKeyword will check whether the current <code class="inline">str.slice(i)</code> matches the keyword string, if so, it will return the keyword value:</p> <div class="code-section"><!></div> <p>That's it for <code class="inline">parseValue</code>!</p> <p>We still have 3 more grammars to go, but I will save the length of this article, and implement them in the following CodeSandbox:</p> <iframe src="https://codesandbox.io/embed/json-parser-k4c3w?expanddevtools=1&amp;fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=editor" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="JSON parser" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe> <p>After we have finished implementing all the grammars, now let's return the value of the json, which is return by the <code class="inline">parseValue</code>:</p> <div class="code-section"><!></div> <p>That's it!</p> <p>Well, not so fast my friend, we've just finished the happy path, what about unhappy path?</p></section> <section><h2><a href="#handling-the-unexpected-input" id="handling-the-unexpected-input">Handling the unexpected input</a></h2> <p>As a good developer, we need to handle the unhappy path gracefully as well. For a parser, that means shouting at the developer with appropriate error message.</p> <p>Let's handle the 2 most common error cases:</p> <ul><li>Unexpected token</li> <li>Unexpected end of string</li></ul></section> <section><h3><a href="#unexpected-token" id="unexpected-token">Unexpected token</a></h3></section> <section><h3><a href="#unexpected-end-of-string" id="unexpected-end-of-string">Unexpected end of string</a></h3> <p>In all the while loops, for example the while loop in <code class="inline">parseObject</code>:</p> <div class="code-section"><!></div> <p>We need to make sure that we don't access the character beyond the length of the string. This happens when the string ended unexpectedly, while we are still waiting for a closing character, "}" in this example:</p> <div class="code-section"><!></div></section> <section><h2><a href="#going-the-extra-mile" id="going-the-extra-mile">Going the extra mile</a></h2> <p>Do you remember the time you were a junior developer, every time when you encounter Syntax error with cryptic messages, you are completely clueless of what went wrong?</p> <p>Now you are more experienced, it is time to stop this virtuous cycle and stop yelling</p> <div class="code-section"><!></div> <p>and leave the user staring at the screen confounded.</p> <p>There's a lot of better ways of handling error messages than yelling, here are some points you can consider adding to your parser:</p></section> <section><h3><a href="#error-code-and-standard-error-message" id="error-code-and-standard-error-message">Error code and standard error message</a></h3> <p>This is useful as a standard keyword for user to Google for help.</p> <div class="code-section"><!></div></section> <section><h3><a href="#a-better-view-of-what-went-wrong" id="a-better-view-of-what-went-wrong">A better view of what went wrong</a></h3> <p>Parser like Babel, will show you a code frame, a snippet of your code with underline, arrow or highlighting of what went wrong</p> <div class="code-section"><!></div> <p>An example on how you can print out the code snippet:</p> <div class="code-section"><!></div></section> <section><h3><a href="#suggestions-for-error-recovery" id="suggestions-for-error-recovery">Suggestions for error recovery</a></h3> <p>If possible, explain what went wrong and give suggestions on how to fix them</p> <div class="code-section"><!></div> <p>If possible, provide suggestions based on the context that the parser has collected so far</p> <div class="code-section"><!></div> <p>The suggestion that based on the context will feel more relatable and actionable.</p> <p>With all the suggestions in mind, check out the updated CodeSandbox with</p> <ul><li>Meaningful error message</li> <li>Code snippet with error pointing point of failure</li> <li>Provide suggestions for error recovery</li></ul> <iframe src="https://codesandbox.io/embed/json-parser-hjwxk?expanddevtools=1&amp;fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=editor" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="JSON parser (with error handling)" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe> <p>Also, read the <a href="https://elm-lang.org/news/compiler-errors-for-humans" rel="nofollow">"Compiler Errors for Humans"</a> by <a href="https://twitter.com/czaplic" rel="nofollow">Evan Czaplicki</a> for how Elm improves the UX problems of the Elm compiler.</p></section> <section><h2><a href="#summary" id="summary">Summary</a></h2> <p>To implement a parser, you need to start with the grammar.</p> <p>You can formalise the grammar with the railroad diagrams or the Backus-Naur Form. Designing the grammar is the hardest step.</p> <p>Once you've settled with the grammar, you can start implementing the parser based on it.</p> <p>Error handling is important, what's more important is to have meaningful error messages, so that the user knows how to fix it.</p> <p>Now you know how a simple parser is implemented, it's time to set eyes on a more complex one:</p> <ul><li><a href="https://github.com/babel/babel/tree/master/packages/babel-parser" rel="nofollow">Babel parser</a></li> <li><a href="https://github.com/sveltejs/svelte/tree/master/src/compiler/parse" rel="nofollow">Svelte parser</a></li></ul> <p>Lastly, do follow <a href="https://twitter.com/cassidoo" rel="nofollow">@cassidoo</a>, her weekly newsletter is awesome!</p></section>`,1);function Ws(U,_){const P=ks(_,["children","$$slots","$$events","$$legacy"]);es(_,!1),ts("blog",{image:vs}),cs(),ys(U,hs(()=>P,()=>I,{children:(A,xs)=>{var q=ds(),t=s(is(q),4),B=o(t);n(B,()=>'<pre class="prism language-"><code><span class="line">fakeParseJSON(&#39;&#123; &quot;data&quot;: &#123; &quot;fish&quot;: &quot;cake&quot;, &quot;array&quot;: [1,2,3], &quot;children&quot;: [ &#123; &quot;something&quot;: &quot;else&quot; &#125;, &#123; &quot;candy&quot;: &quot;cane&quot; &#125;, &#123; &quot;sponge&quot;: &quot;bob&quot; &#125; ] &#125; &#125; &#39;)</span></code></pre>'),a(t);var r=s(t,4),R=o(r);n(R,()=>'<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fakeParseJSON</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>'),a(r);var l=s(r,14),j=s(o(l),12),L=o(j);n(L,()=>`<pre class="prism language-"><code><span class="line">json</span>
<span class="line">  element</span>
<span class="line"></span>
<span class="line">value</span>
<span class="line">  object</span>
<span class="line">  array</span>
<span class="line">  string</span>
<span class="line">  number</span>
<span class="line">  &quot;true&quot;</span>
<span class="line">  &quot;false&quot;</span>
<span class="line">  &quot;null&quot;</span>
<span class="line"></span>
<span class="line">object</span>
<span class="line">  &#39;&#123;&#39; ws &#39;&#125;&#39;</span>
<span class="line">  &#39;&#123;&#39; members &#39;&#125;&#39;</span></code></pre>`),a(j),e(32),a(l);var i=s(l,2),p=s(o(i),4),$=o(p);n($,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(p);var c=s(p,6),V=o(c);n(V,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(c);var k=s(c,8),z=o(k);n(z,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(k);var h=s(k,8),F=o(h);n(F,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;,&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Expected &quot;,&quot;.&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;:&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Expected &quot;:&quot;.&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(h);var y=s(h,6),K=o(y);n(K,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        result[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(y);var v=s(y,8),H=o(v);n(H,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseArray</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;]&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;]&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(v);var d=s(v,10),M=o(d);n(M,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseNumber</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseArray</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;true&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;false&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;null&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(d);var x=s(d,6),D=o(x);n(D,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(i</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(x);var O=s(x,10),G=o(O);n(G,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(O),e(4),a(i);var u=s(i,6),m=s(o(u),4),Y=o(m);n(Y,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)">(str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span></code></pre>`),a(m);var N=s(m,4),X=o(N);n(X,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">checkUnexpectedEndOfInput</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(N),a(u);var w=s(u,2),J=s(o(w),6),Z=o(J);n(Z,()=>'<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span></code></pre>'),a(J),e(4),a(w);var g=s(w,2),T=s(o(g),4),Q=o(T);n(Q,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected end </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> input</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_002</span><span style="color: var(--shiki-color-text)"> Unexpected end </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> input</span></span></code></pre>`),a(T),a(g);var f=s(g,2),b=s(o(f),4),ss=o(b);n(ss,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)"> at position </span><span style="color: var(--shiki-token-constant)">5</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">a</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span></code></pre>`),a(b);var W=s(b,4),os=o(W);n(os,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">printCodeSnippet</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.max</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">trimmed</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> from </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (trimmed </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> (i </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> from);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">snippet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      (trimmed </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;...&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(from</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-token-function)">.repeat</span><span style="color: var(--shiki-color-text)">(padding) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;^&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-token-function)">.repeat</span><span style="color: var(--shiki-color-text)">(padding) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> message</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(snippet);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(W),a(f);var C=s(f,2),S=s(o(C),4),as=o(S);n(as,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)"> at position </span><span style="color: var(--shiki-token-constant)">5</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">a</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">.</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&quot;:&quot;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-string-expression)">&quot;bar&quot;</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">You can learn more about valid </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-color-text)"> string </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> http</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-token-comment)">//goo.gl/xxxxx</span></span></code></pre>`),a(S);var E=s(S,4),ns=o(E);n(ns,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&quot;Lorem ipsum&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;&#96;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;Foo Bar&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;&#96;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;Lorem ipsum&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">^</span></span></code></pre>`),a(E),e(10),a(C),e(2),ps(A,q)},$$slots:{default:!0}})),rs()}export{Ws as component};
