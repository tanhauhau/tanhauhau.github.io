import{s as qe,d as oe,e as ze,f as Te,n as Ae}from"../chunks/scheduler.D6VJxl8L.js";import{S as Je,i as Be,m as Oe,n as We,o as Xe,t as Ee,a as Ge,p as Ve,e as l,s as a,H as Fe,c as o,q as r,h as p,d as Ke,r as Qe,g as s,u as Ze,j as i}from"../chunks/index.CLAVN-Y5.js";import{g as Ne,a as $e}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Ye}from"../chunks/BlogLayout.BMJM32nZ.js";import{t as et}from"../chunks/twitter-card-image.C3bQ3Oc7.js";const tt=""+new URL("../assets/babel-issue-2.8yqhMipG.webp",import.meta.url).href,st=""+new URL("../assets/babel-issue-2.B-P_rbvT.webp",import.meta.url).href,it=""+new URL("../assets/babel-issue-2.CS57ZuUq.png",import.meta.url).href,Ue=""+new URL("../assets/babel-issue-2.Q3SOogDY.png",import.meta.url).href,nt=""+new URL("../assets/uglify.q22znrfX.webp",import.meta.url).href,lt=""+new URL("../assets/uglify.BdspYmfW.webp",import.meta.url).href,ot=""+new URL("../assets/uglify.yDzNnAL8.png",import.meta.url).href,He=""+new URL("../assets/uglify.KH_F8sCy.png",import.meta.url).href,at=""+new URL("../assets/babel-issue.DeHXisGl.webp",import.meta.url).href,pt=""+new URL("../assets/babel-issue.BDUqDobu.webp",import.meta.url).href,rt=""+new URL("../assets/babel-issue.xVQvc4R0.png",import.meta.url).href,Me=""+new URL("../assets/babel-issue.DhaO0EeX.png",import.meta.url).href,ct=""+new URL("../assets/expectation.D9vxW10a.webp",import.meta.url).href,ut=""+new URL("../assets/expectation.B1_iLUt6.webp",import.meta.url).href,_t=""+new URL("../assets/expectation.DV29Urib.png",import.meta.url).href,Re=""+new URL("../assets/expectation.Jr-DeTMi.png",import.meta.url).href,mt=""+new URL("../assets/source.uq4CKr5U.webp",import.meta.url).href,dt=""+new URL("../assets/source.DqXCM-fF.webp",import.meta.url).href,ht=""+new URL("../assets/source.CvD3KDhq.png",import.meta.url).href,Pe=""+new URL("../assets/source.ja6OfFAP.png",import.meta.url).href,yt=""+new URL("../assets/problem-2.CfaAPSWj.webp",import.meta.url).href,bt=""+new URL("../assets/problem-2.BO_6nV0_.webp",import.meta.url).href,ft=""+new URL("../assets/problem-2.CRDHh_81.png",import.meta.url).href,je=""+new URL("../assets/problem-2.D1lE3WEg.png",import.meta.url).href,wt=""+new URL("../assets/problem.DPR3tCgW.webp",import.meta.url).href,gt=""+new URL("../assets/problem.B3S6ryCD.webp",import.meta.url).href,vt=""+new URL("../assets/problem.6AGZQAX2.png",import.meta.url).href,Ie=""+new URL("../assets/problem.Ca9ATvXM.png",import.meta.url).href;function xt(S){let n,h="The background story",m,_,c="I was working on a chrome extension, and trying to add some emojis üòçüòÄüòé into the extension, however I realised the üòçüòÄüòé are not rendered correctly!",u,d,ae=`<span style="display: block; position: relative; padding-top: 66.329%; width: 100%;"><picture><source type="image/webp" srcset="${gt}, ${wt} 2x"/><img src="${Ie}" srcset="${Ie}, ${vt} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="The üòçüòçüòÄüòÄisn‚Äôt rendered correctly in chrome extension"/></picture></span>`,D,y,pe="And so I inspect the source code loaded into the chrome extension, it wasn‚Äôt loaded correctly as well!",q,b,re=`<span style="display: block; position: relative; padding-top: 52.052%; width: 100%;"><picture><source type="image/webp" srcset="${bt}, ${yt} 2x"/><img src="${je}" srcset="${je}, ${ft} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="problem with the source too"/></picture></span>`,z,f,ce="And so I think, probably the encoding issue was caused by the webpack compilation, but, my compiled code looks exactly fine!",A,w,ue=`<span style="display: block; position: relative; padding-top: 48.957%; width: 100%;"><picture><source type="image/webp" srcset="${dt}, ${mt} 2x"/><img src="${Pe}" srcset="${Pe}, ${ht} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="The compiled code seems okay!"/></picture></span>`,J,g,_e='So, most likely is a decoding issue when the emoji code get loaded into chrome extension. So I manually changed the emoji in the compiled code to <code class="inline">\\ud83d\\ude0d</code> (unicode for üòç). Guess what? The emoji is showing correctly in the chrome extension!',B,v,me=`<span style="display: block; position: relative; padding-top: 53.374%; width: 100%;"><picture><source type="image/webp" srcset="${ut}, ${ct} 2x"/><img src="${Re}" srcset="${Re}, ${_t} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="üòç!"/></picture></span>`,O,x,de="So I changed my source code to manually type in the unicode, and compiled it using webpack. To my surprise, the unicode was compiled back into the emoji (üòç) it represents!",W,k,he='I googled around and I found <a href="https://github.com/babel/babel/pull/4478" rel="nofollow">this fix for babel-generator</a>:',X,L,ye=`<span style="display: block; position: relative; padding-top: 41.375%; width: 100%;"><picture><source type="image/webp" srcset="${pt}, ${at} 2x"/><img src="${Me}" srcset="${Me}, ${rt} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="babel issue"/></picture></span>`,E,C,be="I checked my babel version, and it had included this fix. So what went wrong?",G,V,F,T,fe="My colleague reminded me that during webpack compilation, there are 2 phases, the <strong>transpilation</strong> (via babel) and the <strong>minification</strong> (via uglify plugin).",K,$,we='So I disabled the optimisation in webpack config, and noticed that my compiled code contains the original unicode string (<code class="inline">\\ud83d\\ude0d</code>), instead of the emoji (üòç) string. So the unicode string was converted to emoji string during minification!',Q,U,ge='So I went to my favourite <a href="https://skalman.github.io/UglifyJS-online/" rel="nofollow">Online JavaScript Minifier</a> (by <a href="https://github.com/skalman" rel="nofollow">skalman</a>) to try it out.',Z,H,ve=`<span style="display: block; position: relative; padding-top: 21.195%; width: 100%;"><picture><source type="image/webp" srcset="${lt}, ${nt} 2x"/><img src="${He}" srcset="${He}, ${ot} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="online javasript minifier"/></picture></span>`,N,M,xe='After some googling, I <a href="https://github.com/mishoo/UglifyJS2/issues/490" rel="nofollow">found this issue</a> which described my scenario perfectly.',Y,R,ke=`<span style="display: block; position: relative; padding-top: 42.304%; width: 100%;"><picture><source type="image/webp" srcset="${st}, ${tt} 2x"/><img src="${Ue}" srcset="${Ue}, ${it} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="why uglifyjs always compress unicode characters to utf8"/></picture></span>`,ee,P,Le='Turned out there is a <code class="inline">ascii_only</code> for <a href="https://github.com/mishoo/UglifyJS2#output-options" rel="nofollow">output options</a>, and it is default to <code class="inline">false</code>. So I set <code class="inline">ascii_only</code> to <code class="inline">true</code>, ran webpack, and checked my compiled code, it contained the unicode string (<code class="inline">\\ud83d\\ude0d</code>)! And even when I wrote emoji string (üòç) in my source code, it got compiled to unicode as well.',te,j,se,De=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">UglifyJsPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;uglifyjs-webpack-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  optimization</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    minimizer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UglifyJsPlugin</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      uglifyOptions</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        output</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// true for &#96;ascii_only&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          ascii_only</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ie,ne,le,I,Ce='<h2><a href="#til-uglifyjs-ascii-only-option-use-it-when-you-want-to-escape-unicode-characters" id="til-uglifyjs-ascii-only-option-use-it-when-you-want-to-escape-unicode-characters">TIL: UglifyJs ascii_only option, use it when you want to escape Unicode characters.</a></h2> <hr/> <p>Why is there a <code class="inline">ascii_only</code> option?</p> <p>My guess is that it takes less space for a unicode character (16‚Äì17bit) than the escaped ascii characters (6 <em>8 bit‚Ää‚Äî‚Ää12</em> bit), that‚Äôs why using unicode character is the default option (<code class="inline">ascii_only=false</code>).</p>';return{c(){n=l("p"),n.textContent=h,m=a(),_=l("p"),_.textContent=c,u=a(),d=l("p"),d.innerHTML=ae,D=a(),y=l("p"),y.textContent=pe,q=a(),b=l("p"),b.innerHTML=re,z=a(),f=l("p"),f.textContent=ce,A=a(),w=l("p"),w.innerHTML=ue,J=a(),g=l("p"),g.innerHTML=_e,B=a(),v=l("p"),v.innerHTML=me,O=a(),x=l("p"),x.textContent=de,W=a(),k=l("p"),k.innerHTML=he,X=a(),L=l("p"),L.innerHTML=ye,E=a(),C=l("p"),C.textContent=be,G=a(),V=l("hr"),F=a(),T=l("p"),T.innerHTML=fe,K=a(),$=l("p"),$.innerHTML=we,Q=a(),U=l("p"),U.innerHTML=ge,Z=a(),H=l("p"),H.innerHTML=ve,N=a(),M=l("p"),M.innerHTML=xe,Y=a(),R=l("p"),R.innerHTML=ke,ee=a(),P=l("p"),P.innerHTML=Le,te=a(),j=l("div"),se=new Fe(!1),ie=a(),ne=l("hr"),le=a(),I=l("section"),I.innerHTML=Ce,this.h()},l(e){n=o(e,"P",{"data-svelte-h":!0}),r(n)!=="svelte-1tpwtl0"&&(n.textContent=h),m=p(e),_=o(e,"P",{"data-svelte-h":!0}),r(_)!=="svelte-1yafg5c"&&(_.textContent=c),u=p(e),d=o(e,"P",{"data-svelte-h":!0}),r(d)!=="svelte-1qujkxa"&&(d.innerHTML=ae),D=p(e),y=o(e,"P",{"data-svelte-h":!0}),r(y)!=="svelte-1l45z38"&&(y.textContent=pe),q=p(e),b=o(e,"P",{"data-svelte-h":!0}),r(b)!=="svelte-327nqq"&&(b.innerHTML=re),z=p(e),f=o(e,"P",{"data-svelte-h":!0}),r(f)!=="svelte-8t4k6q"&&(f.textContent=ce),A=p(e),w=o(e,"P",{"data-svelte-h":!0}),r(w)!=="svelte-14hzfda"&&(w.innerHTML=ue),J=p(e),g=o(e,"P",{"data-svelte-h":!0}),r(g)!=="svelte-d4kn25"&&(g.innerHTML=_e),B=p(e),v=o(e,"P",{"data-svelte-h":!0}),r(v)!=="svelte-210ov6"&&(v.innerHTML=me),O=p(e),x=o(e,"P",{"data-svelte-h":!0}),r(x)!=="svelte-24x1pa"&&(x.textContent=de),W=p(e),k=o(e,"P",{"data-svelte-h":!0}),r(k)!=="svelte-1xnbt1p"&&(k.innerHTML=he),X=p(e),L=o(e,"P",{"data-svelte-h":!0}),r(L)!=="svelte-8gcj8v"&&(L.innerHTML=ye),E=p(e),C=o(e,"P",{"data-svelte-h":!0}),r(C)!=="svelte-dxv0zu"&&(C.textContent=be),G=p(e),V=o(e,"HR",{}),F=p(e),T=o(e,"P",{"data-svelte-h":!0}),r(T)!=="svelte-17741pt"&&(T.innerHTML=fe),K=p(e),$=o(e,"P",{"data-svelte-h":!0}),r($)!=="svelte-lj8987"&&($.innerHTML=we),Q=p(e),U=o(e,"P",{"data-svelte-h":!0}),r(U)!=="svelte-14b611l"&&(U.innerHTML=ge),Z=p(e),H=o(e,"P",{"data-svelte-h":!0}),r(H)!=="svelte-6lq1rr"&&(H.innerHTML=ve),N=p(e),M=o(e,"P",{"data-svelte-h":!0}),r(M)!=="svelte-mc04sh"&&(M.innerHTML=xe),Y=p(e),R=o(e,"P",{"data-svelte-h":!0}),r(R)!=="svelte-1yg8zjc"&&(R.innerHTML=ke),ee=p(e),P=o(e,"P",{"data-svelte-h":!0}),r(P)!=="svelte-2kp49h"&&(P.innerHTML=Le),te=p(e),j=o(e,"DIV",{class:!0});var t=Ke(j);se=Qe(t,!1),t.forEach(s),ie=p(e),ne=o(e,"HR",{}),le=p(e),I=o(e,"SECTION",{"data-svelte-h":!0}),r(I)!=="svelte-169wdb9"&&(I.innerHTML=Ce),this.h()},h(){se.a=null,Ze(j,"class","code-section")},m(e,t){i(e,n,t),i(e,m,t),i(e,_,t),i(e,u,t),i(e,d,t),i(e,D,t),i(e,y,t),i(e,q,t),i(e,b,t),i(e,z,t),i(e,f,t),i(e,A,t),i(e,w,t),i(e,J,t),i(e,g,t),i(e,B,t),i(e,v,t),i(e,O,t),i(e,x,t),i(e,W,t),i(e,k,t),i(e,X,t),i(e,L,t),i(e,E,t),i(e,C,t),i(e,G,t),i(e,V,t),i(e,F,t),i(e,T,t),i(e,K,t),i(e,$,t),i(e,Q,t),i(e,U,t),i(e,Z,t),i(e,H,t),i(e,N,t),i(e,M,t),i(e,Y,t),i(e,R,t),i(e,ee,t),i(e,P,t),i(e,te,t),i(e,j,t),se.m(De,j),i(e,ie,t),i(e,ne,t),i(e,le,t),i(e,I,t)},p:Ae,d(e){e&&(s(n),s(m),s(_),s(u),s(d),s(D),s(y),s(q),s(b),s(z),s(f),s(A),s(w),s(J),s(g),s(B),s(v),s(O),s(x),s(W),s(k),s(X),s(L),s(E),s(C),s(G),s(V),s(F),s(T),s(K),s($),s(Q),s(U),s(Z),s(H),s(N),s(M),s(Y),s(R),s(ee),s(P),s(te),s(j),s(ie),s(ne),s(le),s(I))}}}function kt(S){let n,h;const m=[S[0],Se];let _={$$slots:{default:[xt]},$$scope:{ctx:S}};for(let c=0;c<m.length;c+=1)_=oe(_,m[c]);return n=new Ye({props:_}),{c(){Oe(n.$$.fragment)},l(c){We(n.$$.fragment,c)},m(c,u){Xe(n,c,u),h=!0},p(c,[u]){const d=u&1?Ne(m,[u&1&&$e(c[0]),u&0&&$e(Se)]):{};u&2&&(d.$$scope={dirty:u,ctx:c}),n.$set(d)},i(c){h||(Ee(n.$$.fragment,c),h=!0)},o(c){Ge(n.$$.fragment,c),h=!1},d(c){Ve(n,c)}}}const Se={title:"The `ascii_only` option in uglify-js",date:"2018-10-27T08:00:00Z",description:"that get my emoji showing in my chrome extension",label:"blog",tableOfContents:[{link:"til-uglifyjs-ascii-only-option-use-it-when-you-want-to-escape-unicode-characters",title:"TIL: UglifyJs ascii_only option, use it when you want to escape Unicode characters."}]};function Lt(S,n,h){return ze("blog",{image:et}),S.$$set=m=>{h(0,n=oe(oe({},n),Te(m)))},n=Te(n),[n]}class Mt extends Je{constructor(n){super(),Be(this,n,Lt,kt,qe,{})}}export{Mt as component};
