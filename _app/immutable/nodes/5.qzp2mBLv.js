import{s as bs,d as Pe,e as Ls,f as hs,n as Is}from"../chunks/scheduler.D6VJxl8L.js";import{S as Cs,i as Ts,m as Hs,n as js,o as Ms,t as qs,a as $s,p as Rs,e as n,s as a,H as J,c as l,d as f,q as p,h as i,r as Q,g as k,u as X,j as w,k as e}from"../chunks/index.CLAVN-Y5.js";import{g as Ps,a as ks}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Us}from"../chunks/BlogLayout.BLHkC4CD.js";const Ss=""+new URL("../assets/dependencies.Cq84KB7a.webp",import.meta.url).href,Bs=""+new URL("../assets/dependencies.DrzhCoj2.webp",import.meta.url).href,Es=""+new URL("../assets/dependencies.ol4Fw-Jm.png",import.meta.url).href,ds=""+new URL("../assets/dependencies.CPUUiRt_.png",import.meta.url).href,Ws=""+new URL("../assets/rollup-plugin-copy-usage.DiQCifQI.webp",import.meta.url).href,Ds=""+new URL("../assets/rollup-plugin-copy-usage.BjzUT9E6.webp",import.meta.url).href,Ns=""+new URL("../assets/rollup-plugin-copy-usage.C4Ue4kEO.png",import.meta.url).href,us=""+new URL("../assets/rollup-plugin-copy-usage.ETaSE_IP.png",import.meta.url).href,Os=""+new URL("../assets/google-search.BXs4x8xB.webp",import.meta.url).href,As=""+new URL("../assets/google-search.hvC0ZzkU.webp",import.meta.url).href,zs=""+new URL("../assets/google-search.p50474kT.png",import.meta.url).href,vs=""+new URL("../assets/google-search.ZtBWFcLi.png",import.meta.url).href,Fs=""+new URL("../assets/window-reference-error.CiO7XSIW.webp",import.meta.url).href,Gs=""+new URL("../assets/window-reference-error.idKowLwW.webp",import.meta.url).href,Ks=""+new URL("../assets/window-reference-error.DtFdjupq.png",import.meta.url).href,ys=""+new URL("../assets/window-reference-error.BZaOH-Tl.png",import.meta.url).href,Vs=""+new URL("../assets/hero-twitter.BdhGu847.jpg",import.meta.url).href;function Ys(x){let s,d,v='<a href="#background" id="background">Background</a>',y,c,u='I was building a web application using <a href="http://svelte.dev/" rel="nofollow">Svelte</a> and <a href="https://rollupjs.org/guide/en/" rel="nofollow">Rollup</a> this morning. I needed to use a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" rel="nofollow">web worker</a>, which the worker script has to be in another file:',_,b,ee,ms='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">worker</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Worker</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/build/worker.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>',re,L,Ue="So naturally, I was thinking of having 2 entries for my rollup application: <em>the main app</em> and <em>the worker</em>.",pe,I,Se='It works fine, except the fact that the <a href="https://www.npmjs.com/package/rollup-plugin-livereload" rel="nofollow">rollup-plugin-livereload</a> injected a livereload script to every output file:',ce,C,se,fs=`<div class="filename">/build/worker.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(l</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> r) &#123; </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">l</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;livereloadscript&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">; r </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">l</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;script&#39;</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-constant)">r</span><span style="color: var(--shiki-color-text)">.async </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-constant)">r</span><span style="color: var(--shiki-color-text)">.src </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;//&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">location</span><span style="color: var(--shiki-color-text)">.host </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;localhost&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;:&#39;</span><span style="color: var(--shiki-color-text)">)[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;:35729/livereload.js?snipver=1&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-constant)">r</span><span style="color: var(--shiki-color-text)">.id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;livereloadscript&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-constant)">l</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">head</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(r) &#125;)(</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.document);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// worker code ...</span></span></code></pre>`,he,T,Be='The livereload script includes a reference to <code class="inline">window</code>, which is not available to the worker script:',ke,H,Ee=`<span style="display: block; position: relative; padding-top: 10.306%; width: 100%;"><picture><source type="image/webp" srcset="${Gs}, ${Fs} 2x"/><img src="${ys}" srcset="${ys}, ${Ks} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="window reference error" title="window is not defined"/></picture></span>`,de,j,We='I looked into <a href="https://www.npmjs.com/package/rollup-plugin-livereload" rel="nofollow">the docs of the rollup-plugin-livereload</a>, it doesn&#39;t seemed to have a option to exclude files from adding the <em>livereload script</em>.',ue,M,De="At this point, I was thinking to myself, <em>&quot;I just need to copy the worker.js into the &#39;build/&#39; folder, I don&#39;t need anything else, how hard can that be?&quot;</em>",ve,q,Ne="It turns out harder than I imagined. 🤮",te,g,Oe=`<h2><a href="#need-something-install-a-plugin" id="need-something-install-a-plugin">Need something? Install a plugin!</a></h2> <p>In todays JavaScript landscape, there&#39;s a <em>&quot;node_module&quot;</em> for everything.</p> <p>So I <a href="https://www.google.com/search?q=rollup+plugin+copy+files" rel="nofollow">googled</a> <em>&quot;rollup plugin copy files&quot;</em>, without a suprise, there are multiple rollup plugins published to npm:</p> <p><span style="display: block; position: relative; padding-top: 76.068%; width: 100%;"><picture><source type="image/webp" srcset="${As}, ${Os} 2x"/><img src="${vs}" srcset="${vs}, ${zs} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="google search" title="Google result for &quot;rollup plugin copy files&quot;"/></picture></span></p> <p>So I decided to install the first plugin, because it has the highest weekly downloads:</p> <p><span style="display: block; position: relative; padding-top: 132.234%; width: 100%;"><picture><source type="image/webp" srcset="${Ds}, ${Ws} 2x"/><img src="${us}" srcset="${us}, ${Ns} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="rollup-plugin-copy weekly downloads" title="17K weekly downloads"/></picture></span></p> <p>When I installed the plugin, I realise I was installing much more than I needed:</p> <p><span style="display: block; position: relative; padding-top: 161.983%; width: 100%;"><picture><source type="image/webp" srcset="${Bs}, ${Ss} 2x"/><img src="${ds}" srcset="${ds}, ${Es} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="rollup-plugin-copy dependencies"/></picture></span></p> <p>Remember, my use case is simple:</p> <blockquote><p><strong>I just need to copy the worker.js into the &#39;build/&#39; folder.</strong></p></blockquote> <p>I <em>don&#39;t need any bells and whistles</em> this plugin is providing me. 🙈</p> <p>So I uninstalled the plugin, thinking:</p> <blockquote><p>How hard is it to <strong>write a plugin</strong> that <strong>just</strong> copy the worker.js into the &#39;build/&#39; folder?</p></blockquote>`,oe,t,$,Ae='<a href="#writing-a-rollup-plugin" id="writing-a-rollup-plugin">Writing a Rollup plugin</a>',ye,R,ze="Senpai once told me, <em>&quot;writing rollup plugins is very straightforward,&quot;</em>, yet, no one told me how to get started writing it.",ge,P,Fe='So, I dug into <code class="inline">node_modules/</code>, and start skimming through the rollup plugins I have installed: <a href="https://github.com/sveltejs/rollup-plugin-svelte" rel="nofollow">rollup-plugin-svelte</a>, <a href="https://github.com/rollup/rollup-plugin-node-resolve" rel="nofollow">rollup-plugin-node-resolve</a>, <a href="https://github.com/TrySound/rollup-plugin-terser" rel="nofollow">rollup-plugin-terser</a>, ...',me,U,Ge="And I noticed a common pattern:",fe,S,ne,ws=`<div class="filename">rollup-plugin-xxx.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;plugin-name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">load</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">resolveId</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">generateBundle</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,we,B,Ke="So I guess, this is the general structure of a rollup plugin:",xe,E,Ve='<li>It&#39;s an object, ...</li> <li>with a property called <code class="inline">name</code> for the name of the plugin,</li> <li>and functions like <em>&quot;load&quot;</em>, <em>&quot;load&quot;</em>, ... that would be called by rollup when the time is right 🤔</li>',_e,W,Ye='OK. I know what I need, I need to copy my <code class="inline">worker.js</code> when rollup is generating a bundle:',be,D,le,xs=`<div class="filename">rollup.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;copy-worker&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">generateBundle</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.copyFileSync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./src/worker.js&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./public/build/worker.js&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Le,N,Ze="Great! It works! 😎",Ie,O,Je='But, when I change the <code class="inline">worker.js</code> file, the <code class="inline">build/worker.js</code> is not updated. 😞',Ce,A,Qe='That&#39;s because the <code class="inline">worker.js</code> is not watched!',Te,z,Xe='After much googling, I ended up reading through the official docs of <a href="https://rollupjs.org/guide/en/#plugin-development" rel="nofollow">Rollup</a>.',He,F,es='I learned that the functions like <em>&quot;load&quot;</em>, <em>&quot;generateBundle&quot;</em>, ... are called <a href="https://rollupjs.org/guide/en/#hooks" rel="nofollow">&quot;hooks&quot;</a>, and the docs explained when these hooks will be called, the arguments and the expected return value.',je,G,ss='In the docs, I found <a href="https://rollupjs.org/guide/en/#thisaddwatchfileid-string--void" rel="nofollow"><code class="inline">this.addWatchFile(id: string)</code></a> under <a href="https://rollupjs.org/guide/en/#plugin-context" rel="nofollow">plugin context</a>, which according to the docs,',Me,K,ts="<p>[...] can be used to add additional files to be monitored by watch mode.</p>",qe,V,os="Sounds exactly what I am looking for! 😁",$e,Y,ae,_s=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;copy-worker&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">load</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.addWatchFile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./src/worker.js&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">generateBundle</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.copyFileSync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./src/worker.js&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./public/build/worker.js&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Re,Z,ns="Great! It works! 🎉🎉",ie,m,ls='<h2><a href="#closing-notes" id="closing-notes">Closing Notes</a></h2> <p>After some researching, I wrote simple rollup plugin in 12 lines of code, that copies the worker.js into &quot;build/&quot; folder.</p> <p>This is something custom and specific, and <strong>it works perfectly fine</strong>.</p> <p>So, why would I install a package that has so many files and dependencies, just to do a simple and specific task?</p> <p><strong>Am I going to publish my plugin to npm?</strong></p> <p>No. If you have a similar use case, you are free to copy these 12 lines of code.</p> <p>At the moment, I am having these 12 lines of code in my <code class="inline">rollup.config.js</code> and have no intention to extract it out into its own package.</p> <p><strong>What about DRY? What if you/someone else have the same use case, wouldn&#39;t it great to have it as a package?</strong></p> <p>Sorry. No. Before <strong>DRY (Dont Repeat Yourself)</strong>, there&#39;s <strong>YAGNI (You aren&#39;t gonna need it)</strong>.</p> <p>Abstract code only when you need to.</p>';return{c(){s=n("section"),d=n("h2"),d.innerHTML=v,y=a(),c=n("p"),c.innerHTML=u,_=a(),b=n("div"),ee=new J(!1),re=a(),L=n("p"),L.innerHTML=Ue,pe=a(),I=n("p"),I.innerHTML=Se,ce=a(),C=n("div"),se=new J(!1),he=a(),T=n("p"),T.innerHTML=Be,ke=a(),H=n("p"),H.innerHTML=Ee,de=a(),j=n("p"),j.innerHTML=We,ue=a(),M=n("p"),M.innerHTML=De,ve=a(),q=n("p"),q.textContent=Ne,te=a(),g=n("section"),g.innerHTML=Oe,oe=a(),t=n("section"),$=n("h2"),$.innerHTML=Ae,ye=a(),R=n("p"),R.innerHTML=ze,ge=a(),P=n("p"),P.innerHTML=Fe,me=a(),U=n("p"),U.textContent=Ge,fe=a(),S=n("div"),ne=new J(!1),we=a(),B=n("p"),B.textContent=Ke,xe=a(),E=n("ul"),E.innerHTML=Ve,_e=a(),W=n("p"),W.innerHTML=Ye,be=a(),D=n("div"),le=new J(!1),Le=a(),N=n("p"),N.textContent=Ze,Ie=a(),O=n("p"),O.innerHTML=Je,Ce=a(),A=n("p"),A.innerHTML=Qe,Te=a(),z=n("p"),z.innerHTML=Xe,He=a(),F=n("p"),F.innerHTML=es,je=a(),G=n("p"),G.innerHTML=ss,Me=a(),K=n("blockquote"),K.innerHTML=ts,qe=a(),V=n("p"),V.textContent=os,$e=a(),Y=n("div"),ae=new J(!1),Re=a(),Z=n("p"),Z.textContent=ns,ie=a(),m=n("section"),m.innerHTML=ls,this.h()},l(h){s=l(h,"SECTION",{});var r=f(s);d=l(r,"H2",{"data-svelte-h":!0}),p(d)!=="svelte-1uyfvlw"&&(d.innerHTML=v),y=i(r),c=l(r,"P",{"data-svelte-h":!0}),p(c)!=="svelte-ca0ewt"&&(c.innerHTML=u),_=i(r),b=l(r,"DIV",{class:!0});var as=f(b);ee=Q(as,!1),as.forEach(k),re=i(r),L=l(r,"P",{"data-svelte-h":!0}),p(L)!=="svelte-gfm79o"&&(L.innerHTML=Ue),pe=i(r),I=l(r,"P",{"data-svelte-h":!0}),p(I)!=="svelte-1r0q1it"&&(I.innerHTML=Se),ce=i(r),C=l(r,"DIV",{class:!0});var is=f(C);se=Q(is,!1),is.forEach(k),he=i(r),T=l(r,"P",{"data-svelte-h":!0}),p(T)!=="svelte-17ofjhq"&&(T.innerHTML=Be),ke=i(r),H=l(r,"P",{"data-svelte-h":!0}),p(H)!=="svelte-1mpeno8"&&(H.innerHTML=Ee),de=i(r),j=l(r,"P",{"data-svelte-h":!0}),p(j)!=="svelte-15b128b"&&(j.innerHTML=We),ue=i(r),M=l(r,"P",{"data-svelte-h":!0}),p(M)!=="svelte-ps5k32"&&(M.innerHTML=De),ve=i(r),q=l(r,"P",{"data-svelte-h":!0}),p(q)!=="svelte-1ylbhej"&&(q.textContent=Ne),r.forEach(k),te=i(h),g=l(h,"SECTION",{"data-svelte-h":!0}),p(g)!=="svelte-c962hd"&&(g.innerHTML=Oe),oe=i(h),t=l(h,"SECTION",{});var o=f(t);$=l(o,"H2",{"data-svelte-h":!0}),p($)!=="svelte-j56zwc"&&($.innerHTML=Ae),ye=i(o),R=l(o,"P",{"data-svelte-h":!0}),p(R)!=="svelte-rt8hhv"&&(R.innerHTML=ze),ge=i(o),P=l(o,"P",{"data-svelte-h":!0}),p(P)!=="svelte-9tufsy"&&(P.innerHTML=Fe),me=i(o),U=l(o,"P",{"data-svelte-h":!0}),p(U)!=="svelte-1yfi72"&&(U.textContent=Ge),fe=i(o),S=l(o,"DIV",{class:!0});var rs=f(S);ne=Q(rs,!1),rs.forEach(k),we=i(o),B=l(o,"P",{"data-svelte-h":!0}),p(B)!=="svelte-1cqx8u5"&&(B.textContent=Ke),xe=i(o),E=l(o,"UL",{"data-svelte-h":!0}),p(E)!=="svelte-r3s881"&&(E.innerHTML=Ve),_e=i(o),W=l(o,"P",{"data-svelte-h":!0}),p(W)!=="svelte-1sc5iln"&&(W.innerHTML=Ye),be=i(o),D=l(o,"DIV",{class:!0});var ps=f(D);le=Q(ps,!1),ps.forEach(k),Le=i(o),N=l(o,"P",{"data-svelte-h":!0}),p(N)!=="svelte-dm0rkp"&&(N.textContent=Ze),Ie=i(o),O=l(o,"P",{"data-svelte-h":!0}),p(O)!=="svelte-1pq2h6y"&&(O.innerHTML=Je),Ce=i(o),A=l(o,"P",{"data-svelte-h":!0}),p(A)!=="svelte-18w3p1m"&&(A.innerHTML=Qe),Te=i(o),z=l(o,"P",{"data-svelte-h":!0}),p(z)!=="svelte-vf9515"&&(z.innerHTML=Xe),He=i(o),F=l(o,"P",{"data-svelte-h":!0}),p(F)!=="svelte-15lsmdg"&&(F.innerHTML=es),je=i(o),G=l(o,"P",{"data-svelte-h":!0}),p(G)!=="svelte-4vm7dc"&&(G.innerHTML=ss),Me=i(o),K=l(o,"BLOCKQUOTE",{"data-svelte-h":!0}),p(K)!=="svelte-1hbj54l"&&(K.innerHTML=ts),qe=i(o),V=l(o,"P",{"data-svelte-h":!0}),p(V)!=="svelte-1svsrko"&&(V.textContent=os),$e=i(o),Y=l(o,"DIV",{class:!0});var cs=f(Y);ae=Q(cs,!1),cs.forEach(k),Re=i(o),Z=l(o,"P",{"data-svelte-h":!0}),p(Z)!=="svelte-1edpr1i"&&(Z.textContent=ns),o.forEach(k),ie=i(h),m=l(h,"SECTION",{"data-svelte-h":!0}),p(m)!=="svelte-yf7767"&&(m.innerHTML=ls),this.h()},h(){ee.a=null,X(b,"class","code-section"),se.a=null,X(C,"class","code-section"),ne.a=null,X(S,"class","code-section"),le.a=null,X(D,"class","code-section"),ae.a=null,X(Y,"class","code-section")},m(h,r){w(h,s,r),e(s,d),e(s,y),e(s,c),e(s,_),e(s,b),ee.m(ms,b),e(s,re),e(s,L),e(s,pe),e(s,I),e(s,ce),e(s,C),se.m(fs,C),e(s,he),e(s,T),e(s,ke),e(s,H),e(s,de),e(s,j),e(s,ue),e(s,M),e(s,ve),e(s,q),w(h,te,r),w(h,g,r),w(h,oe,r),w(h,t,r),e(t,$),e(t,ye),e(t,R),e(t,ge),e(t,P),e(t,me),e(t,U),e(t,fe),e(t,S),ne.m(ws,S),e(t,we),e(t,B),e(t,xe),e(t,E),e(t,_e),e(t,W),e(t,be),e(t,D),le.m(xs,D),e(t,Le),e(t,N),e(t,Ie),e(t,O),e(t,Ce),e(t,A),e(t,Te),e(t,z),e(t,He),e(t,F),e(t,je),e(t,G),e(t,Me),e(t,K),e(t,qe),e(t,V),e(t,$e),e(t,Y),ae.m(_s,Y),e(t,Re),e(t,Z),w(h,ie,r),w(h,m,r)},p:Is,d(h){h&&(k(s),k(te),k(g),k(oe),k(t),k(ie),k(m))}}}function Zs(x){let s,d;const v=[x[0],gs];let y={$$slots:{default:[Ys]},$$scope:{ctx:x}};for(let c=0;c<v.length;c+=1)y=Pe(y,v[c]);return s=new Us({props:y}),{c(){Hs(s.$$.fragment)},l(c){js(s.$$.fragment,c)},m(c,u){Ms(s,c,u),d=!0},p(c,[u]){const _=u&1?Ps(v,[u&1&&ks(c[0]),u&0&&ks(gs)]):{};u&2&&(_.$$scope={dirty:u,ctx:c}),s.$set(_)},i(c){d||(qs(s.$$.fragment,c),d=!0)},o(c){$s(s.$$.fragment,c),d=!1},d(c){Rs(s,c)}}}const gs={title:"I wrote a 12-line Rollup plugin",date:"2019-11-30T08:00:00Z",description:"Why would I install a package with so many files and dependencies, just to do a something simple that can be done in 12 lines of code?",tags:["JavaScript","rollup","plugin"],label:"blog",tableOfContents:[{link:"background",title:"Background"},{link:"need-something-install-a-plugin",title:"Need something? Install a plugin!"},{link:"writing-a-rollup-plugin",title:"Writing a Rollup plugin"},{link:"closing-notes",title:"Closing Notes"}]};function Js(x,s,d){return Ls("blog",{image:Vs}),x.$$set=v=>{d(0,s=Pe(Pe({},s),hs(v)))},s=hs(s),[s]}class tt extends Cs{constructor(s){super(),Ts(this,s,Js,Zs,bs,{})}}export{tt as component};
