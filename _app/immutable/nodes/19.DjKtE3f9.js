import{s as ic,d as _l,e as rc,f as gp,n as pc}from"../chunks/scheduler.D6VJxl8L.js";import{S as cc,i as kc,m as vc,n as hc,o as dc,t as yc,a as uc,p as xc,e as a,s as t,H as d,c as n,q as o,h as e,d as c,r as y,g as i,u,j as p,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as mc,a as wp}from"../chunks/code-snippet.Gym6WUAG.js";import{B as fc}from"../chunks/BlogLayout.BLHkC4CD.js";const gc=""+new URL("../assets/hero-twitter.CGTJGJWP.jpg",import.meta.url).href;function wc(ts){let H,B='<strong>⬅ ⬅  Previously in <a href="/compile-svelte-in-your-head-part-1/">Part 1</a>.</strong>',R,z,S='<a href="/compile-svelte-in-your-head-part-1/">Previously</a>, when I mentioned the <code class="inline">$$invalidate</code> function, I explained that the <code class="inline">$$invalidate</code> function works conceptually like the following:',q,A,Bn,$p=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jn,W,Tl='but that&#39;s not the exact implementation of the <code class="inline">$$invaldiate</code> function. So in this article, we are going to look at how <code class="inline">$$invalidate</code> is implemented in Svelte.',Wn,G,Ll='At the point of writing, Svelte is at <a href="https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201" rel="nofollow">v3.20.1</a>.',Gn,F,Hl='<h2><a href="#pre-v3-16-0" id="pre-v3-16-0">Pre v3.16.0</a></h2> <p>There&#39;s a big optimisation that changes the underlying implementation of the <code class="inline">$$invalidate</code> function in <a href="https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3160" rel="nofollow">v3.16.0</a>, namely in <a href="https://github.com/sveltejs/svelte/pull/3945" rel="nofollow">#3945</a>. The underlying concept doesn&#39;t change, but it&#39;ll be much easier to understand about <code class="inline">$$invalidate</code> prior the change and learn about the optimisation change separately.</p> <p>Let&#39;s explain some of the variables that you are going to see, some of which was introduced in <a href="/compile-svelte-in-your-head-part-1">Part 1</a>:</p>',Fn,$,es,Ml='<a href="#ctx" id="ctx">$$.ctx</a>',Qt,os,Cl="There&#39;s no official name for it. You can call it <strong>context</strong> as it is the context which the template is based on to render onto the DOM.",Xt,ls,Pl='I called it <a href="/compile-svelte-in-your-head-part-1#instance-variable">instance variables</a>. As it is a JavaScript Object that contains all the variables that you:',se,is,Nl='<li>declared in the <code class="inline">&lt;script&gt;</code> tag</li> <li>mutated or reassigned</li> <li>referenced in the template</li>',ae,rs,Sl="that belongs to a component instance.",ne,ps,El="The instance variables themselves can be of a primitive value, object, array or function.",te,cs,jl='The <code class="inline">instance</code> function creates and returns the <code class="inline">ctx</code> object.',ee,ks,Il='Functions declared in the <code class="inline">&lt;script&gt;</code> tag will refer to the instance variable that is scoped withn the <code class="inline">instance</code> function closure:',oe,vs,Yn,_p=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,le,hs,Ol='<a href="https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.20.1" rel="nofollow">Svelte REPL</a>',ie,ds,Zn,Tp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...some where in &#96;create_fragment&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// logs &#96;world&#96; scoped in the &#96;instance&#96; closure</span></span></code></pre>`,re,ys,ql='Whenever a new instance of a component is created, the <code class="inline">instance</code> function is called and the <code class="inline">ctx</code> object is created and captured within a new closure scope.',Kn,f,us,Dl='<a href="#dirty" id="dirty">$$.dirty</a>',pe,xs,Vl='<code class="inline">$$.dirty</code> is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM.',ce,ms,zl="For example, in the following Svelte component:",ke,fs,Qn,Lp='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> agility <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> power <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementAgility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    power <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">levelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span></div><div class="line">    power <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line">Agility: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility<span class="token punctuation">&#125;</span></span></div><div class="line">Power: <span class="token language-javascript"><span class="token punctuation">&#123;</span>power<span class="token punctuation">&#125;</span></span></div><div class="line">Stats: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility <span class="token operator">*</span> power<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementAgility<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Agility<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementPower<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Power<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>levelUp<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Level Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',ve,gs,Rl='<a href="https://svelte.dev/repl/da579d0113b44f01b2b94893dce21487?version=3.20.1" rel="nofollow">Svelte REPL</a>',he,ws,Al='The initial <code class="inline">$$.dirty</code> is <code class="inline">null</code> (<a href="https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L124" rel="nofollow">source code</a>).',de,bs,Ul='If you clicked on the <strong>&quot;+ Agility&quot;</strong> button, <code class="inline">$$.dirty</code> will turn into:',ye,$s,Xn,Hp='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">; &#125;</span></span></code></pre>',ue,_s,Bl='If you clicked on the <strong>&quot;Level Up&quot;</strong> button, <code class="inline">$$.dirty</code> will turn into:',xe,Ts,st,Mp='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> power</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>',me,Ls,Jl='<code class="inline">$$.dirty</code> is useful for Svelte, so that it doesn&#39;t update the DOM unnecessarily.',fe,Hs,Wl='If you looked at the <strong>p (u_p_date)</strong> function of the compiled code, you will see Svelte checks whether a variable is marked in <code class="inline">$$.dirty</code>, before updating the DOM.',ge,Ms,at,Cp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: $$.dirty is passed into the &#96;p&#96; function as &#96;changed&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(changed</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// checked if agility has changed before update the agility text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if either agility or power has changed, update the stats text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ((</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> t5_value </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (t5_value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t5</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t5_value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,we,Cs,Gl='After Svelte updates the DOM, the <code class="inline">$$.dirty</code> is set back to <code class="inline">null</code> to indicate all changes has been applied onto the DOM.',nt,h,Ps,Fl='<a href="#invalidate" id="invalidate">$$invalidate</a>',be,Ns,Yl='<code class="inline">$$invalidate</code> is the secret behind reactivity in Svelte.',$e,Ss,Zl="Whenever a variable is",_e,Es,Kl='<li>reassigned <code class="inline">(foo = 1)</code></li> <li>mutated <code class="inline">(foo.bar = 1)</code></li>',Te,js,Ql='Svelte will wrap the assignment or update around with the <code class="inline">$$invalidate</code> function:',Le,Is,tt,Pp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">))));</span></span></code></pre>`,He,Os,Xl='the <code class="inline">$$invalidate</code> function will:',Me,qs,si='<li>update the variable in <code class="inline">$$.ctx</code></li> <li>mark the variable in <code class="inline">$$.dirty</code></li> <li>schedule an update</li> <li>return the value of the assignment or update expression</li>',Ce,Ds,et,Np=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">not_equal</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. update the variable in $$.ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2a. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 4. return the value of the assignment or update expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> ret;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">dirty_components</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. schedule an update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// initialise $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">blank_object</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 2b. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Pe,Vs,ai='<a href="https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L130-L136" rel="nofollow">Source code</a>',Ne,zs,ni='One interesting note about the function <code class="inline">$$invalidate</code> is that, it wraps around the assignment or update expression and returns what the expression evaluates to.',Se,Rs,ti='This makes <code class="inline">$$invalidate</code> chainable:',Ee,As,ot,Sp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">(&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// assuming all variables are referenced in the template</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the above compiles into</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  c</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,je,Us,ei="It seemed complex when there's a lot of assignment or update expressions in 1 statement! 🙈",Ie,Bs,oi='The 2nd argument of <code class="inline">$$invalidate</code> is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with <code class="inline">$$invalidate</code>.',Oe,Js,li='In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the <code class="inline">$$invalidate</code> function, eg:',qe,Ws,lt,Ep=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it invalidates &#96;obj&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it returns the evaluated value of the expression &#96;obj.c = &#39;hello&#39;&#96;, which is &#39;hello&#39;</span></span></code></pre>`,De,Gs,ii='So that, we update the <code class="inline">&quot;obj&quot;</code> variable to <code class="inline">obj</code> instead of the value of the 2nd argument, <code class="inline">&quot;hello&quot;</code>.',it,w,Fs,ri='<a href="#schedule-update" id="schedule-update">schedule_update</a>',Ve,Ys,pi='<code class="inline">schedule_update</code> schedules Svelte to update the DOM with the changes made thus far.',ze,Zs,ci='Svelte, at the point of writing (<a href="https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201" rel="nofollow">v3.20.1</a>), uses <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" rel="nofollow">microtask queue</a> to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous <code class="inline">$$invalidate</code> operations that happen within the same task get batched into the next DOM update.',Re,Ks,ki="To schedule a next microtask, Svelte uses the Promise callback.",Ae,Qs,rt,jp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">update_scheduled) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    update_scheduled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;flush&#96; will do the DOM update</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// we push it into the microtask queue</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">resolved_promise</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(flush);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ue,Xs,vi='In <code class="inline">flush</code>, we call update for each component marked dirty:',Be,sa,pt,Ip=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flush</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for each componnet in &#96;dirty_components&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.$$);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this will be important later</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// resets &#96;$$.dirty&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">after_update</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(add_render_callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Je,aa,hi='<a href="https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/scheduler.ts#L14" rel="nofollow">Source code</a>',We,na,di="So, if you write a Svelte component like this:",Ge,ta,ct,Op=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line">Name: <span class="token language-javascript"><span class="token punctuation">&#123;</span>familyName<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>givenName<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,Fe,ea,yi='<a href="https://svelte.dev/repl/761a0a6cc2834afb842942e1d23875b1?version=3.20.1" rel="nofollow">Svelte REPL</a>',Ye,oa,ui='The DOM update for the <code class="inline">givenName</code> and <code class="inline">familyName</code> happens in the same microtask:',Ze,la,xi='<li>Click on the <strong>&quot;Update&quot;</strong> to call the <code class="inline">update</code> function</li> <li><code class="inline">$$invalidate(&#39;givenName&#39;, givenName = &#39;Li Hau&#39;)</code></li> <li>Mark the variable <code class="inline">givenName</code> dirty, <code class="inline">$$.dirty[&#39;givenName&#39;] = true</code></li> <li>Schedule an update, <code class="inline">schedule_update()</code></li> <li>Since it&#39;s the first update in the call stack, push the <code class="inline">flush</code> function into the microtask queue</li> <li><code class="inline">$$invalidate(&#39;familyName&#39;, familyName = &#39;Tan&#39;)</code></li> <li>Mark the variable <code class="inline">familyName</code> dirty, <code class="inline">$$.dirty[&#39;familyName&#39;] = true</code></li> <li>Schedule an update, <code class="inline">schedule_update()</code></li> <li>Since <code class="inline">update_scheduled = true</code>, do nothing.</li> <li><strong>-- End of task --</strong></li> <li><strong>-- Start of microtask--</strong></li> <li><code class="inline">flush()</code> calls <code class="inline">update()</code> for each component marked dirty</li> <li>Calls <code class="inline">$$.fragment.p($$.dirty, $$.ctx)</code>.<ul><li><code class="inline">$$.dirty</code> is now <code class="inline">{ givenName: true, familyName: true }</code></li> <li><code class="inline">$$.ctx</code> is now <code class="inline">{ givenName: &#39;Li Hau&#39;, familyName: &#39;Tan&#39; }</code></li></ul></li> <li>In <code class="inline">function p(dirty, ctx)</code>,<ul><li>Update the 1st text node to <code class="inline">$$.ctx[&#39;givenName&#39;]</code> if <code class="inline">$$.dirty[&#39;givenName&#39;] === true</code></li> <li>Update the 2nd text node to <code class="inline">$$.ctx[&#39;familyName&#39;]</code> if <code class="inline">$$.dirty[&#39;familyName&#39;] === true</code></li></ul></li> <li>Resets the <code class="inline">$$.dirty</code> to <code class="inline">null</code></li> <li>...</li> <li><strong>-- End of microtask--</strong></li>',kt,Y,mi='<h4><a href="#tl-dr" id="tl-dr">tl/dr:</a></h4> <ul><li>For each assignment or update, Svelte calls <code class="inline">$$invalidate</code> to update the variable in <code class="inline">$$.ctx</code> and mark the variable dirty in <code class="inline">$$.dirty</code>.</li> <li>The acutal DOM update is batched into the next microtask queue.</li> <li>To update the DOM for each component, the component <code class="inline">$$.fragment.p($$.diry, $$.ctx)</code> is called.</li> <li>After the DOM update, the <code class="inline">$$.dirty</code> is reset to <code class="inline">null</code>.</li></ul>',vt,C,ia,fi='<a href="#v3-16-0" id="v3-16-0">v3.16.0</a>',Ke,ra,gi='One big change in v3.16.0 is the PR <a href="https://github.com/sveltejs/svelte/pull/3945" rel="nofollow">#3945</a>, namely <strong>bitmask-based change tracking</strong>.',Qe,pa,wi="Instead of marking the variable dirty using an object:",Xe,ca,ht,qp='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.diry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span></code></pre>',so,ka,bi="Svelte assign each variable an index:",ao,va,dt,Dp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">familyName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,no,ha,$i='and uses <a href="https://en.wikipedia.org/wiki/Mask_(computing)" rel="nofollow">bitmask</a> to store the dirty information:',to,da,yt,Vp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">0b0000_0011</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the 0th and 1st bit marked true</span></span></code></pre>`,eo,ya,_i="which is far more compact than the previous compiled code.",ut,b,ua,Ti='<a href="#bitmask" id="bitmask">Bitmask</a>',oo,xa,Li="For those who don't understand, allow me to quickly explain what it is.",lo,ma,Hi='Of course, if you want to learn more about it, feel free to read a more detailed explanation, like <a href="https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03" rel="nofollow">this</a> and <a href="https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf" rel="nofollow">this</a>.',io,fa,Mi='The most compact way of representing a group of <code class="inline">true</code> or <code class="inline">false</code> is to use bits. If the bit is <code class="inline">1</code> it is <code class="inline">true</code> and if it is <code class="inline">0</code> it is <code class="inline">false</code>.',ro,ga,Ci='A number can be represented in binary, <strong>5</strong> is <code class="inline">0b0101</code> in binary.',po,wa,Pi='If <strong>5</strong> is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as <code class="inline">true</code> and 1st and 3rd bit as <code class="inline">false</code>, (reading from the right to left, from <a href="https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit" rel="nofollow">least significant bit</a> to the <a href="https://en.wikipedia.org/wiki/Bit_numbering#Most_significant_bit" rel="nofollow">most significant bit</a>).',co,ba,Ni="<strong>How many boolean values can a number store?</strong>",ko,$a,Si="That depends on the language, a 16-bit integer in Java can store 16 boolean values.",vo,_a,Ei='In JavaScript, numbers can are <a href="https://2ality.com/2012/04/number-encoding.html" rel="nofollow">represented in 64 bits</a>. However, when using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" rel="nofollow">bitwise operations</a> on the number, JavaScript will treat the number as 32 bits.',ho,Ta,ji='To inspect or modify the boolean value stored in a number, we use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" rel="nofollow">bitwise operations</a>.',yo,La,xt,zp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// set 1st boolean to true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0010</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0111</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// set 2nd boolean to false</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1011</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0001</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: You can test multiple boolean values at once</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd and 3rd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,uo,Ha,Ii='The 2nd operand we use in the bitwise operation, is like a <a href="https://en.wikipedia.org/wiki/Mask_(computing)" rel="nofollow">mask</a> that allow us to target a specific bit in the 1st number, that stores our boolean values.',xo,Ma,Oi="We call the mask, <strong>bitmask</strong>.",mt,x,Ca,qi='<a href="#bitmask-in-svelte" id="bitmask-in-svelte">Bitmask in Svelte</a>',mo,Pa,Di="As mentioned earlier, we assign each variable an index:",fo,Na,ft,Rp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">firstName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,go,Sa,Vi="So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:",wo,Ea,gt,Ap=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bo,ja,zi='The variable is accessed via <strong>index</strong>, <code class="inline">$$.ctx[index]</code>, instead of <strong>variable name</strong>:',$o,Ia,wt,Up=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.familyName;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">];</span></span></code></pre>`,_o,Oa,Ri='The <code class="inline">$$invalidate</code> function works the same, except it takes in <strong>index</strong> instead of <strong>variable name</strong>:',To,qa,bt,Bp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Lo,Da,Ai='<code class="inline">$$.dirty</code> now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not.',Ho,Va,Ui="To set a variable as dirty, we use bitwise operation:",Mo,za,$t,Jp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">|=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&lt;&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Co,Ra,Bi="And to verify whether a variable is dirty, we use bitwise operation too!",Po,Aa,_t,Wp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.familyName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>`,No,Ua,Ji='With using bitmask, <code class="inline">$$.dirty</code> is now reset to <code class="inline">[-1]</code> instead of <code class="inline">null</code>.',So,Ba,Wi='<strong>Trivia:</strong> <code class="inline">-1</code> is <code class="inline">0b1111_1111</code> in binary, where all the bits are <code class="inline">1</code>.',Tt,U,Ja,Gi='<a href="#destructuring-dirty" id="destructuring-dirty">Destructuring <strong>$$.dirty</strong></a>',Eo,Wa,Fi='One code-size optimisation that Svelte does is to always destructure the <code class="inline">dirty</code> array in the <strong>u_p_date function</strong> if there&#39;s less than 32 variables, since we will always access <code class="inline">dirty[0]</code> anyway:',jo,Ga,Lt,Gp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// If less than 32 variables,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Instead of having &#96;dirty[0]&#96; all the time,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Svelte optimises the compiled code by </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// destruct the array in the arguments</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// If more than or equal to 32 variables</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ht,Z,Yi='<h4><a href="#tl-dr-1" id="tl-dr-1">tl/dr:</a></h4> <ul><li>The underlying mechanism for <code class="inline">$$invalidate</code> and <code class="inline">schedule_update</code> does not change</li> <li>Using bitmask, the compiled code is much compact</li></ul>',Mt,k,Fa,Zi='<a href="#reactive-declaration" id="reactive-declaration">Reactive Declaration</a>',Io,Ya,Ki='Svelte allow us to declare reactive values via the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label" rel="nofollow">labeled statement</a>, <code class="inline">$:</code>',Oo,Za,Ct,Fp='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// &#96;doubled&#96;, &#96;tripled&#96;, &#96;quadrupled&#96; are reactive</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>tripled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>quadrupled<span class="token punctuation">&#125;</span></span></div></code></pre>',qo,Ka,Qi='<a href="https://svelte.dev/repl/e37329dd126448b2aa0679c08993f9a8?version=3.20.1" rel="nofollow">Svelte REPL</a>',Do,Qa,Xi='If you look at the compiled output, you would find out that the declarative statements appeared in the <a href="/compile-svelte-in-your-head-part-1/#instanceself-props-invalidate"><code class="inline">instance</code> function</a>:',Vo,Xa,Pt,Yp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zo,sn,sr="Try reorder the reactive declarations and observe the change in the compiled output:",Ro,an,Nt,Zp='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// NOTE: move &#96;quadrupled&#96; before &#96;doubled&#96;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>',Ao,nn,ar='<a href="https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1" rel="nofollow">Svelte REPL</a>',Uo,tn,St,Kp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;quadrupled&#96; invalidates after &#96;doubled&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bo,en,nr="Some observations:",Jo,on,tr='<li>When there are reactive declarations, Svelte defines a custom <code class="inline">$$.update</code> method.<ul><li><code class="inline">$$.update</code> is a <a href="https://en.wikipedia.org/wiki/NOP_(code)" rel="nofollow">no-op function</a> by default. (See <a href="https://github.com/sveltejs/svelte/blob/v3.20.1/src/runtime/internal/Component.ts#L111" rel="nofollow">src/runtime/internal/Component.ts</a>)</li></ul></li> <li>Svelte uses <code class="inline">$$invalidate</code> to update the value of a reactive variable too.</li> <li>Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements<ul><li><code class="inline">quadrupled</code> depends on <code class="inline">doubled</code>, so <code class="inline">quadrupled</code> is evaluated and <code class="inline">$$invalidate</code>d after <code class="inline">doubled</code>.</li></ul></li> <li>You may have noticed that the order of the variables in the array returned <code class="inline">[doubled, tripled, quadrupled, count]</code> may be different from the output in the latest Svelte version, but that&#39;s beyond the scope of this article.</li>',Wo,ln,er='Since all reactive declarations and statements are grouped into the <code class="inline">$$.update</code> method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them.',Go,rn,or="The following component still works:",Fo,pn,Et,Qp='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line"><span class="token comment">// NOTE: use &#96;count&#96; in a reactive declaration before &#96;count&#96; is declared</span></div><div class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span> * 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',Yo,cn,lr='<a href="https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1" rel="nofollow">Svelte REPL</a>',Zo,kn,ir='<strong>The next thing you may ask, when is <code class="inline">$$.update</code> being called?</strong>',Ko,vn,rr='Remember the <code class="inline">update</code> function that gets called in the <code class="inline">flush</code> function?',Qo,hn,pr='I put a <code class="inline">NOTE:</code> comment saying that it will be important later. Well, it is important now.',Xo,dn,jt,Xp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this is important now!</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sl,yn,cr='The <code class="inline">$$.update</code> function gets called <strong>in the same microtask</strong> with the DOM update, right before we called the <code class="inline">$$.fragment.p()</code> to update the DOM.',al,un,kr="The implication of the above fact is",It,P,xn,vr='<a href="#1-execution-of-all-reactive-declarations-and-statements-are-batched" id="1-execution-of-all-reactive-declarations-and-statements-are-batched">1. Execution of all reactive declarations and statements are batched</a>',nl,mn,hr="Just as how DOM updates are batched, reactive declarations and statements are batched too!",tl,fn,Ot,sc=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,el,gn,dr='<a href="https://svelte.dev/repl/941195f1cd5248e9bd14613f9513ad1d?version=3.20.1" rel="nofollow">Svelte REPL</a>',ol,wn,yr='When <code class="inline">update()</code> get called,',ll,bn,ur='<li>Similar to the <a href="#schedule_update">flow described above</a>, <code class="inline">$$invalidate</code> both <strong>&quot;givenName&quot;</strong> and <strong>&quot;familyName&quot;</strong>, and schedules an update</li> <li><strong>-- End of task --</strong></li> <li><strong>-- Start of microtask--</strong></li> <li><code class="inline">flush()</code> calls <code class="inline">update()</code> for each component marked dirty</li> <li>Runs <code class="inline">$$.update()</code><ul><li>As <strong>&quot;givenName&quot;</strong> and <strong>&quot;familyName&quot;</strong> has changed, evaluates and <code class="inline">$$invalidate</code> <strong>&quot;name&quot;</strong></li> <li>As <strong>&quot;name&quot;</strong> has changed, executes <code class="inline">console.log(&#39;name&#39;, name);</code></li></ul></li> <li>Calls <code class="inline">$$.fragment.p(...)</code> to update the DOM.</li>',il,$n,xr='As you can see, even though we&#39;ve updated <code class="inline">givenName</code> and <code class="inline">familyName</code>, we only evaluate <code class="inline">name</code> and executes <code class="inline">console.log(&#39;name&#39;, name)</code> <strong>once</strong> instead of twice:',rl,_n,qt,ac=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Instead of</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Reactive declarations and statements are batched</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Dt,j,Tn,mr='<a href="#2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date" id="2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date">2. The value of reactive variable outside of reactive declarations and statements may not be up to date</a>',pl,Ln,fr="Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously.",cl,Hn,Vt,nc=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line highlight">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs ''</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,kl,Mn,gr='<a href="https://svelte.dev/repl/437548d5c7044cb59bfd0c8a0f4c725d?version=3.20.1" rel="nofollow">Svelte REPL</a>',vl,Cn,wr="Instead, you <strong>have to</strong> refer the reactive variable in another reactive declaration or statement:",hl,Pn,zt,tc=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs 'Li Hau Tan'</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,Rt,D,Nn,br='<a href="#sorting-of-reactive-declarations-and-statements" id="sorting-of-reactive-declarations-and-statements">Sorting of reactive declarations and statements</a>',dl,Sn,$r="Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible.",yl,En,_r="However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, <strong>it will be inserted after the latter reactive declaration</strong>:",ul,jn,At,ec=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: refers to &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: defined &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into:</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* doubled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* quadrupled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ut,N,In,Tr='<a href="#reactive-variable-that-is-not-reactive" id="reactive-variable-that-is-not-reactive">Reactive variable that is not reactive</a>',xl,On,Lr='The Svelte compiler tracks all the variables declared in the <code class="inline">&lt;script&gt;</code> tag.',ml,qn,Hr='If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into <code class="inline">$$.update</code>.',fl,Dn,Mr="For example:",gl,Vn,Bt,oc='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span></span> x 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',wl,zn,Cr='<a href="https://svelte.dev/repl/af86472e1f494cfea2efa494f63fff08?version=3.20.1" rel="nofollow">Svelte REPL</a>',bl,Rn,Pr='Since, <code class="inline">count</code> never gets mutated or reassigned, Svelte optimises the compiled output by not defining <code class="inline">$$self.$$.update</code>.',$l,An,Jt,lc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> doubled;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wt,K,Nr='<h2><a href="#summary" id="summary">Summary</a></h2>',Gt,Q,Sr='<h3><a href="#1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates" id="1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates">1. Svelte keeps track of which variables are dirty and batched the DOM updates.</a></h3>',Ft,X,Er='<h3><a href="#2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code" id="2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code">2. Using bitmask, Svelte able to generate a more compact compiled code.</a></h3>',Yt,ss,jr='<h3><a href="#3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates" id="3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates">3. Reactive declarations and statements are executed in batch, just like DOM updates</a></h3>',Zt,as,Ir='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>If you wish to know more, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>I&#39;ll post it on Twitter when the next part is ready, where I&#39;ll be covering <a href="https://svelte.dev/tutorial/if-blocks" rel="nofollow">logic blocks</a>, <a href="https://svelte.dev/tutorial/slots" rel="nofollow">slots</a>, <a href="https://svelte.dev/tutorial/context-api" rel="nofollow">context</a>, and many others.</p> <p><strong>⬅ ⬅  Previously in <a href="/compile-svelte-in-your-head-part-1/">Part 1</a>.</strong></p> <p><strong>➡ ➡  Continue reading on <a href="/compile-svelte-in-your-head-part-3/">Part 3</a>.</strong></p>',Kt,ns,Or='<h2><a href="#further-resources" id="further-resources">Further Resources</a></h2> <ul><li>Rich Harris shares about <a href="https://www.youtube.com/watch?v=zq6PpM5t3z0&amp;t=2530s" rel="nofollow">Bitmask Tracking at Svelte Society NYC</a>.</li> <li>Svelte Tutorial - <a href="https://svelte.dev/tutorial/reactive-assignments" rel="nofollow">Reactivity</a> <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" rel="nofollow">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></li> <li><a href="https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03" rel="nofollow">The Art of Bitmasking</a> by Shakib Ahmed</li> <li><a href="https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf" rel="nofollow">Bitmasks: A very esoteric (and impractical) way of managing booleans</a> by Basti Ortiz</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" rel="nofollow">MDN: Bitwise Operators</a></li></ul>';return{c(){H=a("p"),H.innerHTML=B,R=t(),z=a("p"),z.innerHTML=S,q=t(),A=a("div"),Bn=new d(!1),Jn=t(),W=a("p"),W.innerHTML=Tl,Wn=t(),G=a("p"),G.innerHTML=Ll,Gn=t(),F=a("section"),F.innerHTML=Hl,Fn=t(),$=a("section"),es=a("h3"),es.innerHTML=Ml,Qt=t(),os=a("p"),os.innerHTML=Cl,Xt=t(),ls=a("p"),ls.innerHTML=Pl,se=t(),is=a("ul"),is.innerHTML=Nl,ae=t(),rs=a("p"),rs.textContent=Sl,ne=t(),ps=a("p"),ps.textContent=El,te=t(),cs=a("p"),cs.innerHTML=jl,ee=t(),ks=a("p"),ks.innerHTML=Il,oe=t(),vs=a("div"),Yn=new d(!1),le=t(),hs=a("p"),hs.innerHTML=Ol,ie=t(),ds=a("div"),Zn=new d(!1),re=t(),ys=a("p"),ys.innerHTML=ql,Kn=t(),f=a("section"),us=a("h3"),us.innerHTML=Dl,pe=t(),xs=a("p"),xs.innerHTML=Vl,ce=t(),ms=a("p"),ms.textContent=zl,ke=t(),fs=a("div"),Qn=new d(!1),ve=t(),gs=a("p"),gs.innerHTML=Rl,he=t(),ws=a("p"),ws.innerHTML=Al,de=t(),bs=a("p"),bs.innerHTML=Ul,ye=t(),$s=a("div"),Xn=new d(!1),ue=t(),_s=a("p"),_s.innerHTML=Bl,xe=t(),Ts=a("div"),st=new d(!1),me=t(),Ls=a("p"),Ls.innerHTML=Jl,fe=t(),Hs=a("p"),Hs.innerHTML=Wl,ge=t(),Ms=a("div"),at=new d(!1),we=t(),Cs=a("p"),Cs.innerHTML=Gl,nt=t(),h=a("section"),Ps=a("h3"),Ps.innerHTML=Fl,be=t(),Ns=a("p"),Ns.innerHTML=Yl,$e=t(),Ss=a("p"),Ss.textContent=Zl,_e=t(),Es=a("ul"),Es.innerHTML=Kl,Te=t(),js=a("p"),js.innerHTML=Ql,Le=t(),Is=a("div"),tt=new d(!1),He=t(),Os=a("p"),Os.innerHTML=Xl,Me=t(),qs=a("ol"),qs.innerHTML=si,Ce=t(),Ds=a("div"),et=new d(!1),Pe=t(),Vs=a("p"),Vs.innerHTML=ai,Ne=t(),zs=a("p"),zs.innerHTML=ni,Se=t(),Rs=a("p"),Rs.innerHTML=ti,Ee=t(),As=a("div"),ot=new d(!1),je=t(),Us=a("p"),Us.textContent=ei,Ie=t(),Bs=a("p"),Bs.innerHTML=oi,Oe=t(),Js=a("p"),Js.innerHTML=li,qe=t(),Ws=a("div"),lt=new d(!1),De=t(),Gs=a("p"),Gs.innerHTML=ii,it=t(),w=a("section"),Fs=a("h3"),Fs.innerHTML=ri,Ve=t(),Ys=a("p"),Ys.innerHTML=pi,ze=t(),Zs=a("p"),Zs.innerHTML=ci,Re=t(),Ks=a("p"),Ks.textContent=ki,Ae=t(),Qs=a("div"),rt=new d(!1),Ue=t(),Xs=a("p"),Xs.innerHTML=vi,Be=t(),sa=a("div"),pt=new d(!1),Je=t(),aa=a("p"),aa.innerHTML=hi,We=t(),na=a("p"),na.textContent=di,Ge=t(),ta=a("div"),ct=new d(!1),Fe=t(),ea=a("p"),ea.innerHTML=yi,Ye=t(),oa=a("p"),oa.innerHTML=ui,Ze=t(),la=a("ol"),la.innerHTML=xi,kt=t(),Y=a("section"),Y.innerHTML=mi,vt=t(),C=a("section"),ia=a("h2"),ia.innerHTML=fi,Ke=t(),ra=a("p"),ra.innerHTML=gi,Qe=t(),pa=a("p"),pa.textContent=wi,Xe=t(),ca=a("div"),ht=new d(!1),so=t(),ka=a("p"),ka.textContent=bi,ao=t(),va=a("div"),dt=new d(!1),no=t(),ha=a("p"),ha.innerHTML=$i,to=t(),da=a("div"),yt=new d(!1),eo=t(),ya=a("p"),ya.textContent=_i,ut=t(),b=a("section"),ua=a("h3"),ua.innerHTML=Ti,oo=t(),xa=a("p"),xa.textContent=Li,lo=t(),ma=a("p"),ma.innerHTML=Hi,io=t(),fa=a("p"),fa.innerHTML=Mi,ro=t(),ga=a("p"),ga.innerHTML=Ci,po=t(),wa=a("p"),wa.innerHTML=Pi,co=t(),ba=a("p"),ba.innerHTML=Ni,ko=t(),$a=a("p"),$a.textContent=Si,vo=t(),_a=a("p"),_a.innerHTML=Ei,ho=t(),Ta=a("p"),Ta.innerHTML=ji,yo=t(),La=a("div"),xt=new d(!1),uo=t(),Ha=a("p"),Ha.innerHTML=Ii,xo=t(),Ma=a("p"),Ma.innerHTML=Oi,mt=t(),x=a("section"),Ca=a("h3"),Ca.innerHTML=qi,mo=t(),Pa=a("p"),Pa.textContent=Di,fo=t(),Na=a("div"),ft=new d(!1),go=t(),Sa=a("p"),Sa.textContent=Vi,wo=t(),Ea=a("div"),gt=new d(!1),bo=t(),ja=a("p"),ja.innerHTML=zi,$o=t(),Ia=a("div"),wt=new d(!1),_o=t(),Oa=a("p"),Oa.innerHTML=Ri,To=t(),qa=a("div"),bt=new d(!1),Lo=t(),Da=a("p"),Da.innerHTML=Ai,Ho=t(),Va=a("p"),Va.textContent=Ui,Mo=t(),za=a("div"),$t=new d(!1),Co=t(),Ra=a("p"),Ra.textContent=Bi,Po=t(),Aa=a("div"),_t=new d(!1),No=t(),Ua=a("p"),Ua.innerHTML=Ji,So=t(),Ba=a("p"),Ba.innerHTML=Wi,Tt=t(),U=a("section"),Ja=a("h4"),Ja.innerHTML=Gi,Eo=t(),Wa=a("p"),Wa.innerHTML=Fi,jo=t(),Ga=a("div"),Lt=new d(!1),Ht=t(),Z=a("section"),Z.innerHTML=Yi,Mt=t(),k=a("section"),Fa=a("h2"),Fa.innerHTML=Zi,Io=t(),Ya=a("p"),Ya.innerHTML=Ki,Oo=t(),Za=a("div"),Ct=new d(!1),qo=t(),Ka=a("p"),Ka.innerHTML=Qi,Do=t(),Qa=a("p"),Qa.innerHTML=Xi,Vo=t(),Xa=a("div"),Pt=new d(!1),zo=t(),sn=a("p"),sn.textContent=sr,Ro=t(),an=a("div"),Nt=new d(!1),Ao=t(),nn=a("p"),nn.innerHTML=ar,Uo=t(),tn=a("div"),St=new d(!1),Bo=t(),en=a("p"),en.textContent=nr,Jo=t(),on=a("ul"),on.innerHTML=tr,Wo=t(),ln=a("p"),ln.innerHTML=er,Go=t(),rn=a("p"),rn.textContent=or,Fo=t(),pn=a("div"),Et=new d(!1),Yo=t(),cn=a("p"),cn.innerHTML=lr,Zo=t(),kn=a("p"),kn.innerHTML=ir,Ko=t(),vn=a("p"),vn.innerHTML=rr,Qo=t(),hn=a("p"),hn.innerHTML=pr,Xo=t(),dn=a("div"),jt=new d(!1),sl=t(),yn=a("p"),yn.innerHTML=cr,al=t(),un=a("p"),un.textContent=kr,It=t(),P=a("section"),xn=a("h3"),xn.innerHTML=vr,nl=t(),mn=a("p"),mn.textContent=hr,tl=t(),fn=a("div"),Ot=new d(!1),el=t(),gn=a("p"),gn.innerHTML=dr,ol=t(),wn=a("p"),wn.innerHTML=yr,ll=t(),bn=a("ol"),bn.innerHTML=ur,il=t(),$n=a("p"),$n.innerHTML=xr,rl=t(),_n=a("div"),qt=new d(!1),Dt=t(),j=a("section"),Tn=a("h3"),Tn.innerHTML=mr,pl=t(),Ln=a("p"),Ln.textContent=fr,cl=t(),Hn=a("div"),Vt=new d(!1),kl=t(),Mn=a("p"),Mn.innerHTML=gr,vl=t(),Cn=a("p"),Cn.innerHTML=wr,hl=t(),Pn=a("div"),zt=new d(!1),Rt=t(),D=a("section"),Nn=a("h3"),Nn.innerHTML=br,dl=t(),Sn=a("p"),Sn.textContent=$r,yl=t(),En=a("p"),En.innerHTML=_r,ul=t(),jn=a("div"),At=new d(!1),Ut=t(),N=a("section"),In=a("h3"),In.innerHTML=Tr,xl=t(),On=a("p"),On.innerHTML=Lr,ml=t(),qn=a("p"),qn.innerHTML=Hr,fl=t(),Dn=a("p"),Dn.textContent=Mr,gl=t(),Vn=a("div"),Bt=new d(!1),wl=t(),zn=a("p"),zn.innerHTML=Cr,bl=t(),Rn=a("p"),Rn.innerHTML=Pr,$l=t(),An=a("div"),Jt=new d(!1),Wt=t(),K=a("section"),K.innerHTML=Nr,Gt=t(),Q=a("section"),Q.innerHTML=Sr,Ft=t(),X=a("section"),X.innerHTML=Er,Yt=t(),ss=a("section"),ss.innerHTML=jr,Zt=t(),as=a("section"),as.innerHTML=Ir,Kt=t(),ns=a("section"),ns.innerHTML=Or,this.h()},l(l){H=n(l,"P",{"data-svelte-h":!0}),o(H)!=="svelte-tkdnzf"&&(H.innerHTML=B),R=e(l),z=n(l,"P",{"data-svelte-h":!0}),o(z)!=="svelte-g4e64j"&&(z.innerHTML=S),q=e(l),A=n(l,"DIV",{class:!0});var r=c(A);Bn=y(r,!1),r.forEach(i),Jn=e(l),W=n(l,"P",{"data-svelte-h":!0}),o(W)!=="svelte-19k6cc3"&&(W.innerHTML=Tl),Wn=e(l),G=n(l,"P",{"data-svelte-h":!0}),o(G)!=="svelte-aoqmhm"&&(G.innerHTML=Ll),Gn=e(l),F=n(l,"SECTION",{"data-svelte-h":!0}),o(F)!=="svelte-slil8b"&&(F.innerHTML=Hl),Fn=e(l),$=n(l,"SECTION",{});var M=c($);es=n(M,"H3",{"data-svelte-h":!0}),o(es)!=="svelte-v3at67"&&(es.innerHTML=Ml),Qt=e(M),os=n(M,"P",{"data-svelte-h":!0}),o(os)!=="svelte-1j9ldk"&&(os.innerHTML=Cl),Xt=e(M),ls=n(M,"P",{"data-svelte-h":!0}),o(ls)!=="svelte-wv5xzl"&&(ls.innerHTML=Pl),se=e(M),is=n(M,"UL",{"data-svelte-h":!0}),o(is)!=="svelte-fphisn"&&(is.innerHTML=Nl),ae=e(M),rs=n(M,"P",{"data-svelte-h":!0}),o(rs)!=="svelte-n3ap9h"&&(rs.textContent=Sl),ne=e(M),ps=n(M,"P",{"data-svelte-h":!0}),o(ps)!=="svelte-1o7fkap"&&(ps.textContent=El),te=e(M),cs=n(M,"P",{"data-svelte-h":!0}),o(cs)!=="svelte-1u5sc5w"&&(cs.innerHTML=jl),ee=e(M),ks=n(M,"P",{"data-svelte-h":!0}),o(ks)!=="svelte-1ljxzra"&&(ks.innerHTML=Il),oe=e(M),vs=n(M,"DIV",{class:!0});var qr=c(vs);Yn=y(qr,!1),qr.forEach(i),le=e(M),hs=n(M,"P",{"data-svelte-h":!0}),o(hs)!=="svelte-ncr11d"&&(hs.innerHTML=Ol),ie=e(M),ds=n(M,"DIV",{class:!0});var Dr=c(ds);Zn=y(Dr,!1),Dr.forEach(i),re=e(M),ys=n(M,"P",{"data-svelte-h":!0}),o(ys)!=="svelte-1citrow"&&(ys.innerHTML=ql),M.forEach(i),Kn=e(l),f=n(l,"SECTION",{});var _=c(f);us=n(_,"H3",{"data-svelte-h":!0}),o(us)!=="svelte-1nx32b8"&&(us.innerHTML=Dl),pe=e(_),xs=n(_,"P",{"data-svelte-h":!0}),o(xs)!=="svelte-19zn178"&&(xs.innerHTML=Vl),ce=e(_),ms=n(_,"P",{"data-svelte-h":!0}),o(ms)!=="svelte-x3mzr4"&&(ms.textContent=zl),ke=e(_),fs=n(_,"DIV",{class:!0});var Vr=c(fs);Qn=y(Vr,!1),Vr.forEach(i),ve=e(_),gs=n(_,"P",{"data-svelte-h":!0}),o(gs)!=="svelte-18ce6xm"&&(gs.innerHTML=Rl),he=e(_),ws=n(_,"P",{"data-svelte-h":!0}),o(ws)!=="svelte-1qfoklz"&&(ws.innerHTML=Al),de=e(_),bs=n(_,"P",{"data-svelte-h":!0}),o(bs)!=="svelte-1sgkjr0"&&(bs.innerHTML=Ul),ye=e(_),$s=n(_,"DIV",{class:!0});var zr=c($s);Xn=y(zr,!1),zr.forEach(i),ue=e(_),_s=n(_,"P",{"data-svelte-h":!0}),o(_s)!=="svelte-1h5wc79"&&(_s.innerHTML=Bl),xe=e(_),Ts=n(_,"DIV",{class:!0});var Rr=c(Ts);st=y(Rr,!1),Rr.forEach(i),me=e(_),Ls=n(_,"P",{"data-svelte-h":!0}),o(Ls)!=="svelte-1nt1qhi"&&(Ls.innerHTML=Jl),fe=e(_),Hs=n(_,"P",{"data-svelte-h":!0}),o(Hs)!=="svelte-15mhxpr"&&(Hs.innerHTML=Wl),ge=e(_),Ms=n(_,"DIV",{class:!0});var Ar=c(Ms);at=y(Ar,!1),Ar.forEach(i),we=e(_),Cs=n(_,"P",{"data-svelte-h":!0}),o(Cs)!=="svelte-1waubam"&&(Cs.innerHTML=Gl),_.forEach(i),nt=e(l),h=n(l,"SECTION",{});var m=c(h);Ps=n(m,"H3",{"data-svelte-h":!0}),o(Ps)!=="svelte-15luduv"&&(Ps.innerHTML=Fl),be=e(m),Ns=n(m,"P",{"data-svelte-h":!0}),o(Ns)!=="svelte-xa355b"&&(Ns.innerHTML=Yl),$e=e(m),Ss=n(m,"P",{"data-svelte-h":!0}),o(Ss)!=="svelte-1rqsbk1"&&(Ss.textContent=Zl),_e=e(m),Es=n(m,"UL",{"data-svelte-h":!0}),o(Es)!=="svelte-850yr0"&&(Es.innerHTML=Kl),Te=e(m),js=n(m,"P",{"data-svelte-h":!0}),o(js)!=="svelte-psroqj"&&(js.innerHTML=Ql),Le=e(m),Is=n(m,"DIV",{class:!0});var Ur=c(Is);tt=y(Ur,!1),Ur.forEach(i),He=e(m),Os=n(m,"P",{"data-svelte-h":!0}),o(Os)!=="svelte-1allcnx"&&(Os.innerHTML=Xl),Me=e(m),qs=n(m,"OL",{"data-svelte-h":!0}),o(qs)!=="svelte-1aukd0x"&&(qs.innerHTML=si),Ce=e(m),Ds=n(m,"DIV",{class:!0});var Br=c(Ds);et=y(Br,!1),Br.forEach(i),Pe=e(m),Vs=n(m,"P",{"data-svelte-h":!0}),o(Vs)!=="svelte-ab9hos"&&(Vs.innerHTML=ai),Ne=e(m),zs=n(m,"P",{"data-svelte-h":!0}),o(zs)!=="svelte-o36l5k"&&(zs.innerHTML=ni),Se=e(m),Rs=n(m,"P",{"data-svelte-h":!0}),o(Rs)!=="svelte-1cq2v2u"&&(Rs.innerHTML=ti),Ee=e(m),As=n(m,"DIV",{class:!0});var Jr=c(As);ot=y(Jr,!1),Jr.forEach(i),je=e(m),Us=n(m,"P",{"data-svelte-h":!0}),o(Us)!=="svelte-1ai19s0"&&(Us.textContent=ei),Ie=e(m),Bs=n(m,"P",{"data-svelte-h":!0}),o(Bs)!=="svelte-1ocydrp"&&(Bs.innerHTML=oi),Oe=e(m),Js=n(m,"P",{"data-svelte-h":!0}),o(Js)!=="svelte-1np5sgh"&&(Js.innerHTML=li),qe=e(m),Ws=n(m,"DIV",{class:!0});var Wr=c(Ws);lt=y(Wr,!1),Wr.forEach(i),De=e(m),Gs=n(m,"P",{"data-svelte-h":!0}),o(Gs)!=="svelte-rrxskd"&&(Gs.innerHTML=ii),m.forEach(i),it=e(l),w=n(l,"SECTION",{});var T=c(w);Fs=n(T,"H3",{"data-svelte-h":!0}),o(Fs)!=="svelte-1iuilgz"&&(Fs.innerHTML=ri),Ve=e(T),Ys=n(T,"P",{"data-svelte-h":!0}),o(Ys)!=="svelte-18i5g6"&&(Ys.innerHTML=pi),ze=e(T),Zs=n(T,"P",{"data-svelte-h":!0}),o(Zs)!=="svelte-5d7tre"&&(Zs.innerHTML=ci),Re=e(T),Ks=n(T,"P",{"data-svelte-h":!0}),o(Ks)!=="svelte-lt8e55"&&(Ks.textContent=ki),Ae=e(T),Qs=n(T,"DIV",{class:!0});var Gr=c(Qs);rt=y(Gr,!1),Gr.forEach(i),Ue=e(T),Xs=n(T,"P",{"data-svelte-h":!0}),o(Xs)!=="svelte-r1n1ze"&&(Xs.innerHTML=vi),Be=e(T),sa=n(T,"DIV",{class:!0});var Fr=c(sa);pt=y(Fr,!1),Fr.forEach(i),Je=e(T),aa=n(T,"P",{"data-svelte-h":!0}),o(aa)!=="svelte-ff5vpy"&&(aa.innerHTML=hi),We=e(T),na=n(T,"P",{"data-svelte-h":!0}),o(na)!=="svelte-qx80ul"&&(na.textContent=di),Ge=e(T),ta=n(T,"DIV",{class:!0});var Yr=c(ta);ct=y(Yr,!1),Yr.forEach(i),Fe=e(T),ea=n(T,"P",{"data-svelte-h":!0}),o(ea)!=="svelte-1d32qjq"&&(ea.innerHTML=yi),Ye=e(T),oa=n(T,"P",{"data-svelte-h":!0}),o(oa)!=="svelte-yy5rjs"&&(oa.innerHTML=ui),Ze=e(T),la=n(T,"OL",{"data-svelte-h":!0}),o(la)!=="svelte-1v0h7ce"&&(la.innerHTML=xi),T.forEach(i),kt=e(l),Y=n(l,"SECTION",{"data-svelte-h":!0}),o(Y)!=="svelte-7yd2nc"&&(Y.innerHTML=mi),vt=e(l),C=n(l,"SECTION",{});var E=c(C);ia=n(E,"H2",{"data-svelte-h":!0}),o(ia)!=="svelte-1dldmpu"&&(ia.innerHTML=fi),Ke=e(E),ra=n(E,"P",{"data-svelte-h":!0}),o(ra)!=="svelte-l7hyhe"&&(ra.innerHTML=gi),Qe=e(E),pa=n(E,"P",{"data-svelte-h":!0}),o(pa)!=="svelte-k53ph5"&&(pa.textContent=wi),Xe=e(E),ca=n(E,"DIV",{class:!0});var Zr=c(ca);ht=y(Zr,!1),Zr.forEach(i),so=e(E),ka=n(E,"P",{"data-svelte-h":!0}),o(ka)!=="svelte-1ml9weg"&&(ka.textContent=bi),ao=e(E),va=n(E,"DIV",{class:!0});var Kr=c(va);dt=y(Kr,!1),Kr.forEach(i),no=e(E),ha=n(E,"P",{"data-svelte-h":!0}),o(ha)!=="svelte-nklazp"&&(ha.innerHTML=$i),to=e(E),da=n(E,"DIV",{class:!0});var Qr=c(da);yt=y(Qr,!1),Qr.forEach(i),eo=e(E),ya=n(E,"P",{"data-svelte-h":!0}),o(ya)!=="svelte-80y251"&&(ya.textContent=_i),E.forEach(i),ut=e(l),b=n(l,"SECTION",{});var L=c(b);ua=n(L,"H3",{"data-svelte-h":!0}),o(ua)!=="svelte-1npojef"&&(ua.innerHTML=Ti),oo=e(L),xa=n(L,"P",{"data-svelte-h":!0}),o(xa)!=="svelte-zfhkqu"&&(xa.textContent=Li),lo=e(L),ma=n(L,"P",{"data-svelte-h":!0}),o(ma)!=="svelte-1b2bdgo"&&(ma.innerHTML=Hi),io=e(L),fa=n(L,"P",{"data-svelte-h":!0}),o(fa)!=="svelte-olkizk"&&(fa.innerHTML=Mi),ro=e(L),ga=n(L,"P",{"data-svelte-h":!0}),o(ga)!=="svelte-1fx9cin"&&(ga.innerHTML=Ci),po=e(L),wa=n(L,"P",{"data-svelte-h":!0}),o(wa)!=="svelte-1bamns8"&&(wa.innerHTML=Pi),co=e(L),ba=n(L,"P",{"data-svelte-h":!0}),o(ba)!=="svelte-fdigus"&&(ba.innerHTML=Ni),ko=e(L),$a=n(L,"P",{"data-svelte-h":!0}),o($a)!=="svelte-97c0p9"&&($a.textContent=Si),vo=e(L),_a=n(L,"P",{"data-svelte-h":!0}),o(_a)!=="svelte-jgyv9u"&&(_a.innerHTML=Ei),ho=e(L),Ta=n(L,"P",{"data-svelte-h":!0}),o(Ta)!=="svelte-ttrq4s"&&(Ta.innerHTML=ji),yo=e(L),La=n(L,"DIV",{class:!0});var Xr=c(La);xt=y(Xr,!1),Xr.forEach(i),uo=e(L),Ha=n(L,"P",{"data-svelte-h":!0}),o(Ha)!=="svelte-1lmcz7"&&(Ha.innerHTML=Ii),xo=e(L),Ma=n(L,"P",{"data-svelte-h":!0}),o(Ma)!=="svelte-j0yzrz"&&(Ma.innerHTML=Oi),L.forEach(i),mt=e(l),x=n(l,"SECTION",{});var g=c(x);Ca=n(g,"H3",{"data-svelte-h":!0}),o(Ca)!=="svelte-1kdigop"&&(Ca.innerHTML=qi),mo=e(g),Pa=n(g,"P",{"data-svelte-h":!0}),o(Pa)!=="svelte-tp68p0"&&(Pa.textContent=Di),fo=e(g),Na=n(g,"DIV",{class:!0});var sp=c(Na);ft=y(sp,!1),sp.forEach(i),go=e(g),Sa=n(g,"P",{"data-svelte-h":!0}),o(Sa)!=="svelte-1tjda8o"&&(Sa.textContent=Vi),wo=e(g),Ea=n(g,"DIV",{class:!0});var ap=c(Ea);gt=y(ap,!1),ap.forEach(i),bo=e(g),ja=n(g,"P",{"data-svelte-h":!0}),o(ja)!=="svelte-h4in98"&&(ja.innerHTML=zi),$o=e(g),Ia=n(g,"DIV",{class:!0});var np=c(Ia);wt=y(np,!1),np.forEach(i),_o=e(g),Oa=n(g,"P",{"data-svelte-h":!0}),o(Oa)!=="svelte-z26ok5"&&(Oa.innerHTML=Ri),To=e(g),qa=n(g,"DIV",{class:!0});var tp=c(qa);bt=y(tp,!1),tp.forEach(i),Lo=e(g),Da=n(g,"P",{"data-svelte-h":!0}),o(Da)!=="svelte-5kvfl0"&&(Da.innerHTML=Ai),Ho=e(g),Va=n(g,"P",{"data-svelte-h":!0}),o(Va)!=="svelte-1skk8z3"&&(Va.textContent=Ui),Mo=e(g),za=n(g,"DIV",{class:!0});var ep=c(za);$t=y(ep,!1),ep.forEach(i),Co=e(g),Ra=n(g,"P",{"data-svelte-h":!0}),o(Ra)!=="svelte-urmnjf"&&(Ra.textContent=Bi),Po=e(g),Aa=n(g,"DIV",{class:!0});var op=c(Aa);_t=y(op,!1),op.forEach(i),No=e(g),Ua=n(g,"P",{"data-svelte-h":!0}),o(Ua)!=="svelte-1js36pk"&&(Ua.innerHTML=Ji),So=e(g),Ba=n(g,"P",{"data-svelte-h":!0}),o(Ba)!=="svelte-ub63jg"&&(Ba.innerHTML=Wi),g.forEach(i),Tt=e(l),U=n(l,"SECTION",{});var Un=c(U);Ja=n(Un,"H4",{"data-svelte-h":!0}),o(Ja)!=="svelte-1pacvhs"&&(Ja.innerHTML=Gi),Eo=e(Un),Wa=n(Un,"P",{"data-svelte-h":!0}),o(Wa)!=="svelte-1yjqz65"&&(Wa.innerHTML=Fi),jo=e(Un),Ga=n(Un,"DIV",{class:!0});var lp=c(Ga);Lt=y(lp,!1),lp.forEach(i),Un.forEach(i),Ht=e(l),Z=n(l,"SECTION",{"data-svelte-h":!0}),o(Z)!=="svelte-1stutk2"&&(Z.innerHTML=Yi),Mt=e(l),k=n(l,"SECTION",{});var v=c(k);Fa=n(v,"H2",{"data-svelte-h":!0}),o(Fa)!=="svelte-1e7no7b"&&(Fa.innerHTML=Zi),Io=e(v),Ya=n(v,"P",{"data-svelte-h":!0}),o(Ya)!=="svelte-1d1x35y"&&(Ya.innerHTML=Ki),Oo=e(v),Za=n(v,"DIV",{class:!0});var ip=c(Za);Ct=y(ip,!1),ip.forEach(i),qo=e(v),Ka=n(v,"P",{"data-svelte-h":!0}),o(Ka)!=="svelte-16jq1y5"&&(Ka.innerHTML=Qi),Do=e(v),Qa=n(v,"P",{"data-svelte-h":!0}),o(Qa)!=="svelte-1rxjld6"&&(Qa.innerHTML=Xi),Vo=e(v),Xa=n(v,"DIV",{class:!0});var rp=c(Xa);Pt=y(rp,!1),rp.forEach(i),zo=e(v),sn=n(v,"P",{"data-svelte-h":!0}),o(sn)!=="svelte-1inj3ed"&&(sn.textContent=sr),Ro=e(v),an=n(v,"DIV",{class:!0});var pp=c(an);Nt=y(pp,!1),pp.forEach(i),Ao=e(v),nn=n(v,"P",{"data-svelte-h":!0}),o(nn)!=="svelte-1yqob4y"&&(nn.innerHTML=ar),Uo=e(v),tn=n(v,"DIV",{class:!0});var cp=c(tn);St=y(cp,!1),cp.forEach(i),Bo=e(v),en=n(v,"P",{"data-svelte-h":!0}),o(en)!=="svelte-yujbal"&&(en.textContent=nr),Jo=e(v),on=n(v,"UL",{"data-svelte-h":!0}),o(on)!=="svelte-u4gbc9"&&(on.innerHTML=tr),Wo=e(v),ln=n(v,"P",{"data-svelte-h":!0}),o(ln)!=="svelte-1lx3lat"&&(ln.innerHTML=er),Go=e(v),rn=n(v,"P",{"data-svelte-h":!0}),o(rn)!=="svelte-11vepnd"&&(rn.textContent=or),Fo=e(v),pn=n(v,"DIV",{class:!0});var kp=c(pn);Et=y(kp,!1),kp.forEach(i),Yo=e(v),cn=n(v,"P",{"data-svelte-h":!0}),o(cn)!=="svelte-1yqob4y"&&(cn.innerHTML=lr),Zo=e(v),kn=n(v,"P",{"data-svelte-h":!0}),o(kn)!=="svelte-1lp8y45"&&(kn.innerHTML=ir),Ko=e(v),vn=n(v,"P",{"data-svelte-h":!0}),o(vn)!=="svelte-l0fc35"&&(vn.innerHTML=rr),Qo=e(v),hn=n(v,"P",{"data-svelte-h":!0}),o(hn)!=="svelte-ra611k"&&(hn.innerHTML=pr),Xo=e(v),dn=n(v,"DIV",{class:!0});var vp=c(dn);jt=y(vp,!1),vp.forEach(i),sl=e(v),yn=n(v,"P",{"data-svelte-h":!0}),o(yn)!=="svelte-1w8fh7b"&&(yn.innerHTML=cr),al=e(v),un=n(v,"P",{"data-svelte-h":!0}),o(un)!=="svelte-1gpzqqr"&&(un.textContent=kr),v.forEach(i),It=e(l),P=n(l,"SECTION",{});var I=c(P);xn=n(I,"H3",{"data-svelte-h":!0}),o(xn)!=="svelte-17190fb"&&(xn.innerHTML=vr),nl=e(I),mn=n(I,"P",{"data-svelte-h":!0}),o(mn)!=="svelte-1m5sqe4"&&(mn.textContent=hr),tl=e(I),fn=n(I,"DIV",{class:!0});var hp=c(fn);Ot=y(hp,!1),hp.forEach(i),el=e(I),gn=n(I,"P",{"data-svelte-h":!0}),o(gn)!=="svelte-1p8si18"&&(gn.innerHTML=dr),ol=e(I),wn=n(I,"P",{"data-svelte-h":!0}),o(wn)!=="svelte-3twg4q"&&(wn.innerHTML=yr),ll=e(I),bn=n(I,"OL",{"data-svelte-h":!0}),o(bn)!=="svelte-9z6j0v"&&(bn.innerHTML=ur),il=e(I),$n=n(I,"P",{"data-svelte-h":!0}),o($n)!=="svelte-1q6we7s"&&($n.innerHTML=xr),rl=e(I),_n=n(I,"DIV",{class:!0});var dp=c(_n);qt=y(dp,!1),dp.forEach(i),I.forEach(i),Dt=e(l),j=n(l,"SECTION",{});var V=c(j);Tn=n(V,"H3",{"data-svelte-h":!0}),o(Tn)!=="svelte-1e5ty86"&&(Tn.innerHTML=mr),pl=e(V),Ln=n(V,"P",{"data-svelte-h":!0}),o(Ln)!=="svelte-10f9r9r"&&(Ln.textContent=fr),cl=e(V),Hn=n(V,"DIV",{class:!0});var yp=c(Hn);Vt=y(yp,!1),yp.forEach(i),kl=e(V),Mn=n(V,"P",{"data-svelte-h":!0}),o(Mn)!=="svelte-1kswmvr"&&(Mn.innerHTML=gr),vl=e(V),Cn=n(V,"P",{"data-svelte-h":!0}),o(Cn)!=="svelte-1yqe7ro"&&(Cn.innerHTML=wr),hl=e(V),Pn=n(V,"DIV",{class:!0});var up=c(Pn);zt=y(up,!1),up.forEach(i),V.forEach(i),Rt=e(l),D=n(l,"SECTION",{});var J=c(D);Nn=n(J,"H3",{"data-svelte-h":!0}),o(Nn)!=="svelte-gr7ovk"&&(Nn.innerHTML=br),dl=e(J),Sn=n(J,"P",{"data-svelte-h":!0}),o(Sn)!=="svelte-15oj57m"&&(Sn.textContent=$r),yl=e(J),En=n(J,"P",{"data-svelte-h":!0}),o(En)!=="svelte-abz23j"&&(En.innerHTML=_r),ul=e(J),jn=n(J,"DIV",{class:!0});var xp=c(jn);At=y(xp,!1),xp.forEach(i),J.forEach(i),Ut=e(l),N=n(l,"SECTION",{});var O=c(N);In=n(O,"H3",{"data-svelte-h":!0}),o(In)!=="svelte-1gbx404"&&(In.innerHTML=Tr),xl=e(O),On=n(O,"P",{"data-svelte-h":!0}),o(On)!=="svelte-1ggn1pl"&&(On.innerHTML=Lr),ml=e(O),qn=n(O,"P",{"data-svelte-h":!0}),o(qn)!=="svelte-1gl574t"&&(qn.innerHTML=Hr),fl=e(O),Dn=n(O,"P",{"data-svelte-h":!0}),o(Dn)!=="svelte-1gkqha7"&&(Dn.textContent=Mr),gl=e(O),Vn=n(O,"DIV",{class:!0});var mp=c(Vn);Bt=y(mp,!1),mp.forEach(i),wl=e(O),zn=n(O,"P",{"data-svelte-h":!0}),o(zn)!=="svelte-141zq0b"&&(zn.innerHTML=Cr),bl=e(O),Rn=n(O,"P",{"data-svelte-h":!0}),o(Rn)!=="svelte-vfy6rc"&&(Rn.innerHTML=Pr),$l=e(O),An=n(O,"DIV",{class:!0});var fp=c(An);Jt=y(fp,!1),fp.forEach(i),O.forEach(i),Wt=e(l),K=n(l,"SECTION",{"data-svelte-h":!0}),o(K)!=="svelte-jio8mh"&&(K.innerHTML=Nr),Gt=e(l),Q=n(l,"SECTION",{"data-svelte-h":!0}),o(Q)!=="svelte-1d8nkns"&&(Q.innerHTML=Sr),Ft=e(l),X=n(l,"SECTION",{"data-svelte-h":!0}),o(X)!=="svelte-j8ixle"&&(X.innerHTML=Er),Yt=e(l),ss=n(l,"SECTION",{"data-svelte-h":!0}),o(ss)!=="svelte-v259bw"&&(ss.innerHTML=jr),Zt=e(l),as=n(l,"SECTION",{"data-svelte-h":!0}),o(as)!=="svelte-xunihl"&&(as.innerHTML=Ir),Kt=e(l),ns=n(l,"SECTION",{"data-svelte-h":!0}),o(ns)!=="svelte-1nykzzg"&&(ns.innerHTML=Or),this.h()},h(){Bn.a=null,u(A,"class","code-section"),Yn.a=null,u(vs,"class","code-section"),Zn.a=null,u(ds,"class","code-section"),Qn.a=null,u(fs,"class","code-section"),Xn.a=null,u($s,"class","code-section"),st.a=null,u(Ts,"class","code-section"),at.a=null,u(Ms,"class","code-section"),tt.a=null,u(Is,"class","code-section"),et.a=null,u(Ds,"class","code-section"),ot.a=null,u(As,"class","code-section"),lt.a=null,u(Ws,"class","code-section"),rt.a=null,u(Qs,"class","code-section"),pt.a=null,u(sa,"class","code-section"),ct.a=null,u(ta,"class","code-section"),ht.a=null,u(ca,"class","code-section"),dt.a=null,u(va,"class","code-section"),yt.a=null,u(da,"class","code-section"),xt.a=null,u(La,"class","code-section"),ft.a=null,u(Na,"class","code-section"),gt.a=null,u(Ea,"class","code-section"),wt.a=null,u(Ia,"class","code-section"),bt.a=null,u(qa,"class","code-section"),$t.a=null,u(za,"class","code-section"),_t.a=null,u(Aa,"class","code-section"),Lt.a=null,u(Ga,"class","code-section"),Ct.a=null,u(Za,"class","code-section"),Pt.a=null,u(Xa,"class","code-section"),Nt.a=null,u(an,"class","code-section"),St.a=null,u(tn,"class","code-section"),Et.a=null,u(pn,"class","code-section"),jt.a=null,u(dn,"class","code-section"),Ot.a=null,u(fn,"class","code-section"),qt.a=null,u(_n,"class","code-section"),Vt.a=null,u(Hn,"class","code-section"),zt.a=null,u(Pn,"class","code-section"),At.a=null,u(jn,"class","code-section"),Bt.a=null,u(Vn,"class","code-section"),Jt.a=null,u(An,"class","code-section")},m(l,r){p(l,H,r),p(l,R,r),p(l,z,r),p(l,q,r),p(l,A,r),Bn.m($p,A),p(l,Jn,r),p(l,W,r),p(l,Wn,r),p(l,G,r),p(l,Gn,r),p(l,F,r),p(l,Fn,r),p(l,$,r),s($,es),s($,Qt),s($,os),s($,Xt),s($,ls),s($,se),s($,is),s($,ae),s($,rs),s($,ne),s($,ps),s($,te),s($,cs),s($,ee),s($,ks),s($,oe),s($,vs),Yn.m(_p,vs),s($,le),s($,hs),s($,ie),s($,ds),Zn.m(Tp,ds),s($,re),s($,ys),p(l,Kn,r),p(l,f,r),s(f,us),s(f,pe),s(f,xs),s(f,ce),s(f,ms),s(f,ke),s(f,fs),Qn.m(Lp,fs),s(f,ve),s(f,gs),s(f,he),s(f,ws),s(f,de),s(f,bs),s(f,ye),s(f,$s),Xn.m(Hp,$s),s(f,ue),s(f,_s),s(f,xe),s(f,Ts),st.m(Mp,Ts),s(f,me),s(f,Ls),s(f,fe),s(f,Hs),s(f,ge),s(f,Ms),at.m(Cp,Ms),s(f,we),s(f,Cs),p(l,nt,r),p(l,h,r),s(h,Ps),s(h,be),s(h,Ns),s(h,$e),s(h,Ss),s(h,_e),s(h,Es),s(h,Te),s(h,js),s(h,Le),s(h,Is),tt.m(Pp,Is),s(h,He),s(h,Os),s(h,Me),s(h,qs),s(h,Ce),s(h,Ds),et.m(Np,Ds),s(h,Pe),s(h,Vs),s(h,Ne),s(h,zs),s(h,Se),s(h,Rs),s(h,Ee),s(h,As),ot.m(Sp,As),s(h,je),s(h,Us),s(h,Ie),s(h,Bs),s(h,Oe),s(h,Js),s(h,qe),s(h,Ws),lt.m(Ep,Ws),s(h,De),s(h,Gs),p(l,it,r),p(l,w,r),s(w,Fs),s(w,Ve),s(w,Ys),s(w,ze),s(w,Zs),s(w,Re),s(w,Ks),s(w,Ae),s(w,Qs),rt.m(jp,Qs),s(w,Ue),s(w,Xs),s(w,Be),s(w,sa),pt.m(Ip,sa),s(w,Je),s(w,aa),s(w,We),s(w,na),s(w,Ge),s(w,ta),ct.m(Op,ta),s(w,Fe),s(w,ea),s(w,Ye),s(w,oa),s(w,Ze),s(w,la),p(l,kt,r),p(l,Y,r),p(l,vt,r),p(l,C,r),s(C,ia),s(C,Ke),s(C,ra),s(C,Qe),s(C,pa),s(C,Xe),s(C,ca),ht.m(qp,ca),s(C,so),s(C,ka),s(C,ao),s(C,va),dt.m(Dp,va),s(C,no),s(C,ha),s(C,to),s(C,da),yt.m(Vp,da),s(C,eo),s(C,ya),p(l,ut,r),p(l,b,r),s(b,ua),s(b,oo),s(b,xa),s(b,lo),s(b,ma),s(b,io),s(b,fa),s(b,ro),s(b,ga),s(b,po),s(b,wa),s(b,co),s(b,ba),s(b,ko),s(b,$a),s(b,vo),s(b,_a),s(b,ho),s(b,Ta),s(b,yo),s(b,La),xt.m(zp,La),s(b,uo),s(b,Ha),s(b,xo),s(b,Ma),p(l,mt,r),p(l,x,r),s(x,Ca),s(x,mo),s(x,Pa),s(x,fo),s(x,Na),ft.m(Rp,Na),s(x,go),s(x,Sa),s(x,wo),s(x,Ea),gt.m(Ap,Ea),s(x,bo),s(x,ja),s(x,$o),s(x,Ia),wt.m(Up,Ia),s(x,_o),s(x,Oa),s(x,To),s(x,qa),bt.m(Bp,qa),s(x,Lo),s(x,Da),s(x,Ho),s(x,Va),s(x,Mo),s(x,za),$t.m(Jp,za),s(x,Co),s(x,Ra),s(x,Po),s(x,Aa),_t.m(Wp,Aa),s(x,No),s(x,Ua),s(x,So),s(x,Ba),p(l,Tt,r),p(l,U,r),s(U,Ja),s(U,Eo),s(U,Wa),s(U,jo),s(U,Ga),Lt.m(Gp,Ga),p(l,Ht,r),p(l,Z,r),p(l,Mt,r),p(l,k,r),s(k,Fa),s(k,Io),s(k,Ya),s(k,Oo),s(k,Za),Ct.m(Fp,Za),s(k,qo),s(k,Ka),s(k,Do),s(k,Qa),s(k,Vo),s(k,Xa),Pt.m(Yp,Xa),s(k,zo),s(k,sn),s(k,Ro),s(k,an),Nt.m(Zp,an),s(k,Ao),s(k,nn),s(k,Uo),s(k,tn),St.m(Kp,tn),s(k,Bo),s(k,en),s(k,Jo),s(k,on),s(k,Wo),s(k,ln),s(k,Go),s(k,rn),s(k,Fo),s(k,pn),Et.m(Qp,pn),s(k,Yo),s(k,cn),s(k,Zo),s(k,kn),s(k,Ko),s(k,vn),s(k,Qo),s(k,hn),s(k,Xo),s(k,dn),jt.m(Xp,dn),s(k,sl),s(k,yn),s(k,al),s(k,un),p(l,It,r),p(l,P,r),s(P,xn),s(P,nl),s(P,mn),s(P,tl),s(P,fn),Ot.m(sc,fn),s(P,el),s(P,gn),s(P,ol),s(P,wn),s(P,ll),s(P,bn),s(P,il),s(P,$n),s(P,rl),s(P,_n),qt.m(ac,_n),p(l,Dt,r),p(l,j,r),s(j,Tn),s(j,pl),s(j,Ln),s(j,cl),s(j,Hn),Vt.m(nc,Hn),s(j,kl),s(j,Mn),s(j,vl),s(j,Cn),s(j,hl),s(j,Pn),zt.m(tc,Pn),p(l,Rt,r),p(l,D,r),s(D,Nn),s(D,dl),s(D,Sn),s(D,yl),s(D,En),s(D,ul),s(D,jn),At.m(ec,jn),p(l,Ut,r),p(l,N,r),s(N,In),s(N,xl),s(N,On),s(N,ml),s(N,qn),s(N,fl),s(N,Dn),s(N,gl),s(N,Vn),Bt.m(oc,Vn),s(N,wl),s(N,zn),s(N,bl),s(N,Rn),s(N,$l),s(N,An),Jt.m(lc,An),p(l,Wt,r),p(l,K,r),p(l,Gt,r),p(l,Q,r),p(l,Ft,r),p(l,X,r),p(l,Yt,r),p(l,ss,r),p(l,Zt,r),p(l,as,r),p(l,Kt,r),p(l,ns,r)},p:pc,d(l){l&&(i(H),i(R),i(z),i(q),i(A),i(Jn),i(W),i(Wn),i(G),i(Gn),i(F),i(Fn),i($),i(Kn),i(f),i(nt),i(h),i(it),i(w),i(kt),i(Y),i(vt),i(C),i(ut),i(b),i(mt),i(x),i(Tt),i(U),i(Ht),i(Z),i(Mt),i(k),i(It),i(P),i(Dt),i(j),i(Rt),i(D),i(Ut),i(N),i(Wt),i(K),i(Gt),i(Q),i(Ft),i(X),i(Yt),i(ss),i(Zt),i(as),i(Kt),i(ns))}}}function bc(ts){let H,B;const R=[ts[0],bp];let z={$$slots:{default:[wc]},$$scope:{ctx:ts}};for(let S=0;S<R.length;S+=1)z=_l(z,R[S]);return H=new fc({props:z}),{c(){vc(H.$$.fragment)},l(S){hc(H.$$.fragment,S)},m(S,q){dc(H,S,q),B=!0},p(S,[q]){const A=q&1?mc(R,[q&1&&wp(S[0]),q&0&&wp(bp)]):{};q&2&&(A.$$scope={dirty:q,ctx:S}),H.$set(A)},i(S){B||(yc(H.$$.fragment,S),B=!0)},o(S){uc(H.$$.fragment,S),B=!1},d(S){xc(H,S)}}}const bp={title:"Compile Svelte in your head (Part 2)",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"⬅ ⬅  Previously in Part 1.Previously, when I mentioned the `$invalidate` function, I explained that the `$invalidate` function works conceptually like the following:but that's not the exact implementation of the ...",tableOfContents:[{link:"pre-v3-16-0",title:"Pre v3.16.0",nested:[{link:"ctx",title:"$.ctx"},{link:"dirty",title:"$.dirty"},{link:"invalidate",title:"$invalidate"},{link:"schedule-update",title:"schedule_update",nested:[{link:"tl-dr",title:"tl/dr:"}]}]},{link:"v3-16-0",title:"v3.16.0",nested:[{link:"bitmask",title:"Bitmask"},{link:"bitmask-in-svelte",title:"Bitmask in Svelte",nested:[{link:"destructuring-dirty",title:"Destructuring  $.dirty"},{link:"tl-dr-1",title:"tl/dr:"}]}]},{link:"reactive-declaration",title:"Reactive Declaration",nested:[{link:"1-execution-of-all-reactive-declarations-and-statements-are-batched",title:"1. Execution of all reactive declarations and statements are batched"},{link:"2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date",title:"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"},{link:"sorting-of-reactive-declarations-and-statements",title:"Sorting of reactive declarations and statements"},{link:"reactive-variable-that-is-not-reactive",title:"Reactive variable that is not reactive"}]},{link:"summary",title:"Summary",nested:[{link:"1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates",title:"1. Svelte keeps track of which variables are dirty and batched the DOM updates."},{link:"2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code",title:"2. Using bitmask, Svelte able to generate a more compact compiled code."},{link:"3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates",title:"3. Reactive declarations and statements are executed in batch, just like DOM updates"}]},{link:"closing-note",title:"Closing Note"},{link:"further-resources",title:"Further Resources"}]};function $c(ts,H,B){return rc("blog",{image:gc}),ts.$$set=R=>{B(0,H=_l(_l({},H),gp(R)))},H=gp(H),[H]}class Mc extends cc{constructor(H){super(),kc(this,H,$c,bc,ic,{})}}export{Mc as component};
