import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as fs,g as ws,d as bs,b as _s,s as a,f as Ss,e as s,t as Ts,a as qs,r as o,n as t}from"../chunks/C2PHntuy.js";import{h as n}from"../chunks/C3QlhiH-.js";import{s as e}from"../chunks/CEusTUg_.js";import{i as Is}from"../chunks/BQOOHHT8.js";import{l as Ms,s as Fs}from"../chunks/gzNpScmH.js";import{B as Ls}from"../chunks/B1caYEk9.js";const z=""+new URL("../assets/cli.3hFnPCqs.png",import.meta.url).href,Ps=""+new URL("../assets/cli.D6yU-S1N.png",import.meta.url).href,Cs=""+new URL("../assets/cli.v8t3wmLQ.webp",import.meta.url).href,js=""+new URL("../assets/cli.Cfs3c9zs.webp",import.meta.url).href,Z=""+new URL("../assets/dev-server.DIZuY1bC.png",import.meta.url).href,As=""+new URL("../assets/dev-server.CrvPHbV2.png",import.meta.url).href,Es=""+new URL("../assets/dev-server.Kk4L-7wR.webp",import.meta.url).href,Ds=""+new URL("../assets/dev-server.ChukpTBv.webp",import.meta.url).href,Q=""+new URL("../assets/result.COqtBOtv.png",import.meta.url).href,$s=""+new URL("../assets/result.Gp0FLW6R.png",import.meta.url).href,Rs=""+new URL("../assets/result.Q90jIfB3.webp",import.meta.url).href,Hs=""+new URL("../assets/result.CFHY_ua9.webp",import.meta.url).href,Us=""+new URL("../assets/hero-twitter.GDzFx6jZ.jpg",import.meta.url).href,K={title:"I wrote my module bundler II",date:"2019-10-16T08:00:00Z",tags:["JavaScript","module bundler","dev tool","webpack"],description:"We've built a simple bundler to bundle javascript code. Let's add CSS, HTML and serve it in the browser!",series:"Write a module bundler",label:"blog",tableOfContents:[{link:"before-we-begin",title:"Before we begin"},{link:"adding-html-template",title:"Adding HTML Template"},{link:"adding-css",title:"Adding CSS",nested:[{link:"loaders",title:"Loaders"}]},{link:"dev-server",title:"Dev Server"},{link:"wrap-it-up",title:"Wrap it up"},{link:"whats-next",title:"Whats next?"},{link:"references",title:"References"}]},{title:Ks,date:Vs,tags:Xs,description:so,series:oo,label:ao,tableOfContents:no}=K;var Os=_s(`<p>In my <a href="/i-wrote-my-module-bundler/">previous article</a>, I showed you how I built a module bundler. With the module bundler I built, I bundled a simple Nodejs script to calculate the area for a square and a circle:</p> <p><span style="display: block; position: relative; padding-top: 17.949%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="bundled code demo"/></picture></span></p> <p>Today, I am going to share with y'all how I enhanced on my basic module bundler so that I can use it to bundle not just a NodeJS script, but a web application.</p> <p>I will be showing how I added the following features:</p> <ul><li><a href="#adding-html-template">Adding HTML Template</a></li> <li><a href="#adding-css">Adding CSS</a></li> <li><a href="#dev-server">Provide a dev server</a></li></ul> <hr/> <p>‚ö†Ô∏è <strong>Warning: Tons of JavaScript code ahead. üôàüò±üò®</strong> ‚ö†Ô∏è</p> <hr/> <section><h2><a href="#before-we-begin" id="before-we-begin">Before we begin</a></h2> <p>I found an edge case bug in my module bundler if the module ends with a line comment, the output bundle might have a syntax error.</p> <p>I've fixed the bug by appending a newline character to the end of the module code:</p> <div class="code-section"><!></div> <p>üòé</p> <p>Also, I've changed the resolver code, which used to only be able to resolve the relative path:</p> <div class="code-section"><!></div> <p>Now I can import libraries from <code class="inline">node_modules/</code>.</p> <p><em>Did I just said "import libraries"?</em> üôä</p></section> <section><h2><a href="#adding-html-template" id="adding-html-template">Adding HTML Template</a></h2> <p>To bundle for the web, the most important piece is to have the HTML.</p> <p>Usually, we provide an HTML template to the module bundler. And when the module bundler finishes the bundling process, it will come up with a list of files that is required to start the application and add them into the HTML file in the form of a <code class="inline">&lt;script&gt;</code> tag.</p> <p>To illustrate here is the HTML template that I've prepared:</p> <div class="code-section"><!></div> <p>And at the end of the bundling process, the bundler generated the following files:</p> <div class="code-section"><!></div> <p>So the <code class="inline">bundle.js</code> is added into the final HTML file like this:</p> <div class="code-section"><!></div> <blockquote><p><strong>NOTE:</strong> the preceding slash (<code class="inline">/</code>) allows us to always fetch the JavaScript file relative from the root path. This is extremely useful for Single Page Application (SPA), where we serve the same HTML file irrelevant to the URL path.</p></blockquote> <p>Code wise, it is quite straightforward to implement this:</p> <div class="code-section"><!></div> <p>Here, I used a <code class="inline">.replace(END_BODY_TAG, '...' + END_BODY_TAG)</code> to insert the <code class="inline">&lt;script&gt;</code> tags before the end of the <code class="inline">&lt;/body&gt;</code> tag.</p> <blockquote><p><strong>Note:</strong> Read <a href="https://www.codecademy.com/forum_questions/55dee24b937676fb5e000139" rel="nofollow">here</a> to learn why it's a best practice to add <code class="inline">&lt;script&gt;</code> tag at the end of the <code class="inline">&lt;body&gt;</code> tag.</p></blockquote></section> <section><h2><a href="#adding-css" id="adding-css">Adding CSS</a></h2> <p>Every web app has to have CSS in one way or another.</p> <p>I added a css file and imported it from <code class="inline">index.js</code>:</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <p>If I bundle my application now, I would see a <code class="inline">SyntaxError</code>:</p> <div class="code-section"><!></div> <p>That is because I assumed all files are JavaScript files, and Babel would complain when trying to parse out the import statements.</p> <p>So, I abstracted out <code class="inline">Module</code> as a base class, and created <code class="inline">JSModule</code> and <code class="inline">CSSModule</code>:</p> <div class="code-section"><!></div> <p>In the <code class="inline">createModule</code> function, I need to create different <code class="inline">Module</code> based on the file extension:</p> <div class="code-section"><!></div></section> <section><h3><a href="#loaders" id="loaders">Loaders</a></h3> <p>Here I used the word <code class="inline">"LOADERS"</code>, which I borrowed from <a href="https://webpack.js.org/loaders/" rel="nofollow">webpack</a>.</p> <p>According to webpack, <em>"<a href="https://webpack.js.org/loaders/" rel="nofollow">[loaders]</a> enable webpack to preprocess files, [which] allows you to bundle any static resource way beyond JavaScript."</em></p> <p>To take it from a different perspective, <strong>loaders</strong> are simple functions that transform any code into <strong>browser-executable JavaScript code</strong>.</p> <p>For example, if you import a CSS file, the CSS code in the file will pass through the loader function to be transformed into JS code. So that you can import a CSS file as if you are importing a JS file.</p> <p><strong>Wait, how are we going to transform CSS code into JS code?</strong></p> <p>Well, one way you can do that is to make the CSS code into a string by wrapping it around with quote marks <code class="inline">'</code>, and programmatically add the CSS code into the HTML <code class="inline">&lt;head /&gt;</code>.</p> <p>For example, taking the following CSS code:</p> <div class="code-section"><!></div> <p>and transform it into the following JS code:</p> <div class="code-section"><!></div> <p>This is in essence what <a href="https://github.com/webpack-contrib/style-loader" rel="nofollow">style-loader</a> is doing, except <code class="inline">style-loader</code> does even more:</p> <ul><li>supports hot reloading</li> <li>provides different mode of injecting, <code class="inline">styleTag</code>, <code class="inline">singletonStyleTag</code>, <code class="inline">linkTag</code>, ... etc.</li> <li>provides different points in dom for injecting the style tag.</li></ul> <p><strong>Did I mentioned "browser-executable JavaScript code"?</strong></p> <p>Yes, not all JavaScript code is executable in a browser if you are using next-generation syntaxes or constructs that is not yet available in the browser. That's why you need <a href="https://github.com/babel/babel-loader" rel="nofollow">babel-loader</a> for your JavaScript files, to make sure they can be run in all supported browsers.</p> <hr/> <p>So, I implemented the loader transform in CSSModule with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow">template literals</a>:</p> <div class="code-section"><!></div></section> <section><h2><a href="#dev-server" id="dev-server">Dev Server</a></h2> <p>Dev server is a default feature for frontend build tools nowadays, it's common feature are:</p> <ul><li>Serving generated assets, assets can be either served from the filesystem or in memory</li> <li>Supports watch mode, reloading and hot module replacement</li> <li>Act as a proxy to external APIs</li></ul> <p>In this post, I will show you how I created a basic dev server using <a href="https://expressjs.com" rel="nofollow">Express</a> for serving the generated assets in memory, we will discuss the watch mode in the future post.</p> <p>I abstracted out the <code class="inline">_build</code> function and supports both <code class="inline">build</code> and <code class="inline">dev</code> mode.</p> <div class="code-section"><!></div> <p>In <code class="inline">dev</code> mode, I did not write files to the file system, instead I served them directly through the <a href="https://expressjs.com" rel="nofollow">Express</a> server:</p> <div class="code-section"><!></div> <p>And that's it. You have a basic dev server that serves the bundled files!</p></section> <section><h2><a href="#wrap-it-up" id="wrap-it-up">Wrap it up</a></h2> <p>I've added <a href="https://preactjs.com/" rel="nofollow">Preact</a> and CSS into my app:</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <p>And also an HTML template:</p> <div class="code-section"><!></div> <p>Starting my bundler:</p> <p><span style="display: block; position: relative; padding-top: 9.486%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Running bundler + dev server"/></picture></span></p> <p>And voila!</p> <p><span style="display: block; position: relative; padding-top: 62.409%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Served results"/></picture></span></p></section> <section><h2><a href="#whats-next" id="whats-next">Whats next?</a></h2> <p>I have promised in my previous post, features that I will implement:</p> <ul><li>code splitting</li> <li>watch mode</li></ul> <p>and yes, I will implement them!</p> <p>Till then. Cheers. üòé</p></section> <section><h2><a href="#references" id="references">References</a></h2> <ul><li><a href="https://github.com/webpack/webpack-dev-server" rel="nofollow">Webpack Dev Server</a></li> <li><a href="https://github.com/webpack-contrib/style-loader" rel="nofollow">style-loader</a></li></ul></section>`,1);function eo(V,I){const X=Ms(I,["children","$$slots","$$events","$$legacy"]);fs(I,!1),ws("blog",{image:Us}),Is(),Ls(V,Fs(()=>X,()=>K,{children:(ss,Js)=>{var M=Os(),l=a(Ss(M),2),F=s(l),L=s(F),P=s(L),C=a(P);o(L),o(F),o(l);var r=a(l,14),i=a(s(r),6),os=s(i);n(os,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules) &#123;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.transformModuleInterface</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#92;n &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(i);var j=a(i,6),as=s(j);n(as,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestPath) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (requestPath[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;.&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// relative import</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.dirname</span><span style="color: var(--shiki-color-text)">(requester)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestPath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requester</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requestPaths</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">requestPaths</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/node_modules&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// absolute import</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">require</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(requestPath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; paths</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> requestPaths &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(j),t(4),o(r);var p=a(r,2),c=a(s(p),8),ns=s(c);n(ns,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(c);var k=a(c,4),es=s(k);n(es,()=>'<pre class="prism language-yml"><code><div class="line"><span class="token punctuation">-</span> bundle.js</div></code></pre>'),o(k);var h=a(k,4),ts=s(h);n(ts,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/bundle.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">body</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">html</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span></code></pre>`),o(h);var A=a(h,6),ls=s(A);n(ls,()=>`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;/body&gt;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> htmlTemplate </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  htmlTemplate </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">htmlTemplate</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((&#123; name &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&lt;script src=&quot;/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;&gt;&lt;/script&gt;&#96;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;index.html&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlTemplate &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(A),t(4),o(p);var y=a(p,2),v=a(s(y),6),rs=s(v);n(rs,()=>'<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./style.css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>'),o(v);var d=a(v,2),is=s(d);n(is,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: style.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(d);var x=a(d,4),ps=s(x);n(ps,()=>`<pre class="prism language-"><code><span class="line">SyntaxError: unknown: Unexpected token (1:0)</span>
<span class="line">&gt; 1 | .square &#123;</span>
<span class="line">    | ^</span>
<span class="line">  2 |   color: blue;</span>
<span class="line">  3 | &#125;</span>
<span class="line">  4 | .circle &#123;</span>
<span class="line">    at Parser.raise (node_modules/@babel/parser/lib/index.js:6344:17)</span></code></pre>`),o(x);var u=a(x,6),cs=s(u);n(cs,()=>`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">initDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transformModuleInterface</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">JSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span></code></pre>`),o(u);var E=a(u,4),ks=s(E);n(ks,()=>`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_LOADERS</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;.css&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> CSSModule</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> JSModule</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fileExtension</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.extname</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ModuleCls</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_LOADERS</span><span style="color: var(--shiki-color-text)">[fileExtension];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">ModuleCls) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Unsupported extension &quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">fileExtension</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;.&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ModuleCls</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// hightlight-end</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(E),o(y);var g=a(y,2),m=a(s(g),16),hs=s(m);n(hs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(m);var f=a(m,4),ys=s(f);n(ys,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">content</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;.square &#123; color: blue; &#125; .circle &#123; color: red; &#125;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create style tag</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;style&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;text/css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// for ie compatibility</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.styleSheet) </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">styleSheet</span><span style="color: var(--shiki-color-text)">.cssText </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> content;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createTextNode</span><span style="color: var(--shiki-color-text)">(content));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// append to the head</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">head</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(style);</span></span></code></pre>`),o(f);var D=a(f,14),vs=s(D);n(vs,()=>`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.transform</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transform</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      const content = &#39;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">content</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">/&#92;n/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#39;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      const style = document.createElement(&#39;style&#39;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      style.type = &#39;text/css&#39;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      if (style.styleSheet) style.styleSheet.cssText = content;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      else style.appendChild(document.createTextNode(content));</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      document.head.appendChild(style);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">    &#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(D),o(g);var w=a(g,2),b=a(s(w),10),ds=s(b);n(ds,()=>`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// build dependency graph</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">graph</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// bundle the asset</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; outputFiles</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> graph &#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// write to output folder</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dev</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> devServerOptions &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(b);var $=a(b,4),xs=s($);n(xs,()=>`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dev</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> devServerOptions &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create a map of [filename] -&gt; content</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFileMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    outputFileMap[</span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.name] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.content;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">indexHtml</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> outputFileMap[</span><span style="color: var(--shiki-token-string-expression)">&#39;index.html&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">express</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.use</span><span style="color: var(--shiki-color-text)">((req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// trim off preceding slash &#39;/&#39;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requestFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">req</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (outputFileMap[requestFile]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(outputFileMap[requestFile]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(indexHtml);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.listen</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">devServerOptions</span><span style="color: var(--shiki-color-text)">.port</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#96;Dev server starts at http://localhost:</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">devServerOptions</span><span style="color: var(--shiki-color-text)">.port</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o($),t(2),o(w);var R=a(w,2),_=a(s(R),4),us=s(_);n(us,()=>`<div class="filename">main.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; createElement</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> render &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;preact&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./style.css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; class</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;square&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;area of square: &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; class</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;circle&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;area of circle: &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;root&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`),o(_);var S=a(_,2),gs=s(S);n(gs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: style.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(S);var T=a(S,4),ms=s(T);n(ms,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;root&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(T);var q=a(T,4),H=s(q),U=s(H),O=s(U),J=a(O);o(U),o(H),o(q);var B=a(q,4),N=s(B),W=s(N),Y=s(W),G=a(Y);o(W),o(N),o(B),o(R),t(4),Ts(()=>{e(P,"srcset",`${Cs}, ${js} 2x`),e(C,"src",z),e(C,"srcset",`${z}, ${Ps} 2x`),e(O,"srcset",`${Es}, ${Ds} 2x`),e(J,"src",Z),e(J,"srcset",`${Z}, ${As} 2x`),e(Y,"srcset",`${Rs}, ${Hs} 2x`),e(G,"src",Q),e(G,"srcset",`${Q}, ${$s} 2x`)}),qs(ss,M)},$$slots:{default:!0}})),bs()}export{eo as component};
