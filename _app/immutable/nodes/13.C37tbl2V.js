import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as L,g as B,d as A,b as U,s as e,f as q,e as s,t as C,a as S,r as o,n as r}from"../chunks/C2PHntuy.js";import{h as f}from"../chunks/C3QlhiH-.js";import{s as t}from"../chunks/CEusTUg_.js";import{i as W}from"../chunks/BQOOHHT8.js";import{l as z,s as O}from"../chunks/gzNpScmH.js";import{B as D}from"../chunks/B1caYEk9.js";import{t as F}from"../chunks/C3bQ3Oc7.js";const x=""+new URL("../assets/github-pages.BZf0UzT7.png",import.meta.url).href,P=""+new URL("../assets/github-pages.CWLZCmg5.png",import.meta.url).href,E=""+new URL("../assets/github-pages.CTkB_FpY.webp",import.meta.url).href,Z=""+new URL("../assets/github-pages.BVhxrI-I.webp",import.meta.url).href,_=""+new URL("../assets/inverted_emojis.CkyF8orr.png",import.meta.url).href,M=""+new URL("../assets/inverted_emojis.CEjoys9y.png",import.meta.url).href,V=""+new URL("../assets/inverted_emojis.BdcjW5R0.webp",import.meta.url).href,N=""+new URL("../assets/inverted_emojis.elVhEw_l.webp",import.meta.url).href,I={title:"Building my Gatsby site",date:"2019-07-02T08:00:00Z",description:"A work in progress",wip:!0,label:"blog",tableOfContents:[{link:"the-boilerplate",title:"The boilerplate"},{link:"the-deployment",title:"The deployment"},{link:"the-light-dark-mode",title:"The light & dark mode"},{link:"the-restructure",title:"The Restructure"}]},{title:ns,date:is,description:rs,wip:ls,label:ps,tableOfContents:cs}=I;var Q=U(`<p>After reading Dan's <a href="https://overreacted.io" rel="nofollow">Overreacted</a> & Wei's <a href="https://dev.wgao19.cc/" rel="nofollow">A Work in Progress</a> a while ago, I decided to have my <a href="/blogs/">own blog</a> as well! <em>(In case you still don't know, it's the very one you are reading right now!)</em></p> <p>I took it as an opportunity to learn <a href="https://www.gatsbyjs.org/" rel="nofollow">Gatsby</a>, I've heard about it for a while, so I guess it's to know how it works.</p> <p>This article is <strong>NOT about how to build a Gatsby site</strong>, there a lot resources about that you can go for. But I am here to share some of my customisations that I've added to my Gatsby site, and hopefully you would share yours too.</p> <section><h2><a href="#the-boilerplate" id="the-boilerplate">The boilerplate</a></h2> <p>I used the exact same Gatsby starter pack as Dan's <a href="https://overreacted.io" rel="nofollow">Overreacted</a>, because why not ¬Ø_(„ÉÑ)_/¬Ø. It looks sleek and simple and I like it.</p></section> <section><h2><a href="#the-deployment" id="the-deployment">The deployment</a></h2> <p>I use <a href="https://pages.github.com/" rel="nofollow">Github Pages</a> to host this blog.</p> <p><span style="display: block; position: relative; padding-top: 80.214%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="github pages settings" title="Github Pages Settings"/></picture></span></p> <p>According to the settings, I am required to use <code class="inline">master</code> branch to serve the content, that's why I am writing and developing in <code class="inline">dev</code> branch instead.</p> <p>To deploy, I added a <a href="https://github.com/tanhauhau/tanhauhau.github.io/blob/dev/scripts/publish.js" rel="nofollow">publish.js</a> script. The script will clone the repo in a temporary folder, copy all the built files into the folder, make a commit and push it to the master branch.</p> <p>Lastly, I added the script to the <code class="inline">pre-push</code> git hook, so that every time when I am pushing changes to the <code class="inline">dev</code> branch, it will also build and "deploy" changes to the <code class="inline">master</code> branch.</p></section> <section><h2><a href="#the-light-dark-mode" id="the-light-dark-mode">The light & dark mode</a></h2> <p><a href="https://twitter.com/wgao19" rel="nofollow">Wei</a> did a sharing on how mix blend mode works and how she <a href="https://dev.wgao19.cc/2019-05-04__sun-moon-blending-mode/" rel="nofollow">added night mode using mix-blend-mode</a> on her site.</p> <p>So I decided to add my own <a href="https://github.com/tanhauhau/tanhauhau.github.io/commit/291663d10cc7838d67392acb6a28a04a655603a6#diff-4e34e842430a5e2977417f28e477e14d" rel="nofollow">Dark Mode Switch</a> as well.</p> <p>The Dark Mode Switch was relatively easy. I added a pseudo-element <code class="inline">div#___gatsby::after</code> to cover over my entire Gatsby blog, so I don't have to create another div element.</p> <div class="code-section"><!></div> <p>It's easy and it looks great, except, all my images and emojis are inverted. üò¢</p> <p><span style="display: block; position: relative; padding-top: 55.677%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="inverted emojis" title="It looked like emojis going through X-Rays.. üò¢"/></picture></span></p> <p>I need to wrap all my emojis around a <code class="inline">&lt;span&gt;</code> so I can apply some css like <code class="inline">isolation: isolate</code> to exclude them from being blended. <a href="https://www.chenhuijing.com/blog/friends-dont-let-friends-implement-dark-mode-alone/#%F0%9F%92%BB" rel="nofollow">Inspiration credits to huijing üëèüëè</a>. But I am lazy to wrap all my emojis with <code class="inline">&lt;span&gt;</code>, I want to use them anytime I want, without bothering much of the <code class="inline">&lt;span&gt;</code>, so I decided to write a gatsby remark plugin to do that for me. üòé</p> <p>Well, it turns out it's not that hard.</p> <p><a href="https://github.com/remarkjs/remark" rel="nofollow">Remark</a> provides a friendly api to tap into the AST and <a href="https://github.com/tanhauhau/tanhauhau.github.io/commit/291663d10cc7838d67392acb6a28a04a655603a6#diff-1be49bbded0fd920136646bdb37f5b91" rel="nofollow">does transformation</a>.</p> <div class="code-section"><!></div> <p><em>using emoji-regex find emojis and wrap them with a <span></span></em></p> <p>...and it works!</p>  <p>Although somewhere when I started writing the gatsby plugin, a weird error popped up, and after some digging, I noticed that</p> <p>I had to include <code class="inline">package.json</code> into the plugin folder, or else it will yell at me.</p></section> <section><h2><a href="#the-restructure" id="the-restructure">The Restructure</a></h2> <p>A while ago, I decided to add more categories to my blog, ie, <a href="/blogs/">my blogs</a>, <a href="/talks/">my talks</a> and <a href="/notes">my notes</a>. So I created different folders for them and <a href="https://github.com/tanhauhau/tanhauhau.github.io/commit/50c82259749f7608d1c81062eac1f357b9437485" rel="nofollow">rewrote the GraphQL query</a></p> <p>The Graphql Editor in <code class="inline">http://localhost:8000/___graphql</code> is really helpful for me to understand how Gatsby and Gatsby plugins are creating all the objects.</p></section>`,1);function hs(j,l){const T=z(l,["children","$$slots","$$events","$$legacy"]);L(l,!1),B("blog",{image:F}),W(),D(j,O(()=>T,()=>I,{children:($,X)=>{var p=Q(),a=e(q(p),8),c=e(s(a),4),h=s(c),d=s(h),k=s(d),y=e(k);o(d),o(h),o(c),r(6),o(a);var v=e(a,2),n=e(s(v),8),R=s(n);f(R,()=>`<div class="filename">theme-mode.css</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">div#___gatsby</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)">:after &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  content</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  position</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> fixed;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  top</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  bottom</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  left</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  right</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  pointer</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">events</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> none;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> white;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  mix</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">blend</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">mode</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> difference;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(n);var i=e(n,4),u=s(i),m=s(u),g=s(m),b=e(g);o(m),o(u),o(i);var w=e(i,8),G=s(w);f(G,()=>`<div class="filename">remark-emoji.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">visit</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;unist-util-visit&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">emojiRegex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;emoji-regex&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; markdownAST &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(markdownAST</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;text&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;html&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">emojiRegex</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      val </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&lt;span class=&quot;emoji&quot;&gt;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">val</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&lt;/span&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`),o(w),r(8),o(v),r(2),C(()=>{t(k,"srcset",`${E}, ${Z} 2x`),t(y,"src",x),t(y,"srcset",`${x}, ${P} 2x`),t(g,"srcset",`${V}, ${N} 2x`),t(b,"src",_),t(b,"srcset",`${_}, ${M} 2x`)}),S($,p)},$$slots:{default:!0}})),A()}export{hs as component};
