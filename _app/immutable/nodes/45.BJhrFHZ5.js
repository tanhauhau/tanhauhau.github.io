import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as As,g as Js,d as Ls,b as Cs,s as e,f as Rs,e as s,t as Ts,a as $s,r as o,n}from"../chunks/C2PHntuy.js";import{h as a}from"../chunks/C3QlhiH-.js";import{s as t}from"../chunks/CEusTUg_.js";import{i as Us}from"../chunks/BQOOHHT8.js";import{l as Ms,s as Ds}from"../chunks/gzNpScmH.js";import{T as Ws}from"../chunks/BPVAFQeE.js";import{t as Es}from"../chunks/C3bQ3Oc7.js";const os=""+new URL("../assets/jquery.BLRZ4k1c.png",import.meta.url).href,Ns=""+new URL("../assets/jquery.L9vZcD9V.png",import.meta.url).href,Bs=""+new URL("../assets/jquery.BdTBK2uT.webp",import.meta.url).href,zs=""+new URL("../assets/jquery.tRAdHTz0.webp",import.meta.url).href,es=""+new URL("../assets/jquery-version.DHpEtL_5.png",import.meta.url).href,Qs=""+new URL("../assets/jquery-version.DASDWbAj.png",import.meta.url).href,Hs=""+new URL("../assets/jquery-version.BkTnmXzJ.webp",import.meta.url).href,Ps=""+new URL("../assets/jquery-version.C_1wclBA.webp",import.meta.url).href,as=""+new URL("../assets/cdnjs.BZQj-FCH.png",import.meta.url).href,Gs=""+new URL("../assets/cdnjs.DbJ-1sxR.png",import.meta.url).href,Fs=""+new URL("../assets/cdnjs.CdPS6Xq2.webp",import.meta.url).href,Vs=""+new URL("../assets/cdnjs.bG_AsGlj.webp",import.meta.url).href,ts=""+new URL("../assets/bower.DggVyKxi.png",import.meta.url).href,Os=""+new URL("../assets/bower.B0Z0MA9M.png",import.meta.url).href,Ks=""+new URL("../assets/bower.AORUcext.webp",import.meta.url).href,Zs=""+new URL("../assets/bower.C3rInfZK.webp",import.meta.url).href,ns=""+new URL("../assets/browserify.Bud-6HNH.png",import.meta.url).href,Ys=""+new URL("../assets/browserify.CGGEa48M.png",import.meta.url).href,Xs=""+new URL("../assets/browserify.CWca4zYb.webp",import.meta.url).href,so=""+new URL("../assets/browserify.B-VbaIZL.webp",import.meta.url).href,is={title:"History of Web Development: JavaScript Modules",venue:"Shopee SG",venueLink:"https://www.google.com/maps/place/Shopee+SG/@1.291278,103.7846628,15z/data=!4m2!3m1!1s0x0:0x7ddf2e854cf6e4e4?ved=2ahUKEwi5jbz6z_vgAhVBP48KHWSEAmMQ_BIwFXoECAEQCA",occasion:"React Knowledgeable Week 25",occasionLink:"https://github.com/Shopee/react-knowledgeable/issues/89",slides:"https://slides.com/tanhauhau/js-module",videoLink:"https://www.youtube.com/watch?v=iRSdPqIHOqg",date:"2019-04-12",series:"History of Web Development",label:"talk",layout:"talk",description:"MotivationA while ago, I posted an article about understanding frontend tools. I mentioned that the way I make sense of all the tools and frameworks out there in the JavaScript world, is to try writing a web application with plain JavaScript, and start asking questions....",tableOfContents:[{link:"motivation",title:"Motivation"},{link:"the-vanilla-way",title:"The Vanilla way"},{link:"installability",title:"Installability"},{link:"importability",title:"Importability"},{link:"scopability",title:"Scopability"},{link:"summary",title:"Summary"},{link:"further-readings",title:"Further Readings"}]},{title:ko,venue:yo,venueLink:vo,occasion:uo,occasionLink:mo,slides:go,videoLink:wo,date:fo,series:bo,label:xo,layout:_o,description:jo,tableOfContents:qo}=is;var oo=Cs(`<section><h2><a href="#motivation" id="motivation">Motivation</a></h2> <p>A while ago, I posted an article about <a href="/understand-the-frontend-tools/">understanding frontend tools</a>. I mentioned that the way I make sense of all the tools and frameworks out there in the JavaScript world, is to try writing a web application with plain JavaScript, and start asking questions.</p> <p>One of the question is:</p> <blockquote><p><strong>How do we make our JavaScript code modular</strong>, having each piece of code <strong>independent</strong> of each other, without having to worry other parts of code affecting it, yet able to <strong>share functionality</strong> among different modules.</p></blockquote> <p>So I will attempt to answer the question by first exploring how things are done in a "Vanilla" way, and my two cents about the inherent problem with it and how each tooling come about solving those problems.</p></section> <section><h2><a href="#the-vanilla-way" id="the-vanilla-way">The Vanilla way</a></h2> <p>Imagine the following scenario:</p> <p>You are writing a web application. You created a script, <code class="inline">app.js</code>, and you added a <code class="inline">&lt;script&gt;</code> tag into your <code class="inline">index.html</code>.</p> <div class="code-section"><!></div> <p>Then you decided to add jQuery, because you heard that jQuery is amazing.</p> <p><strong>So how would you add jQuery into your application?</strong></p> <p>There's a few ways to go about, but the easiest would be:</p> <ul><li>heading to <a href="https://jquery.com/" rel="nofollow">jQuery's website</a></li> <li>click download</li> <li>dragged the downloaded file to your project folder</li> <li>and add another script tag before your <code class="inline">app.js</code>.</li></ul> <p><span style="display: block; position: relative; padding-top: 25.161%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="jquery page" title="Downloading jQuery from jQuery.com"/></picture></span></p> <div class="code-section"><!></div> <p><em>Adding <code class="inline">jquery</code> into html</em></p> <p>Although jQuery is awesome, but adding it takes <strong>a lot of steps and effort</strong>. And to upgrade jQuery, you would have to redo all the step.</p> <blockquote><p><strong>Installing a library</strong> is a hassle back then.</p></blockquote> <p>Let's say we add another file, <code class="inline">utils.js</code> for all our utility functions.</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <p>Although you meant to just share the function <code class="inline">area</code> from <code class="inline">utils.js</code>, in <code class="inline">app.js</code>, you would notice that both <code class="inline">pi</code> and <code class="inline">area</code> are available.</p> <div class="code-section"><!></div> <p>That is because when you declare a variable or a function within a script, it will be available to the <strong>global scope</strong>.</p> <p>The only way to hide it, is to use Immediately Invoked Function Expression (IIFE).</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <p>This is called the <strong>module pattern</strong>. The only way to control what to exposed to the global scope.</p> <blockquote><p><strong>Scoping the variables</strong> within the module is hard, and you can only do it via the <strong>module pattern</strong>.</p></blockquote> <p>If you have noticed, we access <code class="inline">utils</code> freely, because it is defined in the global scope. If you have another module / library that named <code class="inline">utils</code>, they would have conflicted against each other.</p> <p>We want to <em>"import"</em> the modules freely, and renamed it anyway we want, without worrying naming conflicts amongst modules / libraries.</p> <blockquote><p><strong>Importing</strong> without naming conflicts is what we want.</p></blockquote> <p>So I hereby summarize, the "module" problem in JavaScript,</p> <ul><li><strong>Installability</strong> - the ability to install easily</li> <li><strong>Scopability</strong> - the ability of having clearly defined scoped within modules</li> <li><strong>Importability</strong> - the ability to import modules freely without worry</li></ul> <p>Well, I am not sure some of these word existed, I think I might have made up some of them to make it rhyme.</p> <p>The problems above are no longer a concern any more in the 2019 world, yet it is still interesting to see what the JavaScript community has created to solve these problems.</p></section> <section><h2><a href="#installability" id="installability">Installability</a></h2> <blockquote><p>The "how easy is it to install" problem.</p></blockquote> <p>As mentioned in the earlier example, to "install" jQuery into your web app is to download jQuery from their main website. To "install" a different version would mean to visit their "Past Releases" Page to download the specific version you want.</p> <p><span style="display: block; position: relative; padding-top: 56.360%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="jQuery past releases page" title="Visit &quot;Past Releases&quot; to download an older version of jQuery"/></picture></span></p> <p>A "faster" alternative to this, is to get jQuery served from a CDN provider. <a href="https://cdnjs.com/" rel="nofollow">cdnjs.com</a> is a site that catalogues the CDN url for different libraries. The CDN will serve the script faster to the user, because of their delivery network, as well as if multiple sites are using the same CDN url, the file will be cached by browser. And it is faster to "install", as <a href="https://cdnjs.com/" rel="nofollow">cdnjs.com</a> provides a one-click to "Copy as script tag", all you only need to do is to paste it in to your <code class="inline">html</code> file.</p> <p><span style="display: block; position: relative; padding-top: 39.187%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="cdnjs copy as script tag" title="One click to &quot;Copy as script tag&quot;"/></picture></span></p> <p>Parallelly in the <a href="http://nodejs.org/" rel="nofollow">Node.js</a> world, <a href="http://npmjs.com" rel="nofollow">npm</a>, the Node.js Package Manager was created. With npm, it is much easier to install and maintain packages and their version, <em>(a "package" can be seen as a group of JavaScript modules and their description file)</em>, for a Node.js project. All a developer need to do list out the dependencies and their version in <code class="inline">package.json</code> and run <code class="inline">npm install</code>.</p> <p>If you think the <em>problem of installability</em> stops here, well, not quite. See, npm was created for Node.js application, packages that are published to the npm registry was not meant for browser use. The JavaScript "modules" uses "syntax" like the <code class="inline">module.exports</code> and <code class="inline">require</code> which are not readily understandable by the browser. Therefore you can't add a script tag to include files you just installed from npm. <em>(I will explain what <code class="inline">module.exports</code> and <code class="inline">require</code> syntax are in the later part of this article)</em></p> <div class="code-section"><!></div> <p>That's why <a href="https://bower.io" rel="nofollow">bower</a> was created. It is called the package manager for the web, because the "package" you installed from bower are readily to be used in the <code class="inline">html</code>.</p> <p><span style="display: block; position: relative; padding-top: 43.340%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="bower"/></picture></span></p> <div class="code-section"><!></div> <p><em>A typical web application project setup with both bower and npm</em></p> <div class="code-section"><!></div> <p><em>Adding bower packages into index.html</em></p> <p>Bower components for browser libraries and npm packages for build tools, had been a common web app projects setup until the next tool comes up to change it.</p> <p><a href="http://browserify.org/" rel="nofollow">Browserify</a> tries to bring the vast registry of packages from <code class="inline">npm</code> to the web. Browserify is a module bundler, it reads and understands the <code class="inline">require</code> syntax, and tries to bundle all the modules into one file.</p> <p><span style="display: block; position: relative; padding-top: 76.221%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="browserify"/></picture></span></p> <p>With <a href="http://browserify.org/" rel="nofollow">Browserify</a>, and other module bundler, eg <a href="https://webpack.js.org" rel="nofollow">webpack</a>, <a href="https://rollupjs.org/" rel="nofollow">rollup</a> etc, we are now able to freely share code among Node.js and browser application, and use <code class="inline">npm</code> as a package manager for installing and upgrading packages.</p></section> <section><h2><a href="#importability" id="importability">Importability</a></h2> <blockquote><p>The "how easy is it to import" problem.</p></blockquote> <p>Let's recap the problem of <em>"importability"</em> with the example earlier. We mentioned that everything we declare within each file, are available to other files via the global scope. There is no control of what you are importing, the sequence of the importing. At this point of time, each JavaScript files is just a script, until module systems were introduced.</p> <p>With the advent of Node.js, there's a need to <em>require</em> common modules into your JavaScript code. Because in Node.js context, there's no <code class="inline">index.html</code> where you can <em>"insert script tags"</em>. At some point you need to <em>require</em> some external modules, or else you will end up writing a very long JavaScript file.</p> <p>So <a href="http://commonjs.org" rel="nofollow">CommonJS</a> were introduced into Node.js. It allows your JavaScript code to <code class="inline">require</code> and <code class="inline">export</code> other JavaScript modules.</p> <div class="code-section"><!></div> <p><em>the commonjs "require" and "export" syntax</em></p> <p>Note that <code class="inline">require()</code> is <strong>synchronous</strong>.</p> <p>When you call <code class="inline">require('./circle.js')</code>, Node runtime will:</p> <ul><li>find the file you are <code class="inline">require</code>ing</li> <li>parse and eval the content</li> <li>return what is assigned to <code class="inline">exports</code>.</li></ul> <p>But, if we are going to port the <code class="inline">require</code> syntax into the browser, it will not be able to be synchronous. Because, fetching content involves network call, and it will have to be asynchronous. So, it only make sense to have a asynchronous <code class="inline">require</code>:</p> <div class="code-section"><!></div> <p>And this is exactly how <a href="http://www.tysoncadenhead.com/blog/script-loaders/" rel="nofollow"><strong>script loaders</strong></a> work!</p> <p>If you find the concept of script loading similar, that's because it is the exact same concept of dynamic import we have today. In fact, if you look at the code, they have the same mechanics of loading the script asynchronously!</p> <div class="code-section"><!></div> <p>CommonJS's <code class="inline">require</code> statement did not take into consideration of the asynchronicity of the browser land, therefore the JavaScript community came up with another module system, <a href="https://requirejs.org/docs/whyamd.html#amd" rel="nofollow">AMD (Asynchronous Module Definition)</a>.</p> <p>AMD uses an asynchronous <code class="inline">require</code> syntax, that takes a callback that would be called only after the dependency is available.</p> <div class="code-section"><!></div> <p>We have both module system in JavaScript, CommonJS and AMD, with both seemed valid and useful, yet troubling, because it meant to library owners to support both module system, by means such as a unified module definition via <a href="https://github.com/umdjs/umd" rel="nofollow">UMDjs</a>.</p> <p>So, <a href="https://www.ecma-international.org/memento/tc39.htm" rel="nofollow">TC39</a>, the standards body charged with defining the syntax and semantics of ECMAScript decided to introduce the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" rel="nofollow">ES modules</a> in ES6 (ES2015).</p> <p>ES Modules introduced 2 new syntax, the <code class="inline">import</code> and <code class="inline">export</code>.</p> <div class="code-section"><!></div> <p>Although at that point of time, most browser still does not support the syntax. So module bundler, like <a href="https://webpack.js.org" rel="nofollow">webpack</a> came into picture. <a href="https://webpack.js.org" rel="nofollow">webpack</a> transform the code with <code class="inline">import</code> and <code class="inline">export</code> syntax, by concatenating "import"ed modules, and link them together.</p> <p>Now, most <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules#Applying_the_module_to_your_HTML" rel="nofollow">modern browsers have supported <code class="inline">&lt;script type="module"&gt;</code></a>, which means, the <code class="inline">import</code> and <code class="inline">export</code> syntax is supported by default without needing any build tools.</p> <p>Over the years, the JavaScript community have been trying to split JavaScript code into multiple files, and link them together with some module system, such as CommonJS and AMD. <a href="https://www.ecma-international.org/memento/tc39.htm" rel="nofollow">TC39</a> introduced <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" rel="nofollow">ES modules</a> in ES6 (ES2015) to offer an official module syntax in JavaScript, and before browsers supporting the ES modules syntax, we have to rely on build tools such as <a href="https://webpack.js.org" rel="nofollow">webpack</a>. Finally, modern browsers are now supporting <code class="inline">&lt;script type="module"&gt;</code>, which means we can now use <code class="inline">import</code> and <code class="inline">export</code> in our JavaScript application without any configurations.</p></section> <section><h2><a href="#scopability" id="scopability">Scopability</a></h2> <blockquote><p>The "scope pollution" problem.</p></blockquote> <p>There are 2 ways to look at the scope polution problem:</p> <ul><li>2 modules are declaring into the same scope, which might have naming conflicts</li> <li>variables declared within a module is now "public" and available to other modules, which wasn't intended</li></ul> <p>In this aspect, there are 2 solutions in general for the problem, and I am going to bring out 2 different tools for each solution as an example.</p> <p>Firstly, scope naming conflicts can be solved via <a href="https://en.wikipedia.org/wiki/Namespace" rel="nofollow">namespace</a>. If you read the compiled code from <a href="https://developers.google.com/closure/" rel="nofollow">Google Closure Tools</a>, you will find that the built-in libraries from Google Closure Tools are namespaced:</p> <div class="code-section"><!></div> <p><em>Examples from "Building an Application with the Closure Library" tutorial</em></p> <p>Compiled into:</p> <div class="code-section"><!></div> <p>All the code will get concatenated, and declared on the same scope, yet because it is namespace-d, you will have less chance of having a conflict.</p> <p>The other solution for the scope problem, is to wrap each module with a function to create a scope for each module. If you look at AMD's way of writing, you would end up into something like the following:</p> <div class="code-section"><!></div> <p>You have modules wrapped into their own scope, and hence the only way for 2 modules to interact is through the module systems' <code class="inline">import</code> and <code class="inline">export</code>.</p> <p>In terms of "scopeability", the solutions are namespace it or create a new function scope.</p> <p>In fact, these are the 2 different ways module bundlers bundled JavaScript modules into 1 JavaScript file. (which I will explained them further in my future talk).</p></section> <section><h2><a href="#summary" id="summary">Summary</a></h2> <p>We've seen how module system was introduced into JavaScript, and how different tools, standards, or syntax come about in solving the <strong>Installability</strong>, <strong>Scopability</strong> and <strong>Importability</strong> problem.</p></section> <section><h2><a href="#further-readings" id="further-readings">Further Readings</a></h2> <ul><li><a href="https://arstechnica.com/information-technology/2009/12/commonjs-effort-sets-javascript-on-path-for-world-domination/" rel="nofollow">CommonJS effort sets javascript on path for world domination</a></li> <li><a href="https://addyosmani.com/writing-modular-js/" rel="nofollow">Writing Modular JavaScript With AMD, CommonJS & ES Harmony</a></li> <li><a href="https://www.blueskyonmars.com/2009/01/29/what-server-side-javascript-needs/" rel="nofollow">What server side JavaScript needs</a></li> <li><a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/" rel="nofollow">ES Modules: a cartoon deep dive</a></li></ul></section>`,1);function So(rs,A){const ls=Ms(A,["children","$$slots","$$events","$$legacy"]);As(A,!1),Js("blog",{image:Es}),Us(),Ws(rs,Ds(()=>ls,()=>is,{children:(ps,eo)=>{var J=oo(),i=e(Rs(J),2),r=e(s(i),6),cs=s(r);a(cs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/app.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(r);var l=e(r,10),L=s(l),C=s(L),R=s(C),T=e(R);o(C),o(L),o(l);var p=e(l,2),hs=s(p);a(hs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/jquery.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/app.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(p);var c=e(p,10),ds=s(c);a(ds,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/jquery.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/utils.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/app.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(c);var h=e(c,2),ks=s(h);a(ks,()=>`<div class="filename">utils.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> pi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.142</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> pi </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(h);var d=e(h,4),ys=s(d);a(ys,()=>`<div class="filename">app.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 78.55</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// pi is available too!</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(pi); </span><span style="color: var(--shiki-token-comment)">// 3.142</span></span></code></pre>`),o(d);var k=e(d,6),vs=s(k);a(vs,()=>`<div class="filename">utils.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> utils </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// you hide &#96;pi&#96; within the function scope</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> pi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.142</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> pi </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; area &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)();</span></span></code></pre>`),o(k);var $=e(k,2),us=s($);a(us,()=>`<div class="filename">app.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">utils</span><span style="color: var(--shiki-token-function)">.area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 78.55</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(pi); </span><span style="color: var(--shiki-token-comment)">// Reference error, &#96;pi&#96; is not defined</span></span></code></pre>`),o($),n(18),o(i);var y=e(i,2),v=e(s(y),6),U=s(v),M=s(U),D=s(M),W=e(D);o(M),o(U),o(v);var u=e(v,4),E=s(u),N=s(E),B=s(N),z=e(B);o(N),o(E),o(u);var m=e(u,6),ms=s(m);a(ms,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">&lt;!-- This will not work out of the box! --&gt;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/node_modules/foo/bar.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(m);var g=e(m,4),Q=s(g),H=s(Q),P=s(H),G=e(P);o(H),o(Q),o(g);var w=e(g,2),gs=s(w);a(gs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">/project</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  /bower_components</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  /node_modules</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  /app</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  /bower.json</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  /package.json</span></span></code></pre>`),o(w);var f=e(w,4),ws=s(f);a(ws,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;bower_components/jquery/dist/jquery.min.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(f);var F=e(f,8),V=s(F),O=s(V),K=s(O),Z=e(K);o(O),o(V),o(F),n(2),o(y);var b=e(y,2),x=e(s(b),10),fs=s(x);a(fs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./circle&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.pi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.142</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`),o(x);var _=e(x,12),bs=s(_);a(bs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(circle) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// callback when circle is ready</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`),o(_);var j=e(_,6),xs=s(j);a(xs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// script loading</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">load</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;lib/jquery.min.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// dynamic import</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;lib/jquery.min.js&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(callback);</span></span></code></pre>`),o(j);var q=e(j,6),_s=s(q);a(_s,()=>`<div class="filename">main.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&#39;jquery&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;circle&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">($</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> circle) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// we can use &#96;$&#96; and &#96;circle&#96; now!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`),o(q);var Y=e(q,8),js=s(Y);a(js,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// importing &#96;circle&#96; from &#39;./circle&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circle </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// export the constant &#96;PI&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">pi</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.142</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`),o(Y),n(6),o(b);var X=e(b,2),S=e(s(X),12),qs=s(S);a(qs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">goog</span><span style="color: var(--shiki-token-function)">.provide</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tutorial.notepad&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">goog</span><span style="color: var(--shiki-token-function)">.require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;goog.dom&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">tutorial</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">notepad</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">makeNotes</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">goog</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dom</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`),o(S);var I=e(S,6),Ss=s(I);a(Ss,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// goog.provide(&#39;tutorial.notepad&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">tutorial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> tutorial </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">tutorial</span><span style="color: var(--shiki-color-text)">.notepad </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">tutorial</span><span style="color: var(--shiki-color-text)">.notepad </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// goog.require(&#39;goog.dom&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">goog </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> goog </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">goog</span><span style="color: var(--shiki-color-text)">.dom </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">goog</span><span style="color: var(--shiki-color-text)">.dom </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">tutorial</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">notepad</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">makeNotes</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">goog</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dom</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`),o(I);var ss=e(I,6),Is=s(ss);a(Is,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">define</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;goog/dom&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">define</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tutorial/notepad&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;goog/dom&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (googDom) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">makeNotes</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">//...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">goog</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dom</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`),o(ss),n(6),o(X),n(4),Ts(()=>{t(R,"srcset",`${Bs}, ${zs} 2x`),t(T,"src",os),t(T,"srcset",`${os}, ${Ns} 2x`),t(D,"srcset",`${Hs}, ${Ps} 2x`),t(W,"src",es),t(W,"srcset",`${es}, ${Qs} 2x`),t(B,"srcset",`${Fs}, ${Vs} 2x`),t(z,"src",as),t(z,"srcset",`${as}, ${Gs} 2x`),t(P,"srcset",`${Ks}, ${Zs} 2x`),t(G,"src",ts),t(G,"srcset",`${ts}, ${Os} 2x`),t(K,"srcset",`${Xs}, ${so} 2x`),t(Z,"src",ns),t(Z,"srcset",`${ns}, ${Ys} 2x`)}),$s(ps,J)},$$slots:{default:!0}})),Ls()}export{So as component};
