import{s as Dl,d as ce,e as Ol,f as il,n as $l}from"../chunks/scheduler.D6VJxl8L.js";import{S as Vl,i as Al,m as Nl,n as Ul,o as Wl,t as zl,a as Yl,p as Bl,e as n,s as t,H as h,c as a,q as i,h as e,d as r,r as y,g as l,u as m,j as c,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as Fl,a as pl}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Jl}from"../chunks/BlogLayout.BMJM32nZ.js";const Rl=""+new URL("../assets/hero-twitter.BMrKKOqc.jpg",import.meta.url).href;function Kl(Z){let g,z='<p><strong>⚠️ This article was written for Svelte 3/4. For Svelte 5, please read the updated series: <a href="/compile-svelte-5-in-your-head">Compile Svelte 5 in your head</a></strong></p>',O,D,C='<strong>⬅ ⬅  Previously in <a href="/compile-svelte-in-your-head-part-2/">Part 2</a>.</strong>',I,$,re='<a href="/compile-svelte-in-your-head-part-2/">Previously</a>, I detailed how <code class="inline">$$invalidate</code> works, described how bitmask was used in <code class="inline">$$invalidate</code>, and explained how reactive declarations work as well.',zn,B,ke="In this article, we are going to look into 3 DOM related directives:",Yn,F,ve='<li><code class="inline">on:</code> for event handlers</li> <li><code class="inline">bind:</code> for bindings</li> <li><code class="inline">use:</code> for actions</li>',Bn,J,ue="To make sure we are on the same page, let's first explain how these 3 directives work.",Fn,R,de='<h2><a href="#the-on-bind-and-use" id="the-on-bind-and-use">The <code class="inline">on:</code>, <code class="inline">bind:</code> and <code class="inline">use:</code></a></h2>',Jn,V,X,he='<a href="#on-event-handlers" id="on-event-handlers"><code class="inline">on:</code> event handlers</a>',qa,ss,ye='You can use the <code class="inline">on:</code> directive to listen to any event on an element:',Da,ns,Rn,rl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">handleMouseMove</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can pass in as variable --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>mousemove=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleMouseMove<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- or you can inline the event handler --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>mousemove=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can modify event handler with modifiers  --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click|stopPropagation|once=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div></code></pre>',Kn,q,as,me='<a href="#bind-bindings" id="bind-bindings"><code class="inline">bind:</code> bindings</a>',Oa,ts,ge='The <code class="inline">bind:</code> directive allows you to bind a variable to a property of an element.',$a,es,fe="Updating the variable will modifying the property of the element, conversely, modifying the property of the element via interacting with the element will, in turn, update the variable.",Va,os,Gn,kl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name<span class="token punctuation">,</span> yes<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can bind &#96;name&#96; to input.value --></span></div><div class="line"><span class="token comment">&lt;!-- Changing &#96;name&#96; will update input.value to be the value of &#96;name&#96; and --></span></div><div class="line"><span class="token comment">&lt;!-- changing input.value will update &#96;name&#96; to be input.value --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can bind input.checked for a checkbox input --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>yes<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Qn,d,ls,xe='<a href="#use-actions" id="use-actions"><code class="inline">use:</code> actions</a>',Aa,is,we='The <code class="inline">use:</code> directive is called <strong><a href="https://svelte.dev/tutorial/actions" rel="nofollow">&quot;Action&quot;</a></strong>. It provides you an interface to enhance your element.',Na,ps,_e='You pass a function to the <code class="inline">use:</code> directive of an element and the function will be called when your element is mounted.',Ua,cs,be='The function should return an object in which the <code class="inline">destroy</code> method of the object will be called when the element is unmounted.',Wa,rs,Zn,vl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token comment">// do something with the element</span></div><div class="line">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">        <span class="token comment">// cleanup</span></div><div class="line">      <span class="token punctuation">&#125;</span></div><div class="line">    <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething</span> <span class="token punctuation">/></span></span></div></code></pre>',za,ks,Ce="This is useful when you want to interface with 3rd-party libraries:",Ya,vs,Xn,ul=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">import</span> Draggable <span class="token keyword">from</span> <span class="token string">'the-draggable-library'</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    <span class="token keyword">const</span> draggable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line highlight">    draggable<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line dim">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">        draggable<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">      <span class="token punctuation">&#125;</span></div><div class="line dim">    <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething</span> <span class="token punctuation">/></span></span></div></code></pre>`,Ba,us,Te='You can pass in parameters to the <code class="inline">use:</code> directive, to bring in reactivity into your actions',Fa,ds,sa,dl=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">import</span> Draggable <span class="token keyword">from</span> <span class="token string">'the-draggable-library'</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">  <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line highlight">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    <span class="token keyword">const</span> draggable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    draggable<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">      <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">        draggable<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line highlight">      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></div><div class="line dim">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">        draggable<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">      <span class="token punctuation">&#125;</span></div><div class="line dim">    <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim">  Foo</div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">.</span>bar<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim">  Bar</div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></div></code></pre>`,Ja,hs,Le="You can visit Svelte's interactive tutorial to learn more about:",Ra,ys,He='<li><a href="https://svelte.dev/tutorial/dom-events" rel="nofollow">event handlers with <code class="inline">on:</code></a></li> <li><a href="https://svelte.dev/tutorial/text-inputs" rel="nofollow">bindings with <code class="inline">bind:</code></a></li> <li><a href="https://svelte.dev/tutorial/actions" rel="nofollow">actions with <code class="inline">use:</code></a></li>',na,K,Me='<h2><a href="#the-vanilla-js" id="the-vanilla-js">The Vanilla JS</a></h2> <p>Now, let&#39;s refresh ourselves with how we can implement an event handler, bindings, and actions without using any framework.</p>',aa,M,ms,Pe='<a href="#event-handler" id="event-handler">Event handler</a>',Ka,gs,Ee='As <a href="/compile-svelte-in-your-head-part-1/#listen-for-click-events-on-an-element">mentioned in the Part 1 of the series</a>, we can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow">element.addEventListener</a> to listen to events.',Ga,fs,ta,hl='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick);</span></span></code></pre>',Qa,xs,Se="The event listener takes in an optional 3rd argument, which allows you to specifies the characteristics of the event handler:",Za,ws,ea,yl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  capture</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// triggered before any child element</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// triggered at most once</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// indicates that will never call &#96;preventDefault&#96; to improve performance</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,oa,A,_s,je='<a href="#event-preventdefault" id="event-preventdefault">event.preventDefault</a>',Xa,bs,Ie='<a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault" rel="nofollow">event.preventDefault</a> allows you to prevent the default behavior of the event, for example submitting form for <code class="inline">&lt;button type=&quot;submit&quot; /&gt;</code> or navigating to the target for <code class="inline">&lt;a href=&quot;...&quot;&gt;</code>.',st,Cs,la,ml=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-token-function)">.preventDefault</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,ia,P,Ts,qe='<a href="#event-stoppropagation" id="event-stoppropagation">event.stopPropagation</a>',nt,Ls,De='<a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation" rel="nofollow">event.stopPropagation</a> allows you to prevent event to continue propagate.',at,Hs,pa,gl=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></div><div class="line dim">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click not triggered'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim"><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>`,tt,Ms,Oe='To remove the event listener, you need to call <code class="inline">element.removeEventListener</code> with the same event <code class="inline">type</code>, <code class="inline">listener</code> and <code class="inline">capture</code>/<code class="inline">useCapture</code> flag. You can check out the <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#Matching_event_listeners_for_removal" rel="nofollow">MDN docs on &quot;Matching event listeners for removal&quot;</a>.',et,Ps,ca,fl='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick);</span></span></code></pre>',ra,u,Es,$e='<a href="#bindings" id="bindings">Bindings</a>',ot,Ss,Ve="Binding is to synchronise between the value of a variable and a property of an element.",lt,js,Ae="To synchronise the variable to a property of an element, we need to observe the value of the variable. When it changes, apply it to the property of the element.",it,Is,Ne='<em>You can check out my previous article <a href="/reactivity-in-web-frameworks-the-when/">&quot;Reactivity in Web Frameworks&quot;</a> on how we get notified when the value of a variable changed.</em>',pt,qs,Ue="On the other hand, to synchronise the property of an element to a variable, we <strong>listen to an event of the element</strong>, depending on the property, and update the value of the variable when it happens.",ct,Ds,ka,xl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// binding variable &#96;checked&#96; with the checkbox &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> checked;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#checkbox&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// synchronise variable &#96;checked&#96; to checkbox &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">observe</span><span style="color: var(--shiki-color-text)">(checked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// synchronise checkbox &#96;checked&#96; property to variable &#96;checked&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// listen to &#96;change&#96; event for &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,rt,Os,We="Some observations:",kt,$s,ze="<strong>- The name of the event and the property name of the element may not be the same.</strong>",vt,Vs,Ye='In this example, we listen to <code class="inline">&quot;change&quot;</code> event for the checkbox <code class="inline">checked</code> property.',ut,As,Be="<strong>- It is almost impossible to bind a property of an element, if there&#39;s no event fired from the element to indicate the property has changed</strong>",dt,Ns,Fe='A recent example I found out is the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement" rel="nofollow">HTMLDialogElement</a>. It has <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close_event" rel="nofollow"><code class="inline">&quot;close&quot;</code></a> but not <code class="inline">&quot;open&quot;</code> event, which makes it hard to implement <code class="inline">bind:open</code> on the dialog element.',ht,Us,Je='Maybe an alternative would be using <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver" rel="nofollow">MutationObserver</a>, which I haven&#39;t seen any usage of it in Svelte codebase yet.',va,E,Ws,Re='<a href="#actions" id="actions">Actions</a>',yt,zs,Ke="Action is a function that gets called when your element is created and mounted onto the DOM.",mt,Ys,Ge="The function returns an object, with 2 methods:",gt,Bs,Qe='<li><code class="inline">update</code>, which gets called when the parameters change</li> <li><code class="inline">destroy</code>, which gets called when the element is removed from the DOM</li>',ft,Fs,ua,wl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">actionFn</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parameter) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(newParameter) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">destroy</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When element is mounted onto the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> parameter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">actionFn</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parameter);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When parameter changes</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">parameter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(parameter);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When element is removed from the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,da,G,Ze='<h2><a href="#the-compiled-js" id="the-compiled-js">The Compiled JS</a></h2> <p>Now let&#39;s take look at how Svelte compiles <code class="inline">on:</code>, <code class="inline">bind:</code> and <code class="inline">use:</code> directives into output JavaScript.</p>',ha,w,Js,Xe='<a href="#on-directive" id="on-directive"><code class="inline">on:</code> directive</a>',xt,Rs,ya,_l='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',wt,Ks,so='<a href="https://svelte.dev/repl/0ea0c22e9fd648518cfc1231835b0f05" rel="nofollow">Svelte REPL</a>',_t,Gs,no="The output code:",bt,Qs,ma,bl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      input </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;input&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onChange*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onChange</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [onChange];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,Ct,Zs,ao="Some observations:",Tt,Xs,to='<li>Svelte adds event handler, <code class="inline">listen(...)</code>, in the <strong>_m_ount</strong> method.</li> <li>Svelte removes event handler, <code class="inline">dispose()</code>, in the <strong>_d_estroy</strong> method.</li>',Lt,sn,eo='As pointed out in <a href="/compile-svelte-in-your-head-part-1/#listen-and-dispose">Part 1 #listen and dispose</a>, to optimise for minification, the <code class="inline">dispose</code> variable could be a function or an array of functions, depending on having one or many event handlers.',Ht,nn,oo='We will discuss <code class="inline">remount</code> in the future, as it is related to remounting elements while reordering items within each block.',ga,f,an,lo='<a href="#event-modifiers" id="event-modifiers">Event modifiers</a>',Mt,tn,io="Event handlers can have modifiers that alter their behavior.",Pt,en,fa,Cl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		i<span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click|preventDefault=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|stopPropagation=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|once=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|capture=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- Chain multiple modifiers --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click|preventDefault|stopPropagation|once|capture=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Et,on,po='<a href="https://svelte.dev/repl/11fffa988c1f49239c005619c3b506c5" rel="nofollow">Svelte REPL</a>',St,ln,co="The output code:",jt,pn,xa,Tl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stop_propagation</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          button4</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">stop_propagation</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          &#123; once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> capture</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      ];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,It,cn,ro="Some observations:",qt,rn,ko='<li>Svelte handles different modifiers differently.</li> <li>For <code class="inline">capture</code>, <code class="inline">once</code>, and <code class="inline">passive</code> modifiers, which they are part of the options for <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow">element.addEventListener</a>, they will be passed as options into the <code class="inline">listen</code> function.</li> <li>For <code class="inline">stopPropagation</code>, <code class="inline">preventDefault</code>, and <code class="inline">self</code> modifiers, the event handler is decorated with respective decorator functions.</li>',Dt,kn,vo='An example implementation of the <code class="inline">prevent_default</code> decorator function:',Ot,vn,wa,Ll=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(event) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-token-function)">.preventDefault</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_a,T,un,uo='<a href="#bind-directive" id="bind-directive"><code class="inline">bind:</code> directive</a>',$t,dn,ba,Hl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">updateChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked</span> <span class="token punctuation">/></span></span></div></code></pre>',Vt,hn,ho='<a href="https://svelte.dev/repl/22ff0420e32f427c8b20e878a44170d3" rel="nofollow">Svelte REPL</a>',At,yn,yo="The output code:",Nt,mn,Ca,Ml=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*input_change_handler*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateChecked</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">input_change_handler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.checked;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> checked);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [checked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input_change_handler];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ut,gn,mo="Some observations:",Wt,fn,go='<li>To synchronise the value of the variable to the property of the element:<ul><li>Svelte wraps the update of the variable <code class="inline">checked</code> with <code class="inline">$$invalidate(...)</code></li> <li>In the <strong>u_p_date</strong> method, if the variable <code class="inline">checked</code> is updated, Svelte sets <code class="inline">input.checked</code> to the value of the variable <code class="inline">checked</code>.</li></ul></li> <li>To syncrhonise the property of the element to the variable<ul><li>Svelte creates an input handler that reads the <code class="inline">this.checked</code> property of the input and calls <code class="inline">$$invalidate(...)</code> to update it.</li> <li>Svelte sets up <code class="inline">listen(...)</code> in the <strong>_m_ount</strong> method and <code class="inline">dispose(...)</code> in the <strong>_d_estroy</strong> method for the input handler</li></ul></li>',Ta,L,xn,fo='<a href="#use-directive" id="use-directive"><code class="inline">use:</code> directive</a>',zt,wn,La,Pl=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">updateI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>action=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>`,Yt,_n,xo='<a href="https://svelte.dev/repl/88bbecb8b86943fd80d9d428961251ae" rel="nofollow">Svelte REPL</a>',Bt,bn,wo="The output code:",Ft,Cn,Ha,El=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> action_action;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">action_destroyer</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        (action_action </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">action</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (action_action </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">is_function</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">action_action</span><span style="color: var(--shiki-color-text)">.update) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">action_action</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(div);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jt,Tn,_o="Some observations:",Rt,Ln,bo='<li>Creating <code class="inline">action_action</code> object by calling the <code class="inline">action</code> function in the <strong>_m_out</strong> method</li> <li>When the paramter change, call the <code class="inline">action_action.update</code> method with the updated parameter in the <strong>u_p_date</strong> method</li> <li><code class="inline">action_destroyer</code> returns the <code class="inline">dispose</code> function. The <code class="inline">dispose</code> function makes sure that <code class="inline">action_action.destroy</code> is a function before calling it.</li>',Ma,k,Hn,Co='<a href="#the-order-of-directives" id="the-order-of-directives">The order of directives</a>',Kt,Mn,To='As both the <code class="inline">bind:</code> and the <code class="inline">on:</code> directives add event listeners to the element, the order of adding event listener may have nuance side effects.',Gt,Pn,Lo="Imagine the following scenario:",Qt,En,Pa,Sl=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token string">''</span></div><div class="line">  <span class="token keyword">let</span> after <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token comment">// modifying the input.value</span></div><div class="line">    event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind after adding input listener --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">on:</span>input=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>uppercase<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind before adding input listener --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">on:</span>input=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>uppercase<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span></div></code></pre>`,Zt,Sn,Ho='The <code class="inline">input.value</code> accessed by the implicit event handler of the <code class="inline">bind:</code> directive depends on whether <code class="inline">on:input</code> handler gets called before or after.',Xt,jn,Mo='If the implicit event handler of the <code class="inline">bind:</code> directive is called before the event handler, the bound value is the value of the input before applying the <code class="inline">toUpperCase()</code> transformation.',se,In,Po='Although <code class="inline">action:</code> directive itself does not add event listener to the element, but it is possible to be added by the user code:',ne,qn,Ea,jl=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token string">''</span></div><div class="line">  <span class="token keyword">let</span> after <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">uppercaseAction</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">      event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></div><div class="line">    <span class="token punctuation">&#125;</span></div><div class="line">    element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">        element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">      <span class="token punctuation">&#125;</span></div><div class="line">    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind after adding action --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">use:</span>uppercase</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind before adding action --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">use:</span>uppercase</span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span></div></code></pre>`,ae,Dn,Eo='Although it is not officially documented, <em>(I couldn&#39;t find it on the docs)</em>, <strong>the order of declaring the directives <code class="inline">on:</code>, <code class="inline">bind:</code> and <code class="inline">use:</code> on an element does matter</strong> to provide a consistent behavior.',te,On,So="Try out the following example in the REPL:",ee,$n,Sa,Il='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> checked<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></div><div class="line">  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>checkbox</span></div><div class="line">  <span class="token attr-name"><span class="token namespace">bind:</span>checked</span></div><div class="line">  <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token attr-name"><span class="token namespace">use:</span>action</span></div><div class="line"><span class="token punctuation">/></span></span></div></code></pre>',oe,Vn,jo='<a href="https://svelte.dev/repl/f06a8a59840c418b86c43c2875d4b274" rel="nofollow">Svelte REPL</a>',le,An,Io='Try reordering the <code class="inline">bind:</code>, <code class="inline">on:</code> and <code class="inline">use:</code> directives and see how it affects the output JS:',ie,Nn,ja,ql=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> action_action;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// bind:checked</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*input_change_handler*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// on:change=&#123;onChange&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> onChange)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// use:action</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">action_destroyer</span><span style="color: var(--shiki-color-text)">((action_action </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">action</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      ];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pe,Un,qo='If you are interested to learn more about ordering directives, the edge cases it fixed and the regression bugs it caused, you can start with <a href="https://github.com/sveltejs/svelte/issues/2446" rel="nofollow">this Github issue</a>.',Ia,Q,Do='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>In this article, we explored how <code class="inline">on:</code>, <code class="inline">bind:</code> and <code class="inline">use:</code> directives work.</p> <p>We first looked at how we can implement them without using any framework. After that, we walked through how Svelte compiles the directives into JavaScript.</p> <p>We&#39;ve also talked about how the order of declaring directives on an element matters.</p> <p>If you wish to know more, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>I&#39;ll post it on Twitter when the next part is ready, where I&#39;ll be covering <a href="https://svelte.dev/tutorial/if-blocks" rel="nofollow">logic blocks</a>, <a href="https://svelte.dev/tutorial/slots" rel="nofollow">slots</a>, <a href="https://svelte.dev/tutorial/context-api" rel="nofollow">context</a>, and many others.</p> <p><strong>⬅ ⬅  Previously in <a href="/compile-svelte-in-your-head-part-2/">Part 2</a>.</strong></p>';return{c(){g=n("blockquote"),g.innerHTML=z,O=t(),D=n("p"),D.innerHTML=C,I=t(),$=n("p"),$.innerHTML=re,zn=t(),B=n("p"),B.textContent=ke,Yn=t(),F=n("ul"),F.innerHTML=ve,Bn=t(),J=n("p"),J.textContent=ue,Fn=t(),R=n("section"),R.innerHTML=de,Jn=t(),V=n("section"),X=n("h3"),X.innerHTML=he,qa=t(),ss=n("p"),ss.innerHTML=ye,Da=t(),ns=n("div"),Rn=new h(!1),Kn=t(),q=n("section"),as=n("h3"),as.innerHTML=me,Oa=t(),ts=n("p"),ts.innerHTML=ge,$a=t(),es=n("p"),es.textContent=fe,Va=t(),os=n("div"),Gn=new h(!1),Qn=t(),d=n("section"),ls=n("h3"),ls.innerHTML=xe,Aa=t(),is=n("p"),is.innerHTML=we,Na=t(),ps=n("p"),ps.innerHTML=_e,Ua=t(),cs=n("p"),cs.innerHTML=be,Wa=t(),rs=n("div"),Zn=new h(!1),za=t(),ks=n("p"),ks.textContent=Ce,Ya=t(),vs=n("div"),Xn=new h(!1),Ba=t(),us=n("p"),us.innerHTML=Te,Fa=t(),ds=n("div"),sa=new h(!1),Ja=t(),hs=n("p"),hs.textContent=Le,Ra=t(),ys=n("ul"),ys.innerHTML=He,na=t(),K=n("section"),K.innerHTML=Me,aa=t(),M=n("section"),ms=n("h3"),ms.innerHTML=Pe,Ka=t(),gs=n("p"),gs.innerHTML=Ee,Ga=t(),fs=n("div"),ta=new h(!1),Qa=t(),xs=n("p"),xs.textContent=Se,Za=t(),ws=n("div"),ea=new h(!1),oa=t(),A=n("section"),_s=n("h4"),_s.innerHTML=je,Xa=t(),bs=n("p"),bs.innerHTML=Ie,st=t(),Cs=n("div"),la=new h(!1),ia=t(),P=n("section"),Ts=n("h4"),Ts.innerHTML=qe,nt=t(),Ls=n("p"),Ls.innerHTML=De,at=t(),Hs=n("div"),pa=new h(!1),tt=t(),Ms=n("p"),Ms.innerHTML=Oe,et=t(),Ps=n("div"),ca=new h(!1),ra=t(),u=n("section"),Es=n("h3"),Es.innerHTML=$e,ot=t(),Ss=n("p"),Ss.textContent=Ve,lt=t(),js=n("p"),js.textContent=Ae,it=t(),Is=n("p"),Is.innerHTML=Ne,pt=t(),qs=n("p"),qs.innerHTML=Ue,ct=t(),Ds=n("div"),ka=new h(!1),rt=t(),Os=n("p"),Os.textContent=We,kt=t(),$s=n("p"),$s.innerHTML=ze,vt=t(),Vs=n("p"),Vs.innerHTML=Ye,ut=t(),As=n("p"),As.innerHTML=Be,dt=t(),Ns=n("p"),Ns.innerHTML=Fe,ht=t(),Us=n("p"),Us.innerHTML=Je,va=t(),E=n("section"),Ws=n("h3"),Ws.innerHTML=Re,yt=t(),zs=n("p"),zs.textContent=Ke,mt=t(),Ys=n("p"),Ys.textContent=Ge,gt=t(),Bs=n("ul"),Bs.innerHTML=Qe,ft=t(),Fs=n("div"),ua=new h(!1),da=t(),G=n("section"),G.innerHTML=Ze,ha=t(),w=n("section"),Js=n("h3"),Js.innerHTML=Xe,xt=t(),Rs=n("div"),ya=new h(!1),wt=t(),Ks=n("p"),Ks.innerHTML=so,_t=t(),Gs=n("p"),Gs.textContent=no,bt=t(),Qs=n("div"),ma=new h(!1),Ct=t(),Zs=n("p"),Zs.textContent=ao,Tt=t(),Xs=n("ul"),Xs.innerHTML=to,Lt=t(),sn=n("p"),sn.innerHTML=eo,Ht=t(),nn=n("p"),nn.innerHTML=oo,ga=t(),f=n("section"),an=n("h4"),an.innerHTML=lo,Mt=t(),tn=n("p"),tn.textContent=io,Pt=t(),en=n("div"),fa=new h(!1),Et=t(),on=n("p"),on.innerHTML=po,St=t(),ln=n("p"),ln.textContent=co,jt=t(),pn=n("div"),xa=new h(!1),It=t(),cn=n("p"),cn.textContent=ro,qt=t(),rn=n("ul"),rn.innerHTML=ko,Dt=t(),kn=n("p"),kn.innerHTML=vo,Ot=t(),vn=n("div"),wa=new h(!1),_a=t(),T=n("section"),un=n("h3"),un.innerHTML=uo,$t=t(),dn=n("div"),ba=new h(!1),Vt=t(),hn=n("p"),hn.innerHTML=ho,At=t(),yn=n("p"),yn.textContent=yo,Nt=t(),mn=n("div"),Ca=new h(!1),Ut=t(),gn=n("p"),gn.textContent=mo,Wt=t(),fn=n("ul"),fn.innerHTML=go,Ta=t(),L=n("section"),xn=n("h3"),xn.innerHTML=fo,zt=t(),wn=n("div"),La=new h(!1),Yt=t(),_n=n("p"),_n.innerHTML=xo,Bt=t(),bn=n("p"),bn.textContent=wo,Ft=t(),Cn=n("div"),Ha=new h(!1),Jt=t(),Tn=n("p"),Tn.textContent=_o,Rt=t(),Ln=n("ul"),Ln.innerHTML=bo,Ma=t(),k=n("section"),Hn=n("h3"),Hn.innerHTML=Co,Kt=t(),Mn=n("p"),Mn.innerHTML=To,Gt=t(),Pn=n("p"),Pn.textContent=Lo,Qt=t(),En=n("div"),Pa=new h(!1),Zt=t(),Sn=n("p"),Sn.innerHTML=Ho,Xt=t(),jn=n("p"),jn.innerHTML=Mo,se=t(),In=n("p"),In.innerHTML=Po,ne=t(),qn=n("div"),Ea=new h(!1),ae=t(),Dn=n("p"),Dn.innerHTML=Eo,te=t(),On=n("p"),On.textContent=So,ee=t(),$n=n("div"),Sa=new h(!1),oe=t(),Vn=n("p"),Vn.innerHTML=jo,le=t(),An=n("p"),An.innerHTML=Io,ie=t(),Nn=n("div"),ja=new h(!1),pe=t(),Un=n("p"),Un.innerHTML=qo,Ia=t(),Q=n("section"),Q.innerHTML=Do,this.h()},l(o){g=a(o,"BLOCKQUOTE",{"data-svelte-h":!0}),i(g)!=="svelte-2295x0"&&(g.innerHTML=z),O=e(o),D=a(o,"P",{"data-svelte-h":!0}),i(D)!=="svelte-14kr5yt"&&(D.innerHTML=C),I=e(o),$=a(o,"P",{"data-svelte-h":!0}),i($)!=="svelte-208omw"&&($.innerHTML=re),zn=e(o),B=a(o,"P",{"data-svelte-h":!0}),i(B)!=="svelte-vqhfbv"&&(B.textContent=ke),Yn=e(o),F=a(o,"UL",{"data-svelte-h":!0}),i(F)!=="svelte-1o5wnde"&&(F.innerHTML=ve),Bn=e(o),J=a(o,"P",{"data-svelte-h":!0}),i(J)!=="svelte-g00ewi"&&(J.textContent=ue),Fn=e(o),R=a(o,"SECTION",{"data-svelte-h":!0}),i(R)!=="svelte-13j22n3"&&(R.innerHTML=de),Jn=e(o),V=a(o,"SECTION",{});var p=r(V);X=a(p,"H3",{"data-svelte-h":!0}),i(X)!=="svelte-13qgpkh"&&(X.innerHTML=he),qa=e(p),ss=a(p,"P",{"data-svelte-h":!0}),i(ss)!=="svelte-uaw531"&&(ss.innerHTML=ye),Da=e(p),ns=a(p,"DIV",{class:!0});var Oo=r(ns);Rn=y(Oo,!1),Oo.forEach(l),p.forEach(l),Kn=e(o),q=a(o,"SECTION",{});var Y=r(q);as=a(Y,"H3",{"data-svelte-h":!0}),i(as)!=="svelte-19jicb0"&&(as.innerHTML=me),Oa=e(Y),ts=a(Y,"P",{"data-svelte-h":!0}),i(ts)!=="svelte-1uw0gp9"&&(ts.innerHTML=ge),$a=e(Y),es=a(Y,"P",{"data-svelte-h":!0}),i(es)!=="svelte-dueqsk"&&(es.textContent=fe),Va=e(Y),os=a(Y,"DIV",{class:!0});var $o=r(os);Gn=y($o,!1),$o.forEach(l),Y.forEach(l),Qn=e(o),d=a(o,"SECTION",{});var _=r(d);ls=a(_,"H3",{"data-svelte-h":!0}),i(ls)!=="svelte-ccbbzp"&&(ls.innerHTML=xe),Aa=e(_),is=a(_,"P",{"data-svelte-h":!0}),i(is)!=="svelte-1ieq8bf"&&(is.innerHTML=we),Na=e(_),ps=a(_,"P",{"data-svelte-h":!0}),i(ps)!=="svelte-1085r0l"&&(ps.innerHTML=_e),Ua=e(_),cs=a(_,"P",{"data-svelte-h":!0}),i(cs)!=="svelte-1bi4zgy"&&(cs.innerHTML=be),Wa=e(_),rs=a(_,"DIV",{class:!0});var Vo=r(rs);Zn=y(Vo,!1),Vo.forEach(l),za=e(_),ks=a(_,"P",{"data-svelte-h":!0}),i(ks)!=="svelte-4ryt9g"&&(ks.textContent=Ce),Ya=e(_),vs=a(_,"DIV",{class:!0});var Ao=r(vs);Xn=y(Ao,!1),Ao.forEach(l),Ba=e(_),us=a(_,"P",{"data-svelte-h":!0}),i(us)!=="svelte-1lqded4"&&(us.innerHTML=Te),Fa=e(_),ds=a(_,"DIV",{class:!0});var No=r(ds);sa=y(No,!1),No.forEach(l),Ja=e(_),hs=a(_,"P",{"data-svelte-h":!0}),i(hs)!=="svelte-3em6b4"&&(hs.textContent=Le),Ra=e(_),ys=a(_,"UL",{"data-svelte-h":!0}),i(ys)!=="svelte-zv9yt"&&(ys.innerHTML=He),_.forEach(l),na=e(o),K=a(o,"SECTION",{"data-svelte-h":!0}),i(K)!=="svelte-o316wj"&&(K.innerHTML=Me),aa=e(o),M=a(o,"SECTION",{});var N=r(M);ms=a(N,"H3",{"data-svelte-h":!0}),i(ms)!=="svelte-1yr17ym"&&(ms.innerHTML=Pe),Ka=e(N),gs=a(N,"P",{"data-svelte-h":!0}),i(gs)!=="svelte-1s2540q"&&(gs.innerHTML=Ee),Ga=e(N),fs=a(N,"DIV",{class:!0});var Uo=r(fs);ta=y(Uo,!1),Uo.forEach(l),Qa=e(N),xs=a(N,"P",{"data-svelte-h":!0}),i(xs)!=="svelte-utmx5m"&&(xs.textContent=Se),Za=e(N),ws=a(N,"DIV",{class:!0});var Wo=r(ws);ea=y(Wo,!1),Wo.forEach(l),N.forEach(l),oa=e(o),A=a(o,"SECTION",{});var Wn=r(A);_s=a(Wn,"H4",{"data-svelte-h":!0}),i(_s)!=="svelte-3u2vdp"&&(_s.innerHTML=je),Xa=e(Wn),bs=a(Wn,"P",{"data-svelte-h":!0}),i(bs)!=="svelte-84dsip"&&(bs.innerHTML=Ie),st=e(Wn),Cs=a(Wn,"DIV",{class:!0});var zo=r(Cs);la=y(zo,!1),zo.forEach(l),Wn.forEach(l),ia=e(o),P=a(o,"SECTION",{});var U=r(P);Ts=a(U,"H4",{"data-svelte-h":!0}),i(Ts)!=="svelte-16sd462"&&(Ts.innerHTML=qe),nt=e(U),Ls=a(U,"P",{"data-svelte-h":!0}),i(Ls)!=="svelte-1og8ldk"&&(Ls.innerHTML=De),at=e(U),Hs=a(U,"DIV",{class:!0});var Yo=r(Hs);pa=y(Yo,!1),Yo.forEach(l),tt=e(U),Ms=a(U,"P",{"data-svelte-h":!0}),i(Ms)!=="svelte-vkiotr"&&(Ms.innerHTML=Oe),et=e(U),Ps=a(U,"DIV",{class:!0});var Bo=r(Ps);ca=y(Bo,!1),Bo.forEach(l),U.forEach(l),ra=e(o),u=a(o,"SECTION",{});var x=r(u);Es=a(x,"H3",{"data-svelte-h":!0}),i(Es)!=="svelte-1gxd0hc"&&(Es.innerHTML=$e),ot=e(x),Ss=a(x,"P",{"data-svelte-h":!0}),i(Ss)!=="svelte-v1uke0"&&(Ss.textContent=Ve),lt=e(x),js=a(x,"P",{"data-svelte-h":!0}),i(js)!=="svelte-vsg8o9"&&(js.textContent=Ae),it=e(x),Is=a(x,"P",{"data-svelte-h":!0}),i(Is)!=="svelte-1a38h6v"&&(Is.innerHTML=Ne),pt=e(x),qs=a(x,"P",{"data-svelte-h":!0}),i(qs)!=="svelte-boua4o"&&(qs.innerHTML=Ue),ct=e(x),Ds=a(x,"DIV",{class:!0});var Fo=r(Ds);ka=y(Fo,!1),Fo.forEach(l),rt=e(x),Os=a(x,"P",{"data-svelte-h":!0}),i(Os)!=="svelte-yujbal"&&(Os.textContent=We),kt=e(x),$s=a(x,"P",{"data-svelte-h":!0}),i($s)!=="svelte-f4qr4g"&&($s.innerHTML=ze),vt=e(x),Vs=a(x,"P",{"data-svelte-h":!0}),i(Vs)!=="svelte-1gxrcw"&&(Vs.innerHTML=Ye),ut=e(x),As=a(x,"P",{"data-svelte-h":!0}),i(As)!=="svelte-onrh1t"&&(As.innerHTML=Be),dt=e(x),Ns=a(x,"P",{"data-svelte-h":!0}),i(Ns)!=="svelte-kbc6sq"&&(Ns.innerHTML=Fe),ht=e(x),Us=a(x,"P",{"data-svelte-h":!0}),i(Us)!=="svelte-wbg1xx"&&(Us.innerHTML=Je),x.forEach(l),va=e(o),E=a(o,"SECTION",{});var W=r(E);Ws=a(W,"H3",{"data-svelte-h":!0}),i(Ws)!=="svelte-i416cj"&&(Ws.innerHTML=Re),yt=e(W),zs=a(W,"P",{"data-svelte-h":!0}),i(zs)!=="svelte-w5vttz"&&(zs.textContent=Ke),mt=e(W),Ys=a(W,"P",{"data-svelte-h":!0}),i(Ys)!=="svelte-kqg8om"&&(Ys.textContent=Ge),gt=e(W),Bs=a(W,"UL",{"data-svelte-h":!0}),i(Bs)!=="svelte-1l1nslu"&&(Bs.innerHTML=Qe),ft=e(W),Fs=a(W,"DIV",{class:!0});var Jo=r(Fs);ua=y(Jo,!1),Jo.forEach(l),W.forEach(l),da=e(o),G=a(o,"SECTION",{"data-svelte-h":!0}),i(G)!=="svelte-zjy4nl"&&(G.innerHTML=Ze),ha=e(o),w=a(o,"SECTION",{});var H=r(w);Js=a(H,"H3",{"data-svelte-h":!0}),i(Js)!=="svelte-al87p9"&&(Js.innerHTML=Xe),xt=e(H),Rs=a(H,"DIV",{class:!0});var Ro=r(Rs);ya=y(Ro,!1),Ro.forEach(l),wt=e(H),Ks=a(H,"P",{"data-svelte-h":!0}),i(Ks)!=="svelte-1cshwzk"&&(Ks.innerHTML=so),_t=e(H),Gs=a(H,"P",{"data-svelte-h":!0}),i(Gs)!=="svelte-1qed6n7"&&(Gs.textContent=no),bt=e(H),Qs=a(H,"DIV",{class:!0});var Ko=r(Qs);ma=y(Ko,!1),Ko.forEach(l),Ct=e(H),Zs=a(H,"P",{"data-svelte-h":!0}),i(Zs)!=="svelte-yujbal"&&(Zs.textContent=ao),Tt=e(H),Xs=a(H,"UL",{"data-svelte-h":!0}),i(Xs)!=="svelte-ddhb0i"&&(Xs.innerHTML=to),Lt=e(H),sn=a(H,"P",{"data-svelte-h":!0}),i(sn)!=="svelte-3v1fjh"&&(sn.innerHTML=eo),Ht=e(H),nn=a(H,"P",{"data-svelte-h":!0}),i(nn)!=="svelte-1e2gx9l"&&(nn.innerHTML=oo),H.forEach(l),ga=e(o),f=a(o,"SECTION",{});var b=r(f);an=a(b,"H4",{"data-svelte-h":!0}),i(an)!=="svelte-u7o3jo"&&(an.innerHTML=lo),Mt=e(b),tn=a(b,"P",{"data-svelte-h":!0}),i(tn)!=="svelte-m9kjam"&&(tn.textContent=io),Pt=e(b),en=a(b,"DIV",{class:!0});var Go=r(en);fa=y(Go,!1),Go.forEach(l),Et=e(b),on=a(b,"P",{"data-svelte-h":!0}),i(on)!=="svelte-xqw0gb"&&(on.innerHTML=po),St=e(b),ln=a(b,"P",{"data-svelte-h":!0}),i(ln)!=="svelte-1qed6n7"&&(ln.textContent=co),jt=e(b),pn=a(b,"DIV",{class:!0});var Qo=r(pn);xa=y(Qo,!1),Qo.forEach(l),It=e(b),cn=a(b,"P",{"data-svelte-h":!0}),i(cn)!=="svelte-yujbal"&&(cn.textContent=ro),qt=e(b),rn=a(b,"UL",{"data-svelte-h":!0}),i(rn)!=="svelte-1uz16gs"&&(rn.innerHTML=ko),Dt=e(b),kn=a(b,"P",{"data-svelte-h":!0}),i(kn)!=="svelte-1cewji1"&&(kn.innerHTML=vo),Ot=e(b),vn=a(b,"DIV",{class:!0});var Zo=r(vn);wa=y(Zo,!1),Zo.forEach(l),b.forEach(l),_a=e(o),T=a(o,"SECTION",{});var S=r(T);un=a(S,"H3",{"data-svelte-h":!0}),i(un)!=="svelte-1qfc53"&&(un.innerHTML=uo),$t=e(S),dn=a(S,"DIV",{class:!0});var Xo=r(dn);ba=y(Xo,!1),Xo.forEach(l),Vt=e(S),hn=a(S,"P",{"data-svelte-h":!0}),i(hn)!=="svelte-1p8wr67"&&(hn.innerHTML=ho),At=e(S),yn=a(S,"P",{"data-svelte-h":!0}),i(yn)!=="svelte-1qed6n7"&&(yn.textContent=yo),Nt=e(S),mn=a(S,"DIV",{class:!0});var sl=r(mn);Ca=y(sl,!1),sl.forEach(l),Ut=e(S),gn=a(S,"P",{"data-svelte-h":!0}),i(gn)!=="svelte-yujbal"&&(gn.textContent=mo),Wt=e(S),fn=a(S,"UL",{"data-svelte-h":!0}),i(fn)!=="svelte-jei7kp"&&(fn.innerHTML=go),S.forEach(l),Ta=e(o),L=a(o,"SECTION",{});var j=r(L);xn=a(j,"H3",{"data-svelte-h":!0}),i(xn)!=="svelte-1u34fo3"&&(xn.innerHTML=fo),zt=e(j),wn=a(j,"DIV",{class:!0});var nl=r(wn);La=y(nl,!1),nl.forEach(l),Yt=e(j),_n=a(j,"P",{"data-svelte-h":!0}),i(_n)!=="svelte-1qbbu78"&&(_n.innerHTML=xo),Bt=e(j),bn=a(j,"P",{"data-svelte-h":!0}),i(bn)!=="svelte-1qed6n7"&&(bn.textContent=wo),Ft=e(j),Cn=a(j,"DIV",{class:!0});var al=r(Cn);Ha=y(al,!1),al.forEach(l),Jt=e(j),Tn=a(j,"P",{"data-svelte-h":!0}),i(Tn)!=="svelte-yujbal"&&(Tn.textContent=_o),Rt=e(j),Ln=a(j,"UL",{"data-svelte-h":!0}),i(Ln)!=="svelte-15x14ox"&&(Ln.innerHTML=bo),j.forEach(l),Ma=e(o),k=a(o,"SECTION",{});var v=r(k);Hn=a(v,"H3",{"data-svelte-h":!0}),i(Hn)!=="svelte-1esoi1g"&&(Hn.innerHTML=Co),Kt=e(v),Mn=a(v,"P",{"data-svelte-h":!0}),i(Mn)!=="svelte-1o7bkyd"&&(Mn.innerHTML=To),Gt=e(v),Pn=a(v,"P",{"data-svelte-h":!0}),i(Pn)!=="svelte-1yqr1tw"&&(Pn.textContent=Lo),Qt=e(v),En=a(v,"DIV",{class:!0});var tl=r(En);Pa=y(tl,!1),tl.forEach(l),Zt=e(v),Sn=a(v,"P",{"data-svelte-h":!0}),i(Sn)!=="svelte-1jmshq9"&&(Sn.innerHTML=Ho),Xt=e(v),jn=a(v,"P",{"data-svelte-h":!0}),i(jn)!=="svelte-1aks8c7"&&(jn.innerHTML=Mo),se=e(v),In=a(v,"P",{"data-svelte-h":!0}),i(In)!=="svelte-1tnfpn7"&&(In.innerHTML=Po),ne=e(v),qn=a(v,"DIV",{class:!0});var el=r(qn);Ea=y(el,!1),el.forEach(l),ae=e(v),Dn=a(v,"P",{"data-svelte-h":!0}),i(Dn)!=="svelte-nsevm7"&&(Dn.innerHTML=Eo),te=e(v),On=a(v,"P",{"data-svelte-h":!0}),i(On)!=="svelte-j2g3s8"&&(On.textContent=So),ee=e(v),$n=a(v,"DIV",{class:!0});var ol=r($n);Sa=y(ol,!1),ol.forEach(l),oe=e(v),Vn=a(v,"P",{"data-svelte-h":!0}),i(Vn)!=="svelte-1mwzh63"&&(Vn.innerHTML=jo),le=e(v),An=a(v,"P",{"data-svelte-h":!0}),i(An)!=="svelte-b6et5y"&&(An.innerHTML=Io),ie=e(v),Nn=a(v,"DIV",{class:!0});var ll=r(Nn);ja=y(ll,!1),ll.forEach(l),pe=e(v),Un=a(v,"P",{"data-svelte-h":!0}),i(Un)!=="svelte-t04kd8"&&(Un.innerHTML=qo),v.forEach(l),Ia=e(o),Q=a(o,"SECTION",{"data-svelte-h":!0}),i(Q)!=="svelte-1tsyv1g"&&(Q.innerHTML=Do),this.h()},h(){Rn.a=null,m(ns,"class","code-section"),Gn.a=null,m(os,"class","code-section"),Zn.a=null,m(rs,"class","code-section"),Xn.a=null,m(vs,"class","code-section"),sa.a=null,m(ds,"class","code-section"),ta.a=null,m(fs,"class","code-section"),ea.a=null,m(ws,"class","code-section"),la.a=null,m(Cs,"class","code-section"),pa.a=null,m(Hs,"class","code-section"),ca.a=null,m(Ps,"class","code-section"),ka.a=null,m(Ds,"class","code-section"),ua.a=null,m(Fs,"class","code-section"),ya.a=null,m(Rs,"class","code-section"),ma.a=null,m(Qs,"class","code-section"),fa.a=null,m(en,"class","code-section"),xa.a=null,m(pn,"class","code-section"),wa.a=null,m(vn,"class","code-section"),ba.a=null,m(dn,"class","code-section"),Ca.a=null,m(mn,"class","code-section"),La.a=null,m(wn,"class","code-section"),Ha.a=null,m(Cn,"class","code-section"),Pa.a=null,m(En,"class","code-section"),Ea.a=null,m(qn,"class","code-section"),Sa.a=null,m($n,"class","code-section"),ja.a=null,m(Nn,"class","code-section")},m(o,p){c(o,g,p),c(o,O,p),c(o,D,p),c(o,I,p),c(o,$,p),c(o,zn,p),c(o,B,p),c(o,Yn,p),c(o,F,p),c(o,Bn,p),c(o,J,p),c(o,Fn,p),c(o,R,p),c(o,Jn,p),c(o,V,p),s(V,X),s(V,qa),s(V,ss),s(V,Da),s(V,ns),Rn.m(rl,ns),c(o,Kn,p),c(o,q,p),s(q,as),s(q,Oa),s(q,ts),s(q,$a),s(q,es),s(q,Va),s(q,os),Gn.m(kl,os),c(o,Qn,p),c(o,d,p),s(d,ls),s(d,Aa),s(d,is),s(d,Na),s(d,ps),s(d,Ua),s(d,cs),s(d,Wa),s(d,rs),Zn.m(vl,rs),s(d,za),s(d,ks),s(d,Ya),s(d,vs),Xn.m(ul,vs),s(d,Ba),s(d,us),s(d,Fa),s(d,ds),sa.m(dl,ds),s(d,Ja),s(d,hs),s(d,Ra),s(d,ys),c(o,na,p),c(o,K,p),c(o,aa,p),c(o,M,p),s(M,ms),s(M,Ka),s(M,gs),s(M,Ga),s(M,fs),ta.m(hl,fs),s(M,Qa),s(M,xs),s(M,Za),s(M,ws),ea.m(yl,ws),c(o,oa,p),c(o,A,p),s(A,_s),s(A,Xa),s(A,bs),s(A,st),s(A,Cs),la.m(ml,Cs),c(o,ia,p),c(o,P,p),s(P,Ts),s(P,nt),s(P,Ls),s(P,at),s(P,Hs),pa.m(gl,Hs),s(P,tt),s(P,Ms),s(P,et),s(P,Ps),ca.m(fl,Ps),c(o,ra,p),c(o,u,p),s(u,Es),s(u,ot),s(u,Ss),s(u,lt),s(u,js),s(u,it),s(u,Is),s(u,pt),s(u,qs),s(u,ct),s(u,Ds),ka.m(xl,Ds),s(u,rt),s(u,Os),s(u,kt),s(u,$s),s(u,vt),s(u,Vs),s(u,ut),s(u,As),s(u,dt),s(u,Ns),s(u,ht),s(u,Us),c(o,va,p),c(o,E,p),s(E,Ws),s(E,yt),s(E,zs),s(E,mt),s(E,Ys),s(E,gt),s(E,Bs),s(E,ft),s(E,Fs),ua.m(wl,Fs),c(o,da,p),c(o,G,p),c(o,ha,p),c(o,w,p),s(w,Js),s(w,xt),s(w,Rs),ya.m(_l,Rs),s(w,wt),s(w,Ks),s(w,_t),s(w,Gs),s(w,bt),s(w,Qs),ma.m(bl,Qs),s(w,Ct),s(w,Zs),s(w,Tt),s(w,Xs),s(w,Lt),s(w,sn),s(w,Ht),s(w,nn),c(o,ga,p),c(o,f,p),s(f,an),s(f,Mt),s(f,tn),s(f,Pt),s(f,en),fa.m(Cl,en),s(f,Et),s(f,on),s(f,St),s(f,ln),s(f,jt),s(f,pn),xa.m(Tl,pn),s(f,It),s(f,cn),s(f,qt),s(f,rn),s(f,Dt),s(f,kn),s(f,Ot),s(f,vn),wa.m(Ll,vn),c(o,_a,p),c(o,T,p),s(T,un),s(T,$t),s(T,dn),ba.m(Hl,dn),s(T,Vt),s(T,hn),s(T,At),s(T,yn),s(T,Nt),s(T,mn),Ca.m(Ml,mn),s(T,Ut),s(T,gn),s(T,Wt),s(T,fn),c(o,Ta,p),c(o,L,p),s(L,xn),s(L,zt),s(L,wn),La.m(Pl,wn),s(L,Yt),s(L,_n),s(L,Bt),s(L,bn),s(L,Ft),s(L,Cn),Ha.m(El,Cn),s(L,Jt),s(L,Tn),s(L,Rt),s(L,Ln),c(o,Ma,p),c(o,k,p),s(k,Hn),s(k,Kt),s(k,Mn),s(k,Gt),s(k,Pn),s(k,Qt),s(k,En),Pa.m(Sl,En),s(k,Zt),s(k,Sn),s(k,Xt),s(k,jn),s(k,se),s(k,In),s(k,ne),s(k,qn),Ea.m(jl,qn),s(k,ae),s(k,Dn),s(k,te),s(k,On),s(k,ee),s(k,$n),Sa.m(Il,$n),s(k,oe),s(k,Vn),s(k,le),s(k,An),s(k,ie),s(k,Nn),ja.m(ql,Nn),s(k,pe),s(k,Un),c(o,Ia,p),c(o,Q,p)},p:$l,d(o){o&&(l(g),l(O),l(D),l(I),l($),l(zn),l(B),l(Yn),l(F),l(Bn),l(J),l(Fn),l(R),l(Jn),l(V),l(Kn),l(q),l(Qn),l(d),l(na),l(K),l(aa),l(M),l(oa),l(A),l(ia),l(P),l(ra),l(u),l(va),l(E),l(da),l(G),l(ha),l(w),l(ga),l(f),l(_a),l(T),l(Ta),l(L),l(Ma),l(k),l(Ia),l(Q))}}}function Gl(Z){let g,z;const O=[Z[0],cl];let D={$$slots:{default:[Kl]},$$scope:{ctx:Z}};for(let C=0;C<O.length;C+=1)D=ce(D,O[C]);return g=new Jl({props:D}),{c(){Nl(g.$$.fragment)},l(C){Ul(g.$$.fragment,C)},m(C,I){Wl(g,C,I),z=!0},p(C,[I]){const $=I&1?Fl(O,[I&1&&pl(C[0]),I&0&&pl(cl)]):{};I&2&&($.$$scope={dirty:I,ctx:C}),g.$set($)},i(C){z||(zl(g.$$.fragment,C),z=!0)},o(C){Yl(g.$$.fragment,C),z=!1},d(C){Bl(g,C)}}}const cl={title:"Compile Svelte in your head (Part 3)",date:"2020-05-07T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"⚠️ This article was written for Svelte 3/4. For Svelte 5, please read the updated series: Compile Svelte 5 in your head⬅ ⬅  Previously in Part 2.Previously, I detailed how `$invalidate` works, described how bitmask was used in ...",tableOfContents:[{link:"the-on-bind-and-use",title:"The  `on:` ,  `bind:`  and  `use:`",nested:[{link:"on-event-handlers",title:"`on:`  event handlers"},{link:"bind-bindings",title:"`bind:`  bindings"},{link:"use-actions",title:"`use:`  actions"}]},{link:"the-vanilla-js",title:"The Vanilla JS",nested:[{link:"event-handler",title:"Event handler",nested:[{link:"event-preventdefault",title:"event.preventDefault"},{link:"event-stoppropagation",title:"event.stopPropagation"}]},{link:"bindings",title:"Bindings"},{link:"actions",title:"Actions"}]},{link:"the-compiled-js",title:"The Compiled JS",nested:[{link:"on-directive",title:"`on:`  directive",nested:[{link:"event-modifiers",title:"Event modifiers"}]},{link:"bind-directive",title:"`bind:`  directive"},{link:"use-directive",title:"`use:`  directive"},{link:"the-order-of-directives",title:"The order of directives"}]},{link:"closing-note",title:"Closing Note"}]};function Ql(Z,g,z){return Ol("blog",{image:Rl}),Z.$$set=O=>{z(0,g=ce(ce({},g),il(O)))},g=il(g),[g]}class ai extends Vl{constructor(g){super(),Al(this,g,Ql,Gl,Dl,{})}}export{ai as component};
