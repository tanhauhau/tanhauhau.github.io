import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as i,g as p,d as c,b as k,s as y,f as h,a as v,e as x,r as d,n as u}from"../chunks/C2PHntuy.js";import{h as m}from"../chunks/C3QlhiH-.js";import{i as f}from"../chunks/BQOOHHT8.js";import{l as g,s as w}from"../chunks/gzNpScmH.js";import{B as b}from"../chunks/B1caYEk9.js";import{t as _}from"../chunks/C3bQ3Oc7.js";const n={title:"Codemod with babel",date:"2019-03-13T08:00:00Z",lastUpdated:"2019-09-13T08:00:00Z",description:"A template which I used",label:"blog"},{title:j,date:B,lastUpdated:E,description:S,label:Z}=n;var $=k(`<p>A general template that I used:</p> <div class="code-section"><!></div> <p>[Updated on 2019-09-13]</p> <p>I have written a <a href="/step-by-step-guide-for-writing-a-babel-transformation">step-by-step guide</a> on how to write a babel transformation plugin.</p> <p>The only difference in this template than the guide is that there's this <code class="inline">manipulateOptions</code> where you can add additional parser options to enable ES2015+ syntax.</p>`,1);function z(t,s){const e=g(s,["children","$$slots","$$events","$$legacy"]);i(s,!1),p("blog",{image:_}),f(),b(t,w(()=>e,()=>n,{children:(l,O)=>{var a=$(),o=y(h(a),2),r=x(o);m(r,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">promisify</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;util&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">writeFile</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">promisify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;fs&#39;</span><span style="color: var(--shiki-color-text)">).writeFile);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformFileAsync</span><span style="color: var(--shiki-color-text)">(filename</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">manipulateOptions</span><span style="color: var(--shiki-color-text)">(opts</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parserOpts) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">/*</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">             add to parserOpts.plugins to enable the syntax</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">             eg: </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">              jsx, flow, typescript, objectRestSpread, pipelineOperator, </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">              throwExpressions, optionalChaining, nullishCoalescingOperator, </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">              exportDefaultFrom, dynamicImport, ...</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">            */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">parserOpts</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">plugins</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&#39;classProperties&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&#39;classPrivateProperties&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">// fill in a transformer here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">writeFile</span><span style="color: var(--shiki-color-text)">(filename</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)();</span></span></code></pre>`),d(o),u(6),v(l,a)},$$slots:{default:!0}})),c()}export{z as component};
