import{s as Cr,d as Ht,e as Tr,f as Vl,n as Lr}from"../chunks/scheduler.D6VJxl8L.js";import{S as Hr,i as Mr,m as Pr,n as Er,o as Ir,t as jr,a as Dr,p as Vr,e as o,s as n,H as v,c as a,q as e,h as t,d as y,r as d,g as h,u as x,j as _,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as Fr,a as Fl}from"../chunks/code-snippet.Gym6WUAG.js";import{B as qr}from"../chunks/BlogLayout.BTH3PMCG.js";const Sr=""+new URL("../assets/recursive.Dso0eE07.webp",import.meta.url).href,Nr=""+new URL("../assets/recursive.Z27rfNlL.webp",import.meta.url).href,$r=""+new URL("../assets/recursive.DC8l0jOZ.png",import.meta.url).href,ql=""+new URL("../assets/recursive.CxFD-HH_.png",import.meta.url).href,Ar=""+new URL("../assets/hero-twitter.__mNyZrv.jpg",import.meta.url).href;function Wr(P){let w,H="JavaScript is a single-threaded programming language, which means only one thing can happen at a time in a single thread.",T,C,g="Thatâ€™s where asynchronous JavaScript comes into play. Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread.",b,L,Mt="In this article, I'm going to show how you can retry an asynchronous function in JavaScript, using the callback pattern, promise chain pattern and async await. Also, I'll show you how to write test to verify it works.",Fo,k,E,Pt='<a href="#the-callback-pattern" id="the-callback-pattern">The callback pattern</a>',La,I,Et='Let&#39;s take a look at retrying asynchronous function that takes in a callback function that follows <a href="https://gist.github.com/sunnycmf/b2ad4f80a3b627f04ff2" rel="nofollow">the callback convention</a>:',Ha,j,It="<li>The first argument of the callback function is an error object</li> <li>The second argument contains the callback results.</li>",Ma,D,qo,Nl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> result) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Pa,V,jt='So we are going to implement the <code class="inline">retry</code> function, that takes in the asynchronous function to retry, <code class="inline">fn</code> and a callback function, <code class="inline">cb</code>, that will be called when the function succeeded or failed after all the retry attempts.',Ea,F,So,$l=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ia,q,Dt='The first thing we are going to do is to call the function <code class="inline">fn</code>:',ja,S,No,Al=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Da,N,Vt='We check if there&#39;s an error, if there&#39;s no error, we can call the <code class="inline">cb</code> function to indicate the function succeeded. However, if there&#39;s an error, we are going to call the function again to retry.',Va,$,$o,Wl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fa,A,Ft="Let's retry at most 3 times:",qa,W,Ao,zl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// 3rd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)">// failed for 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Sa,z,qt='Notice that it starts to get unwieldy as we are nesting more callback functions. It&#39;s hard to figure out which close bracket <code class="inline">}</code> is belong to without proper indentation.',Na,O,St='This is the so-called <a href="http://callbackhell.com/" rel="nofollow">&quot;Callback Hell&quot;</a> in JavaScript.',$a,J,Nt="Let's make it more unbearable to prove the point by flipping the if case:",Aa,U,Wo,Ol=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// 3rd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)">// failed for 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wa,R,$t='Now can you tell which <code class="inline">data</code> is belong to which function?',za,B,At='Now, instead of always retry at most 3 times, we are going to retry at most <code class="inline">n</code> times.',Oa,Z,Wt='So we are going to introduce a new argument, <code class="inline">n</code>:',Ja,G,zo,Jl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> attempt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* this goes forever ...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ua,Y,zt='The function keeps going forever, until it reaches <code class="inline">n</code> attempt.',Ra,K,Ot="If you stare at the code hard enough, you would notice that the code starts to repeat itself:",Ba,Q,Jt=`<span style="display: block; position: relative; padding-top: 118.716%; width: 100%;"><picture><source type="image/webp" srcset="${Nr}, ${Sr} 2x"/><img src="${ql}" srcset="${ql}, ${$r} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="recursive pattern"/></picture></span>`,Za,X,Ut="Note that the code within the outer red square is the same as the code within the inner red square, which is the same as the inner inner red square ...",Ga,ss,Rt="So, let's extract the code within the red square out into a function and replace the red squares with the function:",Ya,os,Oo,Ul=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> attempt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ka,as,Bt="And there you go, retrying an asynchronous function with callback pattern.",Qa,ns,Zt="Does it work? Well, we have to test it to verify it. Stay till the end to see how we are going to write unit test to verify it.",Jo,p,ts,Gt='<a href="#the-promise-chain" id="the-promise-chain">The promise chain</a>',Xa,es,Yt='A <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="nofollow">Promise</a>, according to MDN, object represents the eventual completion of an asynchronous operation, and its resulting value.',sn,ls,Kt='A Promise object provides <code class="inline">.then</code> and <code class="inline">.catch</code> method, which takes in callback function to be called when the promise is resolved or rejected respectively. The <code class="inline">.then</code> and <code class="inline">.catch</code> method then returns a new Promise of the return value of the callback function.',on,rs,Uo,Rl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">getPromiseA</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// a promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(handleA) </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(handleB); </span><span style="color: var(--shiki-token-comment)">// returns another new promise</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">getPromiseB</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// a promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(handleA) </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(handleB); </span><span style="color: var(--shiki-token-comment)">// returns another new promise</span></span></code></pre>`,an,is,Qt='The chaining of <code class="inline">.then</code> and <code class="inline">.catch</code> is a common pattern, called <a href="https://www.javascripttutorial.net/es6/promise-chaining/" rel="nofollow">Promise chaining</a>.',nn,ps,Xt='Now, lets implement the <code class="inline">retry</code> function, which takes in the asynchronous function to retry, <code class="inline">fn</code> and return a promise, which resolved when the function succeeded or resolved after failing all the retry attempts.',tn,cs,Ro,Bl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,en,ks,se='The first thing we are going to do is to call the function <code class="inline">fn</code>:',ln,hs,Bo,Zl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rn,ys,oe='We need to retry calling <code class="inline">fn</code> again, if the first <code class="inline">fn</code> is rejected',pn,vs,Zo,Gl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,cn,ds,ae='If that new promise rejected again, we retry by calling <code class="inline">fn</code> again',kn,xs,Go,Yl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,hn,us,ne='The last promise <em>(promise#3)</em> will reject if the 3rd <code class="inline">fn()</code> attempt rejects, and resolve if any of the <code class="inline">fn()</code> attempts resolve.',yn,fs,te='The callback method within <code class="inline">.catch</code> will be called only when the previous <code class="inline">fn()</code> attempt rejects.',vn,ms,ee='We are going to return a rejected promise with the error indicating max retries has met, if the last promise <code class="inline">(promise#3)</code> rejected, and a resolved promise with the result from <code class="inline">fn()</code>.',dn,ws,Yo,Kl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xn,gs,le="And we can make the code more concise, as the following two are equivalent, in terms of what is being resolved and rejected:",un,_s,Ko,Ql=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is equivalent to</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">promise3 </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span></code></pre>`,fn,bs,re='Also, we can substitute the variable <code class="inline">promise3</code> with it&#39;s promise chain value:',mn,Cs,Qo,Xl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// prettier-ignore</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wn,Ts,ie='Now, instead of always retry at most 3 times, we are going to retry at most <code class="inline">n</code> times.',gn,Ls,pe='So we are going to introduce a new argument, <code class="inline">n</code>:',_n,Hs,Xo,sr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// prettier-ignore</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// attempt #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// attempt #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// attempt #n</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">); &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bn,Ms,ce='Instead of writing <code class="inline">.catch(() =&gt; fn())</code> <code class="inline">n</code> number of times, we can build the Promise up using a for loop.',Cn,Ps,ke='<strong>Assuming <code class="inline">n</code> is always greater or equal to 1,</strong>',Tn,Es,sa,or=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ln,Is,he='What if <code class="inline">n</code> is <code class="inline">0</code> or negative? We shouldn&#39;t call <code class="inline">fn()</code> at all!',Hn,js,oa,ar=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">promise) promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mn,Ds,ye='Well, this maybe a little bit inelegant, having to execute the <code class="inline">if (!promise) ... else ...</code> on every loop, we can initialise the promise with a rejected promise, so that we can treat the 1st <code class="inline">fn()</code> called as the 1st retry:',Pn,Vs,aa,nr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.reject</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,En,Fs,ve="And there you go, retrying an asynchronous function with promise chain.",na,l,qs,de='<a href="#async-await" id="async-await">Async await</a>',In,Ss,xe='When you use a promise, you need to use <code class="inline">.then</code> to get the resolved value, and that happened asynchronously.',jn,Ns,ue="Meaning, if you have",Dn,$s,ta,tr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> data;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;resolved&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;here&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value);</span></span></code></pre>`,Vn,As,fe="You would see",Fn,Ws,ea,er='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;here&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span></span></code></pre>',qn,zs,me="first, and then some time later,",Sn,Os,la,lr='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;resolved&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;value&quot;</span></span></code></pre>',Nn,Js,we='This is because the function in the <code class="inline">.then</code> is called asynchronously, it is executed in a separate timeline of execution, so to speak.',$n,Us,ge='And <code class="inline">async</code> + <code class="inline">await</code> in JavaScript allow us to stitch multiple separate timeline of execution into disguisedly 1 timeline of execution flow.',An,Rs,_e='Everytime when we <code class="inline">await</code>, we jump into a different asynchronous timeline.',Wn,Bs,be='So, with the code with Promise + <code class="inline">.then</code>:',zn,Zs,ra,rr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// timeline #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data2 </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// timeline #3</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">doAnotherThing</span><span style="color: var(--shiki-color-text)">(data2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,On,Gs,Ce='can be written in <code class="inline">async</code> + <code class="inline">await</code> in the following manner:',Jn,Ys,ia,ir=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #3</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">doAnotherThing</span><span style="color: var(--shiki-color-text)">(data2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Un,Ks,Te='Now, lets implement the <code class="inline">retry</code> function using <code class="inline">async</code> + <code class="inline">await</code>.',Rn,Qs,pa,pr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bn,Xs,Le='The first thing we are going to do is to call the function <code class="inline">fn</code>:',Zn,so,ca,cr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Gn,oo,He='We need to retry calling <code class="inline">fn</code> again, if the first <code class="inline">fn</code> is rejected. Instead of <code class="inline">.catch</code>, we use <code class="inline">await</code> + <code class="inline">try catch</code>',Yn,ao,ka,kr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Kn,no,Me='If the 2nd <code class="inline">fn()</code> rejected again, we retry by calling <code class="inline">fn</code> again',Qn,to,ha,hr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xn,eo,Pe='And if the last <code class="inline">fn()</code> rejected again, we are going to return a rejected promise with an error indicating max retries has met by throw the error',st,lo,ya,yr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ot,ro,Ee='Now, if we need to return a Promise resolved with the resolved value from <code class="inline">fn()</code>',at,io,va,vr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,nt,po,Ie='Since we are ending early in the <code class="inline">try</code> block, and we are not using the error from the <code class="inline">catch</code> block, we can make the code less nested',tt,co,da,dr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,et,ko,je='Now, instead of always retry at most 3 times, we are going to retry at most <code class="inline">n</code> times.',lt,ho,De='So we are going to introduce a new argument, <code class="inline">n</code>:',rt,yo,xa,xr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// nth attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,it,vo,Ve='Instead of writing it <code class="inline">n</code> number of times, we can achieve it using a <code class="inline">for</code> loop:',pt,xo,ua,ur=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ct,uo,Fe='And there you go, retrying an asynchronous function using <code class="inline">async</code> + <code class="inline">await</code>.',fa,u,fo,qe='<a href="#testing" id="testing">Testing</a>',kt,mo,Se='To test whether our <code class="inline">retry</code> function works, we need to have a max number of retry in mind, say 3. And we need a function, <code class="inline">fn</code> that we can control when it succeed and when it failed.',ht,wo,Ne="So we can have the following test cases:",yt,go,$e='<li><code class="inline">fn</code> always succeed;<ul><li>verify <code class="inline">fn</code> get called only 1 time</li> <li>verify we get the return value from the 1st attempt</li></ul></li> <li><code class="inline">fn</code> failed on 1st attempt, and succeed thereafter;<ul><li>verify <code class="inline">fn</code> get called only 2 times</li> <li>verify we get the return value from the 2nd attempt</li></ul></li> <li><code class="inline">fn</code> failed on 1st, 2nd attempt, and succeed thereafter;<ul><li>verify <code class="inline">fn</code> get called only 3 times</li> <li>verify we get the return value from the 3rd attempt</li></ul></li> <li><code class="inline">fn</code> failed on 1st, 2nd, 3rd attempt, and succeed thereafter;<ul><li>verify <code class="inline">fn</code> get called only 3 times</li> <li>verify we get the max retry error</li></ul></li>',vt,_o,Ae='So, the key is to devise such <code class="inline">fn</code> that we can control when it succeed and when it failed.',dt,bo,We="We can create a function that returns such function",xt,Co,ma,fr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ut,To,ze="The function takes in number indicating how many time the return function would fail, before succeeding thereafter",ft,Lo,wa,mr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,mt,Ho,Oe="To know how many times the function is called, we can track it with a variable",wt,Mo,ga,wr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gt,Po,Je="As long as the number of times called is less than the number of time it should fail, it will fail.",_t,Eo,_a,gr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// calback version</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (numCalls </span><span style="color: var(--shiki-token-keyword)">&lt;=</span><span style="color: var(--shiki-color-text)"> numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> numCalls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// promise version</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (numCalls </span><span style="color: var(--shiki-token-keyword)">&lt;=</span><span style="color: var(--shiki-color-text)"> numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.reject</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(numCalls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bt,Io,Ue='Next, to verify the function get called a certain number of times, we can create a "spy" function:',Ct,jo,ba,_r=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      numCalled</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> numCalled;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Tt,Do,Re="So, let's put all of them together:",Lt,Vo,Ca,br=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#96;fn&#96; failed on 1st attempt, and succeed thereafter (callback based)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// retry at most 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)">.fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify &#96;fn&#96; get called only 2 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-token-function)">.getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify we get the return value from the 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#96;fn&#96; failed on 1st attempt, and succeed thereafter (promise based)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// retry at most 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)">.fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// verify &#96;fn&#96; get called only 2 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-token-function)">.getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// verify we get the return value from the 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    error </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ta,M,Be='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>We&#39;ve seen how we can retry an asynchronous function using the callback pattern, promise chain pattern and <code class="inline">async</code> + <code class="inline">await</code>.</p> <p>Each of the 3 methods is important in its on right, albeit some is more verbose than another.</p> <p>Lastly, we also cover how to write test to verify our code, and also how to create the mock function to facilitate our test cases.</p>';return{c(){w=o("p"),w.textContent=H,T=n(),C=o("p"),C.textContent=g,b=n(),L=o("p"),L.textContent=Mt,Fo=n(),k=o("section"),E=o("h2"),E.innerHTML=Pt,La=n(),I=o("p"),I.innerHTML=Et,Ha=n(),j=o("ul"),j.innerHTML=It,Ma=n(),D=o("div"),qo=new v(!1),Pa=n(),V=o("p"),V.innerHTML=jt,Ea=n(),F=o("div"),So=new v(!1),Ia=n(),q=o("p"),q.innerHTML=Dt,ja=n(),S=o("div"),No=new v(!1),Da=n(),N=o("p"),N.innerHTML=Vt,Va=n(),$=o("div"),$o=new v(!1),Fa=n(),A=o("p"),A.textContent=Ft,qa=n(),W=o("div"),Ao=new v(!1),Sa=n(),z=o("p"),z.innerHTML=qt,Na=n(),O=o("p"),O.innerHTML=St,$a=n(),J=o("p"),J.textContent=Nt,Aa=n(),U=o("div"),Wo=new v(!1),Wa=n(),R=o("p"),R.innerHTML=$t,za=n(),B=o("p"),B.innerHTML=At,Oa=n(),Z=o("p"),Z.innerHTML=Wt,Ja=n(),G=o("div"),zo=new v(!1),Ua=n(),Y=o("p"),Y.innerHTML=zt,Ra=n(),K=o("p"),K.textContent=Ot,Ba=n(),Q=o("p"),Q.innerHTML=Jt,Za=n(),X=o("p"),X.textContent=Ut,Ga=n(),ss=o("p"),ss.textContent=Rt,Ya=n(),os=o("div"),Oo=new v(!1),Ka=n(),as=o("p"),as.textContent=Bt,Qa=n(),ns=o("p"),ns.textContent=Zt,Jo=n(),p=o("section"),ts=o("h2"),ts.innerHTML=Gt,Xa=n(),es=o("p"),es.innerHTML=Yt,sn=n(),ls=o("p"),ls.innerHTML=Kt,on=n(),rs=o("div"),Uo=new v(!1),an=n(),is=o("p"),is.innerHTML=Qt,nn=n(),ps=o("p"),ps.innerHTML=Xt,tn=n(),cs=o("div"),Ro=new v(!1),en=n(),ks=o("p"),ks.innerHTML=se,ln=n(),hs=o("div"),Bo=new v(!1),rn=n(),ys=o("p"),ys.innerHTML=oe,pn=n(),vs=o("div"),Zo=new v(!1),cn=n(),ds=o("p"),ds.innerHTML=ae,kn=n(),xs=o("div"),Go=new v(!1),hn=n(),us=o("p"),us.innerHTML=ne,yn=n(),fs=o("p"),fs.innerHTML=te,vn=n(),ms=o("p"),ms.innerHTML=ee,dn=n(),ws=o("div"),Yo=new v(!1),xn=n(),gs=o("p"),gs.textContent=le,un=n(),_s=o("div"),Ko=new v(!1),fn=n(),bs=o("p"),bs.innerHTML=re,mn=n(),Cs=o("div"),Qo=new v(!1),wn=n(),Ts=o("p"),Ts.innerHTML=ie,gn=n(),Ls=o("p"),Ls.innerHTML=pe,_n=n(),Hs=o("div"),Xo=new v(!1),bn=n(),Ms=o("p"),Ms.innerHTML=ce,Cn=n(),Ps=o("p"),Ps.innerHTML=ke,Tn=n(),Es=o("div"),sa=new v(!1),Ln=n(),Is=o("p"),Is.innerHTML=he,Hn=n(),js=o("div"),oa=new v(!1),Mn=n(),Ds=o("p"),Ds.innerHTML=ye,Pn=n(),Vs=o("div"),aa=new v(!1),En=n(),Fs=o("p"),Fs.textContent=ve,na=n(),l=o("section"),qs=o("h2"),qs.innerHTML=de,In=n(),Ss=o("p"),Ss.innerHTML=xe,jn=n(),Ns=o("p"),Ns.textContent=ue,Dn=n(),$s=o("div"),ta=new v(!1),Vn=n(),As=o("p"),As.textContent=fe,Fn=n(),Ws=o("div"),ea=new v(!1),qn=n(),zs=o("p"),zs.textContent=me,Sn=n(),Os=o("div"),la=new v(!1),Nn=n(),Js=o("p"),Js.innerHTML=we,$n=n(),Us=o("p"),Us.innerHTML=ge,An=n(),Rs=o("p"),Rs.innerHTML=_e,Wn=n(),Bs=o("p"),Bs.innerHTML=be,zn=n(),Zs=o("div"),ra=new v(!1),On=n(),Gs=o("p"),Gs.innerHTML=Ce,Jn=n(),Ys=o("div"),ia=new v(!1),Un=n(),Ks=o("p"),Ks.innerHTML=Te,Rn=n(),Qs=o("div"),pa=new v(!1),Bn=n(),Xs=o("p"),Xs.innerHTML=Le,Zn=n(),so=o("div"),ca=new v(!1),Gn=n(),oo=o("p"),oo.innerHTML=He,Yn=n(),ao=o("div"),ka=new v(!1),Kn=n(),no=o("p"),no.innerHTML=Me,Qn=n(),to=o("div"),ha=new v(!1),Xn=n(),eo=o("p"),eo.innerHTML=Pe,st=n(),lo=o("div"),ya=new v(!1),ot=n(),ro=o("p"),ro.innerHTML=Ee,at=n(),io=o("div"),va=new v(!1),nt=n(),po=o("p"),po.innerHTML=Ie,tt=n(),co=o("div"),da=new v(!1),et=n(),ko=o("p"),ko.innerHTML=je,lt=n(),ho=o("p"),ho.innerHTML=De,rt=n(),yo=o("div"),xa=new v(!1),it=n(),vo=o("p"),vo.innerHTML=Ve,pt=n(),xo=o("div"),ua=new v(!1),ct=n(),uo=o("p"),uo.innerHTML=Fe,fa=n(),u=o("section"),fo=o("h2"),fo.innerHTML=qe,kt=n(),mo=o("p"),mo.innerHTML=Se,ht=n(),wo=o("p"),wo.textContent=Ne,yt=n(),go=o("ul"),go.innerHTML=$e,vt=n(),_o=o("p"),_o.innerHTML=Ae,dt=n(),bo=o("p"),bo.textContent=We,xt=n(),Co=o("div"),ma=new v(!1),ut=n(),To=o("p"),To.textContent=ze,ft=n(),Lo=o("div"),wa=new v(!1),mt=n(),Ho=o("p"),Ho.textContent=Oe,wt=n(),Mo=o("div"),ga=new v(!1),gt=n(),Po=o("p"),Po.textContent=Je,_t=n(),Eo=o("div"),_a=new v(!1),bt=n(),Io=o("p"),Io.textContent=Ue,Ct=n(),jo=o("div"),ba=new v(!1),Tt=n(),Do=o("p"),Do.textContent=Re,Lt=n(),Vo=o("div"),Ca=new v(!1),Ta=n(),M=o("section"),M.innerHTML=Be,this.h()},l(m){w=a(m,"P",{"data-svelte-h":!0}),e(w)!=="svelte-1sg6ep1"&&(w.textContent=H),T=t(m),C=a(m,"P",{"data-svelte-h":!0}),e(C)!=="svelte-1el03c0"&&(C.textContent=g),b=t(m),L=a(m,"P",{"data-svelte-h":!0}),e(L)!=="svelte-j59mqv"&&(L.textContent=Mt),Fo=t(m),k=a(m,"SECTION",{});var r=y(k);E=a(r,"H2",{"data-svelte-h":!0}),e(E)!=="svelte-1to02c4"&&(E.innerHTML=Pt),La=t(r),I=a(r,"P",{"data-svelte-h":!0}),e(I)!=="svelte-w2b9wf"&&(I.innerHTML=Et),Ha=t(r),j=a(r,"UL",{"data-svelte-h":!0}),e(j)!=="svelte-1iidlz2"&&(j.innerHTML=It),Ma=t(r),D=a(r,"DIV",{class:!0});var Ze=y(D);qo=d(Ze,!1),Ze.forEach(h),Pa=t(r),V=a(r,"P",{"data-svelte-h":!0}),e(V)!=="svelte-1qk7w3t"&&(V.innerHTML=jt),Ea=t(r),F=a(r,"DIV",{class:!0});var Ge=y(F);So=d(Ge,!1),Ge.forEach(h),Ia=t(r),q=a(r,"P",{"data-svelte-h":!0}),e(q)!=="svelte-15ev32u"&&(q.innerHTML=Dt),ja=t(r),S=a(r,"DIV",{class:!0});var Ye=y(S);No=d(Ye,!1),Ye.forEach(h),Da=t(r),N=a(r,"P",{"data-svelte-h":!0}),e(N)!=="svelte-123sw1u"&&(N.innerHTML=Vt),Va=t(r),$=a(r,"DIV",{class:!0});var Ke=y($);$o=d(Ke,!1),Ke.forEach(h),Fa=t(r),A=a(r,"P",{"data-svelte-h":!0}),e(A)!=="svelte-113l28w"&&(A.textContent=Ft),qa=t(r),W=a(r,"DIV",{class:!0});var Qe=y(W);Ao=d(Qe,!1),Qe.forEach(h),Sa=t(r),z=a(r,"P",{"data-svelte-h":!0}),e(z)!=="svelte-h7b0pq"&&(z.innerHTML=qt),Na=t(r),O=a(r,"P",{"data-svelte-h":!0}),e(O)!=="svelte-dvqrgq"&&(O.innerHTML=St),$a=t(r),J=a(r,"P",{"data-svelte-h":!0}),e(J)!=="svelte-sdsskk"&&(J.textContent=Nt),Aa=t(r),U=a(r,"DIV",{class:!0});var Xe=y(U);Wo=d(Xe,!1),Xe.forEach(h),Wa=t(r),R=a(r,"P",{"data-svelte-h":!0}),e(R)!=="svelte-1v4xuhg"&&(R.innerHTML=$t),za=t(r),B=a(r,"P",{"data-svelte-h":!0}),e(B)!=="svelte-18j4qdz"&&(B.innerHTML=At),Oa=t(r),Z=a(r,"P",{"data-svelte-h":!0}),e(Z)!=="svelte-1ef8ced"&&(Z.innerHTML=Wt),Ja=t(r),G=a(r,"DIV",{class:!0});var sl=y(G);zo=d(sl,!1),sl.forEach(h),Ua=t(r),Y=a(r,"P",{"data-svelte-h":!0}),e(Y)!=="svelte-1wx2zjg"&&(Y.innerHTML=zt),Ra=t(r),K=a(r,"P",{"data-svelte-h":!0}),e(K)!=="svelte-8og120"&&(K.textContent=Ot),Ba=t(r),Q=a(r,"P",{"data-svelte-h":!0}),e(Q)!=="svelte-sl0a9y"&&(Q.innerHTML=Jt),Za=t(r),X=a(r,"P",{"data-svelte-h":!0}),e(X)!=="svelte-jijjk8"&&(X.textContent=Ut),Ga=t(r),ss=a(r,"P",{"data-svelte-h":!0}),e(ss)!=="svelte-jrpztp"&&(ss.textContent=Rt),Ya=t(r),os=a(r,"DIV",{class:!0});var ol=y(os);Oo=d(ol,!1),ol.forEach(h),Ka=t(r),as=a(r,"P",{"data-svelte-h":!0}),e(as)!=="svelte-1n8hyxk"&&(as.textContent=Bt),Qa=t(r),ns=a(r,"P",{"data-svelte-h":!0}),e(ns)!=="svelte-sburs6"&&(ns.textContent=Zt),r.forEach(h),Jo=t(m),p=a(m,"SECTION",{});var c=y(p);ts=a(c,"H2",{"data-svelte-h":!0}),e(ts)!=="svelte-aq1637"&&(ts.innerHTML=Gt),Xa=t(c),es=a(c,"P",{"data-svelte-h":!0}),e(es)!=="svelte-16eey1w"&&(es.innerHTML=Yt),sn=t(c),ls=a(c,"P",{"data-svelte-h":!0}),e(ls)!=="svelte-wld6ju"&&(ls.innerHTML=Kt),on=t(c),rs=a(c,"DIV",{class:!0});var al=y(rs);Uo=d(al,!1),al.forEach(h),an=t(c),is=a(c,"P",{"data-svelte-h":!0}),e(is)!=="svelte-1d1livs"&&(is.innerHTML=Qt),nn=t(c),ps=a(c,"P",{"data-svelte-h":!0}),e(ps)!=="svelte-h59245"&&(ps.innerHTML=Xt),tn=t(c),cs=a(c,"DIV",{class:!0});var nl=y(cs);Ro=d(nl,!1),nl.forEach(h),en=t(c),ks=a(c,"P",{"data-svelte-h":!0}),e(ks)!=="svelte-15ev32u"&&(ks.innerHTML=se),ln=t(c),hs=a(c,"DIV",{class:!0});var tl=y(hs);Bo=d(tl,!1),tl.forEach(h),rn=t(c),ys=a(c,"P",{"data-svelte-h":!0}),e(ys)!=="svelte-1j5ri97"&&(ys.innerHTML=oe),pn=t(c),vs=a(c,"DIV",{class:!0});var el=y(vs);Zo=d(el,!1),el.forEach(h),cn=t(c),ds=a(c,"P",{"data-svelte-h":!0}),e(ds)!=="svelte-prn433"&&(ds.innerHTML=ae),kn=t(c),xs=a(c,"DIV",{class:!0});var ll=y(xs);Go=d(ll,!1),ll.forEach(h),hn=t(c),us=a(c,"P",{"data-svelte-h":!0}),e(us)!=="svelte-1corqgm"&&(us.innerHTML=ne),yn=t(c),fs=a(c,"P",{"data-svelte-h":!0}),e(fs)!=="svelte-1rtxlh1"&&(fs.innerHTML=te),vn=t(c),ms=a(c,"P",{"data-svelte-h":!0}),e(ms)!=="svelte-19lppv5"&&(ms.innerHTML=ee),dn=t(c),ws=a(c,"DIV",{class:!0});var rl=y(ws);Yo=d(rl,!1),rl.forEach(h),xn=t(c),gs=a(c,"P",{"data-svelte-h":!0}),e(gs)!=="svelte-eyeou7"&&(gs.textContent=le),un=t(c),_s=a(c,"DIV",{class:!0});var il=y(_s);Ko=d(il,!1),il.forEach(h),fn=t(c),bs=a(c,"P",{"data-svelte-h":!0}),e(bs)!=="svelte-26f4ep"&&(bs.innerHTML=re),mn=t(c),Cs=a(c,"DIV",{class:!0});var pl=y(Cs);Qo=d(pl,!1),pl.forEach(h),wn=t(c),Ts=a(c,"P",{"data-svelte-h":!0}),e(Ts)!=="svelte-18j4qdz"&&(Ts.innerHTML=ie),gn=t(c),Ls=a(c,"P",{"data-svelte-h":!0}),e(Ls)!=="svelte-1ef8ced"&&(Ls.innerHTML=pe),_n=t(c),Hs=a(c,"DIV",{class:!0});var cl=y(Hs);Xo=d(cl,!1),cl.forEach(h),bn=t(c),Ms=a(c,"P",{"data-svelte-h":!0}),e(Ms)!=="svelte-1tbvv6d"&&(Ms.innerHTML=ce),Cn=t(c),Ps=a(c,"P",{"data-svelte-h":!0}),e(Ps)!=="svelte-192ue81"&&(Ps.innerHTML=ke),Tn=t(c),Es=a(c,"DIV",{class:!0});var kl=y(Es);sa=d(kl,!1),kl.forEach(h),Ln=t(c),Is=a(c,"P",{"data-svelte-h":!0}),e(Is)!=="svelte-b2wht1"&&(Is.innerHTML=he),Hn=t(c),js=a(c,"DIV",{class:!0});var hl=y(js);oa=d(hl,!1),hl.forEach(h),Mn=t(c),Ds=a(c,"P",{"data-svelte-h":!0}),e(Ds)!=="svelte-9jl5je"&&(Ds.innerHTML=ye),Pn=t(c),Vs=a(c,"DIV",{class:!0});var yl=y(Vs);aa=d(yl,!1),yl.forEach(h),En=t(c),Fs=a(c,"P",{"data-svelte-h":!0}),e(Fs)!=="svelte-mq6ped"&&(Fs.textContent=ve),c.forEach(h),na=t(m),l=a(m,"SECTION",{});var i=y(l);qs=a(i,"H2",{"data-svelte-h":!0}),e(qs)!=="svelte-12dj6tw"&&(qs.innerHTML=de),In=t(i),Ss=a(i,"P",{"data-svelte-h":!0}),e(Ss)!=="svelte-gopsw6"&&(Ss.innerHTML=xe),jn=t(i),Ns=a(i,"P",{"data-svelte-h":!0}),e(Ns)!=="svelte-l5dxyt"&&(Ns.textContent=ue),Dn=t(i),$s=a(i,"DIV",{class:!0});var vl=y($s);ta=d(vl,!1),vl.forEach(h),Vn=t(i),As=a(i,"P",{"data-svelte-h":!0}),e(As)!=="svelte-r13n4t"&&(As.textContent=fe),Fn=t(i),Ws=a(i,"DIV",{class:!0});var dl=y(Ws);ea=d(dl,!1),dl.forEach(h),qn=t(i),zs=a(i,"P",{"data-svelte-h":!0}),e(zs)!=="svelte-6pw2xp"&&(zs.textContent=me),Sn=t(i),Os=a(i,"DIV",{class:!0});var xl=y(Os);la=d(xl,!1),xl.forEach(h),Nn=t(i),Js=a(i,"P",{"data-svelte-h":!0}),e(Js)!=="svelte-1pw0jk3"&&(Js.innerHTML=we),$n=t(i),Us=a(i,"P",{"data-svelte-h":!0}),e(Us)!=="svelte-hduck5"&&(Us.innerHTML=ge),An=t(i),Rs=a(i,"P",{"data-svelte-h":!0}),e(Rs)!=="svelte-1mihf4g"&&(Rs.innerHTML=_e),Wn=t(i),Bs=a(i,"P",{"data-svelte-h":!0}),e(Bs)!=="svelte-t4q84u"&&(Bs.innerHTML=be),zn=t(i),Zs=a(i,"DIV",{class:!0});var ul=y(Zs);ra=d(ul,!1),ul.forEach(h),On=t(i),Gs=a(i,"P",{"data-svelte-h":!0}),e(Gs)!=="svelte-7k17tq"&&(Gs.innerHTML=Ce),Jn=t(i),Ys=a(i,"DIV",{class:!0});var fl=y(Ys);ia=d(fl,!1),fl.forEach(h),Un=t(i),Ks=a(i,"P",{"data-svelte-h":!0}),e(Ks)!=="svelte-54kyjg"&&(Ks.innerHTML=Te),Rn=t(i),Qs=a(i,"DIV",{class:!0});var ml=y(Qs);pa=d(ml,!1),ml.forEach(h),Bn=t(i),Xs=a(i,"P",{"data-svelte-h":!0}),e(Xs)!=="svelte-15ev32u"&&(Xs.innerHTML=Le),Zn=t(i),so=a(i,"DIV",{class:!0});var wl=y(so);ca=d(wl,!1),wl.forEach(h),Gn=t(i),oo=a(i,"P",{"data-svelte-h":!0}),e(oo)!=="svelte-96upry"&&(oo.innerHTML=He),Yn=t(i),ao=a(i,"DIV",{class:!0});var gl=y(ao);ka=d(gl,!1),gl.forEach(h),Kn=t(i),no=a(i,"P",{"data-svelte-h":!0}),e(no)!=="svelte-2blei2"&&(no.innerHTML=Me),Qn=t(i),to=a(i,"DIV",{class:!0});var _l=y(to);ha=d(_l,!1),_l.forEach(h),Xn=t(i),eo=a(i,"P",{"data-svelte-h":!0}),e(eo)!=="svelte-13oki0f"&&(eo.innerHTML=Pe),st=t(i),lo=a(i,"DIV",{class:!0});var bl=y(lo);ya=d(bl,!1),bl.forEach(h),ot=t(i),ro=a(i,"P",{"data-svelte-h":!0}),e(ro)!=="svelte-17l8jp8"&&(ro.innerHTML=Ee),at=t(i),io=a(i,"DIV",{class:!0});var Cl=y(io);va=d(Cl,!1),Cl.forEach(h),nt=t(i),po=a(i,"P",{"data-svelte-h":!0}),e(po)!=="svelte-18rtzak"&&(po.innerHTML=Ie),tt=t(i),co=a(i,"DIV",{class:!0});var Tl=y(co);da=d(Tl,!1),Tl.forEach(h),et=t(i),ko=a(i,"P",{"data-svelte-h":!0}),e(ko)!=="svelte-18j4qdz"&&(ko.innerHTML=je),lt=t(i),ho=a(i,"P",{"data-svelte-h":!0}),e(ho)!=="svelte-1ef8ced"&&(ho.innerHTML=De),rt=t(i),yo=a(i,"DIV",{class:!0});var Ll=y(yo);xa=d(Ll,!1),Ll.forEach(h),it=t(i),vo=a(i,"P",{"data-svelte-h":!0}),e(vo)!=="svelte-3asgn4"&&(vo.innerHTML=Ve),pt=t(i),xo=a(i,"DIV",{class:!0});var Hl=y(xo);ua=d(Hl,!1),Hl.forEach(h),ct=t(i),uo=a(i,"P",{"data-svelte-h":!0}),e(uo)!=="svelte-1nuuczm"&&(uo.innerHTML=Fe),i.forEach(h),fa=t(m),u=a(m,"SECTION",{});var f=y(u);fo=a(f,"H2",{"data-svelte-h":!0}),e(fo)!=="svelte-9w3vec"&&(fo.innerHTML=qe),kt=t(f),mo=a(f,"P",{"data-svelte-h":!0}),e(mo)!=="svelte-1jpolbr"&&(mo.innerHTML=Se),ht=t(f),wo=a(f,"P",{"data-svelte-h":!0}),e(wo)!=="svelte-13f9zc9"&&(wo.textContent=Ne),yt=t(f),go=a(f,"UL",{"data-svelte-h":!0}),e(go)!=="svelte-18r7868"&&(go.innerHTML=$e),vt=t(f),_o=a(f,"P",{"data-svelte-h":!0}),e(_o)!=="svelte-7nxvtr"&&(_o.innerHTML=Ae),dt=t(f),bo=a(f,"P",{"data-svelte-h":!0}),e(bo)!=="svelte-ov3rbm"&&(bo.textContent=We),xt=t(f),Co=a(f,"DIV",{class:!0});var Ml=y(Co);ma=d(Ml,!1),Ml.forEach(h),ut=t(f),To=a(f,"P",{"data-svelte-h":!0}),e(To)!=="svelte-3a4pdw"&&(To.textContent=ze),ft=t(f),Lo=a(f,"DIV",{class:!0});var Pl=y(Lo);wa=d(Pl,!1),Pl.forEach(h),mt=t(f),Ho=a(f,"P",{"data-svelte-h":!0}),e(Ho)!=="svelte-7sl8uw"&&(Ho.textContent=Oe),wt=t(f),Mo=a(f,"DIV",{class:!0});var El=y(Mo);ga=d(El,!1),El.forEach(h),gt=t(f),Po=a(f,"P",{"data-svelte-h":!0}),e(Po)!=="svelte-p9omrt"&&(Po.textContent=Je),_t=t(f),Eo=a(f,"DIV",{class:!0});var Il=y(Eo);_a=d(Il,!1),Il.forEach(h),bt=t(f),Io=a(f,"P",{"data-svelte-h":!0}),e(Io)!=="svelte-1t8c1h9"&&(Io.textContent=Ue),Ct=t(f),jo=a(f,"DIV",{class:!0});var jl=y(jo);ba=d(jl,!1),jl.forEach(h),Tt=t(f),Do=a(f,"P",{"data-svelte-h":!0}),e(Do)!=="svelte-1r7kuoi"&&(Do.textContent=Re),Lt=t(f),Vo=a(f,"DIV",{class:!0});var Dl=y(Vo);Ca=d(Dl,!1),Dl.forEach(h),f.forEach(h),Ta=t(m),M=a(m,"SECTION",{"data-svelte-h":!0}),e(M)!=="svelte-1ffl48x"&&(M.innerHTML=Be),this.h()},h(){qo.a=null,x(D,"class","code-section"),So.a=null,x(F,"class","code-section"),No.a=null,x(S,"class","code-section"),$o.a=null,x($,"class","code-section"),Ao.a=null,x(W,"class","code-section"),Wo.a=null,x(U,"class","code-section"),zo.a=null,x(G,"class","code-section"),Oo.a=null,x(os,"class","code-section"),Uo.a=null,x(rs,"class","code-section"),Ro.a=null,x(cs,"class","code-section"),Bo.a=null,x(hs,"class","code-section"),Zo.a=null,x(vs,"class","code-section"),Go.a=null,x(xs,"class","code-section"),Yo.a=null,x(ws,"class","code-section"),Ko.a=null,x(_s,"class","code-section"),Qo.a=null,x(Cs,"class","code-section"),Xo.a=null,x(Hs,"class","code-section"),sa.a=null,x(Es,"class","code-section"),oa.a=null,x(js,"class","code-section"),aa.a=null,x(Vs,"class","code-section"),ta.a=null,x($s,"class","code-section"),ea.a=null,x(Ws,"class","code-section"),la.a=null,x(Os,"class","code-section"),ra.a=null,x(Zs,"class","code-section"),ia.a=null,x(Ys,"class","code-section"),pa.a=null,x(Qs,"class","code-section"),ca.a=null,x(so,"class","code-section"),ka.a=null,x(ao,"class","code-section"),ha.a=null,x(to,"class","code-section"),ya.a=null,x(lo,"class","code-section"),va.a=null,x(io,"class","code-section"),da.a=null,x(co,"class","code-section"),xa.a=null,x(yo,"class","code-section"),ua.a=null,x(xo,"class","code-section"),ma.a=null,x(Co,"class","code-section"),wa.a=null,x(Lo,"class","code-section"),ga.a=null,x(Mo,"class","code-section"),_a.a=null,x(Eo,"class","code-section"),ba.a=null,x(jo,"class","code-section"),Ca.a=null,x(Vo,"class","code-section")},m(m,r){_(m,w,r),_(m,T,r),_(m,C,r),_(m,b,r),_(m,L,r),_(m,Fo,r),_(m,k,r),s(k,E),s(k,La),s(k,I),s(k,Ha),s(k,j),s(k,Ma),s(k,D),qo.m(Nl,D),s(k,Pa),s(k,V),s(k,Ea),s(k,F),So.m($l,F),s(k,Ia),s(k,q),s(k,ja),s(k,S),No.m(Al,S),s(k,Da),s(k,N),s(k,Va),s(k,$),$o.m(Wl,$),s(k,Fa),s(k,A),s(k,qa),s(k,W),Ao.m(zl,W),s(k,Sa),s(k,z),s(k,Na),s(k,O),s(k,$a),s(k,J),s(k,Aa),s(k,U),Wo.m(Ol,U),s(k,Wa),s(k,R),s(k,za),s(k,B),s(k,Oa),s(k,Z),s(k,Ja),s(k,G),zo.m(Jl,G),s(k,Ua),s(k,Y),s(k,Ra),s(k,K),s(k,Ba),s(k,Q),s(k,Za),s(k,X),s(k,Ga),s(k,ss),s(k,Ya),s(k,os),Oo.m(Ul,os),s(k,Ka),s(k,as),s(k,Qa),s(k,ns),_(m,Jo,r),_(m,p,r),s(p,ts),s(p,Xa),s(p,es),s(p,sn),s(p,ls),s(p,on),s(p,rs),Uo.m(Rl,rs),s(p,an),s(p,is),s(p,nn),s(p,ps),s(p,tn),s(p,cs),Ro.m(Bl,cs),s(p,en),s(p,ks),s(p,ln),s(p,hs),Bo.m(Zl,hs),s(p,rn),s(p,ys),s(p,pn),s(p,vs),Zo.m(Gl,vs),s(p,cn),s(p,ds),s(p,kn),s(p,xs),Go.m(Yl,xs),s(p,hn),s(p,us),s(p,yn),s(p,fs),s(p,vn),s(p,ms),s(p,dn),s(p,ws),Yo.m(Kl,ws),s(p,xn),s(p,gs),s(p,un),s(p,_s),Ko.m(Ql,_s),s(p,fn),s(p,bs),s(p,mn),s(p,Cs),Qo.m(Xl,Cs),s(p,wn),s(p,Ts),s(p,gn),s(p,Ls),s(p,_n),s(p,Hs),Xo.m(sr,Hs),s(p,bn),s(p,Ms),s(p,Cn),s(p,Ps),s(p,Tn),s(p,Es),sa.m(or,Es),s(p,Ln),s(p,Is),s(p,Hn),s(p,js),oa.m(ar,js),s(p,Mn),s(p,Ds),s(p,Pn),s(p,Vs),aa.m(nr,Vs),s(p,En),s(p,Fs),_(m,na,r),_(m,l,r),s(l,qs),s(l,In),s(l,Ss),s(l,jn),s(l,Ns),s(l,Dn),s(l,$s),ta.m(tr,$s),s(l,Vn),s(l,As),s(l,Fn),s(l,Ws),ea.m(er,Ws),s(l,qn),s(l,zs),s(l,Sn),s(l,Os),la.m(lr,Os),s(l,Nn),s(l,Js),s(l,$n),s(l,Us),s(l,An),s(l,Rs),s(l,Wn),s(l,Bs),s(l,zn),s(l,Zs),ra.m(rr,Zs),s(l,On),s(l,Gs),s(l,Jn),s(l,Ys),ia.m(ir,Ys),s(l,Un),s(l,Ks),s(l,Rn),s(l,Qs),pa.m(pr,Qs),s(l,Bn),s(l,Xs),s(l,Zn),s(l,so),ca.m(cr,so),s(l,Gn),s(l,oo),s(l,Yn),s(l,ao),ka.m(kr,ao),s(l,Kn),s(l,no),s(l,Qn),s(l,to),ha.m(hr,to),s(l,Xn),s(l,eo),s(l,st),s(l,lo),ya.m(yr,lo),s(l,ot),s(l,ro),s(l,at),s(l,io),va.m(vr,io),s(l,nt),s(l,po),s(l,tt),s(l,co),da.m(dr,co),s(l,et),s(l,ko),s(l,lt),s(l,ho),s(l,rt),s(l,yo),xa.m(xr,yo),s(l,it),s(l,vo),s(l,pt),s(l,xo),ua.m(ur,xo),s(l,ct),s(l,uo),_(m,fa,r),_(m,u,r),s(u,fo),s(u,kt),s(u,mo),s(u,ht),s(u,wo),s(u,yt),s(u,go),s(u,vt),s(u,_o),s(u,dt),s(u,bo),s(u,xt),s(u,Co),ma.m(fr,Co),s(u,ut),s(u,To),s(u,ft),s(u,Lo),wa.m(mr,Lo),s(u,mt),s(u,Ho),s(u,wt),s(u,Mo),ga.m(wr,Mo),s(u,gt),s(u,Po),s(u,_t),s(u,Eo),_a.m(gr,Eo),s(u,bt),s(u,Io),s(u,Ct),s(u,jo),ba.m(_r,jo),s(u,Tt),s(u,Do),s(u,Lt),s(u,Vo),Ca.m(br,Vo),_(m,Ta,r),_(m,M,r)},p:Lr,d(m){m&&(h(w),h(T),h(C),h(b),h(L),h(Fo),h(k),h(Jo),h(p),h(na),h(l),h(fa),h(u),h(Ta),h(M))}}}function zr(P){let w,H;const T=[P[0],Sl];let C={$$slots:{default:[Wr]},$$scope:{ctx:P}};for(let g=0;g<T.length;g+=1)C=Ht(C,T[g]);return w=new qr({props:C}),{c(){Pr(w.$$.fragment)},l(g){Er(w.$$.fragment,g)},m(g,b){Ir(w,g,b),H=!0},p(g,[b]){const L=b&1?Fr(T,[b&1&&Fl(g[0]),b&0&&Fl(Sl)]):{};b&2&&(L.$$scope={dirty:b,ctx:g}),w.$set(L)},i(g){H||(jr(w.$$.fragment,g),H=!0)},o(g){Dr(w.$$.fragment,g),H=!1},d(g){Vr(w,g)}}}const Sl={title:"Retry asynchronous function using the callback pattern, promise chain and async await",date:"2020-06-21T08:00:00Z",tags:["JavaScript","Asynchronous","Problem Solving"],description:"How to retry asynchronous function using the callback pattern, promise chain and async await. Mental model for asynchronous JavaScript.",label:"blog",tableOfContents:[{link:"the-callback-pattern",title:"The callback pattern"},{link:"the-promise-chain",title:"The promise chain"},{link:"async-await",title:"Async await"},{link:"testing",title:"Testing"},{link:"closing-note",title:"Closing Note"}]};function Or(P,w,H){return Tr("blog",{image:Ar}),P.$$set=T=>{H(0,w=Ht(Ht({},w),Vl(T)))},w=Vl(w),[w]}class Zr extends Hr{constructor(w){super(),Mr(this,w,Or,zr,Cr,{})}}export{Zr as component};
