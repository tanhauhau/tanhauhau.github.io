import{s as We,d as pt,e as Ne,f as xe,n as Oe}from"../chunks/scheduler.D6VJxl8L.js";import{S as $e,i as Ue,m as Je,n as Re,o as ze,t as Ye,a as Be,p as Ge,e as o,s as e,H as w,c as t,q as n,h as a,d as u,r as g,g as l,u as b,j as C,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as Ze,a as fe}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Ke}from"../chunks/BlogLayout.BPekX0dI.js";import{t as Qe}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function Xe(S){let y,L='Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires "double compilation" with webpack.',T,h,x,M='<a href="#the-problem" id="the-problem">The problem</a>',q,E,ct="I am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it.",po,j,kt="The server-side rendering application that I worked on, has an endpoint that takes in request and respond with a partial HTML content and CSS files required for styling:",co,F,As,we=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;css&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;http://cdn/assets/style.xxx.css&quot;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;html&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&lt;div class=&quot;container_xyz&quot;&gt;Hello world&lt;/div&gt;&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ko,D,Vs,ge=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: http://cdn/assets/style.xxx.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.container_xyz</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">font-family</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Comic Sans&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ho,A,ht='The application code itself uses <a href="https://expressjs.com/" rel="nofollow">Express</a> and <a href="https://reactjs.org/" rel="nofollow">React</a>:',vo,V,Ws,be=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> express </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;express&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; renderToStaticMarkup &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-dom/server&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> styles </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./app.scss&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">express</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;</span><span style="color: var(--shiki-token-constant)">styles</span><span style="color: var(--shiki-color-text)">.container&#125;&gt;Hello world&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">htmlContent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">renderToStaticMarkup</span><span style="color: var(--shiki-color-text)">(app);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.listen</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,yo,W,vt="Now, the problem is, how do I get the list of CSS files?",uo,N,yt="The list of CSS files produced by the build is only available after I compile the application, but I need the information to be part of compiled code.",xo,O,dt="The compiled code being part of the compilation, needs to contain information of the compilation.",Ns,d,$,ut='<a href="#the-1st-approach" id="the-1st-approach">The 1st approach</a>',fo,U,xt='A naive solution at first is to use <a href="https://www.npmjs.com/package/webpack-manifest-plugin" rel="nofollow">Webpack Manifest Plugin</a> to get the compilation manifest, and in the code, import the manifest as json and consumes it:',mo,J,Os,_e=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> webpackManifest </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> cssFiles</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,wo,R,ft='Yet, the <code class="inline">./dist/webpack-manifest.json</code> is not available in the first place, before compiling the code.',go,z,mt='Since the <code class="inline">./dist/webpack-manifest.json</code> can only be available after build, maybe we can import it during runtime, using <a href="https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific" rel="nofollow"><strong>non_webpack_require</strong></a>. The difference between <code class="inline">require</code> and <code class="inline">__non_webpack_require__</code> is that the latter is webpack specific, which tells webpack to transform it to just pure <code class="inline">require()</code> expression, without bundling the required module:',bo,Y,$s,Ce=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpackManifest</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__non_webpack_require__</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> cssFiles</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,_o,B,wt='If you scrutinize the code, you may wonder whether <code class="inline">./dist/webpack-manifest.json</code> is the correct relative path from the compiled code?',Co,G,gt='Probably <code class="inline">./webpack-manifest.json</code> would be more accurate, if our output folder looks like this:',To,Z,Us,Te=`<pre class="prism language-"><code><span class="line">dist</span>
<span class="line">├── webpack-manifest.json</span>
<span class="line">└── bundle.js  // &lt;-- the main output bundle</span></code></pre>`,Mo,K,bt='One can safely argue that, the approach above works and let&#39;s move on the next task. But, curiosity drives me to seek deeper for a more &quot;elegant&quot; solution, where one don&#39;t need <code class="inline">require(&#39;webpack-manifest.json&#39;)</code> in runtime, but that information is compiled into the code.',Js,f,Q,_t='<a href="#updated-feb-27-2020" id="updated-feb-27-2020">[Updated Feb 27, 2020]</a>',Lo,X,Ct='Thanks to <a href="https://twitter.com/wSokra" rel="nofollow">@wSokra</a>&#39;s <a href="https://twitter.com/wSokra/status/1230448421351444482" rel="nofollow">suggestion</a>, instead of using <code class="inline">__non_webpack_require__()</code>, you can use a normal import and declaring the manifest file as an external:',Io,ss,Rs,Me=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> webpackManifest </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,Ho,os,zs,Le=`<div class="filename">webpack.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  externals</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;commonjs2 ./webpack-manifest.json&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Po,ts,Tt="What this output is something similar to the following:",So,es,Ys,Ie=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpackManifest</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,qo,as,Mt='The reason we are using the relative path <code class="inline">./webpack-manifest.json</code> is that we are assuming the output folder looks like this:',Eo,ns,Bs,He=`<pre class="prism language-"><code><span class="line">dist</span>
<span class="line">├── bundle.js  // &lt;-- the main output bundle</span>
<span class="line">└── webpack-manifest.json // &lt;-- relative to bundle.js</span></code></pre>`,jo,ls,Lt='You can read more about webpack externals from <a href="https://webpack.js.org/configuration/externals/" rel="nofollow">the webpack documentation</a>.',Gs,i,is,It='<a href="#the-2nd-approach" id="the-2nd-approach">The 2nd approach</a>',Fo,rs,Ht='So, the next &quot;intuitive&quot; approach is to <a href="/webpack-plugin-main-template">write a custom template plugin</a>, that adds the webpack manifest on top of the main bundle, an example of the output:',Do,ps,Zs,Pe=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// added by template plugin</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;http://cdn/assets/style.xxx.css&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// END added by template plugin</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...the main bundle</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ao,cs,Pt='In the source code, I will use the global variable <code class="inline">CSS_FILES</code>, and hopefully it will get defined by webpack, by adding <code class="inline">const CSS_FILES = ...</code> at the very top of the file.',Vo,ks,St='And to be extra careful, I have to make sure also that there&#39;s no variable <code class="inline">CSS_FILES</code> declared between the global scope and the current scope the variable is being used.',Wo,hs,Ks,Se=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ManifestPlugin</span><span style="color: var(--shiki-color-text)">(manifestOptions)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get manifest from &#96;webpack-manifest-plugin&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-token-function)">.getCompilerHooks</span><span style="color: var(--shiki-color-text)">(compiler).</span><span style="color: var(--shiki-token-constant)">afterEmit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      manifest </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// see https://lihautan.com/webpack-plugin-main-template</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// on writing template plugin</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">render</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; chunk</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> chunkGraph &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;const CSS_FILES = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(prefix</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,No,vs,qt="Apparently, this does not work at all. The compiled output shows:",Oo,ys,Qs,qe=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...continue with bundle.js</span></span></code></pre>`,$o,ds,Et='After tracing through the code, I realised that I was ignorant of the sequence of execution of the <a href="https://webpack.js.org/api/compiler-hooks/" rel="nofollow">compiler hooks</a>.',Uo,us,jt='In the <a href="https://webpack.js.org/api/compiler-hooks/" rel="nofollow">docs for compiler hooks</a>, each hooks is executed in sequence:',Jo,xs,Ft="<li>...</li> <li>run</li> <li>...</li> <li>thisCompilation</li> <li>...</li> <li>emit</li> <li>afterEmit</li> <li>...</li>",Ro,fs,Dt='The webpack manifest plugin executes mainly <a href="https://github.com/danethurber/webpack-manifest-plugin/blob/63d3ee2/lib/plugin.js#L255" rel="nofollow">during the <code class="inline">emit</code> phase</a>, right before webpack writes all the assets into the output directory. And, we are modifying the template source in the <code class="inline">thisCompilation</code> phase, which is way before the <code class="inline">emit</code> phase. That&#39;s why <code class="inline">this.manifest</code> property is still undefined at the time of execution.',zo,ms,Xs,Ee=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompliation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// too late!</span></span></code></pre>`,Yo,ws,At='Upon reading the code fot he <code class="inline">webpack-manifest-plugin</code>, I realised that during the <code class="inline">emit</code> phase, I can access to the <code class="inline">compilation.assets</code>, and so, I could modifying the source for the assets during that time!',Bo,gs,so,je=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ManifestPlugin</span><span style="color: var(--shiki-color-text)">(manifestOptions)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get manifest from &#96;webpack-manifest-plugin&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-token-function)">.getCompilerHooks</span><span style="color: var(--shiki-color-text)">(compiler).</span><span style="color: var(--shiki-token-constant)">afterEmit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      manifest </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">emit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;const CSS_FILES = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.endsWith</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;.js&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">continue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets[file] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          prefix</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets[file]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Go,bs,Vt='Apparently that works, but I wonder whether is it a good practice to modifying the source of an asset during the <code class="inline">emit</code> phase? 🤔',Zo,_s,Wt='And, if you noticed, I need to append the <code class="inline">const CSS_FILES = [...]</code> to every file, that&#39;s because I have no idea in which file <code class="inline">CSS_FILES</code> is referenced. And because I declared it using <code class="inline">const</code>, it only exists within the file&#39;s scope, so I have to redeclare it all the other files.',oo,I,Nt='<h3><a href="#updated-feb-27-2020-1" id="updated-feb-27-2020-1">[Updated Feb 27, 2020]</a></h3> <p>According to <a href="https://twitter.com/evilebottnawi" rel="nofollow">@evilebottnawi</a> that this is not appropriate</p> <blockquote class="twitter-tweet"><p lang="en" dir="ltr">A lot of plugin uses `compiler.hooks.emit` for emitting new assets, it is invalid. Ideally plugins should use `compilation.hooks.additionalAssets` for adding new assets.</p>— evilebottnawi (@evilebottnawi) <a href="https://twitter.com/evilebottnawi/status/1230417598677954560?ref_src=twsrc%5Etfw">February 20, 2020</a></blockquote>',to,k,Cs,Ot='<a href="#the-3rd-approach" id="the-3rd-approach">The 3rd approach</a>',Ko,Ts,$t='I was still not convinced that this is the best I could do, so I continued looking around webpack&#39;s doc. I found a particular compilation hooks, <a href="https://webpack.js.org/api/compilation-hooks/#needadditionalpass" rel="nofollow"><code class="inline">needAdditionalPass</code></a>, which seems useful. It says, <em>&quot;Called to determine if an asset needs to be processed further after being emitted.&quot;</em>.',Qo,Ms,Ut='So, if I return <code class="inline">true</code> in the <code class="inline">needAdditionalPass</code>, webpack will re<code class="inline">compile</code> the asset again:',Xo,Ls,eo,Fe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">needAdditionalPass</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if it is always true, will lead to infinite loop!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,st,Is,ao,De=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompliation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// too late!</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">needAddtionalPass</span><span style="color: var(--shiki-color-text)"> (return </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// to start the compilation again</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompilation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// now &#96;this.manifest&#96; is available</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ... will continue run through every stages again</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,ot,Hs,Jt='Note that using <code class="inline">needAdditionalPass</code> will cause the build time to roughly doubled!',tt,Ps,Rt='You may argue that why do we need to rerun the <code class="inline">compilation</code> process again, isn&#39;t the end result can be equally achieved by modifying the assets source in the <code class="inline">emit</code> phase?',et,Ss,zt='Well, that&#39;s because, I realised I could make use <a href="https://github.com/webpack/webpack/blob/d426b6c/lib/DefinePlugin.js" rel="nofollow">some of the code from the <code class="inline">DefinePlugin</code></a>, which could replace the usage of <code class="inline">CSS_FILES</code> throughout the code. That way, I don&#39;t have to prefix every file with <code class="inline">const CSS_FILES = ...</code>.',at,qs,Yt='DefinePlugin uses something called <a href="https://webpack.js.org/api/parser/" rel="nofollow"><strong>JavaScriptParser Hooks</strong></a>, which you can rename a variable through <code class="inline">canRename</code> and <code class="inline">identifier</code> hooks or replace an expression through the <code class="inline">expression</code> hook:',nt,Es,no,Ae=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      (compilation</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; normalModuleFactory &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">normalModuleFactory</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-color-text)">.parser</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;javascript/auto&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parser </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-color-text)">.expression</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;CSS_FILES&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> expr </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ParserHelpers</span><span style="color: var(--shiki-token-function)">.toConstantDependency</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  parser</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                )(expr);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,lt,js,Bt='The complete code can be found in <a href="https://gist.github.com/tanhauhau/2dc6cc376fd190e05d14901b984c7fc1" rel="nofollow">this gist</a>.',it,Fs,Gt="An example of the compiled output:",rt,Ds,lo,Ve=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// replaced via parser hooks</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;http://cdn/assets/style.xxx.css&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,io,H,Zt='<h2><a href="#closing-notes" id="closing-notes">Closing Notes</a></h2> <p>The compile output for the 3rd approach seemed to be better (more precise?) than the other, yet I am not entirely sure using a <code class="inline">needAdditionalPass</code> is the right way of going about it.</p> <p>So, <a href="https://twitter.com/lihautan" rel="nofollow">let me know</a> if you have any thoughts or suggestions, yea?</p>',ro,P,Kt='<h3><a href="#updated-feb-27-2020-2" id="updated-feb-27-2020-2">[Updated Feb 27, 2020]</a></h3> <p>You can read <a href="https://twitter.com/lihautan/status/1230301241533583360" rel="nofollow">the discussions that&#39;s happening on Twitter</a>:</p> <blockquote class="twitter-tweet"><p lang="en" dir="ltr">Need some suggestions and inputs from <a href="https://twitter.com/webpack?ref_src=twsrc%5Etfw">@webpack</a> masters, I&#39;ve written the problem and approaches that I&#39;ve taken over here: <a href="https://t.co/gLsPG9Joeq">https://t.co/gLsPG9Joeq</a>, still I&#39;m not sure I am doing it right 🙈<a href="https://twitter.com/wSokra?ref_src=twsrc%5Etfw">@wSokra</a> <a href="https://twitter.com/evilebottnawi?ref_src=twsrc%5Etfw">@evilebottnawi</a></p>— Tan Li Hau (@lihautan) <a href="https://twitter.com/lihautan/status/1230301241533583360?ref_src=twsrc%5Etfw">February 20, 2020</a></blockquote>';return{c(){y=o("p"),y.textContent=L,T=e(),h=o("section"),x=o("h2"),x.innerHTML=M,q=e(),E=o("p"),E.textContent=ct,po=e(),j=o("p"),j.textContent=kt,co=e(),F=o("div"),As=new w(!1),ko=e(),D=o("div"),Vs=new w(!1),ho=e(),A=o("p"),A.innerHTML=ht,vo=e(),V=o("div"),Ws=new w(!1),yo=e(),W=o("p"),W.textContent=vt,uo=e(),N=o("p"),N.textContent=yt,xo=e(),O=o("p"),O.textContent=dt,Ns=e(),d=o("section"),$=o("h2"),$.innerHTML=ut,fo=e(),U=o("p"),U.innerHTML=xt,mo=e(),J=o("div"),Os=new w(!1),wo=e(),R=o("p"),R.innerHTML=ft,go=e(),z=o("p"),z.innerHTML=mt,bo=e(),Y=o("div"),$s=new w(!1),_o=e(),B=o("p"),B.innerHTML=wt,Co=e(),G=o("p"),G.innerHTML=gt,To=e(),Z=o("div"),Us=new w(!1),Mo=e(),K=o("p"),K.innerHTML=bt,Js=e(),f=o("section"),Q=o("h3"),Q.innerHTML=_t,Lo=e(),X=o("p"),X.innerHTML=Ct,Io=e(),ss=o("div"),Rs=new w(!1),Ho=e(),os=o("div"),zs=new w(!1),Po=e(),ts=o("p"),ts.textContent=Tt,So=e(),es=o("div"),Ys=new w(!1),qo=e(),as=o("p"),as.innerHTML=Mt,Eo=e(),ns=o("div"),Bs=new w(!1),jo=e(),ls=o("p"),ls.innerHTML=Lt,Gs=e(),i=o("section"),is=o("h2"),is.innerHTML=It,Fo=e(),rs=o("p"),rs.innerHTML=Ht,Do=e(),ps=o("div"),Zs=new w(!1),Ao=e(),cs=o("p"),cs.innerHTML=Pt,Vo=e(),ks=o("p"),ks.innerHTML=St,Wo=e(),hs=o("div"),Ks=new w(!1),No=e(),vs=o("p"),vs.textContent=qt,Oo=e(),ys=o("div"),Qs=new w(!1),$o=e(),ds=o("p"),ds.innerHTML=Et,Uo=e(),us=o("p"),us.innerHTML=jt,Jo=e(),xs=o("ul"),xs.innerHTML=Ft,Ro=e(),fs=o("p"),fs.innerHTML=Dt,zo=e(),ms=o("div"),Xs=new w(!1),Yo=e(),ws=o("p"),ws.innerHTML=At,Bo=e(),gs=o("div"),so=new w(!1),Go=e(),bs=o("p"),bs.innerHTML=Vt,Zo=e(),_s=o("p"),_s.innerHTML=Wt,oo=e(),I=o("section"),I.innerHTML=Nt,to=e(),k=o("section"),Cs=o("h2"),Cs.innerHTML=Ot,Ko=e(),Ts=o("p"),Ts.innerHTML=$t,Qo=e(),Ms=o("p"),Ms.innerHTML=Ut,Xo=e(),Ls=o("div"),eo=new w(!1),st=e(),Is=o("div"),ao=new w(!1),ot=e(),Hs=o("p"),Hs.innerHTML=Jt,tt=e(),Ps=o("p"),Ps.innerHTML=Rt,et=e(),Ss=o("p"),Ss.innerHTML=zt,at=e(),qs=o("p"),qs.innerHTML=Yt,nt=e(),Es=o("div"),no=new w(!1),lt=e(),js=o("p"),js.innerHTML=Bt,it=e(),Fs=o("p"),Fs.textContent=Gt,rt=e(),Ds=o("div"),lo=new w(!1),io=e(),H=o("section"),H.innerHTML=Zt,ro=e(),P=o("section"),P.innerHTML=Kt,this.h()},l(p){y=t(p,"P",{"data-svelte-h":!0}),n(y)!=="svelte-ysjodh"&&(y.textContent=L),T=a(p),h=t(p,"SECTION",{});var r=u(h);x=t(r,"H2",{"data-svelte-h":!0}),n(x)!=="svelte-1170p0y"&&(x.innerHTML=M),q=a(r),E=t(r,"P",{"data-svelte-h":!0}),n(E)!=="svelte-1q9vkyp"&&(E.textContent=ct),po=a(r),j=t(r,"P",{"data-svelte-h":!0}),n(j)!=="svelte-1dbvvx5"&&(j.textContent=kt),co=a(r),F=t(r,"DIV",{class:!0});var Qt=u(F);As=g(Qt,!1),Qt.forEach(l),ko=a(r),D=t(r,"DIV",{class:!0});var Xt=u(D);Vs=g(Xt,!1),Xt.forEach(l),ho=a(r),A=t(r,"P",{"data-svelte-h":!0}),n(A)!=="svelte-1qd79vp"&&(A.innerHTML=ht),vo=a(r),V=t(r,"DIV",{class:!0});var se=u(V);Ws=g(se,!1),se.forEach(l),yo=a(r),W=t(r,"P",{"data-svelte-h":!0}),n(W)!=="svelte-d3vget"&&(W.textContent=vt),uo=a(r),N=t(r,"P",{"data-svelte-h":!0}),n(N)!=="svelte-1sdyabv"&&(N.textContent=yt),xo=a(r),O=t(r,"P",{"data-svelte-h":!0}),n(O)!=="svelte-phwbbn"&&(O.textContent=dt),r.forEach(l),Ns=a(p),d=t(p,"SECTION",{});var m=u(d);$=t(m,"H2",{"data-svelte-h":!0}),n($)!=="svelte-w2uy15"&&($.innerHTML=ut),fo=a(m),U=t(m,"P",{"data-svelte-h":!0}),n(U)!=="svelte-b43etq"&&(U.innerHTML=xt),mo=a(m),J=t(m,"DIV",{class:!0});var oe=u(J);Os=g(oe,!1),oe.forEach(l),wo=a(m),R=t(m,"P",{"data-svelte-h":!0}),n(R)!=="svelte-rq9l8v"&&(R.innerHTML=ft),go=a(m),z=t(m,"P",{"data-svelte-h":!0}),n(z)!=="svelte-b6n6q9"&&(z.innerHTML=mt),bo=a(m),Y=t(m,"DIV",{class:!0});var te=u(Y);$s=g(te,!1),te.forEach(l),_o=a(m),B=t(m,"P",{"data-svelte-h":!0}),n(B)!=="svelte-1n9kgss"&&(B.innerHTML=wt),Co=a(m),G=t(m,"P",{"data-svelte-h":!0}),n(G)!=="svelte-1hv5kv0"&&(G.innerHTML=gt),To=a(m),Z=t(m,"DIV",{class:!0});var ee=u(Z);Us=g(ee,!1),ee.forEach(l),Mo=a(m),K=t(m,"P",{"data-svelte-h":!0}),n(K)!=="svelte-1pjtx0m"&&(K.innerHTML=bt),m.forEach(l),Js=a(p),f=t(p,"SECTION",{});var _=u(f);Q=t(_,"H3",{"data-svelte-h":!0}),n(Q)!=="svelte-uqttpl"&&(Q.innerHTML=_t),Lo=a(_),X=t(_,"P",{"data-svelte-h":!0}),n(X)!=="svelte-tgi7w4"&&(X.innerHTML=Ct),Io=a(_),ss=t(_,"DIV",{class:!0});var ae=u(ss);Rs=g(ae,!1),ae.forEach(l),Ho=a(_),os=t(_,"DIV",{class:!0});var ne=u(os);zs=g(ne,!1),ne.forEach(l),Po=a(_),ts=t(_,"P",{"data-svelte-h":!0}),n(ts)!=="svelte-u959r1"&&(ts.textContent=Tt),So=a(_),es=t(_,"DIV",{class:!0});var le=u(es);Ys=g(le,!1),le.forEach(l),qo=a(_),as=t(_,"P",{"data-svelte-h":!0}),n(as)!=="svelte-1vtvolb"&&(as.innerHTML=Mt),Eo=a(_),ns=t(_,"DIV",{class:!0});var ie=u(ns);Bs=g(ie,!1),ie.forEach(l),jo=a(_),ls=t(_,"P",{"data-svelte-h":!0}),n(ls)!=="svelte-1xec9jt"&&(ls.innerHTML=Lt),_.forEach(l),Gs=a(p),i=t(p,"SECTION",{});var c=u(i);is=t(c,"H2",{"data-svelte-h":!0}),n(is)!=="svelte-oniz55"&&(is.innerHTML=It),Fo=a(c),rs=t(c,"P",{"data-svelte-h":!0}),n(rs)!=="svelte-33uppf"&&(rs.innerHTML=Ht),Do=a(c),ps=t(c,"DIV",{class:!0});var re=u(ps);Zs=g(re,!1),re.forEach(l),Ao=a(c),cs=t(c,"P",{"data-svelte-h":!0}),n(cs)!=="svelte-houss4"&&(cs.innerHTML=Pt),Vo=a(c),ks=t(c,"P",{"data-svelte-h":!0}),n(ks)!=="svelte-1gaj1dr"&&(ks.innerHTML=St),Wo=a(c),hs=t(c,"DIV",{class:!0});var pe=u(hs);Ks=g(pe,!1),pe.forEach(l),No=a(c),vs=t(c,"P",{"data-svelte-h":!0}),n(vs)!=="svelte-mv1nno"&&(vs.textContent=qt),Oo=a(c),ys=t(c,"DIV",{class:!0});var ce=u(ys);Qs=g(ce,!1),ce.forEach(l),$o=a(c),ds=t(c,"P",{"data-svelte-h":!0}),n(ds)!=="svelte-1df3140"&&(ds.innerHTML=Et),Uo=a(c),us=t(c,"P",{"data-svelte-h":!0}),n(us)!=="svelte-1gcryt0"&&(us.innerHTML=jt),Jo=a(c),xs=t(c,"UL",{"data-svelte-h":!0}),n(xs)!=="svelte-4geso0"&&(xs.innerHTML=Ft),Ro=a(c),fs=t(c,"P",{"data-svelte-h":!0}),n(fs)!=="svelte-14kom0m"&&(fs.innerHTML=Dt),zo=a(c),ms=t(c,"DIV",{class:!0});var ke=u(ms);Xs=g(ke,!1),ke.forEach(l),Yo=a(c),ws=t(c,"P",{"data-svelte-h":!0}),n(ws)!=="svelte-13aa8fa"&&(ws.innerHTML=At),Bo=a(c),gs=t(c,"DIV",{class:!0});var he=u(gs);so=g(he,!1),he.forEach(l),Go=a(c),bs=t(c,"P",{"data-svelte-h":!0}),n(bs)!=="svelte-fcl6te"&&(bs.innerHTML=Vt),Zo=a(c),_s=t(c,"P",{"data-svelte-h":!0}),n(_s)!=="svelte-gigx84"&&(_s.innerHTML=Wt),c.forEach(l),oo=a(p),I=t(p,"SECTION",{"data-svelte-h":!0}),n(I)!=="svelte-ldjm2s"&&(I.innerHTML=Nt),to=a(p),k=t(p,"SECTION",{});var v=u(k);Cs=t(v,"H2",{"data-svelte-h":!0}),n(Cs)!=="svelte-u3uzx0"&&(Cs.innerHTML=Ot),Ko=a(v),Ts=t(v,"P",{"data-svelte-h":!0}),n(Ts)!=="svelte-f0dlea"&&(Ts.innerHTML=$t),Qo=a(v),Ms=t(v,"P",{"data-svelte-h":!0}),n(Ms)!=="svelte-1or16nr"&&(Ms.innerHTML=Ut),Xo=a(v),Ls=t(v,"DIV",{class:!0});var ve=u(Ls);eo=g(ve,!1),ve.forEach(l),st=a(v),Is=t(v,"DIV",{class:!0});var ye=u(Is);ao=g(ye,!1),ye.forEach(l),ot=a(v),Hs=t(v,"P",{"data-svelte-h":!0}),n(Hs)!=="svelte-kbttva"&&(Hs.innerHTML=Jt),tt=a(v),Ps=t(v,"P",{"data-svelte-h":!0}),n(Ps)!=="svelte-1sidnsi"&&(Ps.innerHTML=Rt),et=a(v),Ss=t(v,"P",{"data-svelte-h":!0}),n(Ss)!=="svelte-vbrgdw"&&(Ss.innerHTML=zt),at=a(v),qs=t(v,"P",{"data-svelte-h":!0}),n(qs)!=="svelte-oowj3s"&&(qs.innerHTML=Yt),nt=a(v),Es=t(v,"DIV",{class:!0});var de=u(Es);no=g(de,!1),de.forEach(l),lt=a(v),js=t(v,"P",{"data-svelte-h":!0}),n(js)!=="svelte-1qln6wt"&&(js.innerHTML=Bt),it=a(v),Fs=t(v,"P",{"data-svelte-h":!0}),n(Fs)!=="svelte-108q9lb"&&(Fs.textContent=Gt),rt=a(v),Ds=t(v,"DIV",{class:!0});var ue=u(Ds);lo=g(ue,!1),ue.forEach(l),v.forEach(l),io=a(p),H=t(p,"SECTION",{"data-svelte-h":!0}),n(H)!=="svelte-yt6mgh"&&(H.innerHTML=Zt),ro=a(p),P=t(p,"SECTION",{"data-svelte-h":!0}),n(P)!=="svelte-19h2aya"&&(P.innerHTML=Kt),this.h()},h(){As.a=null,b(F,"class","code-section"),Vs.a=null,b(D,"class","code-section"),Ws.a=null,b(V,"class","code-section"),Os.a=null,b(J,"class","code-section"),$s.a=null,b(Y,"class","code-section"),Us.a=null,b(Z,"class","code-section"),Rs.a=null,b(ss,"class","code-section"),zs.a=null,b(os,"class","code-section"),Ys.a=null,b(es,"class","code-section"),Bs.a=null,b(ns,"class","code-section"),Zs.a=null,b(ps,"class","code-section"),Ks.a=null,b(hs,"class","code-section"),Qs.a=null,b(ys,"class","code-section"),Xs.a=null,b(ms,"class","code-section"),so.a=null,b(gs,"class","code-section"),eo.a=null,b(Ls,"class","code-section"),ao.a=null,b(Is,"class","code-section"),no.a=null,b(Es,"class","code-section"),lo.a=null,b(Ds,"class","code-section")},m(p,r){C(p,y,r),C(p,T,r),C(p,h,r),s(h,x),s(h,q),s(h,E),s(h,po),s(h,j),s(h,co),s(h,F),As.m(we,F),s(h,ko),s(h,D),Vs.m(ge,D),s(h,ho),s(h,A),s(h,vo),s(h,V),Ws.m(be,V),s(h,yo),s(h,W),s(h,uo),s(h,N),s(h,xo),s(h,O),C(p,Ns,r),C(p,d,r),s(d,$),s(d,fo),s(d,U),s(d,mo),s(d,J),Os.m(_e,J),s(d,wo),s(d,R),s(d,go),s(d,z),s(d,bo),s(d,Y),$s.m(Ce,Y),s(d,_o),s(d,B),s(d,Co),s(d,G),s(d,To),s(d,Z),Us.m(Te,Z),s(d,Mo),s(d,K),C(p,Js,r),C(p,f,r),s(f,Q),s(f,Lo),s(f,X),s(f,Io),s(f,ss),Rs.m(Me,ss),s(f,Ho),s(f,os),zs.m(Le,os),s(f,Po),s(f,ts),s(f,So),s(f,es),Ys.m(Ie,es),s(f,qo),s(f,as),s(f,Eo),s(f,ns),Bs.m(He,ns),s(f,jo),s(f,ls),C(p,Gs,r),C(p,i,r),s(i,is),s(i,Fo),s(i,rs),s(i,Do),s(i,ps),Zs.m(Pe,ps),s(i,Ao),s(i,cs),s(i,Vo),s(i,ks),s(i,Wo),s(i,hs),Ks.m(Se,hs),s(i,No),s(i,vs),s(i,Oo),s(i,ys),Qs.m(qe,ys),s(i,$o),s(i,ds),s(i,Uo),s(i,us),s(i,Jo),s(i,xs),s(i,Ro),s(i,fs),s(i,zo),s(i,ms),Xs.m(Ee,ms),s(i,Yo),s(i,ws),s(i,Bo),s(i,gs),so.m(je,gs),s(i,Go),s(i,bs),s(i,Zo),s(i,_s),C(p,oo,r),C(p,I,r),C(p,to,r),C(p,k,r),s(k,Cs),s(k,Ko),s(k,Ts),s(k,Qo),s(k,Ms),s(k,Xo),s(k,Ls),eo.m(Fe,Ls),s(k,st),s(k,Is),ao.m(De,Is),s(k,ot),s(k,Hs),s(k,tt),s(k,Ps),s(k,et),s(k,Ss),s(k,at),s(k,qs),s(k,nt),s(k,Es),no.m(Ae,Es),s(k,lt),s(k,js),s(k,it),s(k,Fs),s(k,rt),s(k,Ds),lo.m(Ve,Ds),C(p,io,r),C(p,H,r),C(p,ro,r),C(p,P,r)},p:Oe,d(p){p&&(l(y),l(T),l(h),l(Ns),l(d),l(Js),l(f),l(Gs),l(i),l(oo),l(I),l(to),l(k),l(io),l(H),l(ro),l(P))}}}function sa(S){let y,L;const T=[S[0],me];let h={$$slots:{default:[Xe]},$$scope:{ctx:S}};for(let x=0;x<T.length;x+=1)h=pt(h,T[x]);return y=new Ke({props:h}),{c(){Je(y.$$.fragment)},l(x){Re(y.$$.fragment,x)},m(x,M){ze(y,x,M),L=!0},p(x,[M]){const q=M&1?Ze(T,[M&1&&fe(x[0]),M&0&&fe(me)]):{};M&2&&(q.$$scope={dirty:M,ctx:x}),y.$set(q)},i(x){L||(Ye(y.$$.fragment,x),L=!0)},o(x){Be(y.$$.fragment,x),L=!1},d(x){Ge(y,x)}}}const me={title:"Webpack Additional Compilation Pass",date:"2020-02-20T08:00:00Z",lastUpdated:"2020-02-27T08:00:00Z",label:"blog",description:'Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires "double compilation" with webpack.The problemI am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it....',tableOfContents:[{link:"the-problem",title:"The problem"},{link:"the-1st-approach",title:"The 1st approach",nested:[{link:"updated-feb-27-2020",title:"Updated Feb 27, 2020"}]},{link:"the-2nd-approach",title:"The 2nd approach",nested:[{link:"updated-feb-27-2020-1",title:"Updated Feb 27, 2020"}]},{link:"the-3rd-approach",title:"The 3rd approach"},{link:"closing-notes",title:"Closing Notes",nested:[{link:"updated-feb-27-2020-2",title:"Updated Feb 27, 2020"}]}]};function oa(S,y,L){return Ne("blog",{image:Qe}),S.$$set=T=>{L(0,y=pt(pt({},y),xe(T)))},y=xe(y),[y]}class ia extends $e{constructor(y){super(),Ue(this,y,oa,sa,We,{})}}export{ia as component};
