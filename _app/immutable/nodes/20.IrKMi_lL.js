import{s as Il,d as ie,e as Sl,f as el,n as Dl}from"../chunks/scheduler.D6VJxl8L.js";import{S as ql,i as Ol,m as $l,n as Vl,o as Al,t as Nl,a as Ul,p as Wl,e as n,s as t,H as h,c as a,q as i,h as e,d as r,r as y,g as l,u as m,j as c,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as zl,a as ol}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Yl}from"../chunks/BlogLayout.BLHkC4CD.js";const Jl=""+new URL("../assets/hero-twitter.BMrKKOqc.jpg",import.meta.url).href;function Rl(Z){let g,z='<strong>⬅ ⬅  Previously in <a href="/compile-svelte-in-your-head-part-2/">Part 2</a>.</strong>',O,q,C='<a href="/compile-svelte-in-your-head-part-2/">Previously</a>, I detailed how <code class="inline">$$invalidate</code> works, described how bitmask was used in <code class="inline">$$invalidate</code>, and explained how reactive declarations work as well.',S,$,pe="In this article, we are going to look into 3 DOM related directives:",Wn,J,ce='<li><code class="inline">on:</code> for event handlers</li> <li><code class="inline">bind:</code> for bindings</li> <li><code class="inline">use:</code> for actions</li>',zn,R,re="To make sure we are on the same page, let's first explain how these 3 directives work.",Yn,B,ke='<h2><a href="#the-on-bind-and-use" id="the-on-bind-and-use">The <code class="inline">on:</code>, <code class="inline">bind:</code> and <code class="inline">use:</code></a></h2>',Jn,V,Q,ve='<a href="#on-event-handlers" id="on-event-handlers"><code class="inline">on:</code> event handlers</a>',Ia,X,ue='You can use the <code class="inline">on:</code> directive to listen to any event on an element:',Sa,ss,Rn,il='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">handleMouseMove</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can pass in as variable --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>mousemove=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleMouseMove<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- or you can inline the event handler --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>mousemove=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can modify event handler with modifiers  --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click|stopPropagation|once=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div></code></pre>',Bn,D,ns,de='<a href="#bind-bindings" id="bind-bindings"><code class="inline">bind:</code> bindings</a>',Da,as,he='The <code class="inline">bind:</code> directive allows you to bind a variable to a property of an element.',qa,ts,ye="Updating the variable will modifying the property of the element, conversely, modifying the property of the element via interacting with the element will, in turn, update the variable.",Oa,es,Fn,pl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name<span class="token punctuation">,</span> yes<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can bind &#96;name&#96; to input.value --></span></div><div class="line"><span class="token comment">&lt;!-- Changing &#96;name&#96; will update input.value to be the value of &#96;name&#96; and --></span></div><div class="line"><span class="token comment">&lt;!-- changing input.value will update &#96;name&#96; to be input.value --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can bind input.checked for a checkbox input --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>yes<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Kn,d,os,me='<a href="#use-actions" id="use-actions"><code class="inline">use:</code> actions</a>',$a,ls,ge='The <code class="inline">use:</code> directive is called <strong><a href="https://svelte.dev/tutorial/actions" rel="nofollow">&quot;Action&quot;</a></strong>. It provides you an interface to enhance your element.',Va,is,fe='You pass a function to the <code class="inline">use:</code> directive of an element and the function will be called when your element is mounted.',Aa,ps,xe='The function should return an object in which the <code class="inline">destroy</code> method of the object will be called when the element is unmounted.',Na,cs,Gn,cl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token comment">// do something with the element</span></div><div class="line">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">        <span class="token comment">// cleanup</span></div><div class="line">      <span class="token punctuation">&#125;</span></div><div class="line">    <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething</span> <span class="token punctuation">/></span></span></div></code></pre>',Ua,rs,we="This is useful when you want to interface with 3rd-party libraries:",Wa,ks,Zn,rl=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">import</span> Draggable <span class="token keyword">from</span> <span class="token string">'the-draggable-library'</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    <span class="token keyword">const</span> draggable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line highlight">    draggable<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line dim">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">        draggable<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">      <span class="token punctuation">&#125;</span></div><div class="line dim">    <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething</span> <span class="token punctuation">/></span></span></div></code></pre>`,za,vs,_e='You can pass in parameters to the <code class="inline">use:</code> directive, to bring in reactivity into your actions',Ya,us,Qn,kl=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">import</span> Draggable <span class="token keyword">from</span> <span class="token string">'the-draggable-library'</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">  <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line highlight">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    <span class="token keyword">const</span> draggable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    draggable<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">      <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">        draggable<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line highlight">      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></div><div class="line dim">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">        draggable<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">      <span class="token punctuation">&#125;</span></div><div class="line dim">    <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim">  Foo</div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">.</span>bar<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim">  Bar</div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></div></code></pre>`,Ja,ds,be="You can visit Svelte's interactive tutorial to learn more about:",Ra,hs,Ce='<li><a href="https://svelte.dev/tutorial/dom-events" rel="nofollow">event handlers with <code class="inline">on:</code></a></li> <li><a href="https://svelte.dev/tutorial/text-inputs" rel="nofollow">bindings with <code class="inline">bind:</code></a></li> <li><a href="https://svelte.dev/tutorial/actions" rel="nofollow">actions with <code class="inline">use:</code></a></li>',Xn,F,Te='<h2><a href="#the-vanilla-js" id="the-vanilla-js">The Vanilla JS</a></h2> <p>Now, let&#39;s refresh ourselves with how we can implement an event handler, bindings, and actions without using any framework.</p>',sa,H,ys,Le='<a href="#event-handler" id="event-handler">Event handler</a>',Ba,ms,Me='As <a href="/compile-svelte-in-your-head-part-1/#listen-for-click-events-on-an-element">mentioned in the Part 1 of the series</a>, we can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow">element.addEventListener</a> to listen to events.',Fa,gs,na,vl='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick);</span></span></code></pre>',Ka,fs,He="The event listener takes in an optional 3rd argument, which allows you to specifies the characteristics of the event handler:",Ga,xs,aa,ul=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  capture</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// triggered before any child element</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// triggered at most once</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// indicates that will never call &#96;preventDefault&#96; to improve performance</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,ta,A,ws,Pe='<a href="#event-preventdefault" id="event-preventdefault">event.preventDefault</a>',Za,_s,Ee='<a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault" rel="nofollow">event.preventDefault</a> allows you to prevent the default behavior of the event, for example submitting form for <code class="inline">&lt;button type=&quot;submit&quot; /&gt;</code> or navigating to the target for <code class="inline">&lt;a href=&quot;...&quot;&gt;</code>.',Qa,bs,ea,dl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-token-function)">.preventDefault</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,oa,P,Cs,je='<a href="#event-stoppropagation" id="event-stoppropagation">event.stopPropagation</a>',Xa,Ts,Ie='<a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation" rel="nofollow">event.stopPropagation</a> allows you to prevent event to continue propagate.',st,Ls,la,hl=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></div><div class="line dim">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click not triggered'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim"><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>`,nt,Ms,Se='To remove the event listener, you need to call <code class="inline">element.removeEventListener</code> with the same event <code class="inline">type</code>, <code class="inline">listener</code> and <code class="inline">capture</code>/<code class="inline">useCapture</code> flag. You can check out the <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#Matching_event_listeners_for_removal" rel="nofollow">MDN docs on &quot;Matching event listeners for removal&quot;</a>.',at,Hs,ia,yl='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick);</span></span></code></pre>',pa,u,Ps,De='<a href="#bindings" id="bindings">Bindings</a>',tt,Es,qe="Binding is to synchronise between the value of a variable and a property of an element.",et,js,Oe="To synchronise the variable to a property of an element, we need to observe the value of the variable. When it changes, apply it to the property of the element.",ot,Is,$e='<em>You can check out my previous article <a href="/reactivity-in-web-frameworks-the-when/">&quot;Reactivity in Web Frameworks&quot;</a> on how we get notified when the value of a variable changed.</em>',lt,Ss,Ve="On the other hand, to synchronise the property of an element to a variable, we <strong>listen to an event of the element</strong>, depending on the property, and update the value of the variable when it happens.",it,Ds,ca,ml=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// binding variable &#96;checked&#96; with the checkbox &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> checked;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#checkbox&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// synchronise variable &#96;checked&#96; to checkbox &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">observe</span><span style="color: var(--shiki-color-text)">(checked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// synchronise checkbox &#96;checked&#96; property to variable &#96;checked&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// listen to &#96;change&#96; event for &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,pt,qs,Ae="Some observations:",ct,Os,Ne="<strong>- The name of the event and the property name of the element may not be the same.</strong>",rt,$s,Ue='In this example, we listen to <code class="inline">&quot;change&quot;</code> event for the checkbox <code class="inline">checked</code> property.',kt,Vs,We="<strong>- It is almost impossible to bind a property of an element, if there&#39;s no event fired from the element to indicate the property has changed</strong>",vt,As,ze='A recent example I found out is the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement" rel="nofollow">HTMLDialogElement</a>. It has <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close_event" rel="nofollow"><code class="inline">&quot;close&quot;</code></a> but not <code class="inline">&quot;open&quot;</code> event, which makes it hard to implement <code class="inline">bind:open</code> on the dialog element.',ut,Ns,Ye='Maybe an alternative would be using <a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver" rel="nofollow">MutationObserver</a>, which I haven&#39;t seen any usage of it in Svelte codebase yet.',ra,E,Us,Je='<a href="#actions" id="actions">Actions</a>',dt,Ws,Re="Action is a function that gets called when your element is created and mounted onto the DOM.",ht,zs,Be="The function returns an object, with 2 methods:",yt,Ys,Fe='<li><code class="inline">update</code>, which gets called when the parameters change</li> <li><code class="inline">destroy</code>, which gets called when the element is removed from the DOM</li>',mt,Js,ka,gl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">actionFn</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parameter) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(newParameter) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">destroy</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When element is mounted onto the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> parameter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">actionFn</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parameter);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When parameter changes</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">parameter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(parameter);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When element is removed from the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,va,K,Ke='<h2><a href="#the-compiled-js" id="the-compiled-js">The Compiled JS</a></h2> <p>Now let&#39;s take look at how Svelte compiles <code class="inline">on:</code>, <code class="inline">bind:</code> and <code class="inline">use:</code> directives into output JavaScript.</p>',ua,w,Rs,Ge='<a href="#on-directive" id="on-directive"><code class="inline">on:</code> directive</a>',gt,Bs,da,fl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',ft,Fs,Ze='<a href="https://svelte.dev/repl/0ea0c22e9fd648518cfc1231835b0f05" rel="nofollow">Svelte REPL</a>',xt,Ks,Qe="The output code:",wt,Gs,ha,xl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      input </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;input&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onChange*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onChange</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [onChange];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,_t,Zs,Xe="Some observations:",bt,Qs,so='<li>Svelte adds event handler, <code class="inline">listen(...)</code>, in the <strong>_m_ount</strong> method.</li> <li>Svelte removes event handler, <code class="inline">dispose()</code>, in the <strong>_d_estroy</strong> method.</li>',Ct,Xs,no='As pointed out in <a href="/compile-svelte-in-your-head-part-1/#listen-and-dispose">Part 1 #listen and dispose</a>, to optimise for minification, the <code class="inline">dispose</code> variable could be a function or an array of functions, depending on having one or many event handlers.',Tt,sn,ao='We will discuss <code class="inline">remount</code> in the future, as it is related to remounting elements while reordering items within each block.',ya,f,nn,to='<a href="#event-modifiers" id="event-modifiers">Event modifiers</a>',Lt,an,eo="Event handlers can have modifiers that alter their behavior.",Mt,tn,ma,wl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		i<span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click|preventDefault=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|stopPropagation=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|once=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|capture=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- Chain multiple modifiers --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click|preventDefault|stopPropagation|once|capture=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Ht,en,oo='<a href="https://svelte.dev/repl/11fffa988c1f49239c005619c3b506c5" rel="nofollow">Svelte REPL</a>',Pt,on,lo="The output code:",Et,ln,ga,_l=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stop_propagation</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          button4</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">stop_propagation</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          &#123; once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> capture</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      ];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jt,pn,io="Some observations:",It,cn,po='<li>Svelte handles different modifiers differently.</li> <li>For <code class="inline">capture</code>, <code class="inline">once</code>, and <code class="inline">passive</code> modifiers, which they are part of the options for <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow">element.addEventListener</a>, they will be passed as options into the <code class="inline">listen</code> function.</li> <li>For <code class="inline">stopPropagation</code>, <code class="inline">preventDefault</code>, and <code class="inline">self</code> modifiers, the event handler is decorated with respective decorator functions.</li>',St,rn,co='An example implementation of the <code class="inline">prevent_default</code> decorator function:',Dt,kn,fa,bl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(event) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-token-function)">.preventDefault</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xa,T,vn,ro='<a href="#bind-directive" id="bind-directive"><code class="inline">bind:</code> directive</a>',qt,un,wa,Cl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">updateChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked</span> <span class="token punctuation">/></span></span></div></code></pre>',Ot,dn,ko='<a href="https://svelte.dev/repl/22ff0420e32f427c8b20e878a44170d3" rel="nofollow">Svelte REPL</a>',$t,hn,vo="The output code:",Vt,yn,_a,Tl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*input_change_handler*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateChecked</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">input_change_handler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.checked;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> checked);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [checked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input_change_handler];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,At,mn,uo="Some observations:",Nt,gn,ho='<li>To synchronise the value of the variable to the property of the element:<ul><li>Svelte wraps the update of the variable <code class="inline">checked</code> with <code class="inline">$$invalidate(...)</code></li> <li>In the <strong>u_p_date</strong> method, if the variable <code class="inline">checked</code> is updated, Svelte sets <code class="inline">input.checked</code> to the value of the variable <code class="inline">checked</code>.</li></ul></li> <li>To syncrhonise the property of the element to the variable<ul><li>Svelte creates an input handler that reads the <code class="inline">this.checked</code> property of the input and calls <code class="inline">$$invalidate(...)</code> to update it.</li> <li>Svelte sets up <code class="inline">listen(...)</code> in the <strong>_m_ount</strong> method and <code class="inline">dispose(...)</code> in the <strong>_d_estroy</strong> method for the input handler</li></ul></li>',ba,L,fn,yo='<a href="#use-directive" id="use-directive"><code class="inline">use:</code> directive</a>',Ut,xn,Ca,Ll=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">updateI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>action=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>`,Wt,wn,mo='<a href="https://svelte.dev/repl/88bbecb8b86943fd80d9d428961251ae" rel="nofollow">Svelte REPL</a>',zt,_n,go="The output code:",Yt,bn,Ta,Ml=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> action_action;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">action_destroyer</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        (action_action </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">action</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (action_action </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">is_function</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">action_action</span><span style="color: var(--shiki-color-text)">.update) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">action_action</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(div);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jt,Cn,fo="Some observations:",Rt,Tn,xo='<li>Creating <code class="inline">action_action</code> object by calling the <code class="inline">action</code> function in the <strong>_m_out</strong> method</li> <li>When the paramter change, call the <code class="inline">action_action.update</code> method with the updated parameter in the <strong>u_p_date</strong> method</li> <li><code class="inline">action_destroyer</code> returns the <code class="inline">dispose</code> function. The <code class="inline">dispose</code> function makes sure that <code class="inline">action_action.destroy</code> is a function before calling it.</li>',La,k,Ln,wo='<a href="#the-order-of-directives" id="the-order-of-directives">The order of directives</a>',Bt,Mn,_o='As both the <code class="inline">bind:</code> and the <code class="inline">on:</code> directives add event listeners to the element, the order of adding event listener may have nuance side effects.',Ft,Hn,bo="Imagine the following scenario:",Kt,Pn,Ma,Hl=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token string">''</span></div><div class="line">  <span class="token keyword">let</span> after <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token comment">// modifying the input.value</span></div><div class="line">    event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind after adding input listener --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">on:</span>input=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>uppercase<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind before adding input listener --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">on:</span>input=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>uppercase<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span></div></code></pre>`,Gt,En,Co='The <code class="inline">input.value</code> accessed by the implicit event handler of the <code class="inline">bind:</code> directive depends on whether <code class="inline">on:input</code> handler gets called before or after.',Zt,jn,To='If the implicit event handler of the <code class="inline">bind:</code> directive is called before the event handler, the bound value is the value of the input before applying the <code class="inline">toUpperCase()</code> transformation.',Qt,In,Lo='Although <code class="inline">action:</code> directive itself does not add event listener to the element, but it is possible to be added by the user code:',Xt,Sn,Ha,Pl=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token string">''</span></div><div class="line">  <span class="token keyword">let</span> after <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">uppercaseAction</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">      event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></div><div class="line">    <span class="token punctuation">&#125;</span></div><div class="line">    element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">        element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">      <span class="token punctuation">&#125;</span></div><div class="line">    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind after adding action --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">use:</span>uppercase</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind before adding action --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">use:</span>uppercase</span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span></div></code></pre>`,se,Dn,Mo='Although it is not officially documented, <em>(I couldn&#39;t find it on the docs)</em>, <strong>the order of declaring the directives <code class="inline">on:</code>, <code class="inline">bind:</code> and <code class="inline">use:</code> on an element does matter</strong> to provide a consistent behavior.',ne,qn,Ho="Try out the following example in the REPL:",ae,On,Pa,El='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> checked<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></div><div class="line">  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>checkbox</span></div><div class="line">  <span class="token attr-name"><span class="token namespace">bind:</span>checked</span></div><div class="line">  <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token attr-name"><span class="token namespace">use:</span>action</span></div><div class="line"><span class="token punctuation">/></span></span></div></code></pre>',te,$n,Po='<a href="https://svelte.dev/repl/f06a8a59840c418b86c43c2875d4b274" rel="nofollow">Svelte REPL</a>',ee,Vn,Eo='Try reordering the <code class="inline">bind:</code>, <code class="inline">on:</code> and <code class="inline">use:</code> directives and see how it affects the output JS:',oe,An,Ea,jl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> action_action;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// bind:checked</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*input_change_handler*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// on:change=&#123;onChange&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> onChange)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// use:action</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">action_destroyer</span><span style="color: var(--shiki-color-text)">((action_action </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">action</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      ];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,le,Nn,jo='If you are interested to learn more about ordering directives, the edge cases it fixed and the regression bugs it caused, you can start with <a href="https://github.com/sveltejs/svelte/issues/2446" rel="nofollow">this Github issue</a>.',ja,G,Io='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>In this article, we explored how <code class="inline">on:</code>, <code class="inline">bind:</code> and <code class="inline">use:</code> directives work.</p> <p>We first looked at how we can implement them without using any framework. After that, we walked through how Svelte compiles the directives into JavaScript.</p> <p>We&#39;ve also talked about how the order of declaring directives on an element matters.</p> <p>If you wish to know more, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>I&#39;ll post it on Twitter when the next part is ready, where I&#39;ll be covering <a href="https://svelte.dev/tutorial/if-blocks" rel="nofollow">logic blocks</a>, <a href="https://svelte.dev/tutorial/slots" rel="nofollow">slots</a>, <a href="https://svelte.dev/tutorial/context-api" rel="nofollow">context</a>, and many others.</p> <p><strong>⬅ ⬅  Previously in <a href="/compile-svelte-in-your-head-part-2/">Part 2</a>.</strong></p>';return{c(){g=n("p"),g.innerHTML=z,O=t(),q=n("p"),q.innerHTML=C,S=t(),$=n("p"),$.textContent=pe,Wn=t(),J=n("ul"),J.innerHTML=ce,zn=t(),R=n("p"),R.textContent=re,Yn=t(),B=n("section"),B.innerHTML=ke,Jn=t(),V=n("section"),Q=n("h3"),Q.innerHTML=ve,Ia=t(),X=n("p"),X.innerHTML=ue,Sa=t(),ss=n("div"),Rn=new h(!1),Bn=t(),D=n("section"),ns=n("h3"),ns.innerHTML=de,Da=t(),as=n("p"),as.innerHTML=he,qa=t(),ts=n("p"),ts.textContent=ye,Oa=t(),es=n("div"),Fn=new h(!1),Kn=t(),d=n("section"),os=n("h3"),os.innerHTML=me,$a=t(),ls=n("p"),ls.innerHTML=ge,Va=t(),is=n("p"),is.innerHTML=fe,Aa=t(),ps=n("p"),ps.innerHTML=xe,Na=t(),cs=n("div"),Gn=new h(!1),Ua=t(),rs=n("p"),rs.textContent=we,Wa=t(),ks=n("div"),Zn=new h(!1),za=t(),vs=n("p"),vs.innerHTML=_e,Ya=t(),us=n("div"),Qn=new h(!1),Ja=t(),ds=n("p"),ds.textContent=be,Ra=t(),hs=n("ul"),hs.innerHTML=Ce,Xn=t(),F=n("section"),F.innerHTML=Te,sa=t(),H=n("section"),ys=n("h3"),ys.innerHTML=Le,Ba=t(),ms=n("p"),ms.innerHTML=Me,Fa=t(),gs=n("div"),na=new h(!1),Ka=t(),fs=n("p"),fs.textContent=He,Ga=t(),xs=n("div"),aa=new h(!1),ta=t(),A=n("section"),ws=n("h4"),ws.innerHTML=Pe,Za=t(),_s=n("p"),_s.innerHTML=Ee,Qa=t(),bs=n("div"),ea=new h(!1),oa=t(),P=n("section"),Cs=n("h4"),Cs.innerHTML=je,Xa=t(),Ts=n("p"),Ts.innerHTML=Ie,st=t(),Ls=n("div"),la=new h(!1),nt=t(),Ms=n("p"),Ms.innerHTML=Se,at=t(),Hs=n("div"),ia=new h(!1),pa=t(),u=n("section"),Ps=n("h3"),Ps.innerHTML=De,tt=t(),Es=n("p"),Es.textContent=qe,et=t(),js=n("p"),js.textContent=Oe,ot=t(),Is=n("p"),Is.innerHTML=$e,lt=t(),Ss=n("p"),Ss.innerHTML=Ve,it=t(),Ds=n("div"),ca=new h(!1),pt=t(),qs=n("p"),qs.textContent=Ae,ct=t(),Os=n("p"),Os.innerHTML=Ne,rt=t(),$s=n("p"),$s.innerHTML=Ue,kt=t(),Vs=n("p"),Vs.innerHTML=We,vt=t(),As=n("p"),As.innerHTML=ze,ut=t(),Ns=n("p"),Ns.innerHTML=Ye,ra=t(),E=n("section"),Us=n("h3"),Us.innerHTML=Je,dt=t(),Ws=n("p"),Ws.textContent=Re,ht=t(),zs=n("p"),zs.textContent=Be,yt=t(),Ys=n("ul"),Ys.innerHTML=Fe,mt=t(),Js=n("div"),ka=new h(!1),va=t(),K=n("section"),K.innerHTML=Ke,ua=t(),w=n("section"),Rs=n("h3"),Rs.innerHTML=Ge,gt=t(),Bs=n("div"),da=new h(!1),ft=t(),Fs=n("p"),Fs.innerHTML=Ze,xt=t(),Ks=n("p"),Ks.textContent=Qe,wt=t(),Gs=n("div"),ha=new h(!1),_t=t(),Zs=n("p"),Zs.textContent=Xe,bt=t(),Qs=n("ul"),Qs.innerHTML=so,Ct=t(),Xs=n("p"),Xs.innerHTML=no,Tt=t(),sn=n("p"),sn.innerHTML=ao,ya=t(),f=n("section"),nn=n("h4"),nn.innerHTML=to,Lt=t(),an=n("p"),an.textContent=eo,Mt=t(),tn=n("div"),ma=new h(!1),Ht=t(),en=n("p"),en.innerHTML=oo,Pt=t(),on=n("p"),on.textContent=lo,Et=t(),ln=n("div"),ga=new h(!1),jt=t(),pn=n("p"),pn.textContent=io,It=t(),cn=n("ul"),cn.innerHTML=po,St=t(),rn=n("p"),rn.innerHTML=co,Dt=t(),kn=n("div"),fa=new h(!1),xa=t(),T=n("section"),vn=n("h3"),vn.innerHTML=ro,qt=t(),un=n("div"),wa=new h(!1),Ot=t(),dn=n("p"),dn.innerHTML=ko,$t=t(),hn=n("p"),hn.textContent=vo,Vt=t(),yn=n("div"),_a=new h(!1),At=t(),mn=n("p"),mn.textContent=uo,Nt=t(),gn=n("ul"),gn.innerHTML=ho,ba=t(),L=n("section"),fn=n("h3"),fn.innerHTML=yo,Ut=t(),xn=n("div"),Ca=new h(!1),Wt=t(),wn=n("p"),wn.innerHTML=mo,zt=t(),_n=n("p"),_n.textContent=go,Yt=t(),bn=n("div"),Ta=new h(!1),Jt=t(),Cn=n("p"),Cn.textContent=fo,Rt=t(),Tn=n("ul"),Tn.innerHTML=xo,La=t(),k=n("section"),Ln=n("h3"),Ln.innerHTML=wo,Bt=t(),Mn=n("p"),Mn.innerHTML=_o,Ft=t(),Hn=n("p"),Hn.textContent=bo,Kt=t(),Pn=n("div"),Ma=new h(!1),Gt=t(),En=n("p"),En.innerHTML=Co,Zt=t(),jn=n("p"),jn.innerHTML=To,Qt=t(),In=n("p"),In.innerHTML=Lo,Xt=t(),Sn=n("div"),Ha=new h(!1),se=t(),Dn=n("p"),Dn.innerHTML=Mo,ne=t(),qn=n("p"),qn.textContent=Ho,ae=t(),On=n("div"),Pa=new h(!1),te=t(),$n=n("p"),$n.innerHTML=Po,ee=t(),Vn=n("p"),Vn.innerHTML=Eo,oe=t(),An=n("div"),Ea=new h(!1),le=t(),Nn=n("p"),Nn.innerHTML=jo,ja=t(),G=n("section"),G.innerHTML=Io,this.h()},l(o){g=a(o,"P",{"data-svelte-h":!0}),i(g)!=="svelte-14kr5yt"&&(g.innerHTML=z),O=e(o),q=a(o,"P",{"data-svelte-h":!0}),i(q)!=="svelte-208omw"&&(q.innerHTML=C),S=e(o),$=a(o,"P",{"data-svelte-h":!0}),i($)!=="svelte-vqhfbv"&&($.textContent=pe),Wn=e(o),J=a(o,"UL",{"data-svelte-h":!0}),i(J)!=="svelte-1o5wnde"&&(J.innerHTML=ce),zn=e(o),R=a(o,"P",{"data-svelte-h":!0}),i(R)!=="svelte-g00ewi"&&(R.textContent=re),Yn=e(o),B=a(o,"SECTION",{"data-svelte-h":!0}),i(B)!=="svelte-13j22n3"&&(B.innerHTML=ke),Jn=e(o),V=a(o,"SECTION",{});var p=r(V);Q=a(p,"H3",{"data-svelte-h":!0}),i(Q)!=="svelte-13qgpkh"&&(Q.innerHTML=ve),Ia=e(p),X=a(p,"P",{"data-svelte-h":!0}),i(X)!=="svelte-uaw531"&&(X.innerHTML=ue),Sa=e(p),ss=a(p,"DIV",{class:!0});var So=r(ss);Rn=y(So,!1),So.forEach(l),p.forEach(l),Bn=e(o),D=a(o,"SECTION",{});var Y=r(D);ns=a(Y,"H3",{"data-svelte-h":!0}),i(ns)!=="svelte-19jicb0"&&(ns.innerHTML=de),Da=e(Y),as=a(Y,"P",{"data-svelte-h":!0}),i(as)!=="svelte-1uw0gp9"&&(as.innerHTML=he),qa=e(Y),ts=a(Y,"P",{"data-svelte-h":!0}),i(ts)!=="svelte-dueqsk"&&(ts.textContent=ye),Oa=e(Y),es=a(Y,"DIV",{class:!0});var Do=r(es);Fn=y(Do,!1),Do.forEach(l),Y.forEach(l),Kn=e(o),d=a(o,"SECTION",{});var _=r(d);os=a(_,"H3",{"data-svelte-h":!0}),i(os)!=="svelte-ccbbzp"&&(os.innerHTML=me),$a=e(_),ls=a(_,"P",{"data-svelte-h":!0}),i(ls)!=="svelte-1ieq8bf"&&(ls.innerHTML=ge),Va=e(_),is=a(_,"P",{"data-svelte-h":!0}),i(is)!=="svelte-1085r0l"&&(is.innerHTML=fe),Aa=e(_),ps=a(_,"P",{"data-svelte-h":!0}),i(ps)!=="svelte-1bi4zgy"&&(ps.innerHTML=xe),Na=e(_),cs=a(_,"DIV",{class:!0});var qo=r(cs);Gn=y(qo,!1),qo.forEach(l),Ua=e(_),rs=a(_,"P",{"data-svelte-h":!0}),i(rs)!=="svelte-4ryt9g"&&(rs.textContent=we),Wa=e(_),ks=a(_,"DIV",{class:!0});var Oo=r(ks);Zn=y(Oo,!1),Oo.forEach(l),za=e(_),vs=a(_,"P",{"data-svelte-h":!0}),i(vs)!=="svelte-1lqded4"&&(vs.innerHTML=_e),Ya=e(_),us=a(_,"DIV",{class:!0});var $o=r(us);Qn=y($o,!1),$o.forEach(l),Ja=e(_),ds=a(_,"P",{"data-svelte-h":!0}),i(ds)!=="svelte-3em6b4"&&(ds.textContent=be),Ra=e(_),hs=a(_,"UL",{"data-svelte-h":!0}),i(hs)!=="svelte-zv9yt"&&(hs.innerHTML=Ce),_.forEach(l),Xn=e(o),F=a(o,"SECTION",{"data-svelte-h":!0}),i(F)!=="svelte-o316wj"&&(F.innerHTML=Te),sa=e(o),H=a(o,"SECTION",{});var N=r(H);ys=a(N,"H3",{"data-svelte-h":!0}),i(ys)!=="svelte-1yr17ym"&&(ys.innerHTML=Le),Ba=e(N),ms=a(N,"P",{"data-svelte-h":!0}),i(ms)!=="svelte-1s2540q"&&(ms.innerHTML=Me),Fa=e(N),gs=a(N,"DIV",{class:!0});var Vo=r(gs);na=y(Vo,!1),Vo.forEach(l),Ka=e(N),fs=a(N,"P",{"data-svelte-h":!0}),i(fs)!=="svelte-utmx5m"&&(fs.textContent=He),Ga=e(N),xs=a(N,"DIV",{class:!0});var Ao=r(xs);aa=y(Ao,!1),Ao.forEach(l),N.forEach(l),ta=e(o),A=a(o,"SECTION",{});var Un=r(A);ws=a(Un,"H4",{"data-svelte-h":!0}),i(ws)!=="svelte-3u2vdp"&&(ws.innerHTML=Pe),Za=e(Un),_s=a(Un,"P",{"data-svelte-h":!0}),i(_s)!=="svelte-84dsip"&&(_s.innerHTML=Ee),Qa=e(Un),bs=a(Un,"DIV",{class:!0});var No=r(bs);ea=y(No,!1),No.forEach(l),Un.forEach(l),oa=e(o),P=a(o,"SECTION",{});var U=r(P);Cs=a(U,"H4",{"data-svelte-h":!0}),i(Cs)!=="svelte-16sd462"&&(Cs.innerHTML=je),Xa=e(U),Ts=a(U,"P",{"data-svelte-h":!0}),i(Ts)!=="svelte-1og8ldk"&&(Ts.innerHTML=Ie),st=e(U),Ls=a(U,"DIV",{class:!0});var Uo=r(Ls);la=y(Uo,!1),Uo.forEach(l),nt=e(U),Ms=a(U,"P",{"data-svelte-h":!0}),i(Ms)!=="svelte-vkiotr"&&(Ms.innerHTML=Se),at=e(U),Hs=a(U,"DIV",{class:!0});var Wo=r(Hs);ia=y(Wo,!1),Wo.forEach(l),U.forEach(l),pa=e(o),u=a(o,"SECTION",{});var x=r(u);Ps=a(x,"H3",{"data-svelte-h":!0}),i(Ps)!=="svelte-1gxd0hc"&&(Ps.innerHTML=De),tt=e(x),Es=a(x,"P",{"data-svelte-h":!0}),i(Es)!=="svelte-v1uke0"&&(Es.textContent=qe),et=e(x),js=a(x,"P",{"data-svelte-h":!0}),i(js)!=="svelte-vsg8o9"&&(js.textContent=Oe),ot=e(x),Is=a(x,"P",{"data-svelte-h":!0}),i(Is)!=="svelte-1a38h6v"&&(Is.innerHTML=$e),lt=e(x),Ss=a(x,"P",{"data-svelte-h":!0}),i(Ss)!=="svelte-boua4o"&&(Ss.innerHTML=Ve),it=e(x),Ds=a(x,"DIV",{class:!0});var zo=r(Ds);ca=y(zo,!1),zo.forEach(l),pt=e(x),qs=a(x,"P",{"data-svelte-h":!0}),i(qs)!=="svelte-yujbal"&&(qs.textContent=Ae),ct=e(x),Os=a(x,"P",{"data-svelte-h":!0}),i(Os)!=="svelte-f4qr4g"&&(Os.innerHTML=Ne),rt=e(x),$s=a(x,"P",{"data-svelte-h":!0}),i($s)!=="svelte-1gxrcw"&&($s.innerHTML=Ue),kt=e(x),Vs=a(x,"P",{"data-svelte-h":!0}),i(Vs)!=="svelte-onrh1t"&&(Vs.innerHTML=We),vt=e(x),As=a(x,"P",{"data-svelte-h":!0}),i(As)!=="svelte-kbc6sq"&&(As.innerHTML=ze),ut=e(x),Ns=a(x,"P",{"data-svelte-h":!0}),i(Ns)!=="svelte-wbg1xx"&&(Ns.innerHTML=Ye),x.forEach(l),ra=e(o),E=a(o,"SECTION",{});var W=r(E);Us=a(W,"H3",{"data-svelte-h":!0}),i(Us)!=="svelte-i416cj"&&(Us.innerHTML=Je),dt=e(W),Ws=a(W,"P",{"data-svelte-h":!0}),i(Ws)!=="svelte-w5vttz"&&(Ws.textContent=Re),ht=e(W),zs=a(W,"P",{"data-svelte-h":!0}),i(zs)!=="svelte-kqg8om"&&(zs.textContent=Be),yt=e(W),Ys=a(W,"UL",{"data-svelte-h":!0}),i(Ys)!=="svelte-1l1nslu"&&(Ys.innerHTML=Fe),mt=e(W),Js=a(W,"DIV",{class:!0});var Yo=r(Js);ka=y(Yo,!1),Yo.forEach(l),W.forEach(l),va=e(o),K=a(o,"SECTION",{"data-svelte-h":!0}),i(K)!=="svelte-zjy4nl"&&(K.innerHTML=Ke),ua=e(o),w=a(o,"SECTION",{});var M=r(w);Rs=a(M,"H3",{"data-svelte-h":!0}),i(Rs)!=="svelte-al87p9"&&(Rs.innerHTML=Ge),gt=e(M),Bs=a(M,"DIV",{class:!0});var Jo=r(Bs);da=y(Jo,!1),Jo.forEach(l),ft=e(M),Fs=a(M,"P",{"data-svelte-h":!0}),i(Fs)!=="svelte-1cshwzk"&&(Fs.innerHTML=Ze),xt=e(M),Ks=a(M,"P",{"data-svelte-h":!0}),i(Ks)!=="svelte-1qed6n7"&&(Ks.textContent=Qe),wt=e(M),Gs=a(M,"DIV",{class:!0});var Ro=r(Gs);ha=y(Ro,!1),Ro.forEach(l),_t=e(M),Zs=a(M,"P",{"data-svelte-h":!0}),i(Zs)!=="svelte-yujbal"&&(Zs.textContent=Xe),bt=e(M),Qs=a(M,"UL",{"data-svelte-h":!0}),i(Qs)!=="svelte-ddhb0i"&&(Qs.innerHTML=so),Ct=e(M),Xs=a(M,"P",{"data-svelte-h":!0}),i(Xs)!=="svelte-3v1fjh"&&(Xs.innerHTML=no),Tt=e(M),sn=a(M,"P",{"data-svelte-h":!0}),i(sn)!=="svelte-1e2gx9l"&&(sn.innerHTML=ao),M.forEach(l),ya=e(o),f=a(o,"SECTION",{});var b=r(f);nn=a(b,"H4",{"data-svelte-h":!0}),i(nn)!=="svelte-u7o3jo"&&(nn.innerHTML=to),Lt=e(b),an=a(b,"P",{"data-svelte-h":!0}),i(an)!=="svelte-m9kjam"&&(an.textContent=eo),Mt=e(b),tn=a(b,"DIV",{class:!0});var Bo=r(tn);ma=y(Bo,!1),Bo.forEach(l),Ht=e(b),en=a(b,"P",{"data-svelte-h":!0}),i(en)!=="svelte-xqw0gb"&&(en.innerHTML=oo),Pt=e(b),on=a(b,"P",{"data-svelte-h":!0}),i(on)!=="svelte-1qed6n7"&&(on.textContent=lo),Et=e(b),ln=a(b,"DIV",{class:!0});var Fo=r(ln);ga=y(Fo,!1),Fo.forEach(l),jt=e(b),pn=a(b,"P",{"data-svelte-h":!0}),i(pn)!=="svelte-yujbal"&&(pn.textContent=io),It=e(b),cn=a(b,"UL",{"data-svelte-h":!0}),i(cn)!=="svelte-1uz16gs"&&(cn.innerHTML=po),St=e(b),rn=a(b,"P",{"data-svelte-h":!0}),i(rn)!=="svelte-1cewji1"&&(rn.innerHTML=co),Dt=e(b),kn=a(b,"DIV",{class:!0});var Ko=r(kn);fa=y(Ko,!1),Ko.forEach(l),b.forEach(l),xa=e(o),T=a(o,"SECTION",{});var j=r(T);vn=a(j,"H3",{"data-svelte-h":!0}),i(vn)!=="svelte-1qfc53"&&(vn.innerHTML=ro),qt=e(j),un=a(j,"DIV",{class:!0});var Go=r(un);wa=y(Go,!1),Go.forEach(l),Ot=e(j),dn=a(j,"P",{"data-svelte-h":!0}),i(dn)!=="svelte-1p8wr67"&&(dn.innerHTML=ko),$t=e(j),hn=a(j,"P",{"data-svelte-h":!0}),i(hn)!=="svelte-1qed6n7"&&(hn.textContent=vo),Vt=e(j),yn=a(j,"DIV",{class:!0});var Zo=r(yn);_a=y(Zo,!1),Zo.forEach(l),At=e(j),mn=a(j,"P",{"data-svelte-h":!0}),i(mn)!=="svelte-yujbal"&&(mn.textContent=uo),Nt=e(j),gn=a(j,"UL",{"data-svelte-h":!0}),i(gn)!=="svelte-jei7kp"&&(gn.innerHTML=ho),j.forEach(l),ba=e(o),L=a(o,"SECTION",{});var I=r(L);fn=a(I,"H3",{"data-svelte-h":!0}),i(fn)!=="svelte-1u34fo3"&&(fn.innerHTML=yo),Ut=e(I),xn=a(I,"DIV",{class:!0});var Qo=r(xn);Ca=y(Qo,!1),Qo.forEach(l),Wt=e(I),wn=a(I,"P",{"data-svelte-h":!0}),i(wn)!=="svelte-1qbbu78"&&(wn.innerHTML=mo),zt=e(I),_n=a(I,"P",{"data-svelte-h":!0}),i(_n)!=="svelte-1qed6n7"&&(_n.textContent=go),Yt=e(I),bn=a(I,"DIV",{class:!0});var Xo=r(bn);Ta=y(Xo,!1),Xo.forEach(l),Jt=e(I),Cn=a(I,"P",{"data-svelte-h":!0}),i(Cn)!=="svelte-yujbal"&&(Cn.textContent=fo),Rt=e(I),Tn=a(I,"UL",{"data-svelte-h":!0}),i(Tn)!=="svelte-15x14ox"&&(Tn.innerHTML=xo),I.forEach(l),La=e(o),k=a(o,"SECTION",{});var v=r(k);Ln=a(v,"H3",{"data-svelte-h":!0}),i(Ln)!=="svelte-1esoi1g"&&(Ln.innerHTML=wo),Bt=e(v),Mn=a(v,"P",{"data-svelte-h":!0}),i(Mn)!=="svelte-1o7bkyd"&&(Mn.innerHTML=_o),Ft=e(v),Hn=a(v,"P",{"data-svelte-h":!0}),i(Hn)!=="svelte-1yqr1tw"&&(Hn.textContent=bo),Kt=e(v),Pn=a(v,"DIV",{class:!0});var sl=r(Pn);Ma=y(sl,!1),sl.forEach(l),Gt=e(v),En=a(v,"P",{"data-svelte-h":!0}),i(En)!=="svelte-1jmshq9"&&(En.innerHTML=Co),Zt=e(v),jn=a(v,"P",{"data-svelte-h":!0}),i(jn)!=="svelte-1aks8c7"&&(jn.innerHTML=To),Qt=e(v),In=a(v,"P",{"data-svelte-h":!0}),i(In)!=="svelte-1tnfpn7"&&(In.innerHTML=Lo),Xt=e(v),Sn=a(v,"DIV",{class:!0});var nl=r(Sn);Ha=y(nl,!1),nl.forEach(l),se=e(v),Dn=a(v,"P",{"data-svelte-h":!0}),i(Dn)!=="svelte-nsevm7"&&(Dn.innerHTML=Mo),ne=e(v),qn=a(v,"P",{"data-svelte-h":!0}),i(qn)!=="svelte-j2g3s8"&&(qn.textContent=Ho),ae=e(v),On=a(v,"DIV",{class:!0});var al=r(On);Pa=y(al,!1),al.forEach(l),te=e(v),$n=a(v,"P",{"data-svelte-h":!0}),i($n)!=="svelte-1mwzh63"&&($n.innerHTML=Po),ee=e(v),Vn=a(v,"P",{"data-svelte-h":!0}),i(Vn)!=="svelte-b6et5y"&&(Vn.innerHTML=Eo),oe=e(v),An=a(v,"DIV",{class:!0});var tl=r(An);Ea=y(tl,!1),tl.forEach(l),le=e(v),Nn=a(v,"P",{"data-svelte-h":!0}),i(Nn)!=="svelte-t04kd8"&&(Nn.innerHTML=jo),v.forEach(l),ja=e(o),G=a(o,"SECTION",{"data-svelte-h":!0}),i(G)!=="svelte-1tsyv1g"&&(G.innerHTML=Io),this.h()},h(){Rn.a=null,m(ss,"class","code-section"),Fn.a=null,m(es,"class","code-section"),Gn.a=null,m(cs,"class","code-section"),Zn.a=null,m(ks,"class","code-section"),Qn.a=null,m(us,"class","code-section"),na.a=null,m(gs,"class","code-section"),aa.a=null,m(xs,"class","code-section"),ea.a=null,m(bs,"class","code-section"),la.a=null,m(Ls,"class","code-section"),ia.a=null,m(Hs,"class","code-section"),ca.a=null,m(Ds,"class","code-section"),ka.a=null,m(Js,"class","code-section"),da.a=null,m(Bs,"class","code-section"),ha.a=null,m(Gs,"class","code-section"),ma.a=null,m(tn,"class","code-section"),ga.a=null,m(ln,"class","code-section"),fa.a=null,m(kn,"class","code-section"),wa.a=null,m(un,"class","code-section"),_a.a=null,m(yn,"class","code-section"),Ca.a=null,m(xn,"class","code-section"),Ta.a=null,m(bn,"class","code-section"),Ma.a=null,m(Pn,"class","code-section"),Ha.a=null,m(Sn,"class","code-section"),Pa.a=null,m(On,"class","code-section"),Ea.a=null,m(An,"class","code-section")},m(o,p){c(o,g,p),c(o,O,p),c(o,q,p),c(o,S,p),c(o,$,p),c(o,Wn,p),c(o,J,p),c(o,zn,p),c(o,R,p),c(o,Yn,p),c(o,B,p),c(o,Jn,p),c(o,V,p),s(V,Q),s(V,Ia),s(V,X),s(V,Sa),s(V,ss),Rn.m(il,ss),c(o,Bn,p),c(o,D,p),s(D,ns),s(D,Da),s(D,as),s(D,qa),s(D,ts),s(D,Oa),s(D,es),Fn.m(pl,es),c(o,Kn,p),c(o,d,p),s(d,os),s(d,$a),s(d,ls),s(d,Va),s(d,is),s(d,Aa),s(d,ps),s(d,Na),s(d,cs),Gn.m(cl,cs),s(d,Ua),s(d,rs),s(d,Wa),s(d,ks),Zn.m(rl,ks),s(d,za),s(d,vs),s(d,Ya),s(d,us),Qn.m(kl,us),s(d,Ja),s(d,ds),s(d,Ra),s(d,hs),c(o,Xn,p),c(o,F,p),c(o,sa,p),c(o,H,p),s(H,ys),s(H,Ba),s(H,ms),s(H,Fa),s(H,gs),na.m(vl,gs),s(H,Ka),s(H,fs),s(H,Ga),s(H,xs),aa.m(ul,xs),c(o,ta,p),c(o,A,p),s(A,ws),s(A,Za),s(A,_s),s(A,Qa),s(A,bs),ea.m(dl,bs),c(o,oa,p),c(o,P,p),s(P,Cs),s(P,Xa),s(P,Ts),s(P,st),s(P,Ls),la.m(hl,Ls),s(P,nt),s(P,Ms),s(P,at),s(P,Hs),ia.m(yl,Hs),c(o,pa,p),c(o,u,p),s(u,Ps),s(u,tt),s(u,Es),s(u,et),s(u,js),s(u,ot),s(u,Is),s(u,lt),s(u,Ss),s(u,it),s(u,Ds),ca.m(ml,Ds),s(u,pt),s(u,qs),s(u,ct),s(u,Os),s(u,rt),s(u,$s),s(u,kt),s(u,Vs),s(u,vt),s(u,As),s(u,ut),s(u,Ns),c(o,ra,p),c(o,E,p),s(E,Us),s(E,dt),s(E,Ws),s(E,ht),s(E,zs),s(E,yt),s(E,Ys),s(E,mt),s(E,Js),ka.m(gl,Js),c(o,va,p),c(o,K,p),c(o,ua,p),c(o,w,p),s(w,Rs),s(w,gt),s(w,Bs),da.m(fl,Bs),s(w,ft),s(w,Fs),s(w,xt),s(w,Ks),s(w,wt),s(w,Gs),ha.m(xl,Gs),s(w,_t),s(w,Zs),s(w,bt),s(w,Qs),s(w,Ct),s(w,Xs),s(w,Tt),s(w,sn),c(o,ya,p),c(o,f,p),s(f,nn),s(f,Lt),s(f,an),s(f,Mt),s(f,tn),ma.m(wl,tn),s(f,Ht),s(f,en),s(f,Pt),s(f,on),s(f,Et),s(f,ln),ga.m(_l,ln),s(f,jt),s(f,pn),s(f,It),s(f,cn),s(f,St),s(f,rn),s(f,Dt),s(f,kn),fa.m(bl,kn),c(o,xa,p),c(o,T,p),s(T,vn),s(T,qt),s(T,un),wa.m(Cl,un),s(T,Ot),s(T,dn),s(T,$t),s(T,hn),s(T,Vt),s(T,yn),_a.m(Tl,yn),s(T,At),s(T,mn),s(T,Nt),s(T,gn),c(o,ba,p),c(o,L,p),s(L,fn),s(L,Ut),s(L,xn),Ca.m(Ll,xn),s(L,Wt),s(L,wn),s(L,zt),s(L,_n),s(L,Yt),s(L,bn),Ta.m(Ml,bn),s(L,Jt),s(L,Cn),s(L,Rt),s(L,Tn),c(o,La,p),c(o,k,p),s(k,Ln),s(k,Bt),s(k,Mn),s(k,Ft),s(k,Hn),s(k,Kt),s(k,Pn),Ma.m(Hl,Pn),s(k,Gt),s(k,En),s(k,Zt),s(k,jn),s(k,Qt),s(k,In),s(k,Xt),s(k,Sn),Ha.m(Pl,Sn),s(k,se),s(k,Dn),s(k,ne),s(k,qn),s(k,ae),s(k,On),Pa.m(El,On),s(k,te),s(k,$n),s(k,ee),s(k,Vn),s(k,oe),s(k,An),Ea.m(jl,An),s(k,le),s(k,Nn),c(o,ja,p),c(o,G,p)},p:Dl,d(o){o&&(l(g),l(O),l(q),l(S),l($),l(Wn),l(J),l(zn),l(R),l(Yn),l(B),l(Jn),l(V),l(Bn),l(D),l(Kn),l(d),l(Xn),l(F),l(sa),l(H),l(ta),l(A),l(oa),l(P),l(pa),l(u),l(ra),l(E),l(va),l(K),l(ua),l(w),l(ya),l(f),l(xa),l(T),l(ba),l(L),l(La),l(k),l(ja),l(G))}}}function Bl(Z){let g,z;const O=[Z[0],ll];let q={$$slots:{default:[Rl]},$$scope:{ctx:Z}};for(let C=0;C<O.length;C+=1)q=ie(q,O[C]);return g=new Yl({props:q}),{c(){$l(g.$$.fragment)},l(C){Vl(g.$$.fragment,C)},m(C,S){Al(g,C,S),z=!0},p(C,[S]){const $=S&1?zl(O,[S&1&&ol(C[0]),S&0&&ol(ll)]):{};S&2&&($.$$scope={dirty:S,ctx:C}),g.$set($)},i(C){z||(Nl(g.$$.fragment,C),z=!0)},o(C){Ul(g.$$.fragment,C),z=!1},d(C){Wl(g,C)}}}const ll={title:"Compile Svelte in your head (Part 3)",date:"2020-05-07T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"⬅ ⬅  Previously in Part 2.Previously, I detailed how `$invalidate` works, described how bitmask was used in `$invalidate`, and explained how reactive declarations work as well.In this article, we are going to look into 3 DOM related directives:...",tableOfContents:[{link:"the-on-bind-and-use",title:"The  `on:` ,  `bind:`  and  `use:`",nested:[{link:"on-event-handlers",title:"`on:`  event handlers"},{link:"bind-bindings",title:"`bind:`  bindings"},{link:"use-actions",title:"`use:`  actions"}]},{link:"the-vanilla-js",title:"The Vanilla JS",nested:[{link:"event-handler",title:"Event handler",nested:[{link:"event-preventdefault",title:"event.preventDefault"},{link:"event-stoppropagation",title:"event.stopPropagation"}]},{link:"bindings",title:"Bindings"},{link:"actions",title:"Actions"}]},{link:"the-compiled-js",title:"The Compiled JS",nested:[{link:"on-directive",title:"`on:`  directive",nested:[{link:"event-modifiers",title:"Event modifiers"}]},{link:"bind-directive",title:"`bind:`  directive"},{link:"use-directive",title:"`use:`  directive"},{link:"the-order-of-directives",title:"The order of directives"}]},{link:"closing-note",title:"Closing Note"}]};function Fl(Z,g,z){return Sl("blog",{image:Jl}),Z.$$set=O=>{z(0,g=ie(ie({},g),el(O)))},g=el(g),[g]}class Xl extends ql{constructor(g){super(),Ol(this,g,Fl,Bl,Il,{})}}export{Xl as component};
