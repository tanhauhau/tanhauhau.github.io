import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as nt,g as rt,d as ct,b as lt,s as t,f as pt,e,t as dt,a as mt,r as i,n as a}from"../chunks/C2PHntuy.js";import{h as o}from"../chunks/C3QlhiH-.js";import{s}from"../chunks/CEusTUg_.js";import{i as gt}from"../chunks/BQOOHHT8.js";import{l as ht,s as _t}from"../chunks/gzNpScmH.js";import{T as ut}from"../chunks/BPVAFQeE.js";import{t as bt}from"../chunks/C3bQ3Oc7.js";const ki=""+new URL("../assets/git-merge-ff.DJq9ABRb.gif",import.meta.url).href,ft=""+new URL("../assets/git-merge-ff.CyvTsgTA.gif",import.meta.url).href,xi=""+new URL("../assets/git-merge-non-ff.CMz8Ntqu.gif",import.meta.url).href,wt=""+new URL("../assets/git-merge-non-ff.DL4B-QFo.gif",import.meta.url).href,$i=""+new URL("../assets/git-pull.CN5vpaAW.gif",import.meta.url).href,vt=""+new URL("../assets/git-pull.usTeVkY0.gif",import.meta.url).href,Li=""+new URL("../assets/git-reset.M67XO2OP.gif",import.meta.url).href,yt=""+new URL("../assets/git-reset.DKdcDWrf.gif",import.meta.url).href,Ri=""+new URL("../assets/git-cherry-pick.ptCsotlP.gif",import.meta.url).href,kt=""+new URL("../assets/git-cherry-pick.BZ6odKHZ.gif",import.meta.url).href,Ui=""+new URL("../assets/git-revert.BLt_xuax.gif",import.meta.url).href,xt=""+new URL("../assets/git-revert.thkqMaYl.gif",import.meta.url).href,Gi=""+new URL("../assets/git-revert-2.ClCRmHN6.gif",import.meta.url).href,$t=""+new URL("../assets/git-revert-2.CR63I1_i.gif",import.meta.url).href,Ci=""+new URL("../assets/git-revert-3.D6NtNzs1.gif",import.meta.url).href,Lt=""+new URL("../assets/git-revert-3.Cj5Qcpzs.gif",import.meta.url).href,zi=""+new URL("../assets/git-revert-4.BpwctyIP.gif",import.meta.url).href,Rt=""+new URL("../assets/git-revert-4.DdNiwJv6.gif",import.meta.url).href,Ti=""+new URL("../assets/git-rebase.BLo760aG.gif",import.meta.url).href,Ut=""+new URL("../assets/git-rebase.CH6j8BeH.gif",import.meta.url).href,Ii=""+new URL("../assets/git-rebase-2.msmd38sC.gif",import.meta.url).href,Gt=""+new URL("../assets/git-rebase-2._AJBGc05.gif",import.meta.url).href,Bi=""+new URL("../assets/git-rebase.Dn20dTJ9.jpeg",import.meta.url).href,Ct=""+new URL("../assets/git-rebase.BADEw-Ew.jpeg",import.meta.url).href,zt=""+new URL("../assets/git-rebase.BNYH9doT.webp",import.meta.url).href,Tt=""+new URL("../assets/git-rebase.hnOl_DTT.webp",import.meta.url).href,n=""+new URL("../assets/git-rebase-i-pick.j-vSY0V3.png",import.meta.url).href,qi=""+new URL("../assets/git-rebase-i-pick.BPq6LWo-.png",import.meta.url).href,Di=""+new URL("../assets/git-rebase-i-pick.DtWorWlC.webp",import.meta.url).href,Wi=""+new URL("../assets/git-rebase-i-pick.5x4gF8oU.webp",import.meta.url).href,Yi=""+new URL("../assets/git-rebase-i-drop.Ck9sXjrE.png",import.meta.url).href,It=""+new URL("../assets/git-rebase-i-drop.CUGmml1b.png",import.meta.url).href,Bt=""+new URL("../assets/git-rebase-i-drop.OSls4pTk.webp",import.meta.url).href,qt=""+new URL("../assets/git-rebase-i-drop.NUv1imTY.webp",import.meta.url).href,Ni=""+new URL("../assets/git-rebase-i-squash.C1iwUT0c.png",import.meta.url).href,Dt=""+new URL("../assets/git-rebase-i-squash.DzSyzNRo.png",import.meta.url).href,Wt=""+new URL("../assets/git-rebase-i-squash.Cd7xU3I6.webp",import.meta.url).href,Yt=""+new URL("../assets/git-rebase-i-squash.CbwHgWE4.webp",import.meta.url).href,Hi=""+new URL("../assets/git-rebase-i-edit.CyUVP9a3.png",import.meta.url).href,Nt=""+new URL("../assets/git-rebase-i-edit.B6jMu9n_.png",import.meta.url).href,Ht=""+new URL("../assets/git-rebase-i-edit.YkTvrWXb.webp",import.meta.url).href,St=""+new URL("../assets/git-rebase-i-edit.C5uKtH2B.webp",import.meta.url).href,Si=""+new URL("../assets/git-rebase-i-edit.CyUVP9a3.png",import.meta.url).href,Ot=""+new URL("../assets/git-rebase-i-edit.B6jMu9n_.png",import.meta.url).href,Ft=""+new URL("../assets/git-rebase-i-edit.YkTvrWXb.webp",import.meta.url).href,At=""+new URL("../assets/git-rebase-i-edit.C5uKtH2B.webp",import.meta.url).href,Oi=""+new URL("../assets/git-pull-rebase.Cn6pY75f.gif",import.meta.url).href,Mt=""+new URL("../assets/git-pull-rebase.9Wzv1ssM.gif",import.meta.url).href,Fi=""+new URL("../assets/git-rebase-w.Wecw6TyK.png",import.meta.url).href,Pt=""+new URL("../assets/git-rebase-w.CT9rKc6n.png",import.meta.url).href,jt=""+new URL("../assets/git-rebase-w.B5ep3orj.webp",import.meta.url).href,Kt=""+new URL("../assets/git-rebase-w.WymeH6az.webp",import.meta.url).href,Ai=""+new URL("../assets/git-rebase-w-2.DMYPfDiG.png",import.meta.url).href,Jt=""+new URL("../assets/git-rebase-w-2.D84myCby.png",import.meta.url).href,Et=""+new URL("../assets/git-rebase-w-2.2y8p-EIP.webp",import.meta.url).href,Vt=""+new URL("../assets/git-rebase-w-2.BNLWT9ns.webp",import.meta.url).href,Mi=""+new URL("../assets/git-rebase-w-3.Crl0Hd4Q.png",import.meta.url).href,Qt=""+new URL("../assets/git-rebase-w-3.BAeYBZFU.png",import.meta.url).href,Xt=""+new URL("../assets/git-rebase-w-3.BGoSyFRK.webp",import.meta.url).href,Zt=""+new URL("../assets/git-rebase-w-3.D41JCzJO.webp",import.meta.url).href,Pi=""+new URL("../assets/git-rebase-w-4.CiBlwRk4.png",import.meta.url).href,es=""+new URL("../assets/git-rebase-w-4.2JCO-KO7.png",import.meta.url).href,is=""+new URL("../assets/git-rebase-w-4.CLVlU8QT.webp",import.meta.url).href,ts=""+new URL("../assets/git-rebase-w-4.yDxCWJIM.webp",import.meta.url).href,ji=""+new URL("../assets/git-rebase-w-5.W3DhL8Od.png",import.meta.url).href,ss=""+new URL("../assets/git-rebase-w-5.DJh6umsg.png",import.meta.url).href,as=""+new URL("../assets/git-rebase-w-5.Cx6OTPH0.webp",import.meta.url).href,os=""+new URL("../assets/git-rebase-w-5.BYeUyF0s.webp",import.meta.url).href,Ki={title:"Git Gudder",venue:"Shopee SG",venueLink:"https://www.google.com.sg/maps/place/Shopee+Building/@1.2923933,103.7860786,19z/data=!3m1!4b1!4m5!3m4!1s0x31da1b803e3bae77:0x154e17d66760912b!8m2!3d1.2923933!4d103.7866258",occasion:"React Knowledgeable Week 41",occasionLink:"https://github.com/Shopee/shopee-react-knowledgeable/issues/129",slides:"https://slides.com/tanhauhau/git-gudder",date:"2019-08-30",label:"talk",layout:"talk",description:'This week in React Knowledgeable, I did a sharing on Git commands.The title of the talk was called "Git Gudder", because almost a year ago I did a lightning sharing on "Git Gud", (Get Good), this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder"....',tableOfContents:[{link:"disclaimer",title:"Disclaimer"},{link:"git-merge",title:"git merge",nested:[{link:"fast-forward-merge",title:"Fast-forward merge"},{link:"non-fast-forward-merge",title:"Non Fast-forward merge"},{link:"git-pull",title:"git pull"}]},{link:"git-reset",title:"git reset"},{link:"git-cherry-pick",title:"git cherry-pick"},{link:"git-revert",title:"git revert"},{link:"git-rebase",title:"git rebase",nested:[{link:"git-rebase-interactive",title:"git rebase --interactive",nested:[{link:"pick",title:"pick"},{link:"drop",title:"drop"},{link:"squash-fixup",title:"squash & fixup"},{link:"break",title:"break"},{link:"edit",title:"edit"}]},{link:"git-pull-rebase",title:"git pull --rebase"},{link:"git-rebase-a-shared-branch",title:"git rebase a shared branch"}]},{link:"git-log",title:"git log",nested:[{link:"since-after-until-before",title:"--since, --after, --until, --before"},{link:"grep",title:"--grep"},{link:"invert-grep",title:"--invert-grep"},{link:"all-match",title:"--all-match"},{link:"min-parents-max-parents-merges-no-merges",title:"--min-parents, --max-parents, --merges, --no-merges"},{link:"first-parent",title:"--first-parent"}]},{link:"git-reflog",title:"git reflog"},{link:"git-bisect",title:"git bisect"},{link:"summary",title:"Summary"}]},{title:bs,venue:fs,venueLink:ws,occasion:vs,occasionLink:ys,slides:ks,date:xs,label:$s,layout:Ls,description:Rs,tableOfContents:Us}=Ki;var ns=lt(`<p>This week in React Knowledgeable, I did a sharing on Git commands.</p> <p>The title of the talk was called <strong>"Git Gudder"</strong>, because almost a year ago I did a lightning sharing on "Git Gud", <em>(Get Good)</em>, this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".</p> <blockquote><p>Will there be a "Git Guddest"? ðŸ¤”</p></blockquote> <section><h2><a href="#disclaimer" id="disclaimer">Disclaimer</a></h2> <p>I am by no means a Git master or anywhere near mastering Git. I do google or <a href="https://git-scm.com" rel="nofollow">refer to the docs</a> whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it.</p></section> <section><h2><a href="#git-merge" id="git-merge">git merge</a></h2> <p>There's 2 kind of <code class="inline">git merge</code>, the <strong>fast-forward</strong> and <strong>non fast-forward</strong>.</p></section> <section><h3><a href="#fast-forward-merge" id="fast-forward-merge">Fast-forward merge</a></h3> <p>Merging <code class="inline">master</code> into <code class="inline">branch A</code>:</p> <p><span style="display: block; position: relative; padding-top: 56.566%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-merge-ff"/></span></p> <div class="caption svelte-koydfe">Fast-forward merge</div></section> <section><h3><a href="#non-fast-forward-merge" id="non-fast-forward-merge">Non Fast-forward merge</a></h3> <p>Merging <code class="inline">master</code> into <code class="inline">branch A</code>:</p> <p><span style="display: block; position: relative; padding-top: 58.779%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-merge-non-ff"/></span></p> <div class="caption svelte-koydfe">Non fast-forward merge</div> <p>Non fast-forward merge will create an extra commit that merges 2 branches.</p></section> <section><h3><a href="#git-pull" id="git-pull">git pull</a></h3> <p>By default, <code class="inline">git pull</code> is <code class="inline">git fetch origin branch</code> + <code class="inline">git merge origin/branch</code>.</p> <p><span style="display: block; position: relative; padding-top: 59.695%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-pull"/></span></p> <div class="caption svelte-koydfe">git pull</div></section> <section><h2><a href="#git-reset" id="git-reset">git reset</a></h2> <p><code class="inline">git reset --hard</code> allows you to change the reference of where your branch is pointing at.</p> <p><code class="inline">git checkout branch-b</code>, <code class="inline">git reset --hard branch-a</code>, <code class="inline">git reset --hard #d</code>:</p> <p><span style="display: block; position: relative; padding-top: 89.167%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-reset"/></span></p> <div class="caption svelte-koydfe">git reset</div></section> <section><h2><a href="#git-cherry-pick" id="git-cherry-pick">git cherry-pick</a></h2> <p>cherry-pick allows you to pick commits from some other branches, tags, or refs.</p> <p><code class="inline">git checkout branch-b</code>, <code class="inline">git cherry-pick branch-a</code>:</p> <p><span style="display: block; position: relative; padding-top: 87.500%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-cherry-pick"/></span></p> <div class="caption svelte-koydfe">git cherry-pick</div></section> <section><h2><a href="#git-revert" id="git-revert">git revert</a></h2> <p><code class="inline">git revert</code> creates a new commit that reverses the change of the commit that you are reverting.</p> <p>For example, if you accidentally merged <code class="inline">feat/a</code> into <code class="inline">master</code> branch, you can <code class="inline">git checkout master</code>, <code class="inline">git revert #1</code>:</p> <p><span style="display: block; position: relative; padding-top: 69.231%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-revert"/></span></p> <div class="caption svelte-koydfe">git revert</div> <p>If you know merge master into your <code class="inline">feat/a</code> branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:</p> <p><span style="display: block; position: relative; padding-top: 69.231%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-revert-2"/></span></p> <div class="caption svelte-koydfe">Merging \`master\` into \`feat/a\`</div> <p>If you want to recover the changes made in <code class="inline">feat/a</code>, you can <code class="inline">revert</code> the <code class="inline">revert</code>:</p> <p><code class="inline">git revert ~#1</code>:</p> <p><span style="display: block; position: relative; padding-top: 54.783%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-revert-3"/></span></p> <div class="caption svelte-koydfe">git revert the revert</div> <p>Now, when you are ready to merge your <code class="inline">feat/a</code> branch into <code class="inline">master</code>, you get the all the changes in <code class="inline">feat/a</code>, a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in <code class="inline">feat/a</code> in <code class="inline">master</code>:</p> <p><span style="display: block; position: relative; padding-top: 54.783%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-revert-4"/></span></p> <div class="caption svelte-koydfe">Merging changes back to master</div></section> <section><h2><a href="#git-rebase" id="git-rebase">git rebase</a></h2> <p><code class="inline">git rebase</code> allows you to "move" commits to a different "base".</p> <p>For example, you branched out <code class="inline">branch-a</code> from <code class="inline">master</code> a while ago, and <code class="inline">master</code> has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a <code class="inline">rebase</code>, replaying commits that you have made in <code class="inline">branch-a</code> on top of the latest <code class="inline">master</code>.</p> <p><code class="inline">git checkout branch-a</code>, <code class="inline">git rebase master</code>:</p> <p><span style="display: block; position: relative; padding-top: 49.613%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase"/></span></p> <div class="caption svelte-koydfe">git rebase</div> <p><code class="inline">git rebase</code> does not have to be on top of the branch that you branched out, you can rebase to anywhere:</p> <p><code class="inline">git checkout branch-a</code>, <code class="inline">git rebase --onto branch-b master branch-a</code>:</p> <p><span style="display: block; position: relative; padding-top: 77.510%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-2"/></span></p> <div class="caption svelte-koydfe">git rebase</div> <p>There's 3 reference point you should know when doing a git rebase:</p> <ul><li><code class="inline">&lt;new base&gt;</code></li> <li><code class="inline">&lt;upstream&gt;</code></li> <li><code class="inline">&lt;branch&gt;</code></li></ul> <p><span style="display: block; position: relative; padding-top: 77.510%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase"/></picture></span></p> <div class="caption svelte-koydfe">git rebase</div> <p>Here are a few things you should know:</p> <ul><li><code class="inline">git rebase</code> will replay the commits from <code class="inline">&lt;upstream&gt;</code> to <code class="inline">&lt;branch&gt;</code> onto <code class="inline">&lt;new base&gt;</code>.</li> <li>If you specify <code class="inline">&lt;upstream&gt;</code> as a branch name, <code class="inline">git rebase</code> will replay commits from the common ancestor of <code class="inline">&lt;upstream&gt;</code> and <code class="inline">&lt;branch&gt;</code> to <code class="inline">&lt;branch&gt;</code>.</li> <li>If you do not specify <code class="inline">&lt;branch&gt;</code>, the default is the <code class="inline">HEAD</code>, current commit you are at now.</li> <li>If you do not specify <code class="inline">--onto &lt;new base&gt;</code>, the new base will be default to <code class="inline">&lt;upsttream&gt;</code>, that's why <code class="inline">git rebase master</code> is equivalent to <code class="inline">git rebase --onto master master</code>.</li> <li>If you do not specify <code class="inline">&lt;upstream&gt;</code>, it will be the upstream of the current branch. So <code class="inline">git rebase</code> is equivalent to <code class="inline">git rebase &lt;origin/current-branch&gt;</code>.</li></ul></section> <section><h3><a href="#git-rebase-interactive" id="git-rebase-interactive">git rebase --interactive</a></h3> <p><code class="inline">git rebase</code> has an interactive mode, which allows you to specify instructions while replaying commits during a rebase.</p> <p><span style="display: block; position: relative; padding-top: 24.476%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-pick"/></picture></span></p> <div class="caption svelte-koydfe">git rebase interactive</div> <p>When you run <code class="inline">git rebase --interactive</code>, git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:</p> <div class="code-section"><!></div></section> <section><h4><a href="#pick" id="pick">pick</a></h4> <p>The default instruction. Will just use the commit while replaying:</p> <p><span style="display: block; position: relative; padding-top: 24.476%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-pick"/></picture></span></p> <div class="code-section"><!></div></section> <section><h4><a href="#drop" id="drop">drop</a></h4> <p>Drop will omit the commit:</p> <p><span style="display: block; position: relative; padding-top: 24.476%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-drop"/></picture></span></p> <div class="code-section"><!></div></section> <section><h4><a href="#squash-fixup" id="squash-fixup">squash & fixup</a></h4> <p>Squash & Fixup will combine your commit with the previous commit, the only difference is that with <code class="inline">squash</code>, git will prompt you to edit the commit message of the combined commit, while <code class="inline">fixup</code> will drop the commit of the <code class="inline">fixup</code>ed commit.</p> <p><span style="display: block; position: relative; padding-top: 24.615%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-squash"/></picture></span></p> <div class="code-section"><!></div></section> <section><h4><a href="#break" id="break">break</a></h4> <p>Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run <code class="inline">git rebase --continue</code> to continue.</p> <p><span style="display: block; position: relative; padding-top: 26.434%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-break"/></picture></span></p> <div class="code-section"><!></div></section> <section><h4><a href="#edit" id="edit">edit</a></h4> <p>Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process.</p> <p><span style="display: block; position: relative; padding-top: 26.434%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-edit"/></picture></span></p> <div class="code-section"><!></div></section> <section><h3><a href="#git-pull-rebase" id="git-pull-rebase">git pull --rebase</a></h3> <p>There's a rebase mode for git pull, where it will be <code class="inline">git fetch origin branch</code> + <code class="inline">git rebase origin/branch</code>.</p> <p><span style="display: block; position: relative; padding-top: 66.066%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-pull-rebase"/></span></p> <div class="caption svelte-koydfe">git pull --rebase</div></section> <section><h3><a href="#git-rebase-a-shared-branch" id="git-rebase-a-shared-branch">git rebase a shared branch</a></h3> <p>Say <code class="inline">x</code> and <code class="inline">y</code> are working on the <code class="inline">feat/a</code> branch.</p> <p><span style="display: block; position: relative; padding-top: 34.266%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w"/></picture></span></p> <p><code class="inline">x</code> decided to rebase the <code class="inline">feat/a</code> branch to squash and drop some commits:</p> <p><span style="display: block; position: relative; padding-top: 52.448%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w-2"/></picture></span></p> <p>While <code class="inline">x</code> had done that, that was just a part of the whole picture. Because the <code class="inline">rebase</code> on his local machine changed the git history on his local copy only.</p> <p><span style="display: block; position: relative; padding-top: 52.448%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w-3"/></picture></span></p> <p>To make the change on the remote server as well, <code class="inline">x</code> forced push his branch to the remote server. (<strong>Note:</strong> You can push without <code class="inline">--force</code> if the origin branch cannot fast-forward merge your local branch)</p> <p>While <code class="inline">y</code> on the other hand, did not know about the <code class="inline">rebase</code>, so when <code class="inline">y</code> pulled the code, it ended up with a messed up merged of a messed up git history:</p> <p><span style="display: block; position: relative; padding-top: 44.643%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w-4"/></picture></span></p> <p>In most cases, there would be a merge conflict, because <code class="inline">x</code> and <code class="inline">y</code>'s branch would have made changes on the same file.</p> <p>So, the correct way, if the rebase is necessary, is to notify <code class="inline">y</code> about the rebase, so that <code class="inline">y</code> can <code class="inline">git reset --hard</code> his branch to the remote branch.</p> <p><span style="display: block; position: relative; padding-top: 48.319%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w-5"/></picture></span></p> <p>If unfortunately, at the same time, <code class="inline">y</code> has made more commits to his local branch, he would have to <code class="inline">git rebase</code> the new changes onto the remote branch, or <code class="inline">git cherry-pick</code> the new changes after the <code class="inline">git reset --hard</code>.</p> <p>In the companies that I have worked with, forbidden a <code class="inline">rebase</code> on a common branch, especially the <code class="inline">master</code> branch.</p></section> <section><h2><a href="#git-log" id="git-log">git log</a></h2> <p>The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:</p></section> <section><h3><a href="#since-after-until-before" id="since-after-until-before">--since, --after, --until, --before</a></h3> <p>You can filter out commits within a specific timeframe</p></section> <section><h3><a href="#grep" id="grep">--grep</a></h3> <p>You can filter out commits based on commit message</p></section> <section><h3><a href="#invert-grep" id="invert-grep">--invert-grep</a></h3> <p>You can filter out commits that does not match the <code class="inline">--grep</code></p></section> <section><h3><a href="#all-match" id="all-match">--all-match</a></h3> <p><code class="inline">--grep</code> is a <code class="inline">OR</code> filter, <code class="inline">--all-match</code> make it a <code class="inline">AND</code> filter</p></section> <section><h3><a href="#min-parents-max-parents-merges-no-merges" id="min-parents-max-parents-merges-no-merges">--min-parents, --max-parents, --merges, --no-merges</a></h3> <p>You can specify commits with the number of parents. A simple merge commit has 2 parent, so <code class="inline">--merge</code> is equivalent to <code class="inline">--min-parents=2</code>.</p></section> <section><h3><a href="#first-parent" id="first-parent">--first-parent</a></h3> <p>You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, <code class="inline">--first-parent</code> allow you to filter out only the merge commit and the commit you have made on the current branch.</p></section> <section><h2><a href="#git-reflog" id="git-reflog">git reflog</a></h2> <p>The reference log shows you all the <code class="inline">HEAD</code> position you have been to. This is especially useful when you have <code class="inline">reset --hard</code> or <code class="inline">rebase</code>, you can still find back the commit reference that you were at previously, so you can recover them.</p></section> <section><h2><a href="#git-bisect" id="git-bisect">git bisect</a></h2> <p>This is a useful command that I am looking forward to use it.</p> <p>Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. <code class="inline">git bisect</code> allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced.</p> <div class="code-section"><!></div> <p>Once you've specified at least one <code class="inline">bad</code> and one <code class="inline">good</code> commit, <code class="inline">git bisect</code> will find and checkout to a commit in the middle of that range between <code class="inline">bad</code> and <code class="inline">good</code> and greets you with:</p> <div class="code-section"><!></div> <p>You can know test / verify / profile your code, and specify whether the current commit is a <code class="inline">good</code> commit or a <code class="inline">bad</code> commit:</p> <div class="code-section"><!></div> <p>Continue doing it until eventually there's no more commit to inspect. <code class="inline">git bisect</code> will print out the description of the first bad commit.</p></section> <section><h2><a href="#summary" id="summary">Summary</a></h2> <p>We've gone through the following git commands:</p> <ul><li>git merge</li> <li>git reset</li> <li>git cherry-pick</li> <li>git revert</li> <li>git rebase</li> <li>git log</li> <li>git reflog</li> <li>git bisect</li></ul> <p>Hopefully we are now <code class="inline">git gudder</code> than before!</p> <hr/> <p>Related topic: <a href="/commit-went-missing-after-rebase/">Git commits went missing after a rebase</a></p></section>`,1);function Gs(Ji,H){const Ei=ht(H,["children","$$slots","$$events","$$legacy"]);nt(H,!1),rt("blog",{image:bt}),gt(),ut(Ji,_t(()=>Ei,()=>Ki,{children:(Vi,rs)=>{var S=ns(),r=t(pt(S),10),O=t(e(r),4),F=e(O),A=e(F);i(F),i(O),a(2),i(r);var c=t(r,2),M=t(e(c),4),P=e(M),j=e(P);i(P),i(M),a(4),i(c);var l=t(c,2),K=t(e(l),4),J=e(K),E=e(J);i(J),i(K),a(2),i(l);var p=t(l,2),V=t(e(p),6),Q=e(V),X=e(Q);i(Q),i(V),a(2),i(p);var d=t(p,2),Z=t(e(d),6),ee=e(Z),ie=e(ee);i(ee),i(Z),a(2),i(d);var m=t(d,2),g=t(e(m),6),te=e(g),se=e(te);i(te),i(g);var h=t(g,6),ae=e(h),oe=e(ae);i(ae),i(h);var _=t(h,8),ne=e(_),re=e(ne);i(ne),i(_);var ce=t(_,6),le=e(ce),pe=e(le);i(le),i(ce),a(2),i(m);var u=t(m,2),b=t(e(u),8),de=e(b),me=e(de);i(de),i(b);var f=t(b,8),ge=e(f),he=e(ge);i(ge),i(f);var _e=t(f,8),ue=e(_e),be=e(ue),fe=e(be),we=t(fe);i(be),i(ue),i(_e),a(6),i(u);var w=t(u,2),v=t(e(w),4),ve=e(v),ye=e(ve),ke=e(ye),xe=t(ke);i(ye),i(ve),i(v);var $e=t(v,6),Qi=e($e);o(Qi,()=>`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span>
<span class="line"></span>
<span class="line"># Rebase #1..#6 onto #1 (5 commands)</span>
<span class="line">#</span>
<span class="line"># Commands:</span>
<span class="line"># p, pick = use commit</span>
<span class="line"># r, reword = use commit, but edit the commit message</span>
<span class="line"># e, edit = use commit, but stop for amending</span>
<span class="line">...</span></code></pre>`),i($e),i(w);var y=t(w,2),k=t(e(y),4),Le=e(k),Re=e(Le),Ue=e(Re),Ge=t(Ue);i(Re),i(Le),i(k);var Ce=t(k,2),Xi=e(Ce);o(Xi,()=>`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`),i(Ce),i(y);var x=t(y,2),$=t(e(x),4),ze=e($),Te=e(ze),Ie=e(Te),Be=t(Ie);i(Te),i(ze),i($);var qe=t($,2),Zi=e(qe);o(Zi,()=>`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">drop #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`),i(qe),i(x);var L=t(x,2),R=t(e(L),4),De=e(R),We=e(De),Ye=e(We),Ne=t(Ye);i(We),i(De),i(R);var He=t(R,2),et=e(He);o(et,()=>`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">squash #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">fixup  #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`),i(He),i(L);var U=t(L,2),G=t(e(U),4),Se=e(G),Oe=e(Se),Fe=e(Oe),Ae=t(Fe);i(Oe),i(Se),i(G);var Me=t(G,2),it=e(Me);o(it,()=>`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">pick   #3 commit msg 3</span>
<span class="line">break</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`),i(Me),i(U);var C=t(U,2),z=t(e(C),4),Pe=e(z),je=e(Pe),Ke=e(je),Je=t(Ke);i(je),i(Pe),i(z);var Ee=t(z,2),tt=e(Ee);o(tt,()=>`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">edit   #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`),i(Ee),i(C);var T=t(C,2),Ve=t(e(T),4),Qe=e(Ve),Xe=e(Qe);i(Qe),i(Ve),a(2),i(T);var I=t(T,2),B=t(e(I),4),Ze=e(B),ei=e(Ze),ii=e(ei),ti=t(ii);i(ei),i(Ze),i(B);var q=t(B,4),si=e(q),ai=e(si),oi=e(ai),ni=t(oi);i(ai),i(si),i(q);var D=t(q,4),ri=e(D),ci=e(ri),li=e(ci),pi=t(li);i(ci),i(ri),i(D);var W=t(D,6),di=e(W),mi=e(di),gi=e(mi),hi=t(gi);i(mi),i(di),i(W);var _i=t(W,6),ui=e(_i),bi=e(ui),fi=e(bi),wi=t(fi);i(bi),i(ui),i(_i),a(4),i(I);var vi=t(I,18),Y=t(e(vi),6),st=e(Y);o(st,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git bisect start </span><span style="color: var(--shiki-token-comment)"># starts the bisect session</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad v2.5.1 </span><span style="color: var(--shiki-token-comment)"># specify the commit you know is bad</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good v2.6.13 </span><span style="color: var(--shiki-token-comment)"># specify the commit you knew were good</span></span></code></pre>`),i(Y);var N=t(Y,4),at=e(N);o(at,()=>'<pre class="prism language-"><code><span class="line">Bisecting: 675 revisions left to test after this (roughly 10 steps)</span></code></pre>'),i(N);var yi=t(N,4),ot=e(yi);o(ot,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)"># if it is a good commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># if it is a bad commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad</span></span></code></pre>`),i(yi),a(2),i(vi),a(2),dt(()=>{s(A,"src",ki),s(A,"srcset",`${ki}, ${ft} 2x`),s(j,"src",xi),s(j,"srcset",`${xi}, ${wt} 2x`),s(E,"src",$i),s(E,"srcset",`${$i}, ${vt} 2x`),s(X,"src",Li),s(X,"srcset",`${Li}, ${yt} 2x`),s(ie,"src",Ri),s(ie,"srcset",`${Ri}, ${kt} 2x`),s(se,"src",Ui),s(se,"srcset",`${Ui}, ${xt} 2x`),s(oe,"src",Gi),s(oe,"srcset",`${Gi}, ${$t} 2x`),s(re,"src",Ci),s(re,"srcset",`${Ci}, ${Lt} 2x`),s(pe,"src",zi),s(pe,"srcset",`${zi}, ${Rt} 2x`),s(me,"src",Ti),s(me,"srcset",`${Ti}, ${Ut} 2x`),s(he,"src",Ii),s(he,"srcset",`${Ii}, ${Gt} 2x`),s(fe,"srcset",`${zt}, ${Tt} 2x`),s(we,"src",Bi),s(we,"srcset",`${Bi}, ${Ct} 2x`),s(ke,"srcset",`${Di}, ${Wi} 2x`),s(xe,"src",n),s(xe,"srcset",`${n}, ${qi} 2x`),s(Ue,"srcset",`${Di}, ${Wi} 2x`),s(Ge,"src",n),s(Ge,"srcset",`${n}, ${qi} 2x`),s(Ie,"srcset",`${Bt}, ${qt} 2x`),s(Be,"src",Yi),s(Be,"srcset",`${Yi}, ${It} 2x`),s(Ye,"srcset",`${Wt}, ${Yt} 2x`),s(Ne,"src",Ni),s(Ne,"srcset",`${Ni}, ${Dt} 2x`),s(Fe,"srcset",`${Ht}, ${St} 2x`),s(Ae,"src",Hi),s(Ae,"srcset",`${Hi}, ${Nt} 2x`),s(Ke,"srcset",`${Ft}, ${At} 2x`),s(Je,"src",Si),s(Je,"srcset",`${Si}, ${Ot} 2x`),s(Xe,"src",Oi),s(Xe,"srcset",`${Oi}, ${Mt} 2x`),s(ii,"srcset",`${jt}, ${Kt} 2x`),s(ti,"src",Fi),s(ti,"srcset",`${Fi}, ${Pt} 2x`),s(oi,"srcset",`${Et}, ${Vt} 2x`),s(ni,"src",Ai),s(ni,"srcset",`${Ai}, ${Jt} 2x`),s(li,"srcset",`${Xt}, ${Zt} 2x`),s(pi,"src",Mi),s(pi,"srcset",`${Mi}, ${Qt} 2x`),s(gi,"srcset",`${is}, ${ts} 2x`),s(hi,"src",Pi),s(hi,"srcset",`${Pi}, ${es} 2x`),s(fi,"srcset",`${as}, ${os} 2x`),s(wi,"src",ji),s(wi,"srcset",`${ji}, ${ss} 2x`)}),mt(Vi,S)},$$slots:{default:!0}})),ct()}export{Gs as component};
