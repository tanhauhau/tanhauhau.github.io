import{s as ce,d as U,e as pe,f as ee,n as he}from"../chunks/scheduler.D6VJxl8L.js";import{S as de,i as ke,m as ye,n as ue,o as ve,t as fe,a as ge,p as me,e as l,s as r,H as se,c as i,q as d,h as c,d as te,r as oe,g as t,u as ne,j as o}from"../chunks/index.CLAVN-Y5.js";import{g as we,a as ae}from"../chunks/code-snippet.Gym6WUAG.js";import{B as xe}from"../chunks/BlogLayout.BMJM32nZ.js";import{t as be}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function _e(L){let n,y='Say you defined an object <code class="inline">const obj = { awesome: true }</code> so that anywhere within your code, you can access the value of <code class="inline">obj.awesome</code> as well as modify its value via <code class="inline">obj.awesome = false</code>.',k,h,a='<strong>Question</strong>: How do you know where and when <code class="inline">obj.awesome</code> is being accessed or modified?',p,u,M,v,V='<strong>So why is this important?</strong> If you are using frontend framework that does <a href="https://stackoverflow.com/a/13504965" rel="nofollow">2-way binding</a>, eg: <a href="https://angular.io/guide/ajs-quick-reference#ng-model" rel="nofollow">Angular</a>, <a href="https://vuejs.org/v2/guide/forms.html" rel="nofollow">Vue</a>, do you know how does the framework “watch” your <code class="inline">state</code> object? How does the framework knows when to update your DOM when you set some property of the <code class="inline">state</code> object?',C,f,P,ie=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// setting a property in the &#96;$scope&#96; object triggers</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the framework to update the model and the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$scope</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,$,S,O,g,B='<strong>Answer:</strong> You use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" rel="nofollow"><code class="inline">Object.defineProperty()</code></a>.',D,m,J='<code class="inline">Object.defineProperty(obj, prop, descriptor)</code> allows us to define a property to an object with a descriptor for the property being defined.',W,w,G='Well, nothing special about defining a property of an object, you can do it easily with <code class="inline">obj[prop] = value</code>. What so special about this <code class="inline">Object.defineProperty()</code> is the <code class="inline">descriptor</code> object that you pass in. Lets&#39; take a look at what can be configured through the <code class="inline">descriptor</code>:',A,x,Q='<li><p><code class="inline">enumerable</code></p> <p><code class="inline">true</code> if and only if this property shows up during enumeration of the properties on the corresponding object.</p> <p><strong>Defaults to <code class="inline">false</code></strong>.</p> <p>If you have a property&#39;s <code class="inline">enumerable</code> set to <code class="inline">false</code>, meaning you will not see the property when you do <code class="inline">Object.keys(obj)</code> or <code class="inline">for (const key in obj) { ... }</code></p></li> <li><p><code class="inline">writable</code></p> <p><code class="inline">true</code> if and only if the value associated with the property may be changed with an assignment operator.</p> <p><strong>Defaults to <code class="inline">false</code></strong></p> <p>This allows us to create <code class="inline">read-only</code> property of an object.</p></li> <li><p><code class="inline">get</code></p> <p>A function which serves as a getter for the property, or <code class="inline">undefined</code> if there is no getter. The return value will be used as the value of the property.</p> <p><strong>Defaults to <code class="inline">undefined</code></strong></p></li> <li><p><code class="inline">set</code></p> <p>A function which serves as a setter for the property, or <code class="inline">undefined</code> if there is no setter. When the property is assigned to, this function is called with one argument (the value being assigned to the property).</p> <p><strong>Defaults to <code class="inline">undefined</code></strong></p></li>',E,b,Z="So, there you have it. What you need is to define the getter and setter function of the property, and they will be called when the property is accessed or being assigned to a value.",I,_,F='You can add a breakpoint via <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger" rel="nofollow"><code class="inline">debugger;</code></a> in your getter and setter function, to invoke the debugging feature of your development tools to look at the call stack.',z,j,K="Another way of looking at the call stack without using a debugger is to <strong>throw an Error</strong> in the getter and setter function.",R,H,N="Yes. You hear me right. Throwing an error will allow you to get the call stack when the error is thrown:",Y,T,q,re=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> _value;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.defineProperty</span><span style="color: var(--shiki-color-text)">(obj</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;awesome&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">get</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// intentionally throw an Error to get the call stack</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// stack is the stack trace, </span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// containing error message and the stack</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">error</span><span style="color: var(--shiki-color-text)">.stack;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// print the callee stack</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        stack</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> _value;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`;return{c(){n=l("p"),n.innerHTML=y,k=r(),h=l("p"),h.innerHTML=a,p=r(),u=l("hr"),M=r(),v=l("p"),v.innerHTML=V,C=r(),f=l("div"),P=new se(!1),$=r(),S=l("hr"),O=r(),g=l("p"),g.innerHTML=B,D=r(),m=l("p"),m.innerHTML=J,W=r(),w=l("p"),w.innerHTML=G,A=r(),x=l("ul"),x.innerHTML=Q,E=r(),b=l("p"),b.textContent=Z,I=r(),_=l("p"),_.innerHTML=F,z=r(),j=l("p"),j.innerHTML=K,R=r(),H=l("p"),H.textContent=N,Y=r(),T=l("div"),q=new se(!1),this.h()},l(e){n=i(e,"P",{"data-svelte-h":!0}),d(n)!=="svelte-1e750bs"&&(n.innerHTML=y),k=c(e),h=i(e,"P",{"data-svelte-h":!0}),d(h)!=="svelte-3mgbuk"&&(h.innerHTML=a),p=c(e),u=i(e,"HR",{}),M=c(e),v=i(e,"P",{"data-svelte-h":!0}),d(v)!=="svelte-tlk66d"&&(v.innerHTML=V),C=c(e),f=i(e,"DIV",{class:!0});var s=te(f);P=oe(s,!1),s.forEach(t),$=c(e),S=i(e,"HR",{}),O=c(e),g=i(e,"P",{"data-svelte-h":!0}),d(g)!=="svelte-1tewbrc"&&(g.innerHTML=B),D=c(e),m=i(e,"P",{"data-svelte-h":!0}),d(m)!=="svelte-1cufheo"&&(m.innerHTML=J),W=c(e),w=i(e,"P",{"data-svelte-h":!0}),d(w)!=="svelte-12jyt5s"&&(w.innerHTML=G),A=c(e),x=i(e,"UL",{"data-svelte-h":!0}),d(x)!=="svelte-16xgfun"&&(x.innerHTML=Q),E=c(e),b=i(e,"P",{"data-svelte-h":!0}),d(b)!=="svelte-sply0v"&&(b.textContent=Z),I=c(e),_=i(e,"P",{"data-svelte-h":!0}),d(_)!=="svelte-rpbkt9"&&(_.innerHTML=F),z=c(e),j=i(e,"P",{"data-svelte-h":!0}),d(j)!=="svelte-zn0c4u"&&(j.innerHTML=K),R=c(e),H=i(e,"P",{"data-svelte-h":!0}),d(H)!=="svelte-fm21z6"&&(H.textContent=N),Y=c(e),T=i(e,"DIV",{class:!0});var X=te(T);q=oe(X,!1),X.forEach(t),this.h()},h(){P.a=null,ne(f,"class","code-section"),q.a=null,ne(T,"class","code-section")},m(e,s){o(e,n,s),o(e,k,s),o(e,h,s),o(e,p,s),o(e,u,s),o(e,M,s),o(e,v,s),o(e,C,s),o(e,f,s),P.m(ie,f),o(e,$,s),o(e,S,s),o(e,O,s),o(e,g,s),o(e,D,s),o(e,m,s),o(e,W,s),o(e,w,s),o(e,A,s),o(e,x,s),o(e,E,s),o(e,b,s),o(e,I,s),o(e,_,s),o(e,z,s),o(e,j,s),o(e,R,s),o(e,H,s),o(e,Y,s),o(e,T,s),q.m(re,T)},p:he,d(e){e&&(t(n),t(k),t(h),t(p),t(u),t(M),t(v),t(C),t(f),t($),t(S),t(O),t(g),t(D),t(m),t(W),t(w),t(A),t(x),t(E),t(b),t(I),t(_),t(z),t(j),t(R),t(H),t(Y),t(T))}}}function je(L){let n,y;const k=[L[0],le];let h={$$slots:{default:[_e]},$$scope:{ctx:L}};for(let a=0;a<k.length;a+=1)h=U(h,k[a]);return n=new xe({props:h}),{c(){ye(n.$$.fragment)},l(a){ue(n.$$.fragment,a)},m(a,p){ve(n,a,p),y=!0},p(a,[p]){const u=p&1?we(k,[p&1&&ae(a[0]),p&0&&ae(le)]):{};p&2&&(u.$$scope={dirty:p,ctx:a}),n.$set(u)},i(a){y||(fe(n.$$.fragment,a),y=!0)},o(a){ge(n.$$.fragment,a),y=!1},d(a){me(n,a)}}}const le={title:"Who accessed my property?",date:"2019-03-24T08:00:00Z",description:"How to know when object property get accessed or modified",label:"blog"};function He(L,n,y){return pe("blog",{image:be}),L.$$set=k=>{y(0,n=U(U({},n),ee(k)))},n=ee(n),[n]}class $e extends de{constructor(n){super(),ke(this,n,He,je,ce,{})}}export{$e as component};
