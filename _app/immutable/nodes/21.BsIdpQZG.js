import{s as wl,d as Yt,e as _l,f as Wo,n as bl}from"../chunks/scheduler.D6VJxl8L.js";import{S as Cl,i as Tl,m as Ll,n as Hl,o as Ml,t as Il,a as El,p as Pl,e as n,s as t,H as y,c as e,q as i,h as a,d as u,r as f,g as c,u as x,j as _,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as ql,a as $o}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Sl}from"../chunks/BlogLayout.BMJM32nZ.js";const jl=""+new URL("../assets/hero-twitter.CNozzZ8Q.jpg",import.meta.url).href;function Bl(j){let m,I='<p><strong>⚠️ This article was written for Svelte 3/4. For Svelte 5, please read the updated series: <a href="/compile-svelte-5-in-your-head">Compile Svelte 5 in your head</a></strong></p>',H,L,b='<strong>⬅ ⬅ Previously in <a href="/compile-svelte-in-your-head-part-3/">Part 3</a>.</strong>',T,M,Qt="In this article, we are going to cover our first logic block, the <strong>if block</strong>.",Ln,E,Kt="To make sure we are on the same page, let's first explain how if block works.",Hn,C,B,Zt='<a href="#the-123-if-125-block" id="the-123-if-125-block">The <code class="inline">{#if}</code> block</a>',pe,D,Gt='To render content conditionally, you can wrap it with the <code class="inline">{#if}</code> block:',re,O,Mn,Fo='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Conditionally rendered content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',ke,A,Xt='If the <code class="inline">condition</code> is truthy, you will see the <code class="inline">&lt;div&gt;Conditionally rendered content&lt;/div&gt;</code>, otherwise you will see nothing.',ve,V,sa='Like JavaScript, you can use <code class="inline">else</code> and <code class="inline">else if</code> in Svelte to test multiple conditions too:',de,N,In,Yo='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition_a<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Rendered due to condition_a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> condition_b<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Rendered due to condition_b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Otherwise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',he,z,na='You can visit Svelte&#39;s interactive tutorial to learn more about the <a href="https://svelte.dev/tutorial/if-blocks" rel="nofollow"><code class="inline">{#if}</code> logic block</a>.',En,P,ea='<h2><a href="#the-vanilla-js" id="the-vanilla-js">The Vanilla JS</a></h2> <p>So how do we implement an <code class="inline">{#if}</code> logic without any framework?</p> <p>As <a href="/compile-svelte-in-your-head-part-1/#creating-an-element">mentioned in the Part 1 of the series</a>, we&#39;ve seen how we can create elements without framework help.</p>',Pn,k,R,ta='<a href="#implementating-the-if-block" id="implementating-the-if-block">Implementating the if block</a>',ue,U,aa='Implementing an <code class="inline">{#if}</code> logic block can be as follow:',ye,W,qn,Qo=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createElementsIfConditionA</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to create &#96;&lt;div&gt;Rendered due to condition_a&lt;/div&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createElementsIfConditionB</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to create &#96;&lt;div&gt;Rendered due to condition_b&lt;/div&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createElementsElse</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to create &#96;&lt;div&gt;Otherwise&lt;/div&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElementsIfConditionA</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElementsIfConditionB</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElementsElse</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,fe,$,oa='The <code class="inline">condition_a</code> and <code class="inline">condition_b</code> could be dynamic, which means if the condition changed, we may need to call <code class="inline">createIfBlock</code> again.',xe,J,la="But before that, we need to remove the elements that we created previously. This depends on which conditions were met previously, and which elements were created previously.",ge,F,ia="So, let's store that information in a variable:",me,Y,Sn,Ko=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyElementsIfConditionA</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to destroy &#96;&lt;div&gt;Rendered due to condition_a&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyElementsIfConditionB</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to destroy &#96;&lt;div&gt;Rendered due to condition_b&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyElementsElse</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to destroy &#96;&lt;div&gt;Otherwise&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previousDestroy;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getPreviousDestroy</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    previousDestroy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionA;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    previousDestroy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionB;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    previousDestroy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destroyElementsElse;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">getPreviousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,we,Q,ca="So, <strong>if conditions changed</strong>, we destroy the previously created elements, and create a new one:",_e,K,jn,Zo=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if &#96;condition_a&#96; or &#96;condition_b&#96; changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (conditionChanged) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">previousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,be,Z,pa='However, if the condition does not change, but the content within the if block changes, for example, <code class="inline">value_a</code>, <code class="inline">value_b</code> or <code class="inline">value_else</code> change in the following code:',Ce,G,Bn,Go='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition_a<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> value_a <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> condition_b<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> value_b <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> value_else <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Te,X,ra="Then we need to know how to update the elements as well:",Le,ss,Dn,Xo=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionA</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to update &#96;&lt;div&gt;&#123; value_a &#125;&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionB</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to update &#96;&lt;div&gt;&#123; value_b &#125;&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateElementsElse</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to update &#96;&lt;div&gt;&#123; value_else &#125;&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if &#96;condition_a&#96; or &#96;condition_b&#96; changed</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (conditionChanged) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">previousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionA</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionB</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">updateElementsElse</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,He,ns,ka='Finally to destroy the elements if we want to unmount the whole <code class="inline">{#if}</code> block, we can use <code class="inline">previousDestroy</code>, since it will be based on the conditions that the elements were created with:',Me,es,On,sl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">previousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ie,ts,va='Here we have <code class="inline">createIfBlock</code>, <code class="inline">updateIfBlock</code> and <code class="inline">destroyIfBlock</code>. It looks unwieldy, as the <code class="inline">if (condition)</code> logic is scattered across <code class="inline">createIfBlock</code>, <code class="inline">getPreviousDestroy</code> and <code class="inline">updateIfBlock</code>.',Ee,as,da="So, let's refactor this. Let's shift code around to make it cleaner. ✨",An,g,os,ha='<a href="#refactor-the-code" id="refactor-the-code">Refactor the code</a>',Pe,ls,ua="For each of the logic branch, we have functions to create, update and destroy its elements. For the first condition branch, we have:",qe,is,ya='<li><code class="inline">createElementsIfConditionA</code></li> <li><code class="inline">updateElementsIfConditionA</code></li> <li><code class="inline">destroyElementsIfConditionA</code></li>',Se,cs,fa='It seems like we can employ some sort of <a href="https://dev.to/carlillo/design-patterns---strategy-pattern-in-javascript-2hg3" rel="nofollow">Strategy Pattern</a> over here.',je,ps,xa='We can group the operations for each condition branch together, where each operation has the same interface, <code class="inline">{ create(){}, update(){}, destroy(){} }</code> :',Be,rs,Vn,nl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationConditionA</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  create</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> createElementsIfConditionA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  update</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> updateElementsIfConditionA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  destroy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationConditionB</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  create</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> createElementsIfConditionB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  update</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> updateElementsIfConditionB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  destroy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationConditionElse</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  create</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> createElementsElse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  update</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> updateElementsElse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  destroy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> destroyElementsElse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,De,ks,ga="Now, we choose the operation based on the condition, since they have the same interface, they should be able to be used interchangeably:",Oe,vs,Nn,el=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOperation</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> operationConditionA;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> operationConditionB;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> operationConditionElse;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ae,ds,ma='Here, we can rewrite our <code class="inline">createIfBlock</code>, <code class="inline">updateIfBlock</code> and <code class="inline">destroyIfBlock</code>:',Ve,hs,zn,tl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> currentOperation </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOperation</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">previousOperation</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> currentOperation;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  currentOperation </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOperation</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if (conditionChanged)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (currentOperation </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> previousOperation) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">previousOperation</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ne,us,wa="To determine whether the condition changed, we can compute the operation and compare it with the previous operation to see if it has changed.",Rn,r,ys,_a='<a href="#the-compiled-js" id="the-compiled-js">The Compiled JS</a>',ze,fs,ba='Now let&#39;s take look at how Svelte compiles <code class="inline">{#if}</code> into output JavaScript.',Re,xs,Un,al='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> loggedIn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></div><div class="line"></div><div class="line">	<span class="token keyword">function</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		loggedIn <span class="token operator">=</span> <span class="token operator">!</span>loggedIn<span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> loggedIn<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>toggle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">		Log out</div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>toggle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">		Log in</div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Ue,gs,Ca='<a href="https://svelte.dev/repl/39aec874a5214a35b34ff069ae9fa143" rel="nofollow">Svelte REPL</a>',We,ms,Ta="The output code:",$e,q,ws,La="Click to expand...",Je,_s,Wn,ol=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.25.1 */</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_else_block</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    p</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// (9:0) &#123;#if loggedIn&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_if_block</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    p</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-comment)">/*loggedIn*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]) </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> create_if_block;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> create_else_block;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> current_block_type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> if_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">current_block_type</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      if_block_anchor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (current_block_type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> (current_block_type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty)) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> if_block) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        if_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">current_block_type</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (if_block) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">if_block_anchor</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    o</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(detaching);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(if_block_anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fe,bs,Ha="Some observations:",Ye,Cs,Ma="<strong>Observation 1: If you compare the Svelte&#39;s compiled output and the JS code we came out earlier, you may see some resemblance:</strong>",Qe,Ts,Ia='<li><p>For each logic branch, we have a <a href="/compile-svelte-in-your-head-part-1/#create-fragment"><code class="inline">create_fragment</code> function</a>, which in this case is <code class="inline">create_else_block</code> and <code class="inline">create_if_block</code>. As explain in the previous article, these functions return an <em>instruction manual</em> on how to build the DOM fragment for each logic branch.</p> <p>This is similar to the operations we discussed earlier, eg: <code class="inline">operationConditionA</code>, <code class="inline">operationConditionB</code> and <code class="inline">operationConditionElse</code>.</p></li> <li><p>To determine which <code class="inline">create_fragment</code> function to use, we have the <code class="inline">select_block_type</code> function.</p> <p>This is similar to the <code class="inline">getOperation</code> we discussed earlier.</p></li> <li><p>We then initialise the fragment for the current condition branch,</p></li>',Ke,Ls,$n,ll=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> current_block_type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> if_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">current_block_type</span><span style="color: var(--shiki-color-text)">(ctx);</span></span></code></pre>`,Ze,Hs,Ea='<li><p>Now we can:</p> <ul><li>create <code class="inline">if_block.c()</code></li> <li>mount <code class="inline">if_block.m(target, anchor)</code></li> <li>update <code class="inline">if_block.p(ctx, dirty)</code></li> <li>destroy <code class="inline">if_block.d(detaching)</code></li></ul> <p>elements for the <code class="inline">{#if}</code> block.</p></li> <li><p>In the <code class="inline">p</code> <strong>(u_p_date)</strong> method, we check if the <code class="inline">current_block_type</code> has changed, if not, then we call <code class="inline">if_block.p(ctx, dirty)</code> to update as necessary.</p> <p>If there&#39;s change, then we destroy <code class="inline">if_block.d(1)</code> the previous elements, create a new fragment based on the <code class="inline">current_block_type</code>, then create and mount the elements via <code class="inline">if_block.c()</code> and <code class="inline">if_block.m(...)</code>.</p> <p>This is similar to how we call <code class="inline">previousOperation.destroy()</code> and <code class="inline">currentOperation.create()</code>  or <code class="inline">currentOperation.update()</code>.</p></li>',Ge,Ms,Pa='<strong>Observation 2: There&#39;s a <code class="inline">if_block_anchor</code> inserted after the <code class="inline">if_block</code></strong>',Xe,Is,Jn,il='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">if_block_anchor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">()</span></span></code></pre>',st,Es,qa='<code class="inline">empty()</code> creates an empty text node.',nt,Ps,Fn,cl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// https://github.com/sveltejs/svelte/blob/v3.25.1/src/runtime/internal/dom.ts#L56-L58</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,et,qs,Sa='The <code class="inline">if_block_anchor</code> is then used when mounting the <code class="inline">if_block</code> in the <strong>u_p_date</strong> method.',tt,Ss,Yn,pl='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">if_block_anchor</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor)</span></span></code></pre>',at,js,ja="So what is this extra empty text node for?",Qn,o,Bs,Ba='<a href="#the-extra-text-node" id="the-extra-text-node">The extra text node</a>',ot,Ds,Da='When we update the <code class="inline">{#if}</code> block and notice that we need to change the fragment block type, we need to destroy the elements created previously, and insert newly created elements.',lt,Os,Oa='When we insert the new elements, we need to know where to insert them. The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore" rel="nofollow"><code class="inline">insertBefore</code></a> API allow us to specify which node the elements should be inserted before. So now it begs the question, which node?',it,As,Aa='The answer depends on the position <code class="inline">{#if}</code> block is written in the component. There are 4 possible scenarios:',ct,Vs,Va='<strong>1. There&#39;s an element right after the <code class="inline">{#if}</code> block</strong>',pt,Ns,Kn,rl='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token punctuation">/></span></span></div></code></pre>',rt,zs,Na='<a href="https://svelte.dev/repl/5d75daf3190f412f83656fd2e689cb14" rel="nofollow">Svelte REPL</a>',kt,Rs,za="You'll see that",vt,Us,Ra='<li>Svelte does not create the extra text node</li> <li>Instead, Svelte uses the <code class="inline">&lt;span /&gt;</code> node instead</li>',dt,Ws,Zn,kl='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> span)</span></span></code></pre>',ht,$s,Ua='<p>When the <code class="inline">{#if}</code> condition changes, <code class="inline">{#if}</code> block will replace and insert new elements before the <code class="inline">&lt;span /&gt;</code> element.</p>',ut,Js,Wa='<strong>2. <code class="inline">{#if}</code> block is the last child, <code class="inline">{#if}</code> block has a parent</strong>',yt,Fs,Gn,vl='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>',ft,Ys,$a='<a href="https://svelte.dev/repl/5fac48804cfb49639cfda1ab8273cba8" rel="nofollow">Svelte REPL</a>',xt,Qs,Ja="You'll see that",gt,Ks,Fa='<li>Svelte does not create the extra text node</li> <li>Instead, Svelte inserts the <code class="inline">{#if}</code> block into the parent node, <code class="inline">&lt;div /&gt;</code> and insert before <code class="inline">null</code>. (If you pass <code class="inline">null</code> to <code class="inline">insertBefore</code>, it will append the element as the last child)</li>',mt,Zs,Xn,dl='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>',wt,Gs,Ya='<p>When the <code class="inline">{#if}</code> condition changes, <code class="inline">{#if}</code> block will replace and insert new elements as the last children of the parent <code class="inline">&lt;div /&gt;</code> element.</p>',_t,Xs,Qa='<strong>3. <code class="inline">{#if}</code> block is the last child, <code class="inline">{#if}</code> block does not have a parent</strong>',bt,sn,se,hl='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Ct,nn,Ka='<a href="https://svelte.dev/repl/b9b5dae5ab9f4399bf901f802a6885cb" rel="nofollow">Svelte REPL</a>',Tt,en,Za="You'll see that",Lt,tn,Ga='<li>Svelte creates an extra <code class="inline">anchor</code> element</li> <li>The <code class="inline">anchor</code> element is inserted after the <code class="inline">{#if}</code> block.</li> <li>Subsequently in the <strong>u_p_date</strong> function, Svelte insert <code class="inline">{#if}</code> block before the <code class="inline">anchor</code> element.</li>',Ht,an,ne,ul='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">if_block_anchor</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor);</span></span></code></pre>',Mt,on,Xa='<p>When the <code class="inline">{#if}</code> condition changes, <code class="inline">{#if}</code> block will replace and insert new elements before the <code class="inline">anchor</code> element.</p>',It,ln,so="But why?",Et,cn,no="This is because a Svelte component can be used in anywhere.",Pt,pn,eo="Let's take a look at the scenario below:",qt,rn,ee,yl=`<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- A.svelte --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- B.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- App.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> <span class="token constant">A</span> <span class="token keyword">from</span> <span class="token string">'./A.svelte'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">'./B.svelte'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span> <span class="token punctuation">/></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>B</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>`,St,kn,to='In the <code class="inline">A.svelte</code>, the <code class="inline">{#if}</code> block is the last child, it does not have any sibling elements after it.',jt,vn,ao='Let&#39;s first assume we don&#39;t have the <code class="inline">anchor</code> element. When the <code class="inline">condition</code> changes from <code class="inline">false</code> to <code class="inline">true</code>, Svelte will have to insert the new element <code class="inline">&lt;div id=&quot;a&quot;&gt;</code> into its parent. And because there&#39;s no next element after <code class="inline">{#if}</code> block, and no <code class="inline">anchor</code> element, we will have to insert before <code class="inline">null</code>. In which, the <code class="inline">&lt;div id=&quot;a&quot; /&gt;</code> will be inserted as the last child of the parent element, <code class="inline">&lt;div id=&quot;parent&quot;&gt;</code>. And hey, we got ourselves a bug! Elements inside <code class="inline">&lt;A /&gt;</code> appears after <code class="inline">&lt;B /&gt;</code>!',Bt,dn,te,fl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;parent&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- newly inserted element --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Dt,hn,oo='We can prevent this from happening by adding an <code class="inline">anchor</code> element.',Ot,un,lo='When the <code class="inline">condition</code> is <code class="inline">false</code>, our DOM looks like this:',At,yn,ae,xl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;parent&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;#text /&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- an empty text node, not visible to the user --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Vt,fn,io='And when the <code class="inline">condition</code> turns <code class="inline">true</code>, we insert <code class="inline">&lt;div id=&quot;a&quot; /&gt;</code> before the <code class="inline">anchor</code> element:',Nt,xn,oe,gl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;parent&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- newly inserted element --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;#text /&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- an empty text node, not visible to the user --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,zt,gn,co='Yay, we maintain the order of <code class="inline">&lt;A /&gt;</code> and <code class="inline">&lt;B /&gt;</code> 🎉 !',Rt,mn,po='The <code class="inline">anchor</code> element to the <code class="inline">{#if}</code> block, is like <a href="https://www.britannica.com/technology/anchor-nautical-device" rel="nofollow">an anchor to a ship</a>, &quot;Here is where <code class="inline">{#if}</code> block should <code class="inline">insertBefore()</code> !&quot;',Ut,wn,ro='<strong>4. <code class="inline">{#if}</code> block followed by another logic block</strong>',Wt,_n,ko='The final scenario. <code class="inline">{#if}</code> block followed by another logic block:',$t,bn,le,ml='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition2<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Jt,Cn,vo='The 2nd <code class="inline">{#if}</code> block condition could be <code class="inline">true</code> or <code class="inline">false</code>. Which means <code class="inline">&lt;div id=&quot;b&quot; /&gt;</code> could be there or not there.',Ft,Tn,ho='So, to know where we should insert <code class="inline">&lt;div id=&quot;a&quot; /&gt;</code> when chaging the <code class="inline">condition</code>, we need an <code class="inline">anchor</code> element after the 1st <code class="inline">{#if}</code> block, before the 2nd <code class="inline">{#if}</code> block.',ie,S,uo='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>We&#39;ve covered how Svelte compiles an <code class="inline">{#if}</code> block, as well as how and why an <code class="inline">anchor</code> element is needed for the <code class="inline">{#if}</code> block.</p> <p>If you wish to learn more about Svelte, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>I&#39;ll post it on Twitter when the next part is ready, the next post will be about <code class="inline">{#each}</code> logic block.</p>';return{c(){m=n("blockquote"),m.innerHTML=I,H=t(),L=n("p"),L.innerHTML=b,T=t(),M=n("p"),M.innerHTML=Qt,Ln=t(),E=n("p"),E.textContent=Kt,Hn=t(),C=n("section"),B=n("h2"),B.innerHTML=Zt,pe=t(),D=n("p"),D.innerHTML=Gt,re=t(),O=n("div"),Mn=new y(!1),ke=t(),A=n("p"),A.innerHTML=Xt,ve=t(),V=n("p"),V.innerHTML=sa,de=t(),N=n("div"),In=new y(!1),he=t(),z=n("p"),z.innerHTML=na,En=t(),P=n("section"),P.innerHTML=ea,Pn=t(),k=n("section"),R=n("h3"),R.innerHTML=ta,ue=t(),U=n("p"),U.innerHTML=aa,ye=t(),W=n("div"),qn=new y(!1),fe=t(),$=n("p"),$.innerHTML=oa,xe=t(),J=n("p"),J.textContent=la,ge=t(),F=n("p"),F.textContent=ia,me=t(),Y=n("div"),Sn=new y(!1),we=t(),Q=n("p"),Q.innerHTML=ca,_e=t(),K=n("div"),jn=new y(!1),be=t(),Z=n("p"),Z.innerHTML=pa,Ce=t(),G=n("div"),Bn=new y(!1),Te=t(),X=n("p"),X.textContent=ra,Le=t(),ss=n("div"),Dn=new y(!1),He=t(),ns=n("p"),ns.innerHTML=ka,Me=t(),es=n("div"),On=new y(!1),Ie=t(),ts=n("p"),ts.innerHTML=va,Ee=t(),as=n("p"),as.textContent=da,An=t(),g=n("section"),os=n("h3"),os.innerHTML=ha,Pe=t(),ls=n("p"),ls.textContent=ua,qe=t(),is=n("ul"),is.innerHTML=ya,Se=t(),cs=n("p"),cs.innerHTML=fa,je=t(),ps=n("p"),ps.innerHTML=xa,Be=t(),rs=n("div"),Vn=new y(!1),De=t(),ks=n("p"),ks.textContent=ga,Oe=t(),vs=n("div"),Nn=new y(!1),Ae=t(),ds=n("p"),ds.innerHTML=ma,Ve=t(),hs=n("div"),zn=new y(!1),Ne=t(),us=n("p"),us.textContent=wa,Rn=t(),r=n("section"),ys=n("h2"),ys.innerHTML=_a,ze=t(),fs=n("p"),fs.innerHTML=ba,Re=t(),xs=n("div"),Un=new y(!1),Ue=t(),gs=n("p"),gs.innerHTML=Ca,We=t(),ms=n("p"),ms.textContent=Ta,$e=t(),q=n("details"),ws=n("summary"),ws.textContent=La,Je=t(),_s=n("div"),Wn=new y(!1),Fe=t(),bs=n("p"),bs.textContent=Ha,Ye=t(),Cs=n("p"),Cs.innerHTML=Ma,Qe=t(),Ts=n("ul"),Ts.innerHTML=Ia,Ke=t(),Ls=n("div"),$n=new y(!1),Ze=t(),Hs=n("ul"),Hs.innerHTML=Ea,Ge=t(),Ms=n("p"),Ms.innerHTML=Pa,Xe=t(),Is=n("div"),Jn=new y(!1),st=t(),Es=n("p"),Es.innerHTML=qa,nt=t(),Ps=n("div"),Fn=new y(!1),et=t(),qs=n("p"),qs.innerHTML=Sa,tt=t(),Ss=n("div"),Yn=new y(!1),at=t(),js=n("p"),js.textContent=ja,Qn=t(),o=n("section"),Bs=n("h3"),Bs.innerHTML=Ba,ot=t(),Ds=n("p"),Ds.innerHTML=Da,lt=t(),Os=n("p"),Os.innerHTML=Oa,it=t(),As=n("p"),As.innerHTML=Aa,ct=t(),Vs=n("p"),Vs.innerHTML=Va,pt=t(),Ns=n("div"),Kn=new y(!1),rt=t(),zs=n("p"),zs.innerHTML=Na,kt=t(),Rs=n("p"),Rs.textContent=za,vt=t(),Us=n("ul"),Us.innerHTML=Ra,dt=t(),Ws=n("div"),Zn=new y(!1),ht=t(),$s=n("blockquote"),$s.innerHTML=Ua,ut=t(),Js=n("p"),Js.innerHTML=Wa,yt=t(),Fs=n("div"),Gn=new y(!1),ft=t(),Ys=n("p"),Ys.innerHTML=$a,xt=t(),Qs=n("p"),Qs.textContent=Ja,gt=t(),Ks=n("ul"),Ks.innerHTML=Fa,mt=t(),Zs=n("div"),Xn=new y(!1),wt=t(),Gs=n("blockquote"),Gs.innerHTML=Ya,_t=t(),Xs=n("p"),Xs.innerHTML=Qa,bt=t(),sn=n("div"),se=new y(!1),Ct=t(),nn=n("p"),nn.innerHTML=Ka,Tt=t(),en=n("p"),en.textContent=Za,Lt=t(),tn=n("ul"),tn.innerHTML=Ga,Ht=t(),an=n("div"),ne=new y(!1),Mt=t(),on=n("blockquote"),on.innerHTML=Xa,It=t(),ln=n("p"),ln.textContent=so,Et=t(),cn=n("p"),cn.textContent=no,Pt=t(),pn=n("p"),pn.textContent=eo,qt=t(),rn=n("div"),ee=new y(!1),St=t(),kn=n("p"),kn.innerHTML=to,jt=t(),vn=n("p"),vn.innerHTML=ao,Bt=t(),dn=n("div"),te=new y(!1),Dt=t(),hn=n("p"),hn.innerHTML=oo,Ot=t(),un=n("p"),un.innerHTML=lo,At=t(),yn=n("div"),ae=new y(!1),Vt=t(),fn=n("p"),fn.innerHTML=io,Nt=t(),xn=n("div"),oe=new y(!1),zt=t(),gn=n("p"),gn.innerHTML=co,Rt=t(),mn=n("p"),mn.innerHTML=po,Ut=t(),wn=n("p"),wn.innerHTML=ro,Wt=t(),_n=n("p"),_n.innerHTML=ko,$t=t(),bn=n("div"),le=new y(!1),Jt=t(),Cn=n("p"),Cn.innerHTML=vo,Ft=t(),Tn=n("p"),Tn.innerHTML=ho,ie=t(),S=n("section"),S.innerHTML=uo,this.h()},l(p){m=e(p,"BLOCKQUOTE",{"data-svelte-h":!0}),i(m)!=="svelte-2295x0"&&(m.innerHTML=I),H=a(p),L=e(p,"P",{"data-svelte-h":!0}),i(L)!=="svelte-1lxbqjf"&&(L.innerHTML=b),T=a(p),M=e(p,"P",{"data-svelte-h":!0}),i(M)!=="svelte-18023ma"&&(M.innerHTML=Qt),Ln=a(p),E=e(p,"P",{"data-svelte-h":!0}),i(E)!=="svelte-1b758jb"&&(E.textContent=Kt),Hn=a(p),C=e(p,"SECTION",{});var v=u(C);B=e(v,"H2",{"data-svelte-h":!0}),i(B)!=="svelte-gehk4h"&&(B.innerHTML=Zt),pe=a(v),D=e(v,"P",{"data-svelte-h":!0}),i(D)!=="svelte-1p27ume"&&(D.innerHTML=Gt),re=a(v),O=e(v,"DIV",{class:!0});var yo=u(O);Mn=f(yo,!1),yo.forEach(c),ke=a(v),A=e(v,"P",{"data-svelte-h":!0}),i(A)!=="svelte-10iobcx"&&(A.innerHTML=Xt),ve=a(v),V=e(v,"P",{"data-svelte-h":!0}),i(V)!=="svelte-2wyftb"&&(V.innerHTML=sa),de=a(v),N=e(v,"DIV",{class:!0});var fo=u(N);In=f(fo,!1),fo.forEach(c),he=a(v),z=e(v,"P",{"data-svelte-h":!0}),i(z)!=="svelte-ig3t9r"&&(z.innerHTML=na),v.forEach(c),En=a(p),P=e(p,"SECTION",{"data-svelte-h":!0}),i(P)!=="svelte-50yp9w"&&(P.innerHTML=ea),Pn=a(p),k=e(p,"SECTION",{});var h=u(k);R=e(h,"H3",{"data-svelte-h":!0}),i(R)!=="svelte-1vfrk6l"&&(R.innerHTML=ta),ue=a(h),U=e(h,"P",{"data-svelte-h":!0}),i(U)!=="svelte-1p579s8"&&(U.innerHTML=aa),ye=a(h),W=e(h,"DIV",{class:!0});var xo=u(W);qn=f(xo,!1),xo.forEach(c),fe=a(h),$=e(h,"P",{"data-svelte-h":!0}),i($)!=="svelte-63lz6j"&&($.innerHTML=oa),xe=a(h),J=e(h,"P",{"data-svelte-h":!0}),i(J)!=="svelte-ilxz5p"&&(J.textContent=la),ge=a(h),F=e(h,"P",{"data-svelte-h":!0}),i(F)!=="svelte-14ggs4n"&&(F.textContent=ia),me=a(h),Y=e(h,"DIV",{class:!0});var go=u(Y);Sn=f(go,!1),go.forEach(c),we=a(h),Q=e(h,"P",{"data-svelte-h":!0}),i(Q)!=="svelte-1i9yinu"&&(Q.innerHTML=ca),_e=a(h),K=e(h,"DIV",{class:!0});var mo=u(K);jn=f(mo,!1),mo.forEach(c),be=a(h),Z=e(h,"P",{"data-svelte-h":!0}),i(Z)!=="svelte-1m41146"&&(Z.innerHTML=pa),Ce=a(h),G=e(h,"DIV",{class:!0});var wo=u(G);Bn=f(wo,!1),wo.forEach(c),Te=a(h),X=e(h,"P",{"data-svelte-h":!0}),i(X)!=="svelte-4rn3zn"&&(X.textContent=ra),Le=a(h),ss=e(h,"DIV",{class:!0});var _o=u(ss);Dn=f(_o,!1),_o.forEach(c),He=a(h),ns=e(h,"P",{"data-svelte-h":!0}),i(ns)!=="svelte-bmzlo2"&&(ns.innerHTML=ka),Me=a(h),es=e(h,"DIV",{class:!0});var bo=u(es);On=f(bo,!1),bo.forEach(c),Ie=a(h),ts=e(h,"P",{"data-svelte-h":!0}),i(ts)!=="svelte-a2qd5g"&&(ts.innerHTML=va),Ee=a(h),as=e(h,"P",{"data-svelte-h":!0}),i(as)!=="svelte-psqyqo"&&(as.textContent=da),h.forEach(c),An=a(p),g=e(p,"SECTION",{});var w=u(g);os=e(w,"H3",{"data-svelte-h":!0}),i(os)!=="svelte-8s00eq"&&(os.innerHTML=ha),Pe=a(w),ls=e(w,"P",{"data-svelte-h":!0}),i(ls)!=="svelte-1r9pt2a"&&(ls.textContent=ua),qe=a(w),is=e(w,"UL",{"data-svelte-h":!0}),i(is)!=="svelte-1ikxtap"&&(is.innerHTML=ya),Se=a(w),cs=e(w,"P",{"data-svelte-h":!0}),i(cs)!=="svelte-1l55tod"&&(cs.innerHTML=fa),je=a(w),ps=e(w,"P",{"data-svelte-h":!0}),i(ps)!=="svelte-19mw94l"&&(ps.innerHTML=xa),Be=a(w),rs=e(w,"DIV",{class:!0});var Co=u(rs);Vn=f(Co,!1),Co.forEach(c),De=a(w),ks=e(w,"P",{"data-svelte-h":!0}),i(ks)!=="svelte-6y15h8"&&(ks.textContent=ga),Oe=a(w),vs=e(w,"DIV",{class:!0});var To=u(vs);Nn=f(To,!1),To.forEach(c),Ae=a(w),ds=e(w,"P",{"data-svelte-h":!0}),i(ds)!=="svelte-142i4yl"&&(ds.innerHTML=ma),Ve=a(w),hs=e(w,"DIV",{class:!0});var Lo=u(hs);zn=f(Lo,!1),Lo.forEach(c),Ne=a(w),us=e(w,"P",{"data-svelte-h":!0}),i(us)!=="svelte-u8hzq0"&&(us.textContent=wa),w.forEach(c),Rn=a(p),r=e(p,"SECTION",{});var d=u(r);ys=e(d,"H2",{"data-svelte-h":!0}),i(ys)!=="svelte-o6ahnh"&&(ys.innerHTML=_a),ze=a(d),fs=e(d,"P",{"data-svelte-h":!0}),i(fs)!=="svelte-1ry3xyi"&&(fs.innerHTML=ba),Re=a(d),xs=e(d,"DIV",{class:!0});var Ho=u(xs);Un=f(Ho,!1),Ho.forEach(c),Ue=a(d),gs=e(d,"P",{"data-svelte-h":!0}),i(gs)!=="svelte-k5c8h5"&&(gs.innerHTML=Ca),We=a(d),ms=e(d,"P",{"data-svelte-h":!0}),i(ms)!=="svelte-1qed6n7"&&(ms.textContent=Ta),$e=a(d),q=e(d,"DETAILS",{});var ce=u(q);ws=e(ce,"SUMMARY",{"data-svelte-h":!0}),i(ws)!=="svelte-1ykxxw5"&&(ws.textContent=La),Je=a(ce),_s=e(ce,"DIV",{class:!0});var Mo=u(_s);Wn=f(Mo,!1),Mo.forEach(c),ce.forEach(c),Fe=a(d),bs=e(d,"P",{"data-svelte-h":!0}),i(bs)!=="svelte-yujbal"&&(bs.textContent=Ha),Ye=a(d),Cs=e(d,"P",{"data-svelte-h":!0}),i(Cs)!=="svelte-1sir519"&&(Cs.innerHTML=Ma),Qe=a(d),Ts=e(d,"UL",{"data-svelte-h":!0}),i(Ts)!=="svelte-ofzyq1"&&(Ts.innerHTML=Ia),Ke=a(d),Ls=e(d,"DIV",{class:!0});var Io=u(Ls);$n=f(Io,!1),Io.forEach(c),Ze=a(d),Hs=e(d,"UL",{"data-svelte-h":!0}),i(Hs)!=="svelte-lhl708"&&(Hs.innerHTML=Ea),Ge=a(d),Ms=e(d,"P",{"data-svelte-h":!0}),i(Ms)!=="svelte-18tvplz"&&(Ms.innerHTML=Pa),Xe=a(d),Is=e(d,"DIV",{class:!0});var Eo=u(Is);Jn=f(Eo,!1),Eo.forEach(c),st=a(d),Es=e(d,"P",{"data-svelte-h":!0}),i(Es)!=="svelte-1gatt95"&&(Es.innerHTML=qa),nt=a(d),Ps=e(d,"DIV",{class:!0});var Po=u(Ps);Fn=f(Po,!1),Po.forEach(c),et=a(d),qs=e(d,"P",{"data-svelte-h":!0}),i(qs)!=="svelte-15xpz5e"&&(qs.innerHTML=Sa),tt=a(d),Ss=e(d,"DIV",{class:!0});var qo=u(Ss);Yn=f(qo,!1),qo.forEach(c),at=a(d),js=e(d,"P",{"data-svelte-h":!0}),i(js)!=="svelte-13qr9m6"&&(js.textContent=ja),d.forEach(c),Qn=a(p),o=e(p,"SECTION",{});var l=u(o);Bs=e(l,"H3",{"data-svelte-h":!0}),i(Bs)!=="svelte-abspjq"&&(Bs.innerHTML=Ba),ot=a(l),Ds=e(l,"P",{"data-svelte-h":!0}),i(Ds)!=="svelte-11r5chy"&&(Ds.innerHTML=Da),lt=a(l),Os=e(l,"P",{"data-svelte-h":!0}),i(Os)!=="svelte-a0fc97"&&(Os.innerHTML=Oa),it=a(l),As=e(l,"P",{"data-svelte-h":!0}),i(As)!=="svelte-1jc0q29"&&(As.innerHTML=Aa),ct=a(l),Vs=e(l,"P",{"data-svelte-h":!0}),i(Vs)!=="svelte-15cll5c"&&(Vs.innerHTML=Va),pt=a(l),Ns=e(l,"DIV",{class:!0});var So=u(Ns);Kn=f(So,!1),So.forEach(c),rt=a(l),zs=e(l,"P",{"data-svelte-h":!0}),i(zs)!=="svelte-16mbrxb"&&(zs.innerHTML=Na),kt=a(l),Rs=e(l,"P",{"data-svelte-h":!0}),i(Rs)!=="svelte-1g21nqs"&&(Rs.textContent=za),vt=a(l),Us=e(l,"UL",{"data-svelte-h":!0}),i(Us)!=="svelte-1yrshtw"&&(Us.innerHTML=Ra),dt=a(l),Ws=e(l,"DIV",{class:!0});var jo=u(Ws);Zn=f(jo,!1),jo.forEach(c),ht=a(l),$s=e(l,"BLOCKQUOTE",{"data-svelte-h":!0}),i($s)!=="svelte-1yst075"&&($s.innerHTML=Ua),ut=a(l),Js=e(l,"P",{"data-svelte-h":!0}),i(Js)!=="svelte-iv5ef3"&&(Js.innerHTML=Wa),yt=a(l),Fs=e(l,"DIV",{class:!0});var Bo=u(Fs);Gn=f(Bo,!1),Bo.forEach(c),ft=a(l),Ys=e(l,"P",{"data-svelte-h":!0}),i(Ys)!=="svelte-1vzi07q"&&(Ys.innerHTML=$a),xt=a(l),Qs=e(l,"P",{"data-svelte-h":!0}),i(Qs)!=="svelte-1g21nqs"&&(Qs.textContent=Ja),gt=a(l),Ks=e(l,"UL",{"data-svelte-h":!0}),i(Ks)!=="svelte-1t4hno2"&&(Ks.innerHTML=Fa),mt=a(l),Zs=e(l,"DIV",{class:!0});var Do=u(Zs);Xn=f(Do,!1),Do.forEach(c),wt=a(l),Gs=e(l,"BLOCKQUOTE",{"data-svelte-h":!0}),i(Gs)!=="svelte-cpcy78"&&(Gs.innerHTML=Ya),_t=a(l),Xs=e(l,"P",{"data-svelte-h":!0}),i(Xs)!=="svelte-1dtnlqm"&&(Xs.innerHTML=Qa),bt=a(l),sn=e(l,"DIV",{class:!0});var Oo=u(sn);se=f(Oo,!1),Oo.forEach(c),Ct=a(l),nn=e(l,"P",{"data-svelte-h":!0}),i(nn)!=="svelte-1671tdm"&&(nn.innerHTML=Ka),Tt=a(l),en=e(l,"P",{"data-svelte-h":!0}),i(en)!=="svelte-1g21nqs"&&(en.textContent=Za),Lt=a(l),tn=e(l,"UL",{"data-svelte-h":!0}),i(tn)!=="svelte-1osmqv0"&&(tn.innerHTML=Ga),Ht=a(l),an=e(l,"DIV",{class:!0});var Ao=u(an);ne=f(Ao,!1),Ao.forEach(c),Mt=a(l),on=e(l,"BLOCKQUOTE",{"data-svelte-h":!0}),i(on)!=="svelte-19ms0r4"&&(on.innerHTML=Xa),It=a(l),ln=e(l,"P",{"data-svelte-h":!0}),i(ln)!=="svelte-1pzk3n6"&&(ln.textContent=so),Et=a(l),cn=e(l,"P",{"data-svelte-h":!0}),i(cn)!=="svelte-1m2nldh"&&(cn.textContent=no),Pt=a(l),pn=e(l,"P",{"data-svelte-h":!0}),i(pn)!=="svelte-1t3tzzr"&&(pn.textContent=eo),qt=a(l),rn=e(l,"DIV",{class:!0});var Vo=u(rn);ee=f(Vo,!1),Vo.forEach(c),St=a(l),kn=e(l,"P",{"data-svelte-h":!0}),i(kn)!=="svelte-1iavazc"&&(kn.innerHTML=to),jt=a(l),vn=e(l,"P",{"data-svelte-h":!0}),i(vn)!=="svelte-1gjfatp"&&(vn.innerHTML=ao),Bt=a(l),dn=e(l,"DIV",{class:!0});var No=u(dn);te=f(No,!1),No.forEach(c),Dt=a(l),hn=e(l,"P",{"data-svelte-h":!0}),i(hn)!=="svelte-1dcshn"&&(hn.innerHTML=oo),Ot=a(l),un=e(l,"P",{"data-svelte-h":!0}),i(un)!=="svelte-13qepr4"&&(un.innerHTML=lo),At=a(l),yn=e(l,"DIV",{class:!0});var zo=u(yn);ae=f(zo,!1),zo.forEach(c),Vt=a(l),fn=e(l,"P",{"data-svelte-h":!0}),i(fn)!=="svelte-pssrbb"&&(fn.innerHTML=io),Nt=a(l),xn=e(l,"DIV",{class:!0});var Ro=u(xn);oe=f(Ro,!1),Ro.forEach(c),zt=a(l),gn=e(l,"P",{"data-svelte-h":!0}),i(gn)!=="svelte-107gcs"&&(gn.innerHTML=co),Rt=a(l),mn=e(l,"P",{"data-svelte-h":!0}),i(mn)!=="svelte-1jt2wwc"&&(mn.innerHTML=po),Ut=a(l),wn=e(l,"P",{"data-svelte-h":!0}),i(wn)!=="svelte-1m0w38w"&&(wn.innerHTML=ro),Wt=a(l),_n=e(l,"P",{"data-svelte-h":!0}),i(_n)!=="svelte-1ukzce4"&&(_n.innerHTML=ko),$t=a(l),bn=e(l,"DIV",{class:!0});var Uo=u(bn);le=f(Uo,!1),Uo.forEach(c),Jt=a(l),Cn=e(l,"P",{"data-svelte-h":!0}),i(Cn)!=="svelte-xtbom3"&&(Cn.innerHTML=vo),Ft=a(l),Tn=e(l,"P",{"data-svelte-h":!0}),i(Tn)!=="svelte-1nvnnkc"&&(Tn.innerHTML=ho),l.forEach(c),ie=a(p),S=e(p,"SECTION",{"data-svelte-h":!0}),i(S)!=="svelte-q35yb0"&&(S.innerHTML=uo),this.h()},h(){Mn.a=null,x(O,"class","code-section"),In.a=null,x(N,"class","code-section"),qn.a=null,x(W,"class","code-section"),Sn.a=null,x(Y,"class","code-section"),jn.a=null,x(K,"class","code-section"),Bn.a=null,x(G,"class","code-section"),Dn.a=null,x(ss,"class","code-section"),On.a=null,x(es,"class","code-section"),Vn.a=null,x(rs,"class","code-section"),Nn.a=null,x(vs,"class","code-section"),zn.a=null,x(hs,"class","code-section"),Un.a=null,x(xs,"class","code-section"),Wn.a=null,x(_s,"class","code-section"),$n.a=null,x(Ls,"class","code-section"),Jn.a=null,x(Is,"class","code-section"),Fn.a=null,x(Ps,"class","code-section"),Yn.a=null,x(Ss,"class","code-section"),Kn.a=null,x(Ns,"class","code-section"),Zn.a=null,x(Ws,"class","code-section"),Gn.a=null,x(Fs,"class","code-section"),Xn.a=null,x(Zs,"class","code-section"),se.a=null,x(sn,"class","code-section"),ne.a=null,x(an,"class","code-section"),ee.a=null,x(rn,"class","code-section"),te.a=null,x(dn,"class","code-section"),ae.a=null,x(yn,"class","code-section"),oe.a=null,x(xn,"class","code-section"),le.a=null,x(bn,"class","code-section")},m(p,v){_(p,m,v),_(p,H,v),_(p,L,v),_(p,T,v),_(p,M,v),_(p,Ln,v),_(p,E,v),_(p,Hn,v),_(p,C,v),s(C,B),s(C,pe),s(C,D),s(C,re),s(C,O),Mn.m(Fo,O),s(C,ke),s(C,A),s(C,ve),s(C,V),s(C,de),s(C,N),In.m(Yo,N),s(C,he),s(C,z),_(p,En,v),_(p,P,v),_(p,Pn,v),_(p,k,v),s(k,R),s(k,ue),s(k,U),s(k,ye),s(k,W),qn.m(Qo,W),s(k,fe),s(k,$),s(k,xe),s(k,J),s(k,ge),s(k,F),s(k,me),s(k,Y),Sn.m(Ko,Y),s(k,we),s(k,Q),s(k,_e),s(k,K),jn.m(Zo,K),s(k,be),s(k,Z),s(k,Ce),s(k,G),Bn.m(Go,G),s(k,Te),s(k,X),s(k,Le),s(k,ss),Dn.m(Xo,ss),s(k,He),s(k,ns),s(k,Me),s(k,es),On.m(sl,es),s(k,Ie),s(k,ts),s(k,Ee),s(k,as),_(p,An,v),_(p,g,v),s(g,os),s(g,Pe),s(g,ls),s(g,qe),s(g,is),s(g,Se),s(g,cs),s(g,je),s(g,ps),s(g,Be),s(g,rs),Vn.m(nl,rs),s(g,De),s(g,ks),s(g,Oe),s(g,vs),Nn.m(el,vs),s(g,Ae),s(g,ds),s(g,Ve),s(g,hs),zn.m(tl,hs),s(g,Ne),s(g,us),_(p,Rn,v),_(p,r,v),s(r,ys),s(r,ze),s(r,fs),s(r,Re),s(r,xs),Un.m(al,xs),s(r,Ue),s(r,gs),s(r,We),s(r,ms),s(r,$e),s(r,q),s(q,ws),s(q,Je),s(q,_s),Wn.m(ol,_s),s(r,Fe),s(r,bs),s(r,Ye),s(r,Cs),s(r,Qe),s(r,Ts),s(r,Ke),s(r,Ls),$n.m(ll,Ls),s(r,Ze),s(r,Hs),s(r,Ge),s(r,Ms),s(r,Xe),s(r,Is),Jn.m(il,Is),s(r,st),s(r,Es),s(r,nt),s(r,Ps),Fn.m(cl,Ps),s(r,et),s(r,qs),s(r,tt),s(r,Ss),Yn.m(pl,Ss),s(r,at),s(r,js),_(p,Qn,v),_(p,o,v),s(o,Bs),s(o,ot),s(o,Ds),s(o,lt),s(o,Os),s(o,it),s(o,As),s(o,ct),s(o,Vs),s(o,pt),s(o,Ns),Kn.m(rl,Ns),s(o,rt),s(o,zs),s(o,kt),s(o,Rs),s(o,vt),s(o,Us),s(o,dt),s(o,Ws),Zn.m(kl,Ws),s(o,ht),s(o,$s),s(o,ut),s(o,Js),s(o,yt),s(o,Fs),Gn.m(vl,Fs),s(o,ft),s(o,Ys),s(o,xt),s(o,Qs),s(o,gt),s(o,Ks),s(o,mt),s(o,Zs),Xn.m(dl,Zs),s(o,wt),s(o,Gs),s(o,_t),s(o,Xs),s(o,bt),s(o,sn),se.m(hl,sn),s(o,Ct),s(o,nn),s(o,Tt),s(o,en),s(o,Lt),s(o,tn),s(o,Ht),s(o,an),ne.m(ul,an),s(o,Mt),s(o,on),s(o,It),s(o,ln),s(o,Et),s(o,cn),s(o,Pt),s(o,pn),s(o,qt),s(o,rn),ee.m(yl,rn),s(o,St),s(o,kn),s(o,jt),s(o,vn),s(o,Bt),s(o,dn),te.m(fl,dn),s(o,Dt),s(o,hn),s(o,Ot),s(o,un),s(o,At),s(o,yn),ae.m(xl,yn),s(o,Vt),s(o,fn),s(o,Nt),s(o,xn),oe.m(gl,xn),s(o,zt),s(o,gn),s(o,Rt),s(o,mn),s(o,Ut),s(o,wn),s(o,Wt),s(o,_n),s(o,$t),s(o,bn),le.m(ml,bn),s(o,Jt),s(o,Cn),s(o,Ft),s(o,Tn),_(p,ie,v),_(p,S,v)},p:bl,d(p){p&&(c(m),c(H),c(L),c(T),c(M),c(Ln),c(E),c(Hn),c(C),c(En),c(P),c(Pn),c(k),c(An),c(g),c(Rn),c(r),c(Qn),c(o),c(ie),c(S))}}}function Dl(j){let m,I;const H=[j[0],Jo];let L={$$slots:{default:[Bl]},$$scope:{ctx:j}};for(let b=0;b<H.length;b+=1)L=Yt(L,H[b]);return m=new Sl({props:L}),{c(){Ll(m.$$.fragment)},l(b){Hl(m.$$.fragment,b)},m(b,T){Ml(m,b,T),I=!0},p(b,[T]){const M=T&1?ql(H,[T&1&&$o(b[0]),T&0&&$o(Jo)]):{};T&2&&(M.$$scope={dirty:T,ctx:b}),m.$set(M)},i(b){I||(Il(m.$$.fragment,b),I=!0)},o(b){El(m.$$.fragment,b),I=!1},d(b){Pl(m,b)}}}const Jo={title:"Compile Svelte in your head (Part 4)",date:"2020-09-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"⚠️ This article was written for Svelte 3/4. For Svelte 5, please read the updated series: Compile Svelte 5 in your head⬅ ⬅ Previously in Part 3.In this article, we are going to cover our first logic block, the ...",tableOfContents:[{link:"the-123-if-125-block",title:"The  `&#123;#if&#125;`  block"},{link:"the-vanilla-js",title:"The Vanilla JS",nested:[{link:"implementating-the-if-block",title:"Implementating the if block"},{link:"refactor-the-code",title:"Refactor the code"}]},{link:"the-compiled-js",title:"The Compiled JS",nested:[{link:"the-extra-text-node",title:"The extra text node"}]},{link:"closing-note",title:"Closing Note"}]};function Ol(j,m,I){return _l("blog",{image:jl}),j.$$set=H=>{I(0,m=Yt(Yt({},m),Wo(H)))},m=Wo(m),[m]}class Rl extends Cl{constructor(m){super(),Tl(this,m,Ol,Dl,wl,{})}}export{Rl as component};
