import{s as cc,d as Ll,e as kc,f as $p,n as vc}from"../chunks/scheduler.D6VJxl8L.js";import{S as hc,i as dc,m as yc,n as uc,o as xc,t as mc,a as fc,p as gc,e as a,s as t,H as d,c as n,q as o,h as e,d as c,r as y,g as i,u,j as p,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as wc,a as _p}from"../chunks/code-snippet.Gym6WUAG.js";import{B as bc}from"../chunks/BlogLayout.BMJM32nZ.js";const $c=""+new URL("../assets/hero-twitter.CGTJGJWP.jpg",import.meta.url).href;function _c(es){let H,B='<p><strong>⚠️ This article was written for Svelte 3/4. For Svelte 5, please read the updated series: <a href="/compile-svelte-5-in-your-head">Compile Svelte 5 in your head</a></strong></p>',R,z,N='<strong>⬅ ⬅  Previously in <a href="/compile-svelte-in-your-head-part-1/">Part 1</a>.</strong>',q,A,Hl='<a href="/compile-svelte-in-your-head-part-1/">Previously</a>, when I mentioned the <code class="inline">$$invalidate</code> function, I explained that the <code class="inline">$$invalidate</code> function works conceptually like the following:',Jn,W,Wn,Lp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fn,F,Ml='but that&#39;s not the exact implementation of the <code class="inline">$$invaldiate</code> function. So in this article, we are going to look at how <code class="inline">$$invalidate</code> is implemented in Svelte.',Gn,G,Cl='At the point of writing, Svelte is at <a href="https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201" rel="nofollow">v3.20.1</a>.',Yn,Y,Pl='<h2><a href="#pre-v3-16-0" id="pre-v3-16-0">Pre v3.16.0</a></h2> <p>There&#39;s a big optimisation that changes the underlying implementation of the <code class="inline">$$invalidate</code> function in <a href="https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3160" rel="nofollow">v3.16.0</a>, namely in <a href="https://github.com/sveltejs/svelte/pull/3945" rel="nofollow">#3945</a>. The underlying concept doesn&#39;t change, but it&#39;ll be much easier to understand about <code class="inline">$$invalidate</code> prior the change and learn about the optimisation change separately.</p> <p>Let&#39;s explain some of the variables that you are going to see, some of which was introduced in <a href="/compile-svelte-in-your-head-part-1">Part 1</a>:</p>',Kn,$,os,Sl='<a href="#ctx" id="ctx">$$.ctx</a>',se,ls,Nl="There&#39;s no official name for it. You can call it <strong>context</strong> as it is the context which the template is based on to render onto the DOM.",ae,is,El='I called it <a href="/compile-svelte-in-your-head-part-1#instance-variable">instance variables</a>. As it is a JavaScript Object that contains all the variables that you:',ne,rs,jl='<li>declared in the <code class="inline">&lt;script&gt;</code> tag</li> <li>mutated or reassigned</li> <li>referenced in the template</li>',te,ps,Il="that belongs to a component instance.",ee,cs,Ol="The instance variables themselves can be of a primitive value, object, array or function.",oe,ks,ql='The <code class="inline">instance</code> function creates and returns the <code class="inline">ctx</code> object.',le,vs,Dl='Functions declared in the <code class="inline">&lt;script&gt;</code> tag will refer to the instance variable that is scoped withn the <code class="inline">instance</code> function closure:',ie,hs,Qn,Hp=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,re,ds,Vl='<a href="https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.20.1" rel="nofollow">Svelte REPL</a>',pe,ys,Zn,Mp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...some where in &#96;create_fragment&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// logs &#96;world&#96; scoped in the &#96;instance&#96; closure</span></span></code></pre>`,ce,us,zl='Whenever a new instance of a component is created, the <code class="inline">instance</code> function is called and the <code class="inline">ctx</code> object is created and captured within a new closure scope.',Xn,f,xs,Rl='<a href="#dirty" id="dirty">$$.dirty</a>',ke,ms,Al='<code class="inline">$$.dirty</code> is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM.',ve,fs,Ul="For example, in the following Svelte component:",he,gs,st,Cp='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> agility <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> power <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementAgility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    power <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">levelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span></div><div class="line">    power <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line">Agility: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility<span class="token punctuation">&#125;</span></span></div><div class="line">Power: <span class="token language-javascript"><span class="token punctuation">&#123;</span>power<span class="token punctuation">&#125;</span></span></div><div class="line">Stats: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility <span class="token operator">*</span> power<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementAgility<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Agility<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementPower<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Power<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>levelUp<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Level Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',de,ws,Bl='<a href="https://svelte.dev/repl/da579d0113b44f01b2b94893dce21487?version=3.20.1" rel="nofollow">Svelte REPL</a>',ye,bs,Jl='The initial <code class="inline">$$.dirty</code> is <code class="inline">null</code> (<a href="https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L124" rel="nofollow">source code</a>).',ue,$s,Wl='If you clicked on the <strong>&quot;+ Agility&quot;</strong> button, <code class="inline">$$.dirty</code> will turn into:',xe,_s,at,Pp='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">; &#125;</span></span></code></pre>',me,Ts,Fl='If you clicked on the <strong>&quot;Level Up&quot;</strong> button, <code class="inline">$$.dirty</code> will turn into:',fe,Ls,nt,Sp='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> power</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>',ge,Hs,Gl='<code class="inline">$$.dirty</code> is useful for Svelte, so that it doesn&#39;t update the DOM unnecessarily.',we,Ms,Yl='If you looked at the <strong>p (u_p_date)</strong> function of the compiled code, you will see Svelte checks whether a variable is marked in <code class="inline">$$.dirty</code>, before updating the DOM.',be,Cs,tt,Np=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: $$.dirty is passed into the &#96;p&#96; function as &#96;changed&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(changed</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// checked if agility has changed before update the agility text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if either agility or power has changed, update the stats text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ((</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> t5_value </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (t5_value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t5</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t5_value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$e,Ps,Kl='After Svelte updates the DOM, the <code class="inline">$$.dirty</code> is set back to <code class="inline">null</code> to indicate all changes has been applied onto the DOM.',et,h,Ss,Ql='<a href="#invalidate" id="invalidate">$$invalidate</a>',_e,Ns,Zl='<code class="inline">$$invalidate</code> is the secret behind reactivity in Svelte.',Te,Es,Xl="Whenever a variable is",Le,js,si='<li>reassigned <code class="inline">(foo = 1)</code></li> <li>mutated <code class="inline">(foo.bar = 1)</code></li>',He,Is,ai='Svelte will wrap the assignment or update around with the <code class="inline">$$invalidate</code> function:',Me,Os,ot,Ep=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">))));</span></span></code></pre>`,Ce,qs,ni='the <code class="inline">$$invalidate</code> function will:',Pe,Ds,ti='<li>update the variable in <code class="inline">$$.ctx</code></li> <li>mark the variable in <code class="inline">$$.dirty</code></li> <li>schedule an update</li> <li>return the value of the assignment or update expression</li>',Se,Vs,lt,jp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">not_equal</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. update the variable in $$.ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2a. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 4. return the value of the assignment or update expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> ret;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">dirty_components</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. schedule an update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// initialise $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">blank_object</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 2b. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ne,zs,ei='<a href="https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L130-L136" rel="nofollow">Source code</a>',Ee,Rs,oi='One interesting note about the function <code class="inline">$$invalidate</code> is that, it wraps around the assignment or update expression and returns what the expression evaluates to.',je,As,li='This makes <code class="inline">$$invalidate</code> chainable:',Ie,Us,it,Ip=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">(&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// assuming all variables are referenced in the template</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the above compiles into</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  c</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Oe,Bs,ii="It seemed complex when there's a lot of assignment or update expressions in 1 statement! 🙈",qe,Js,ri='The 2nd argument of <code class="inline">$$invalidate</code> is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with <code class="inline">$$invalidate</code>.',De,Ws,pi='In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the <code class="inline">$$invalidate</code> function, eg:',Ve,Fs,rt,Op=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it invalidates &#96;obj&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it returns the evaluated value of the expression &#96;obj.c = &#39;hello&#39;&#96;, which is &#39;hello&#39;</span></span></code></pre>`,ze,Gs,ci='So that, we update the <code class="inline">&quot;obj&quot;</code> variable to <code class="inline">obj</code> instead of the value of the 2nd argument, <code class="inline">&quot;hello&quot;</code>.',pt,w,Ys,ki='<a href="#schedule-update" id="schedule-update">schedule_update</a>',Re,Ks,vi='<code class="inline">schedule_update</code> schedules Svelte to update the DOM with the changes made thus far.',Ae,Qs,hi='Svelte, at the point of writing (<a href="https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201" rel="nofollow">v3.20.1</a>), uses <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" rel="nofollow">microtask queue</a> to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous <code class="inline">$$invalidate</code> operations that happen within the same task get batched into the next DOM update.',Ue,Zs,di="To schedule a next microtask, Svelte uses the Promise callback.",Be,Xs,ct,qp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">update_scheduled) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    update_scheduled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;flush&#96; will do the DOM update</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// we push it into the microtask queue</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">resolved_promise</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(flush);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Je,sa,yi='In <code class="inline">flush</code>, we call update for each component marked dirty:',We,aa,kt,Dp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flush</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for each componnet in &#96;dirty_components&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.$$);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this will be important later</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// resets &#96;$$.dirty&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">after_update</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(add_render_callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fe,na,ui='<a href="https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/scheduler.ts#L14" rel="nofollow">Source code</a>',Ge,ta,xi="So, if you write a Svelte component like this:",Ye,ea,vt,Vp=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line">Name: <span class="token language-javascript"><span class="token punctuation">&#123;</span>familyName<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>givenName<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,Ke,oa,mi='<a href="https://svelte.dev/repl/761a0a6cc2834afb842942e1d23875b1?version=3.20.1" rel="nofollow">Svelte REPL</a>',Qe,la,fi='The DOM update for the <code class="inline">givenName</code> and <code class="inline">familyName</code> happens in the same microtask:',Ze,ia,gi='<li>Click on the <strong>&quot;Update&quot;</strong> to call the <code class="inline">update</code> function</li> <li><code class="inline">$$invalidate(&#39;givenName&#39;, givenName = &#39;Li Hau&#39;)</code></li> <li>Mark the variable <code class="inline">givenName</code> dirty, <code class="inline">$$.dirty[&#39;givenName&#39;] = true</code></li> <li>Schedule an update, <code class="inline">schedule_update()</code></li> <li>Since it&#39;s the first update in the call stack, push the <code class="inline">flush</code> function into the microtask queue</li> <li><code class="inline">$$invalidate(&#39;familyName&#39;, familyName = &#39;Tan&#39;)</code></li> <li>Mark the variable <code class="inline">familyName</code> dirty, <code class="inline">$$.dirty[&#39;familyName&#39;] = true</code></li> <li>Schedule an update, <code class="inline">schedule_update()</code></li> <li>Since <code class="inline">update_scheduled = true</code>, do nothing.</li> <li><strong>-- End of task --</strong></li> <li><strong>-- Start of microtask--</strong></li> <li><code class="inline">flush()</code> calls <code class="inline">update()</code> for each component marked dirty</li> <li>Calls <code class="inline">$$.fragment.p($$.dirty, $$.ctx)</code>.<ul><li><code class="inline">$$.dirty</code> is now <code class="inline">{ givenName: true, familyName: true }</code></li> <li><code class="inline">$$.ctx</code> is now <code class="inline">{ givenName: &#39;Li Hau&#39;, familyName: &#39;Tan&#39; }</code></li></ul></li> <li>In <code class="inline">function p(dirty, ctx)</code>,<ul><li>Update the 1st text node to <code class="inline">$$.ctx[&#39;givenName&#39;]</code> if <code class="inline">$$.dirty[&#39;givenName&#39;] === true</code></li> <li>Update the 2nd text node to <code class="inline">$$.ctx[&#39;familyName&#39;]</code> if <code class="inline">$$.dirty[&#39;familyName&#39;] === true</code></li></ul></li> <li>Resets the <code class="inline">$$.dirty</code> to <code class="inline">null</code></li> <li>...</li> <li><strong>-- End of microtask--</strong></li>',ht,K,wi='<h4><a href="#tl-dr" id="tl-dr">tl/dr:</a></h4> <ul><li>For each assignment or update, Svelte calls <code class="inline">$$invalidate</code> to update the variable in <code class="inline">$$.ctx</code> and mark the variable dirty in <code class="inline">$$.dirty</code>.</li> <li>The acutal DOM update is batched into the next microtask queue.</li> <li>To update the DOM for each component, the component <code class="inline">$$.fragment.p($$.diry, $$.ctx)</code> is called.</li> <li>After the DOM update, the <code class="inline">$$.dirty</code> is reset to <code class="inline">null</code>.</li></ul>',dt,C,ra,bi='<a href="#v3-16-0" id="v3-16-0">v3.16.0</a>',Xe,pa,$i='One big change in v3.16.0 is the PR <a href="https://github.com/sveltejs/svelte/pull/3945" rel="nofollow">#3945</a>, namely <strong>bitmask-based change tracking</strong>.',so,ca,_i="Instead of marking the variable dirty using an object:",ao,ka,yt,zp='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.diry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span></code></pre>',no,va,Ti="Svelte assign each variable an index:",to,ha,ut,Rp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">familyName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,eo,da,Li='and uses <a href="https://en.wikipedia.org/wiki/Mask_(computing)" rel="nofollow">bitmask</a> to store the dirty information:',oo,ya,xt,Ap=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">0b0000_0011</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the 0th and 1st bit marked true</span></span></code></pre>`,lo,ua,Hi="which is far more compact than the previous compiled code.",mt,b,xa,Mi='<a href="#bitmask" id="bitmask">Bitmask</a>',io,ma,Ci="For those who don't understand, allow me to quickly explain what it is.",ro,fa,Pi='Of course, if you want to learn more about it, feel free to read a more detailed explanation, like <a href="https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03" rel="nofollow">this</a> and <a href="https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf" rel="nofollow">this</a>.',po,ga,Si='The most compact way of representing a group of <code class="inline">true</code> or <code class="inline">false</code> is to use bits. If the bit is <code class="inline">1</code> it is <code class="inline">true</code> and if it is <code class="inline">0</code> it is <code class="inline">false</code>.',co,wa,Ni='A number can be represented in binary, <strong>5</strong> is <code class="inline">0b0101</code> in binary.',ko,ba,Ei='If <strong>5</strong> is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as <code class="inline">true</code> and 1st and 3rd bit as <code class="inline">false</code>, (reading from the right to left, from <a href="https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit" rel="nofollow">least significant bit</a> to the <a href="https://en.wikipedia.org/wiki/Bit_numbering#Most_significant_bit" rel="nofollow">most significant bit</a>).',vo,$a,ji="<strong>How many boolean values can a number store?</strong>",ho,_a,Ii="That depends on the language, a 16-bit integer in Java can store 16 boolean values.",yo,Ta,Oi='In JavaScript, numbers can are <a href="https://2ality.com/2012/04/number-encoding.html" rel="nofollow">represented in 64 bits</a>. However, when using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" rel="nofollow">bitwise operations</a> on the number, JavaScript will treat the number as 32 bits.',uo,La,qi='To inspect or modify the boolean value stored in a number, we use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" rel="nofollow">bitwise operations</a>.',xo,Ha,ft,Up=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// set 1st boolean to true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0010</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0111</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// set 2nd boolean to false</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1011</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0001</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: You can test multiple boolean values at once</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd and 3rd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,mo,Ma,Di='The 2nd operand we use in the bitwise operation, is like a <a href="https://en.wikipedia.org/wiki/Mask_(computing)" rel="nofollow">mask</a> that allow us to target a specific bit in the 1st number, that stores our boolean values.',fo,Ca,Vi="We call the mask, <strong>bitmask</strong>.",gt,x,Pa,zi='<a href="#bitmask-in-svelte" id="bitmask-in-svelte">Bitmask in Svelte</a>',go,Sa,Ri="As mentioned earlier, we assign each variable an index:",wo,Na,wt,Bp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">firstName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,bo,Ea,Ai="So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:",$o,ja,bt,Jp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_o,Ia,Ui='The variable is accessed via <strong>index</strong>, <code class="inline">$$.ctx[index]</code>, instead of <strong>variable name</strong>:',To,Oa,$t,Wp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.familyName;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">];</span></span></code></pre>`,Lo,qa,Bi='The <code class="inline">$$invalidate</code> function works the same, except it takes in <strong>index</strong> instead of <strong>variable name</strong>:',Ho,Da,_t,Fp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Mo,Va,Ji='<code class="inline">$$.dirty</code> now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not.',Co,za,Wi="To set a variable as dirty, we use bitwise operation:",Po,Ra,Tt,Gp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">|=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&lt;&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,So,Aa,Fi="And to verify whether a variable is dirty, we use bitwise operation too!",No,Ua,Lt,Yp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.familyName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>`,Eo,Ba,Gi='With using bitmask, <code class="inline">$$.dirty</code> is now reset to <code class="inline">[-1]</code> instead of <code class="inline">null</code>.',jo,Ja,Yi='<strong>Trivia:</strong> <code class="inline">-1</code> is <code class="inline">0b1111_1111</code> in binary, where all the bits are <code class="inline">1</code>.',Ht,U,Wa,Ki='<a href="#destructuring-dirty" id="destructuring-dirty">Destructuring <strong>$$.dirty</strong></a>',Io,Fa,Qi='One code-size optimisation that Svelte does is to always destructure the <code class="inline">dirty</code> array in the <strong>u_p_date function</strong> if there&#39;s less than 32 variables, since we will always access <code class="inline">dirty[0]</code> anyway:',Oo,Ga,Mt,Kp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// If less than 32 variables,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Instead of having &#96;dirty[0]&#96; all the time,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Svelte optimises the compiled code by </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// destruct the array in the arguments</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// If more than or equal to 32 variables</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ct,Q,Zi='<h4><a href="#tl-dr-1" id="tl-dr-1">tl/dr:</a></h4> <ul><li>The underlying mechanism for <code class="inline">$$invalidate</code> and <code class="inline">schedule_update</code> does not change</li> <li>Using bitmask, the compiled code is much compact</li></ul>',Pt,k,Ya,Xi='<a href="#reactive-declaration" id="reactive-declaration">Reactive Declaration</a>',qo,Ka,sr='Svelte allow us to declare reactive values via the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label" rel="nofollow">labeled statement</a>, <code class="inline">$:</code>',Do,Qa,St,Qp='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// &#96;doubled&#96;, &#96;tripled&#96;, &#96;quadrupled&#96; are reactive</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>tripled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>quadrupled<span class="token punctuation">&#125;</span></span></div></code></pre>',Vo,Za,ar='<a href="https://svelte.dev/repl/e37329dd126448b2aa0679c08993f9a8?version=3.20.1" rel="nofollow">Svelte REPL</a>',zo,Xa,nr='If you look at the compiled output, you would find out that the declarative statements appeared in the <a href="/compile-svelte-in-your-head-part-1/#instanceself-props-invalidate"><code class="inline">instance</code> function</a>:',Ro,sn,Nt,Zp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ao,an,tr="Try reorder the reactive declarations and observe the change in the compiled output:",Uo,nn,Et,Xp='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// NOTE: move &#96;quadrupled&#96; before &#96;doubled&#96;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>',Bo,tn,er='<a href="https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1" rel="nofollow">Svelte REPL</a>',Jo,en,jt,sc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;quadrupled&#96; invalidates after &#96;doubled&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wo,on,or="Some observations:",Fo,ln,lr='<li>When there are reactive declarations, Svelte defines a custom <code class="inline">$$.update</code> method.<ul><li><code class="inline">$$.update</code> is a <a href="https://en.wikipedia.org/wiki/NOP_(code)" rel="nofollow">no-op function</a> by default. (See <a href="https://github.com/sveltejs/svelte/blob/v3.20.1/src/runtime/internal/Component.ts#L111" rel="nofollow">src/runtime/internal/Component.ts</a>)</li></ul></li> <li>Svelte uses <code class="inline">$$invalidate</code> to update the value of a reactive variable too.</li> <li>Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements<ul><li><code class="inline">quadrupled</code> depends on <code class="inline">doubled</code>, so <code class="inline">quadrupled</code> is evaluated and <code class="inline">$$invalidate</code>d after <code class="inline">doubled</code>.</li></ul></li> <li>You may have noticed that the order of the variables in the array returned <code class="inline">[doubled, tripled, quadrupled, count]</code> may be different from the output in the latest Svelte version, but that&#39;s beyond the scope of this article.</li>',Go,rn,ir='Since all reactive declarations and statements are grouped into the <code class="inline">$$.update</code> method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them.',Yo,pn,rr="The following component still works:",Ko,cn,It,ac='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line"><span class="token comment">// NOTE: use &#96;count&#96; in a reactive declaration before &#96;count&#96; is declared</span></div><div class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span> * 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',Qo,kn,pr='<a href="https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1" rel="nofollow">Svelte REPL</a>',Zo,vn,cr='<strong>The next thing you may ask, when is <code class="inline">$$.update</code> being called?</strong>',Xo,hn,kr='Remember the <code class="inline">update</code> function that gets called in the <code class="inline">flush</code> function?',sl,dn,vr='I put a <code class="inline">NOTE:</code> comment saying that it will be important later. Well, it is important now.',al,yn,Ot,nc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this is important now!</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,nl,un,hr='The <code class="inline">$$.update</code> function gets called <strong>in the same microtask</strong> with the DOM update, right before we called the <code class="inline">$$.fragment.p()</code> to update the DOM.',tl,xn,dr="The implication of the above fact is",qt,P,mn,yr='<a href="#1-execution-of-all-reactive-declarations-and-statements-are-batched" id="1-execution-of-all-reactive-declarations-and-statements-are-batched">1. Execution of all reactive declarations and statements are batched</a>',el,fn,ur="Just as how DOM updates are batched, reactive declarations and statements are batched too!",ol,gn,Dt,tc=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,ll,wn,xr='<a href="https://svelte.dev/repl/941195f1cd5248e9bd14613f9513ad1d?version=3.20.1" rel="nofollow">Svelte REPL</a>',il,bn,mr='When <code class="inline">update()</code> get called,',rl,$n,fr='<li>Similar to the <a href="#schedule_update">flow described above</a>, <code class="inline">$$invalidate</code> both <strong>&quot;givenName&quot;</strong> and <strong>&quot;familyName&quot;</strong>, and schedules an update</li> <li><strong>-- End of task --</strong></li> <li><strong>-- Start of microtask--</strong></li> <li><code class="inline">flush()</code> calls <code class="inline">update()</code> for each component marked dirty</li> <li>Runs <code class="inline">$$.update()</code><ul><li>As <strong>&quot;givenName&quot;</strong> and <strong>&quot;familyName&quot;</strong> has changed, evaluates and <code class="inline">$$invalidate</code> <strong>&quot;name&quot;</strong></li> <li>As <strong>&quot;name&quot;</strong> has changed, executes <code class="inline">console.log(&#39;name&#39;, name);</code></li></ul></li> <li>Calls <code class="inline">$$.fragment.p(...)</code> to update the DOM.</li>',pl,_n,gr='As you can see, even though we&#39;ve updated <code class="inline">givenName</code> and <code class="inline">familyName</code>, we only evaluate <code class="inline">name</code> and executes <code class="inline">console.log(&#39;name&#39;, name)</code> <strong>once</strong> instead of twice:',cl,Tn,Vt,ec=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Instead of</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Reactive declarations and statements are batched</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,zt,j,Ln,wr='<a href="#2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date" id="2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date">2. The value of reactive variable outside of reactive declarations and statements may not be up to date</a>',kl,Hn,br="Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously.",vl,Mn,Rt,oc=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line highlight">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs ''</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,hl,Cn,$r='<a href="https://svelte.dev/repl/437548d5c7044cb59bfd0c8a0f4c725d?version=3.20.1" rel="nofollow">Svelte REPL</a>',dl,Pn,_r="Instead, you <strong>have to</strong> refer the reactive variable in another reactive declaration or statement:",yl,Sn,At,lc=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs 'Li Hau Tan'</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,Ut,D,Nn,Tr='<a href="#sorting-of-reactive-declarations-and-statements" id="sorting-of-reactive-declarations-and-statements">Sorting of reactive declarations and statements</a>',ul,En,Lr="Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible.",xl,jn,Hr="However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, <strong>it will be inserted after the latter reactive declaration</strong>:",ml,In,Bt,ic=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: refers to &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: defined &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into:</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* doubled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* quadrupled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jt,S,On,Mr='<a href="#reactive-variable-that-is-not-reactive" id="reactive-variable-that-is-not-reactive">Reactive variable that is not reactive</a>',fl,qn,Cr='The Svelte compiler tracks all the variables declared in the <code class="inline">&lt;script&gt;</code> tag.',gl,Dn,Pr='If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into <code class="inline">$$.update</code>.',wl,Vn,Sr="For example:",bl,zn,Wt,rc='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span></span> x 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',$l,Rn,Nr='<a href="https://svelte.dev/repl/af86472e1f494cfea2efa494f63fff08?version=3.20.1" rel="nofollow">Svelte REPL</a>',_l,An,Er='Since, <code class="inline">count</code> never gets mutated or reassigned, Svelte optimises the compiled output by not defining <code class="inline">$$self.$$.update</code>.',Tl,Un,Ft,pc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> doubled;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Gt,Z,jr='<h2><a href="#summary" id="summary">Summary</a></h2>',Yt,X,Ir='<h3><a href="#1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates" id="1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates">1. Svelte keeps track of which variables are dirty and batched the DOM updates.</a></h3>',Kt,ss,Or='<h3><a href="#2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code" id="2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code">2. Using bitmask, Svelte able to generate a more compact compiled code.</a></h3>',Qt,as,qr='<h3><a href="#3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates" id="3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates">3. Reactive declarations and statements are executed in batch, just like DOM updates</a></h3>',Zt,ns,Dr='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>If you wish to know more, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>I&#39;ll post it on Twitter when the next part is ready, where I&#39;ll be covering <a href="https://svelte.dev/tutorial/if-blocks" rel="nofollow">logic blocks</a>, <a href="https://svelte.dev/tutorial/slots" rel="nofollow">slots</a>, <a href="https://svelte.dev/tutorial/context-api" rel="nofollow">context</a>, and many others.</p> <p><strong>⬅ ⬅  Previously in <a href="/compile-svelte-in-your-head-part-1/">Part 1</a>.</strong></p> <p><strong>➡ ➡  Continue reading on <a href="/compile-svelte-in-your-head-part-3/">Part 3</a>.</strong></p>',Xt,ts,Vr='<h2><a href="#further-resources" id="further-resources">Further Resources</a></h2> <ul><li>Rich Harris shares about <a href="https://www.youtube.com/watch?v=zq6PpM5t3z0&amp;t=2530s" rel="nofollow">Bitmask Tracking at Svelte Society NYC</a>.</li> <li>Svelte Tutorial - <a href="https://svelte.dev/tutorial/reactive-assignments" rel="nofollow">Reactivity</a> <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" rel="nofollow">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></li> <li><a href="https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03" rel="nofollow">The Art of Bitmasking</a> by Shakib Ahmed</li> <li><a href="https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf" rel="nofollow">Bitmasks: A very esoteric (and impractical) way of managing booleans</a> by Basti Ortiz</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" rel="nofollow">MDN: Bitwise Operators</a></li></ul>';return{c(){H=a("blockquote"),H.innerHTML=B,R=t(),z=a("p"),z.innerHTML=N,q=t(),A=a("p"),A.innerHTML=Hl,Jn=t(),W=a("div"),Wn=new d(!1),Fn=t(),F=a("p"),F.innerHTML=Ml,Gn=t(),G=a("p"),G.innerHTML=Cl,Yn=t(),Y=a("section"),Y.innerHTML=Pl,Kn=t(),$=a("section"),os=a("h3"),os.innerHTML=Sl,se=t(),ls=a("p"),ls.innerHTML=Nl,ae=t(),is=a("p"),is.innerHTML=El,ne=t(),rs=a("ul"),rs.innerHTML=jl,te=t(),ps=a("p"),ps.textContent=Il,ee=t(),cs=a("p"),cs.textContent=Ol,oe=t(),ks=a("p"),ks.innerHTML=ql,le=t(),vs=a("p"),vs.innerHTML=Dl,ie=t(),hs=a("div"),Qn=new d(!1),re=t(),ds=a("p"),ds.innerHTML=Vl,pe=t(),ys=a("div"),Zn=new d(!1),ce=t(),us=a("p"),us.innerHTML=zl,Xn=t(),f=a("section"),xs=a("h3"),xs.innerHTML=Rl,ke=t(),ms=a("p"),ms.innerHTML=Al,ve=t(),fs=a("p"),fs.textContent=Ul,he=t(),gs=a("div"),st=new d(!1),de=t(),ws=a("p"),ws.innerHTML=Bl,ye=t(),bs=a("p"),bs.innerHTML=Jl,ue=t(),$s=a("p"),$s.innerHTML=Wl,xe=t(),_s=a("div"),at=new d(!1),me=t(),Ts=a("p"),Ts.innerHTML=Fl,fe=t(),Ls=a("div"),nt=new d(!1),ge=t(),Hs=a("p"),Hs.innerHTML=Gl,we=t(),Ms=a("p"),Ms.innerHTML=Yl,be=t(),Cs=a("div"),tt=new d(!1),$e=t(),Ps=a("p"),Ps.innerHTML=Kl,et=t(),h=a("section"),Ss=a("h3"),Ss.innerHTML=Ql,_e=t(),Ns=a("p"),Ns.innerHTML=Zl,Te=t(),Es=a("p"),Es.textContent=Xl,Le=t(),js=a("ul"),js.innerHTML=si,He=t(),Is=a("p"),Is.innerHTML=ai,Me=t(),Os=a("div"),ot=new d(!1),Ce=t(),qs=a("p"),qs.innerHTML=ni,Pe=t(),Ds=a("ol"),Ds.innerHTML=ti,Se=t(),Vs=a("div"),lt=new d(!1),Ne=t(),zs=a("p"),zs.innerHTML=ei,Ee=t(),Rs=a("p"),Rs.innerHTML=oi,je=t(),As=a("p"),As.innerHTML=li,Ie=t(),Us=a("div"),it=new d(!1),Oe=t(),Bs=a("p"),Bs.textContent=ii,qe=t(),Js=a("p"),Js.innerHTML=ri,De=t(),Ws=a("p"),Ws.innerHTML=pi,Ve=t(),Fs=a("div"),rt=new d(!1),ze=t(),Gs=a("p"),Gs.innerHTML=ci,pt=t(),w=a("section"),Ys=a("h3"),Ys.innerHTML=ki,Re=t(),Ks=a("p"),Ks.innerHTML=vi,Ae=t(),Qs=a("p"),Qs.innerHTML=hi,Ue=t(),Zs=a("p"),Zs.textContent=di,Be=t(),Xs=a("div"),ct=new d(!1),Je=t(),sa=a("p"),sa.innerHTML=yi,We=t(),aa=a("div"),kt=new d(!1),Fe=t(),na=a("p"),na.innerHTML=ui,Ge=t(),ta=a("p"),ta.textContent=xi,Ye=t(),ea=a("div"),vt=new d(!1),Ke=t(),oa=a("p"),oa.innerHTML=mi,Qe=t(),la=a("p"),la.innerHTML=fi,Ze=t(),ia=a("ol"),ia.innerHTML=gi,ht=t(),K=a("section"),K.innerHTML=wi,dt=t(),C=a("section"),ra=a("h2"),ra.innerHTML=bi,Xe=t(),pa=a("p"),pa.innerHTML=$i,so=t(),ca=a("p"),ca.textContent=_i,ao=t(),ka=a("div"),yt=new d(!1),no=t(),va=a("p"),va.textContent=Ti,to=t(),ha=a("div"),ut=new d(!1),eo=t(),da=a("p"),da.innerHTML=Li,oo=t(),ya=a("div"),xt=new d(!1),lo=t(),ua=a("p"),ua.textContent=Hi,mt=t(),b=a("section"),xa=a("h3"),xa.innerHTML=Mi,io=t(),ma=a("p"),ma.textContent=Ci,ro=t(),fa=a("p"),fa.innerHTML=Pi,po=t(),ga=a("p"),ga.innerHTML=Si,co=t(),wa=a("p"),wa.innerHTML=Ni,ko=t(),ba=a("p"),ba.innerHTML=Ei,vo=t(),$a=a("p"),$a.innerHTML=ji,ho=t(),_a=a("p"),_a.textContent=Ii,yo=t(),Ta=a("p"),Ta.innerHTML=Oi,uo=t(),La=a("p"),La.innerHTML=qi,xo=t(),Ha=a("div"),ft=new d(!1),mo=t(),Ma=a("p"),Ma.innerHTML=Di,fo=t(),Ca=a("p"),Ca.innerHTML=Vi,gt=t(),x=a("section"),Pa=a("h3"),Pa.innerHTML=zi,go=t(),Sa=a("p"),Sa.textContent=Ri,wo=t(),Na=a("div"),wt=new d(!1),bo=t(),Ea=a("p"),Ea.textContent=Ai,$o=t(),ja=a("div"),bt=new d(!1),_o=t(),Ia=a("p"),Ia.innerHTML=Ui,To=t(),Oa=a("div"),$t=new d(!1),Lo=t(),qa=a("p"),qa.innerHTML=Bi,Ho=t(),Da=a("div"),_t=new d(!1),Mo=t(),Va=a("p"),Va.innerHTML=Ji,Co=t(),za=a("p"),za.textContent=Wi,Po=t(),Ra=a("div"),Tt=new d(!1),So=t(),Aa=a("p"),Aa.textContent=Fi,No=t(),Ua=a("div"),Lt=new d(!1),Eo=t(),Ba=a("p"),Ba.innerHTML=Gi,jo=t(),Ja=a("p"),Ja.innerHTML=Yi,Ht=t(),U=a("section"),Wa=a("h4"),Wa.innerHTML=Ki,Io=t(),Fa=a("p"),Fa.innerHTML=Qi,Oo=t(),Ga=a("div"),Mt=new d(!1),Ct=t(),Q=a("section"),Q.innerHTML=Zi,Pt=t(),k=a("section"),Ya=a("h2"),Ya.innerHTML=Xi,qo=t(),Ka=a("p"),Ka.innerHTML=sr,Do=t(),Qa=a("div"),St=new d(!1),Vo=t(),Za=a("p"),Za.innerHTML=ar,zo=t(),Xa=a("p"),Xa.innerHTML=nr,Ro=t(),sn=a("div"),Nt=new d(!1),Ao=t(),an=a("p"),an.textContent=tr,Uo=t(),nn=a("div"),Et=new d(!1),Bo=t(),tn=a("p"),tn.innerHTML=er,Jo=t(),en=a("div"),jt=new d(!1),Wo=t(),on=a("p"),on.textContent=or,Fo=t(),ln=a("ul"),ln.innerHTML=lr,Go=t(),rn=a("p"),rn.innerHTML=ir,Yo=t(),pn=a("p"),pn.textContent=rr,Ko=t(),cn=a("div"),It=new d(!1),Qo=t(),kn=a("p"),kn.innerHTML=pr,Zo=t(),vn=a("p"),vn.innerHTML=cr,Xo=t(),hn=a("p"),hn.innerHTML=kr,sl=t(),dn=a("p"),dn.innerHTML=vr,al=t(),yn=a("div"),Ot=new d(!1),nl=t(),un=a("p"),un.innerHTML=hr,tl=t(),xn=a("p"),xn.textContent=dr,qt=t(),P=a("section"),mn=a("h3"),mn.innerHTML=yr,el=t(),fn=a("p"),fn.textContent=ur,ol=t(),gn=a("div"),Dt=new d(!1),ll=t(),wn=a("p"),wn.innerHTML=xr,il=t(),bn=a("p"),bn.innerHTML=mr,rl=t(),$n=a("ol"),$n.innerHTML=fr,pl=t(),_n=a("p"),_n.innerHTML=gr,cl=t(),Tn=a("div"),Vt=new d(!1),zt=t(),j=a("section"),Ln=a("h3"),Ln.innerHTML=wr,kl=t(),Hn=a("p"),Hn.textContent=br,vl=t(),Mn=a("div"),Rt=new d(!1),hl=t(),Cn=a("p"),Cn.innerHTML=$r,dl=t(),Pn=a("p"),Pn.innerHTML=_r,yl=t(),Sn=a("div"),At=new d(!1),Ut=t(),D=a("section"),Nn=a("h3"),Nn.innerHTML=Tr,ul=t(),En=a("p"),En.textContent=Lr,xl=t(),jn=a("p"),jn.innerHTML=Hr,ml=t(),In=a("div"),Bt=new d(!1),Jt=t(),S=a("section"),On=a("h3"),On.innerHTML=Mr,fl=t(),qn=a("p"),qn.innerHTML=Cr,gl=t(),Dn=a("p"),Dn.innerHTML=Pr,wl=t(),Vn=a("p"),Vn.textContent=Sr,bl=t(),zn=a("div"),Wt=new d(!1),$l=t(),Rn=a("p"),Rn.innerHTML=Nr,_l=t(),An=a("p"),An.innerHTML=Er,Tl=t(),Un=a("div"),Ft=new d(!1),Gt=t(),Z=a("section"),Z.innerHTML=jr,Yt=t(),X=a("section"),X.innerHTML=Ir,Kt=t(),ss=a("section"),ss.innerHTML=Or,Qt=t(),as=a("section"),as.innerHTML=qr,Zt=t(),ns=a("section"),ns.innerHTML=Dr,Xt=t(),ts=a("section"),ts.innerHTML=Vr,this.h()},l(l){H=n(l,"BLOCKQUOTE",{"data-svelte-h":!0}),o(H)!=="svelte-2295x0"&&(H.innerHTML=B),R=e(l),z=n(l,"P",{"data-svelte-h":!0}),o(z)!=="svelte-tkdnzf"&&(z.innerHTML=N),q=e(l),A=n(l,"P",{"data-svelte-h":!0}),o(A)!=="svelte-g4e64j"&&(A.innerHTML=Hl),Jn=e(l),W=n(l,"DIV",{class:!0});var r=c(W);Wn=y(r,!1),r.forEach(i),Fn=e(l),F=n(l,"P",{"data-svelte-h":!0}),o(F)!=="svelte-19k6cc3"&&(F.innerHTML=Ml),Gn=e(l),G=n(l,"P",{"data-svelte-h":!0}),o(G)!=="svelte-aoqmhm"&&(G.innerHTML=Cl),Yn=e(l),Y=n(l,"SECTION",{"data-svelte-h":!0}),o(Y)!=="svelte-slil8b"&&(Y.innerHTML=Pl),Kn=e(l),$=n(l,"SECTION",{});var M=c($);os=n(M,"H3",{"data-svelte-h":!0}),o(os)!=="svelte-v3at67"&&(os.innerHTML=Sl),se=e(M),ls=n(M,"P",{"data-svelte-h":!0}),o(ls)!=="svelte-1j9ldk"&&(ls.innerHTML=Nl),ae=e(M),is=n(M,"P",{"data-svelte-h":!0}),o(is)!=="svelte-wv5xzl"&&(is.innerHTML=El),ne=e(M),rs=n(M,"UL",{"data-svelte-h":!0}),o(rs)!=="svelte-fphisn"&&(rs.innerHTML=jl),te=e(M),ps=n(M,"P",{"data-svelte-h":!0}),o(ps)!=="svelte-n3ap9h"&&(ps.textContent=Il),ee=e(M),cs=n(M,"P",{"data-svelte-h":!0}),o(cs)!=="svelte-1o7fkap"&&(cs.textContent=Ol),oe=e(M),ks=n(M,"P",{"data-svelte-h":!0}),o(ks)!=="svelte-1u5sc5w"&&(ks.innerHTML=ql),le=e(M),vs=n(M,"P",{"data-svelte-h":!0}),o(vs)!=="svelte-1ljxzra"&&(vs.innerHTML=Dl),ie=e(M),hs=n(M,"DIV",{class:!0});var zr=c(hs);Qn=y(zr,!1),zr.forEach(i),re=e(M),ds=n(M,"P",{"data-svelte-h":!0}),o(ds)!=="svelte-ncr11d"&&(ds.innerHTML=Vl),pe=e(M),ys=n(M,"DIV",{class:!0});var Rr=c(ys);Zn=y(Rr,!1),Rr.forEach(i),ce=e(M),us=n(M,"P",{"data-svelte-h":!0}),o(us)!=="svelte-1citrow"&&(us.innerHTML=zl),M.forEach(i),Xn=e(l),f=n(l,"SECTION",{});var _=c(f);xs=n(_,"H3",{"data-svelte-h":!0}),o(xs)!=="svelte-1nx32b8"&&(xs.innerHTML=Rl),ke=e(_),ms=n(_,"P",{"data-svelte-h":!0}),o(ms)!=="svelte-19zn178"&&(ms.innerHTML=Al),ve=e(_),fs=n(_,"P",{"data-svelte-h":!0}),o(fs)!=="svelte-x3mzr4"&&(fs.textContent=Ul),he=e(_),gs=n(_,"DIV",{class:!0});var Ar=c(gs);st=y(Ar,!1),Ar.forEach(i),de=e(_),ws=n(_,"P",{"data-svelte-h":!0}),o(ws)!=="svelte-18ce6xm"&&(ws.innerHTML=Bl),ye=e(_),bs=n(_,"P",{"data-svelte-h":!0}),o(bs)!=="svelte-1qfoklz"&&(bs.innerHTML=Jl),ue=e(_),$s=n(_,"P",{"data-svelte-h":!0}),o($s)!=="svelte-1sgkjr0"&&($s.innerHTML=Wl),xe=e(_),_s=n(_,"DIV",{class:!0});var Ur=c(_s);at=y(Ur,!1),Ur.forEach(i),me=e(_),Ts=n(_,"P",{"data-svelte-h":!0}),o(Ts)!=="svelte-1h5wc79"&&(Ts.innerHTML=Fl),fe=e(_),Ls=n(_,"DIV",{class:!0});var Br=c(Ls);nt=y(Br,!1),Br.forEach(i),ge=e(_),Hs=n(_,"P",{"data-svelte-h":!0}),o(Hs)!=="svelte-1nt1qhi"&&(Hs.innerHTML=Gl),we=e(_),Ms=n(_,"P",{"data-svelte-h":!0}),o(Ms)!=="svelte-15mhxpr"&&(Ms.innerHTML=Yl),be=e(_),Cs=n(_,"DIV",{class:!0});var Jr=c(Cs);tt=y(Jr,!1),Jr.forEach(i),$e=e(_),Ps=n(_,"P",{"data-svelte-h":!0}),o(Ps)!=="svelte-1waubam"&&(Ps.innerHTML=Kl),_.forEach(i),et=e(l),h=n(l,"SECTION",{});var m=c(h);Ss=n(m,"H3",{"data-svelte-h":!0}),o(Ss)!=="svelte-15luduv"&&(Ss.innerHTML=Ql),_e=e(m),Ns=n(m,"P",{"data-svelte-h":!0}),o(Ns)!=="svelte-xa355b"&&(Ns.innerHTML=Zl),Te=e(m),Es=n(m,"P",{"data-svelte-h":!0}),o(Es)!=="svelte-1rqsbk1"&&(Es.textContent=Xl),Le=e(m),js=n(m,"UL",{"data-svelte-h":!0}),o(js)!=="svelte-850yr0"&&(js.innerHTML=si),He=e(m),Is=n(m,"P",{"data-svelte-h":!0}),o(Is)!=="svelte-psroqj"&&(Is.innerHTML=ai),Me=e(m),Os=n(m,"DIV",{class:!0});var Wr=c(Os);ot=y(Wr,!1),Wr.forEach(i),Ce=e(m),qs=n(m,"P",{"data-svelte-h":!0}),o(qs)!=="svelte-1allcnx"&&(qs.innerHTML=ni),Pe=e(m),Ds=n(m,"OL",{"data-svelte-h":!0}),o(Ds)!=="svelte-1aukd0x"&&(Ds.innerHTML=ti),Se=e(m),Vs=n(m,"DIV",{class:!0});var Fr=c(Vs);lt=y(Fr,!1),Fr.forEach(i),Ne=e(m),zs=n(m,"P",{"data-svelte-h":!0}),o(zs)!=="svelte-ab9hos"&&(zs.innerHTML=ei),Ee=e(m),Rs=n(m,"P",{"data-svelte-h":!0}),o(Rs)!=="svelte-o36l5k"&&(Rs.innerHTML=oi),je=e(m),As=n(m,"P",{"data-svelte-h":!0}),o(As)!=="svelte-1cq2v2u"&&(As.innerHTML=li),Ie=e(m),Us=n(m,"DIV",{class:!0});var Gr=c(Us);it=y(Gr,!1),Gr.forEach(i),Oe=e(m),Bs=n(m,"P",{"data-svelte-h":!0}),o(Bs)!=="svelte-1ai19s0"&&(Bs.textContent=ii),qe=e(m),Js=n(m,"P",{"data-svelte-h":!0}),o(Js)!=="svelte-1ocydrp"&&(Js.innerHTML=ri),De=e(m),Ws=n(m,"P",{"data-svelte-h":!0}),o(Ws)!=="svelte-1np5sgh"&&(Ws.innerHTML=pi),Ve=e(m),Fs=n(m,"DIV",{class:!0});var Yr=c(Fs);rt=y(Yr,!1),Yr.forEach(i),ze=e(m),Gs=n(m,"P",{"data-svelte-h":!0}),o(Gs)!=="svelte-rrxskd"&&(Gs.innerHTML=ci),m.forEach(i),pt=e(l),w=n(l,"SECTION",{});var T=c(w);Ys=n(T,"H3",{"data-svelte-h":!0}),o(Ys)!=="svelte-1iuilgz"&&(Ys.innerHTML=ki),Re=e(T),Ks=n(T,"P",{"data-svelte-h":!0}),o(Ks)!=="svelte-18i5g6"&&(Ks.innerHTML=vi),Ae=e(T),Qs=n(T,"P",{"data-svelte-h":!0}),o(Qs)!=="svelte-5d7tre"&&(Qs.innerHTML=hi),Ue=e(T),Zs=n(T,"P",{"data-svelte-h":!0}),o(Zs)!=="svelte-lt8e55"&&(Zs.textContent=di),Be=e(T),Xs=n(T,"DIV",{class:!0});var Kr=c(Xs);ct=y(Kr,!1),Kr.forEach(i),Je=e(T),sa=n(T,"P",{"data-svelte-h":!0}),o(sa)!=="svelte-r1n1ze"&&(sa.innerHTML=yi),We=e(T),aa=n(T,"DIV",{class:!0});var Qr=c(aa);kt=y(Qr,!1),Qr.forEach(i),Fe=e(T),na=n(T,"P",{"data-svelte-h":!0}),o(na)!=="svelte-ff5vpy"&&(na.innerHTML=ui),Ge=e(T),ta=n(T,"P",{"data-svelte-h":!0}),o(ta)!=="svelte-qx80ul"&&(ta.textContent=xi),Ye=e(T),ea=n(T,"DIV",{class:!0});var Zr=c(ea);vt=y(Zr,!1),Zr.forEach(i),Ke=e(T),oa=n(T,"P",{"data-svelte-h":!0}),o(oa)!=="svelte-1d32qjq"&&(oa.innerHTML=mi),Qe=e(T),la=n(T,"P",{"data-svelte-h":!0}),o(la)!=="svelte-yy5rjs"&&(la.innerHTML=fi),Ze=e(T),ia=n(T,"OL",{"data-svelte-h":!0}),o(ia)!=="svelte-1v0h7ce"&&(ia.innerHTML=gi),T.forEach(i),ht=e(l),K=n(l,"SECTION",{"data-svelte-h":!0}),o(K)!=="svelte-7yd2nc"&&(K.innerHTML=wi),dt=e(l),C=n(l,"SECTION",{});var E=c(C);ra=n(E,"H2",{"data-svelte-h":!0}),o(ra)!=="svelte-1dldmpu"&&(ra.innerHTML=bi),Xe=e(E),pa=n(E,"P",{"data-svelte-h":!0}),o(pa)!=="svelte-l7hyhe"&&(pa.innerHTML=$i),so=e(E),ca=n(E,"P",{"data-svelte-h":!0}),o(ca)!=="svelte-k53ph5"&&(ca.textContent=_i),ao=e(E),ka=n(E,"DIV",{class:!0});var Xr=c(ka);yt=y(Xr,!1),Xr.forEach(i),no=e(E),va=n(E,"P",{"data-svelte-h":!0}),o(va)!=="svelte-1ml9weg"&&(va.textContent=Ti),to=e(E),ha=n(E,"DIV",{class:!0});var sp=c(ha);ut=y(sp,!1),sp.forEach(i),eo=e(E),da=n(E,"P",{"data-svelte-h":!0}),o(da)!=="svelte-nklazp"&&(da.innerHTML=Li),oo=e(E),ya=n(E,"DIV",{class:!0});var ap=c(ya);xt=y(ap,!1),ap.forEach(i),lo=e(E),ua=n(E,"P",{"data-svelte-h":!0}),o(ua)!=="svelte-80y251"&&(ua.textContent=Hi),E.forEach(i),mt=e(l),b=n(l,"SECTION",{});var L=c(b);xa=n(L,"H3",{"data-svelte-h":!0}),o(xa)!=="svelte-1npojef"&&(xa.innerHTML=Mi),io=e(L),ma=n(L,"P",{"data-svelte-h":!0}),o(ma)!=="svelte-zfhkqu"&&(ma.textContent=Ci),ro=e(L),fa=n(L,"P",{"data-svelte-h":!0}),o(fa)!=="svelte-1b2bdgo"&&(fa.innerHTML=Pi),po=e(L),ga=n(L,"P",{"data-svelte-h":!0}),o(ga)!=="svelte-olkizk"&&(ga.innerHTML=Si),co=e(L),wa=n(L,"P",{"data-svelte-h":!0}),o(wa)!=="svelte-1fx9cin"&&(wa.innerHTML=Ni),ko=e(L),ba=n(L,"P",{"data-svelte-h":!0}),o(ba)!=="svelte-1bamns8"&&(ba.innerHTML=Ei),vo=e(L),$a=n(L,"P",{"data-svelte-h":!0}),o($a)!=="svelte-fdigus"&&($a.innerHTML=ji),ho=e(L),_a=n(L,"P",{"data-svelte-h":!0}),o(_a)!=="svelte-97c0p9"&&(_a.textContent=Ii),yo=e(L),Ta=n(L,"P",{"data-svelte-h":!0}),o(Ta)!=="svelte-jgyv9u"&&(Ta.innerHTML=Oi),uo=e(L),La=n(L,"P",{"data-svelte-h":!0}),o(La)!=="svelte-ttrq4s"&&(La.innerHTML=qi),xo=e(L),Ha=n(L,"DIV",{class:!0});var np=c(Ha);ft=y(np,!1),np.forEach(i),mo=e(L),Ma=n(L,"P",{"data-svelte-h":!0}),o(Ma)!=="svelte-1lmcz7"&&(Ma.innerHTML=Di),fo=e(L),Ca=n(L,"P",{"data-svelte-h":!0}),o(Ca)!=="svelte-j0yzrz"&&(Ca.innerHTML=Vi),L.forEach(i),gt=e(l),x=n(l,"SECTION",{});var g=c(x);Pa=n(g,"H3",{"data-svelte-h":!0}),o(Pa)!=="svelte-1kdigop"&&(Pa.innerHTML=zi),go=e(g),Sa=n(g,"P",{"data-svelte-h":!0}),o(Sa)!=="svelte-tp68p0"&&(Sa.textContent=Ri),wo=e(g),Na=n(g,"DIV",{class:!0});var tp=c(Na);wt=y(tp,!1),tp.forEach(i),bo=e(g),Ea=n(g,"P",{"data-svelte-h":!0}),o(Ea)!=="svelte-1tjda8o"&&(Ea.textContent=Ai),$o=e(g),ja=n(g,"DIV",{class:!0});var ep=c(ja);bt=y(ep,!1),ep.forEach(i),_o=e(g),Ia=n(g,"P",{"data-svelte-h":!0}),o(Ia)!=="svelte-h4in98"&&(Ia.innerHTML=Ui),To=e(g),Oa=n(g,"DIV",{class:!0});var op=c(Oa);$t=y(op,!1),op.forEach(i),Lo=e(g),qa=n(g,"P",{"data-svelte-h":!0}),o(qa)!=="svelte-z26ok5"&&(qa.innerHTML=Bi),Ho=e(g),Da=n(g,"DIV",{class:!0});var lp=c(Da);_t=y(lp,!1),lp.forEach(i),Mo=e(g),Va=n(g,"P",{"data-svelte-h":!0}),o(Va)!=="svelte-5kvfl0"&&(Va.innerHTML=Ji),Co=e(g),za=n(g,"P",{"data-svelte-h":!0}),o(za)!=="svelte-1skk8z3"&&(za.textContent=Wi),Po=e(g),Ra=n(g,"DIV",{class:!0});var ip=c(Ra);Tt=y(ip,!1),ip.forEach(i),So=e(g),Aa=n(g,"P",{"data-svelte-h":!0}),o(Aa)!=="svelte-urmnjf"&&(Aa.textContent=Fi),No=e(g),Ua=n(g,"DIV",{class:!0});var rp=c(Ua);Lt=y(rp,!1),rp.forEach(i),Eo=e(g),Ba=n(g,"P",{"data-svelte-h":!0}),o(Ba)!=="svelte-1js36pk"&&(Ba.innerHTML=Gi),jo=e(g),Ja=n(g,"P",{"data-svelte-h":!0}),o(Ja)!=="svelte-ub63jg"&&(Ja.innerHTML=Yi),g.forEach(i),Ht=e(l),U=n(l,"SECTION",{});var Bn=c(U);Wa=n(Bn,"H4",{"data-svelte-h":!0}),o(Wa)!=="svelte-1pacvhs"&&(Wa.innerHTML=Ki),Io=e(Bn),Fa=n(Bn,"P",{"data-svelte-h":!0}),o(Fa)!=="svelte-1yjqz65"&&(Fa.innerHTML=Qi),Oo=e(Bn),Ga=n(Bn,"DIV",{class:!0});var pp=c(Ga);Mt=y(pp,!1),pp.forEach(i),Bn.forEach(i),Ct=e(l),Q=n(l,"SECTION",{"data-svelte-h":!0}),o(Q)!=="svelte-1stutk2"&&(Q.innerHTML=Zi),Pt=e(l),k=n(l,"SECTION",{});var v=c(k);Ya=n(v,"H2",{"data-svelte-h":!0}),o(Ya)!=="svelte-1e7no7b"&&(Ya.innerHTML=Xi),qo=e(v),Ka=n(v,"P",{"data-svelte-h":!0}),o(Ka)!=="svelte-1d1x35y"&&(Ka.innerHTML=sr),Do=e(v),Qa=n(v,"DIV",{class:!0});var cp=c(Qa);St=y(cp,!1),cp.forEach(i),Vo=e(v),Za=n(v,"P",{"data-svelte-h":!0}),o(Za)!=="svelte-16jq1y5"&&(Za.innerHTML=ar),zo=e(v),Xa=n(v,"P",{"data-svelte-h":!0}),o(Xa)!=="svelte-1rxjld6"&&(Xa.innerHTML=nr),Ro=e(v),sn=n(v,"DIV",{class:!0});var kp=c(sn);Nt=y(kp,!1),kp.forEach(i),Ao=e(v),an=n(v,"P",{"data-svelte-h":!0}),o(an)!=="svelte-1inj3ed"&&(an.textContent=tr),Uo=e(v),nn=n(v,"DIV",{class:!0});var vp=c(nn);Et=y(vp,!1),vp.forEach(i),Bo=e(v),tn=n(v,"P",{"data-svelte-h":!0}),o(tn)!=="svelte-1yqob4y"&&(tn.innerHTML=er),Jo=e(v),en=n(v,"DIV",{class:!0});var hp=c(en);jt=y(hp,!1),hp.forEach(i),Wo=e(v),on=n(v,"P",{"data-svelte-h":!0}),o(on)!=="svelte-yujbal"&&(on.textContent=or),Fo=e(v),ln=n(v,"UL",{"data-svelte-h":!0}),o(ln)!=="svelte-u4gbc9"&&(ln.innerHTML=lr),Go=e(v),rn=n(v,"P",{"data-svelte-h":!0}),o(rn)!=="svelte-1lx3lat"&&(rn.innerHTML=ir),Yo=e(v),pn=n(v,"P",{"data-svelte-h":!0}),o(pn)!=="svelte-11vepnd"&&(pn.textContent=rr),Ko=e(v),cn=n(v,"DIV",{class:!0});var dp=c(cn);It=y(dp,!1),dp.forEach(i),Qo=e(v),kn=n(v,"P",{"data-svelte-h":!0}),o(kn)!=="svelte-1yqob4y"&&(kn.innerHTML=pr),Zo=e(v),vn=n(v,"P",{"data-svelte-h":!0}),o(vn)!=="svelte-1lp8y45"&&(vn.innerHTML=cr),Xo=e(v),hn=n(v,"P",{"data-svelte-h":!0}),o(hn)!=="svelte-l0fc35"&&(hn.innerHTML=kr),sl=e(v),dn=n(v,"P",{"data-svelte-h":!0}),o(dn)!=="svelte-ra611k"&&(dn.innerHTML=vr),al=e(v),yn=n(v,"DIV",{class:!0});var yp=c(yn);Ot=y(yp,!1),yp.forEach(i),nl=e(v),un=n(v,"P",{"data-svelte-h":!0}),o(un)!=="svelte-1w8fh7b"&&(un.innerHTML=hr),tl=e(v),xn=n(v,"P",{"data-svelte-h":!0}),o(xn)!=="svelte-1gpzqqr"&&(xn.textContent=dr),v.forEach(i),qt=e(l),P=n(l,"SECTION",{});var I=c(P);mn=n(I,"H3",{"data-svelte-h":!0}),o(mn)!=="svelte-17190fb"&&(mn.innerHTML=yr),el=e(I),fn=n(I,"P",{"data-svelte-h":!0}),o(fn)!=="svelte-1m5sqe4"&&(fn.textContent=ur),ol=e(I),gn=n(I,"DIV",{class:!0});var up=c(gn);Dt=y(up,!1),up.forEach(i),ll=e(I),wn=n(I,"P",{"data-svelte-h":!0}),o(wn)!=="svelte-1p8si18"&&(wn.innerHTML=xr),il=e(I),bn=n(I,"P",{"data-svelte-h":!0}),o(bn)!=="svelte-3twg4q"&&(bn.innerHTML=mr),rl=e(I),$n=n(I,"OL",{"data-svelte-h":!0}),o($n)!=="svelte-9z6j0v"&&($n.innerHTML=fr),pl=e(I),_n=n(I,"P",{"data-svelte-h":!0}),o(_n)!=="svelte-1q6we7s"&&(_n.innerHTML=gr),cl=e(I),Tn=n(I,"DIV",{class:!0});var xp=c(Tn);Vt=y(xp,!1),xp.forEach(i),I.forEach(i),zt=e(l),j=n(l,"SECTION",{});var V=c(j);Ln=n(V,"H3",{"data-svelte-h":!0}),o(Ln)!=="svelte-1e5ty86"&&(Ln.innerHTML=wr),kl=e(V),Hn=n(V,"P",{"data-svelte-h":!0}),o(Hn)!=="svelte-10f9r9r"&&(Hn.textContent=br),vl=e(V),Mn=n(V,"DIV",{class:!0});var mp=c(Mn);Rt=y(mp,!1),mp.forEach(i),hl=e(V),Cn=n(V,"P",{"data-svelte-h":!0}),o(Cn)!=="svelte-1kswmvr"&&(Cn.innerHTML=$r),dl=e(V),Pn=n(V,"P",{"data-svelte-h":!0}),o(Pn)!=="svelte-1yqe7ro"&&(Pn.innerHTML=_r),yl=e(V),Sn=n(V,"DIV",{class:!0});var fp=c(Sn);At=y(fp,!1),fp.forEach(i),V.forEach(i),Ut=e(l),D=n(l,"SECTION",{});var J=c(D);Nn=n(J,"H3",{"data-svelte-h":!0}),o(Nn)!=="svelte-gr7ovk"&&(Nn.innerHTML=Tr),ul=e(J),En=n(J,"P",{"data-svelte-h":!0}),o(En)!=="svelte-15oj57m"&&(En.textContent=Lr),xl=e(J),jn=n(J,"P",{"data-svelte-h":!0}),o(jn)!=="svelte-abz23j"&&(jn.innerHTML=Hr),ml=e(J),In=n(J,"DIV",{class:!0});var gp=c(In);Bt=y(gp,!1),gp.forEach(i),J.forEach(i),Jt=e(l),S=n(l,"SECTION",{});var O=c(S);On=n(O,"H3",{"data-svelte-h":!0}),o(On)!=="svelte-1gbx404"&&(On.innerHTML=Mr),fl=e(O),qn=n(O,"P",{"data-svelte-h":!0}),o(qn)!=="svelte-1ggn1pl"&&(qn.innerHTML=Cr),gl=e(O),Dn=n(O,"P",{"data-svelte-h":!0}),o(Dn)!=="svelte-1gl574t"&&(Dn.innerHTML=Pr),wl=e(O),Vn=n(O,"P",{"data-svelte-h":!0}),o(Vn)!=="svelte-1gkqha7"&&(Vn.textContent=Sr),bl=e(O),zn=n(O,"DIV",{class:!0});var wp=c(zn);Wt=y(wp,!1),wp.forEach(i),$l=e(O),Rn=n(O,"P",{"data-svelte-h":!0}),o(Rn)!=="svelte-141zq0b"&&(Rn.innerHTML=Nr),_l=e(O),An=n(O,"P",{"data-svelte-h":!0}),o(An)!=="svelte-vfy6rc"&&(An.innerHTML=Er),Tl=e(O),Un=n(O,"DIV",{class:!0});var bp=c(Un);Ft=y(bp,!1),bp.forEach(i),O.forEach(i),Gt=e(l),Z=n(l,"SECTION",{"data-svelte-h":!0}),o(Z)!=="svelte-jio8mh"&&(Z.innerHTML=jr),Yt=e(l),X=n(l,"SECTION",{"data-svelte-h":!0}),o(X)!=="svelte-1d8nkns"&&(X.innerHTML=Ir),Kt=e(l),ss=n(l,"SECTION",{"data-svelte-h":!0}),o(ss)!=="svelte-j8ixle"&&(ss.innerHTML=Or),Qt=e(l),as=n(l,"SECTION",{"data-svelte-h":!0}),o(as)!=="svelte-v259bw"&&(as.innerHTML=qr),Zt=e(l),ns=n(l,"SECTION",{"data-svelte-h":!0}),o(ns)!=="svelte-xunihl"&&(ns.innerHTML=Dr),Xt=e(l),ts=n(l,"SECTION",{"data-svelte-h":!0}),o(ts)!=="svelte-1nykzzg"&&(ts.innerHTML=Vr),this.h()},h(){Wn.a=null,u(W,"class","code-section"),Qn.a=null,u(hs,"class","code-section"),Zn.a=null,u(ys,"class","code-section"),st.a=null,u(gs,"class","code-section"),at.a=null,u(_s,"class","code-section"),nt.a=null,u(Ls,"class","code-section"),tt.a=null,u(Cs,"class","code-section"),ot.a=null,u(Os,"class","code-section"),lt.a=null,u(Vs,"class","code-section"),it.a=null,u(Us,"class","code-section"),rt.a=null,u(Fs,"class","code-section"),ct.a=null,u(Xs,"class","code-section"),kt.a=null,u(aa,"class","code-section"),vt.a=null,u(ea,"class","code-section"),yt.a=null,u(ka,"class","code-section"),ut.a=null,u(ha,"class","code-section"),xt.a=null,u(ya,"class","code-section"),ft.a=null,u(Ha,"class","code-section"),wt.a=null,u(Na,"class","code-section"),bt.a=null,u(ja,"class","code-section"),$t.a=null,u(Oa,"class","code-section"),_t.a=null,u(Da,"class","code-section"),Tt.a=null,u(Ra,"class","code-section"),Lt.a=null,u(Ua,"class","code-section"),Mt.a=null,u(Ga,"class","code-section"),St.a=null,u(Qa,"class","code-section"),Nt.a=null,u(sn,"class","code-section"),Et.a=null,u(nn,"class","code-section"),jt.a=null,u(en,"class","code-section"),It.a=null,u(cn,"class","code-section"),Ot.a=null,u(yn,"class","code-section"),Dt.a=null,u(gn,"class","code-section"),Vt.a=null,u(Tn,"class","code-section"),Rt.a=null,u(Mn,"class","code-section"),At.a=null,u(Sn,"class","code-section"),Bt.a=null,u(In,"class","code-section"),Wt.a=null,u(zn,"class","code-section"),Ft.a=null,u(Un,"class","code-section")},m(l,r){p(l,H,r),p(l,R,r),p(l,z,r),p(l,q,r),p(l,A,r),p(l,Jn,r),p(l,W,r),Wn.m(Lp,W),p(l,Fn,r),p(l,F,r),p(l,Gn,r),p(l,G,r),p(l,Yn,r),p(l,Y,r),p(l,Kn,r),p(l,$,r),s($,os),s($,se),s($,ls),s($,ae),s($,is),s($,ne),s($,rs),s($,te),s($,ps),s($,ee),s($,cs),s($,oe),s($,ks),s($,le),s($,vs),s($,ie),s($,hs),Qn.m(Hp,hs),s($,re),s($,ds),s($,pe),s($,ys),Zn.m(Mp,ys),s($,ce),s($,us),p(l,Xn,r),p(l,f,r),s(f,xs),s(f,ke),s(f,ms),s(f,ve),s(f,fs),s(f,he),s(f,gs),st.m(Cp,gs),s(f,de),s(f,ws),s(f,ye),s(f,bs),s(f,ue),s(f,$s),s(f,xe),s(f,_s),at.m(Pp,_s),s(f,me),s(f,Ts),s(f,fe),s(f,Ls),nt.m(Sp,Ls),s(f,ge),s(f,Hs),s(f,we),s(f,Ms),s(f,be),s(f,Cs),tt.m(Np,Cs),s(f,$e),s(f,Ps),p(l,et,r),p(l,h,r),s(h,Ss),s(h,_e),s(h,Ns),s(h,Te),s(h,Es),s(h,Le),s(h,js),s(h,He),s(h,Is),s(h,Me),s(h,Os),ot.m(Ep,Os),s(h,Ce),s(h,qs),s(h,Pe),s(h,Ds),s(h,Se),s(h,Vs),lt.m(jp,Vs),s(h,Ne),s(h,zs),s(h,Ee),s(h,Rs),s(h,je),s(h,As),s(h,Ie),s(h,Us),it.m(Ip,Us),s(h,Oe),s(h,Bs),s(h,qe),s(h,Js),s(h,De),s(h,Ws),s(h,Ve),s(h,Fs),rt.m(Op,Fs),s(h,ze),s(h,Gs),p(l,pt,r),p(l,w,r),s(w,Ys),s(w,Re),s(w,Ks),s(w,Ae),s(w,Qs),s(w,Ue),s(w,Zs),s(w,Be),s(w,Xs),ct.m(qp,Xs),s(w,Je),s(w,sa),s(w,We),s(w,aa),kt.m(Dp,aa),s(w,Fe),s(w,na),s(w,Ge),s(w,ta),s(w,Ye),s(w,ea),vt.m(Vp,ea),s(w,Ke),s(w,oa),s(w,Qe),s(w,la),s(w,Ze),s(w,ia),p(l,ht,r),p(l,K,r),p(l,dt,r),p(l,C,r),s(C,ra),s(C,Xe),s(C,pa),s(C,so),s(C,ca),s(C,ao),s(C,ka),yt.m(zp,ka),s(C,no),s(C,va),s(C,to),s(C,ha),ut.m(Rp,ha),s(C,eo),s(C,da),s(C,oo),s(C,ya),xt.m(Ap,ya),s(C,lo),s(C,ua),p(l,mt,r),p(l,b,r),s(b,xa),s(b,io),s(b,ma),s(b,ro),s(b,fa),s(b,po),s(b,ga),s(b,co),s(b,wa),s(b,ko),s(b,ba),s(b,vo),s(b,$a),s(b,ho),s(b,_a),s(b,yo),s(b,Ta),s(b,uo),s(b,La),s(b,xo),s(b,Ha),ft.m(Up,Ha),s(b,mo),s(b,Ma),s(b,fo),s(b,Ca),p(l,gt,r),p(l,x,r),s(x,Pa),s(x,go),s(x,Sa),s(x,wo),s(x,Na),wt.m(Bp,Na),s(x,bo),s(x,Ea),s(x,$o),s(x,ja),bt.m(Jp,ja),s(x,_o),s(x,Ia),s(x,To),s(x,Oa),$t.m(Wp,Oa),s(x,Lo),s(x,qa),s(x,Ho),s(x,Da),_t.m(Fp,Da),s(x,Mo),s(x,Va),s(x,Co),s(x,za),s(x,Po),s(x,Ra),Tt.m(Gp,Ra),s(x,So),s(x,Aa),s(x,No),s(x,Ua),Lt.m(Yp,Ua),s(x,Eo),s(x,Ba),s(x,jo),s(x,Ja),p(l,Ht,r),p(l,U,r),s(U,Wa),s(U,Io),s(U,Fa),s(U,Oo),s(U,Ga),Mt.m(Kp,Ga),p(l,Ct,r),p(l,Q,r),p(l,Pt,r),p(l,k,r),s(k,Ya),s(k,qo),s(k,Ka),s(k,Do),s(k,Qa),St.m(Qp,Qa),s(k,Vo),s(k,Za),s(k,zo),s(k,Xa),s(k,Ro),s(k,sn),Nt.m(Zp,sn),s(k,Ao),s(k,an),s(k,Uo),s(k,nn),Et.m(Xp,nn),s(k,Bo),s(k,tn),s(k,Jo),s(k,en),jt.m(sc,en),s(k,Wo),s(k,on),s(k,Fo),s(k,ln),s(k,Go),s(k,rn),s(k,Yo),s(k,pn),s(k,Ko),s(k,cn),It.m(ac,cn),s(k,Qo),s(k,kn),s(k,Zo),s(k,vn),s(k,Xo),s(k,hn),s(k,sl),s(k,dn),s(k,al),s(k,yn),Ot.m(nc,yn),s(k,nl),s(k,un),s(k,tl),s(k,xn),p(l,qt,r),p(l,P,r),s(P,mn),s(P,el),s(P,fn),s(P,ol),s(P,gn),Dt.m(tc,gn),s(P,ll),s(P,wn),s(P,il),s(P,bn),s(P,rl),s(P,$n),s(P,pl),s(P,_n),s(P,cl),s(P,Tn),Vt.m(ec,Tn),p(l,zt,r),p(l,j,r),s(j,Ln),s(j,kl),s(j,Hn),s(j,vl),s(j,Mn),Rt.m(oc,Mn),s(j,hl),s(j,Cn),s(j,dl),s(j,Pn),s(j,yl),s(j,Sn),At.m(lc,Sn),p(l,Ut,r),p(l,D,r),s(D,Nn),s(D,ul),s(D,En),s(D,xl),s(D,jn),s(D,ml),s(D,In),Bt.m(ic,In),p(l,Jt,r),p(l,S,r),s(S,On),s(S,fl),s(S,qn),s(S,gl),s(S,Dn),s(S,wl),s(S,Vn),s(S,bl),s(S,zn),Wt.m(rc,zn),s(S,$l),s(S,Rn),s(S,_l),s(S,An),s(S,Tl),s(S,Un),Ft.m(pc,Un),p(l,Gt,r),p(l,Z,r),p(l,Yt,r),p(l,X,r),p(l,Kt,r),p(l,ss,r),p(l,Qt,r),p(l,as,r),p(l,Zt,r),p(l,ns,r),p(l,Xt,r),p(l,ts,r)},p:vc,d(l){l&&(i(H),i(R),i(z),i(q),i(A),i(Jn),i(W),i(Fn),i(F),i(Gn),i(G),i(Yn),i(Y),i(Kn),i($),i(Xn),i(f),i(et),i(h),i(pt),i(w),i(ht),i(K),i(dt),i(C),i(mt),i(b),i(gt),i(x),i(Ht),i(U),i(Ct),i(Q),i(Pt),i(k),i(qt),i(P),i(zt),i(j),i(Ut),i(D),i(Jt),i(S),i(Gt),i(Z),i(Yt),i(X),i(Kt),i(ss),i(Qt),i(as),i(Zt),i(ns),i(Xt),i(ts))}}}function Tc(es){let H,B;const R=[es[0],Tp];let z={$$slots:{default:[_c]},$$scope:{ctx:es}};for(let N=0;N<R.length;N+=1)z=Ll(z,R[N]);return H=new bc({props:z}),{c(){yc(H.$$.fragment)},l(N){uc(H.$$.fragment,N)},m(N,q){xc(H,N,q),B=!0},p(N,[q]){const A=q&1?wc(R,[q&1&&_p(N[0]),q&0&&_p(Tp)]):{};q&2&&(A.$$scope={dirty:q,ctx:N}),H.$set(A)},i(N){B||(mc(H.$$.fragment,N),B=!0)},o(N){fc(H.$$.fragment,N),B=!1},d(N){gc(H,N)}}}const Tp={title:"Compile Svelte in your head (Part 2)",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"⚠️ This article was written for Svelte 3/4. For Svelte 5, please read the updated series: Compile Svelte 5 in your head⬅ ⬅  Previously in Part 1.Previously, when I mentioned the `$invalidate` function, I explained that the ...",tableOfContents:[{link:"pre-v3-16-0",title:"Pre v3.16.0",nested:[{link:"ctx",title:"$.ctx"},{link:"dirty",title:"$.dirty"},{link:"invalidate",title:"$invalidate"},{link:"schedule-update",title:"schedule_update",nested:[{link:"tl-dr",title:"tl/dr:"}]}]},{link:"v3-16-0",title:"v3.16.0",nested:[{link:"bitmask",title:"Bitmask"},{link:"bitmask-in-svelte",title:"Bitmask in Svelte",nested:[{link:"destructuring-dirty",title:"Destructuring  $.dirty"},{link:"tl-dr-1",title:"tl/dr:"}]}]},{link:"reactive-declaration",title:"Reactive Declaration",nested:[{link:"1-execution-of-all-reactive-declarations-and-statements-are-batched",title:"1. Execution of all reactive declarations and statements are batched"},{link:"2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date",title:"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"},{link:"sorting-of-reactive-declarations-and-statements",title:"Sorting of reactive declarations and statements"},{link:"reactive-variable-that-is-not-reactive",title:"Reactive variable that is not reactive"}]},{link:"summary",title:"Summary",nested:[{link:"1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates",title:"1. Svelte keeps track of which variables are dirty and batched the DOM updates."},{link:"2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code",title:"2. Using bitmask, Svelte able to generate a more compact compiled code."},{link:"3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates",title:"3. Reactive declarations and statements are executed in batch, just like DOM updates"}]},{link:"closing-note",title:"Closing Note"},{link:"further-resources",title:"Further Resources"}]};function Lc(es,H,B){return kc("blog",{image:$c}),es.$$set=R=>{B(0,H=Ll(Ll({},H),$p(R)))},H=$p(H),[H]}class Sc extends hc{constructor(H){super(),dc(this,H,Lc,Tc,cc,{})}}export{Sc as component};
