import{s as S,d as w,e as j,f as $,n as T}from"../chunks/scheduler.85ImRbsk.js";import{S as M,i as B,m as P,n as U,o as z,t as A,a as G,p as I,e as h,s as f,H as Q,c as y,q as _,h as x,d as D,r as E,g as r,u as V,j as c}from"../chunks/index.JMRAb4ib.js";import{g as F,a as L}from"../chunks/code-snippet.p32Anx_S.js";import{B as J}from"../chunks/BlogLayout.TadBQAnB.js";import{t as K}from"../chunks/twitter-card-image.6izpPI6I.js";function N(m){let e,p="<li>write an article for what i&#39;ve customised for my gatsby site<ul><li>content in my head at the moment<ul><li>dark mode</li> <li>plugin-emoji</li> <li>reorg on the article types</li> <li>plugin-caption (wip)</li> <li>rss feed</li></ul></li></ul></li>",o,l,t="[Added 14 Sept 2019]",a,i,b=`<li>parameters that&#39;s available from <code class="inline">pageQuery</code>, comes from <code class="inline">context</code> when <code class="inline">createPage({})</code>.
eg:</li>`,k,u,g,H=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// gatsby-node.js</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">createPage</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    context</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        slug</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;123&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        foo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// template/blog-post.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">pageQuery</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">graphql</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  query BlogPostBySlug($slug: String!, $foo: String!) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span></span></code></pre>`,v,d,q=`<li><p>if you are creating <code class="inline">slug</code> from page url, and it contains <code class="inline">&lt;space&gt;</code> characters, you might need to do
<code class="inline">slug.replace(/\\s+/g, &#39;-&#39;)</code> as browser will <code class="inline">encodeUriComponent</code> of your path, and the slug may not match.</p></li> <li><p>graphql aliases <a href="https://graphql.org/learn/queries/#aliases" rel="nofollow">https://graphql.org/learn/queries/#aliases</a></p> <ul><li>allows you to rename the result field</li></ul></li>`;return{c(){e=h("ul"),e.innerHTML=p,o=f(),l=h("p"),l.textContent=t,a=f(),i=h("ul"),i.innerHTML=b,k=f(),u=h("div"),g=new Q(!1),v=f(),d=h("ul"),d.innerHTML=q,this.h()},l(s){e=y(s,"UL",{"data-svelte-h":!0}),_(e)!=="svelte-ratqgj"&&(e.innerHTML=p),o=x(s),l=y(s,"P",{"data-svelte-h":!0}),_(l)!=="svelte-lgd28n"&&(l.textContent=t),a=x(s),i=y(s,"UL",{"data-svelte-h":!0}),_(i)!=="svelte-zq1wn"&&(i.innerHTML=b),k=x(s),u=y(s,"DIV",{class:!0});var n=D(u);g=E(n,!1),n.forEach(r),v=x(s),d=y(s,"UL",{"data-svelte-h":!0}),_(d)!=="svelte-1yzkpys"&&(d.innerHTML=q),this.h()},h(){g.a=null,V(u,"class","code-section")},m(s,n){c(s,e,n),c(s,o,n),c(s,l,n),c(s,a,n),c(s,i,n),c(s,k,n),c(s,u,n),g.m(H,u),c(s,v,n),c(s,d,n)},p:T,d(s){s&&(r(e),r(o),r(l),r(a),r(i),r(k),r(u),r(v),r(d))}}}function O(m){let e,p;const o=[m[0],C];let l={$$slots:{default:[N]},$$scope:{ctx:m}};for(let t=0;t<o.length;t+=1)l=w(l,o[t]);return e=new J({props:l}),{c(){P(e.$$.fragment)},l(t){U(e.$$.fragment,t)},m(t,a){z(e,t,a),p=!0},p(t,[a]){const i=a&1?F(o,[a&1&&L(t[0]),a&0&&L(C)]):{};a&2&&(i.$$scope={dirty:a,ctx:t}),e.$set(i)},i(t){p||(A(e.$$.fragment,t),p=!0)},o(t){G(e.$$.fragment,t),p=!1},d(t){I(e,t)}}}const C={title:"Building my Gatsby Site",tags:["Gatsby"],description:"write an article for what i've customised for my gatsby sitecontent in my head at the momentdark modeplugin-emojireorg on the article typesplugin-caption (wip)rss feedAdded 14 Sept 2019parameters that's available from ..."};function R(m,e,p){return j("blog",{image:K}),m.$$set=o=>{p(0,e=w(w({},e),$(o)))},e=$(e),[e]}class se extends M{constructor(e){super(),B(this,e,R,O,S,{})}}export{se as component};
