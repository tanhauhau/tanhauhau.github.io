import{s as an,d as _o,e as ln,f as Ot,n as rn}from"../chunks/scheduler.85ImRbsk.js";import{S as pn,i as cn,m as kn,n as hn,o as yn,t as vn,a as un,p as dn,e,s as t,H as g,c as o,q as r,h as n,d as m,r as b,g as i,u as _,j as k,k as s}from"../chunks/index.JMRAb4ib.js";import{g as xn,a as Bt}from"../chunks/code-snippet.p32Anx_S.js";import{B as mn}from"../chunks/BlogLayout.n3Egsk1p.js";import{t as fn}from"../chunks/twitter-card-image.6izpPI6I.js";const wn=""+new URL("../assets/resolution.cVIJgeD7.webp",import.meta.url).href,gn=""+new URL("../assets/resolution.cJXwNHsB.webp",import.meta.url).href,bn=""+new URL("../assets/resolution.OL_ETBbR.png",import.meta.url).href,Nt=""+new URL("../assets/resolution.SJIymp2R.png",import.meta.url).href,_n=""+new URL("../assets/ast-explorer.RQFPkxpJ.webp",import.meta.url).href,Cn=""+new URL("../assets/ast-explorer.mAVnR0t3.webp",import.meta.url).href,Tn=""+new URL("../assets/ast-explorer.H-qk6Azk.jpeg",import.meta.url).href,Dt=""+new URL("../assets/ast-explorer.KpjRPFZ4.jpeg",import.meta.url).href,Ln=""+new URL("../assets/relationship.MFywBzFj.webp",import.meta.url).href,Hn=""+new URL("../assets/relationship.95ZP2oba.webp",import.meta.url).href,Mn=""+new URL("../assets/relationship.ISsikQFY.png",import.meta.url).href,zt=""+new URL("../assets/relationship.aIWKjwAE.png",import.meta.url).href,jn=""+new URL("../assets/why-bundling.Q2fGpGhh.webp",import.meta.url).href,In=""+new URL("../assets/why-bundling.X9FP3fKC.webp",import.meta.url).href,qn=""+new URL("../assets/why-bundling.SbKN269H.png",import.meta.url).href,Vt=""+new URL("../assets/why-bundling.ICnm8ZTT.png",import.meta.url).href;function Pn(U){let v,q='<h2><a href="#background" id="background">Background</a></h2> <p>We are trying out a new form of our weekly sharing, which is interest group-based.</p> <p>I am hosting the <strong>&quot;Building a simplified webpack clone&quot;</strong> interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves.</p>',L,T,f='<h2><a href="#prior-art" id="prior-art">Prior Art</a></h2> <ul><li>📺 <a href="https://twitter.com/wSokra" rel="nofollow">Tobias Koppers</a> - bundling live by hand - <a href="https://youtube.com/watch?v=UNMkLHzofQI" rel="nofollow">https://youtube.com/watch?v=UNMkLHzofQI</a></li> <li>📺 <a href="https://twitter.com/ronenamiel" rel="nofollow">Ronen Amiel</a> - build your own webpack - <a href="https://youtube.com/watch?v=Gc9-7PBqOC8" rel="nofollow">https://youtube.com/watch?v=Gc9-7PBqOC8</a></li> <li>📖 adam kelly - <a href="https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/" rel="nofollow">https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/</a></li></ul>',C,H,Co='<h2><a href="#week-1-resolving" id="week-1-resolving">Week 1 - Resolving</a></h2>',Ks,P,To=`<h3><a href="#why-module-bundler" id="why-module-bundler">Why module bundler?</a></h3> <p>We love writing small modular JS files, but that shouldn&#39;t impact the users.</p> <p>Traditionally with limit on number of request connection, 🐌 slow internet speed, we want to combine all the code into 1 file -&gt; 1 network request</p> <p><span style="display: block; position: relative; padding-top: 35.100%; width: 100%;"><picture><source type="image/webp" srcset="${In}, ${jn} 2x"/><img src="${Vt}" srcset="${Vt}, ${qn} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="why bundling"/></picture></span></p> <p>🕰 Traditionally, we concatenate the source files into 1 big output file.</p> <p>But that begs the question</p> <ul><li>❓ what should be the order of concatenation (files may depend on each other) ?</li> <li>❓ what if there&#39;s var naming conflict across files?</li> <li>❓ what if there&#39;s unused file?</li></ul> <p>💡 That&#39;s why we need a module system to define the relationship among the JS modules</p> <p><span style="display: block; position: relative; padding-top: 90.868%; width: 100%;"><picture><source type="image/webp" srcset="${Hn}, ${Ln} 2x"/><img src="${zt}" srcset="${zt}, ${Mn} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="relationship within a bundle"/></picture></span></p> <p>So now, let&#39;s take a look how we can start building a module dependency graph</p>`,Qs,S,Lo='<h3><a href="#1-we-start-from-an-entry-file" id="1-we-start-from-an-entry-file">1. We start from an entry file.</a></h3> <p>This is the starting point of the application</p>',Zs,p,R,Ho='<a href="#2-we-read-the-file-and-determine-what-is-being-imported-into-this-file" id="2-we-read-the-file-and-determine-what-is-being-imported-into-this-file">2. We read the file and determine what is being imported into this file</a>',we,O,Xs,Ft=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> calculate </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./calculate&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; measure</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> UNITS &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../measurements&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> formula </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;formulas&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oneCm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">measure</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">UNITS</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CM</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">calculate</span><span style="color: var(--shiki-color-text)">(formula</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> oneCm);</span></span></code></pre>`,ge,B,Mo="In the example above, the following is imported:",be,N,jo='<li><code class="inline">&#39;./calculate&#39;</code></li> <li><code class="inline">&#39;../measurements&#39;</code></li> <li><code class="inline">&#39;formulas&#39;</code></li>',_e,D,Io="we can spot the import from our human eye 👀, but how can computer 🤖 do that for us?",Ce,z,qo="🤖 can parse the code in string into Abstract Syntax Tree (AST), something representing the code that 🤖 can understand.",Te,V,Po="in AST, import statement is represented by a node with:",Le,W,So='<li><code class="inline">type</code> = &quot;ImportDeclaration&quot;</li> <li><code class="inline">source.value</code> = the filename it&#39;s trying to import</li>',He,F,$o=`<span style="display: block; position: relative; padding-top: 48.359%; width: 100%;"><picture><source type="image/webp" srcset="${Cn}, ${_n} 2x"/><img src="${Dt}" srcset="${Dt}, ${Tn} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="ast explorer"/></picture></span>`,Me,J,Ao="There are various JavaScript parser out there, here are some of them",je,G,Eo='<li>🔗 <a href="https://babeljs.io/docs/en/babel-core" rel="nofollow">babel</a></li> <li>🔗 <a href="https://github.com/acornjs/acorn" rel="nofollow">acorn</a></li> <li>🔗 <a href="https://github.com/jquery/esprima" rel="nofollow">esprima</a></li> <li>🔗 <a href="https://github.com/guybedford/es-module-lexer" rel="nofollow">es-module-lexer</a></li>',Ie,K,Ys,Jt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// babel</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// acorn</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">acorn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;acorn&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">acorn</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; ecmaVersion</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2020</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sourceType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;module&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// esprima</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">esprima</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;esprima&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">esprima</span><span style="color: var(--shiki-token-function)">.parseScript</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if you just need the import &amp; export</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// es-module-lexer is blazing fast, it is written in c, and loaded through web-assembly</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is what powers vite for parsing dependencies</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">init</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">parse</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;es-module-lexer&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> init;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">imports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code);</span></span></code></pre>`,qe,Q,Uo="...and if you forgot about your tree-traversal algorithm 😨, here are some libraries that can help you out",Pe,Z,Ro='<li>🔗 <a href="https://babeljs.io/docs/en/babel-traverse" rel="nofollow">babel-traverse</a></li> <li>🔗 <a href="https://github.com/acornjs/acorn/tree/master/acorn-walk" rel="nofollow">acorn-walk</a></li> <li>🔗 <a href="https://github.com/Rich-Harris/estree-walker" rel="nofollow">estree-walker</a></li>',Se,X,se,Gt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// babel</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">traverse</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/traverse&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">traverse</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">ImportDeclaration</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// acorn</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">walk</span><span style="color: var(--shiki-token-function)">.simple</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">ImportDeclaration</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// estree-walker</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">walk</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;estree-walker&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">walk</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">enter</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">leave</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,$e,Y,Oo="Some other useful links",Ae,ss,Bo='<li>Inspect your AST<ul><li><a href="https://astexplorer.net" rel="nofollow">https://astexplorer.net</a></li> <li><a href="https://lihautan.com/babel-ast-explorer/" rel="nofollow">https://lihautan.com/babel-ast-explorer/</a></li></ul></li> <li>The JS AST Specification<ul><li><a href="https://github.com/estree/estree" rel="nofollow">https://github.com/estree/estree</a></li></ul></li> <li>Guide on parsing, traversing AST<ul><li><a href="https://lihautan.com/manipulating-ast-with-javascript" rel="nofollow">https://lihautan.com/manipulating-ast-with-javascript</a></li> <li><a href="https://lihautan.com/json-parser-with-javascript" rel="nofollow">https://lihautan.com/json-parser-with-javascript</a></li></ul></li>',ee,y,es,No='<a href="#3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path" id="3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path">3. Now knowing what are the names you are importing from, you need to figure out their actual file path</a>',Ee,os,Do="that depends on",Ue,ts,zo="<li>the current file path</li> <li>the name you are importing from</li>",Re,ns,oe,Kt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./calculate.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a/b/calculate.js</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../measurements.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a/measurements.js</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;formulas&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// node_modules/formulas/src/index.js</span></span></code></pre>`,Oe,as,Vo='That leads us to the <a href="https://nodejs.org/api/modules.html#modules_all_together" rel="nofollow">Node.js Module Resolution Algorithm</a>',Be,ls,Wo="It describes the steps taken to resolve the file.",Ne,rs,Fo="there are 3 scenarios in general:",De,is,Jo="<li>load as file</li> <li>load as directory</li> <li>load as node_modules</li>",ze,ps,Go=`<span style="display: block; position: relative; padding-top: 38.000%; width: 100%;"><picture><source type="image/webp" srcset="${gn}, ${wn} 2x"/><img src="${Nt}" srcset="${Nt}, ${bn} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="node js module resolution algorithm"/></picture></span>`,Ve,cs,Ko="Some other module resolution:",We,ks,Qo='<li>webpack uses <a href="https://github.com/webpack/enhanced-resolve" rel="nofollow"><code class="inline">enhanced-resolve</code></a> which is a highly configurable resolver</li> <li>Typescript implements its own resolver, <a href="https://typescriptlang.org/docs/handbook/module-resolution.html" rel="nofollow">see how TS resolving works</a></li>',te,$,Zo='<h3><a href="#4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found" id="4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found">4️⃣ After you figured the file path you&#39;re importing from, for each of the file, 🔁 repeat step 2️⃣ until no more new files to be found.</a></h3>',ne,u,hs,Xo='<a href="#assignment" id="assignment">Assignment</a>',Fe,ys,Yo='<a href="https://github.com/tanhauhau/rk-webpack-clone" rel="nofollow">Test cases</a>',Je,vs,st="For each test cases, we provide the entry file, and we expect",Ge,us,et="📝 Module",Ke,ds,ot='<li><code class="inline">filepath</code></li> <li><code class="inline">dependencies</code> -&gt; list of Depedencies (see below 👇)</li> <li><code class="inline">isEntryFile</code> -&gt; <code class="inline">true</code> if it is the entry file / <code class="inline">false</code> otherwise</li>',Qe,xs,tt="📝 Depedencies",Ze,ms,nt='<li><code class="inline">module</code> (see above ☝️)</li> <li><code class="inline">exports</code> -&gt; list of var names you are importing, eg &quot;default&quot;, &quot;measure&quot; ..</li>',Xe,fs,at="📝 If 2 module are importing the same module, both should be referring to the same module instance",Ye,ws,ae,Qt='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">moduleCFromModuleA </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> moduleCFromModuleB;</span></span></code></pre>',so,gs,lt="📝 Be careful with circular dependency 🙈",le,w,bs,rt='<a href="#week-2-bundling" id="week-2-bundling">Week 2 - Bundling</a>',eo,_s,it="🤔 How do you bundle modules into 1 file?",oo,Cs,pt="After studying the 2 most popular bundlers, webpack and rollup, i found that the way they bundle are very different.",to,Ts,ct="Both of them come a long way, I believe both has its own pros and cons",no,Ls,re,Zt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// circle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// square.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// app.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,ie,M,Hs,kt='<a href="#observation-bundle-using-webpack" id="observation-bundle-using-webpack">🔭 Observation: Bundle using webpack</a>',ao,Ms,ht="<li>📝 each module wrap in a function</li> <li>📝 a module map, module identifier as key</li> <li>📝 a runtime glue code to piece modules together</li> <li>📝 calling module function, with 2 parameters, 1 to assign the exports of the module, 1 to &quot;require&quot; other modules</li>",lo,js,pe,Xt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// webpack-bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">__exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">__exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__getModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__getModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">webpackRuntime</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  modules</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,ce,j,Is,yt='<a href="#observation-bundle-using-rollup" id="observation-bundle-using-rollup">🔭 Observation: Bundle using rollup</a>',ro,qs,vt="<li>📝 much flatter bundle</li> <li>📝 module are concatenated in topological order</li> <li>📝 exports and imports are removed by renaming them to the same variable name</li> <li>📝 any variable in module scope that may have naming conflict with other variables are renamed</li>",io,Ps,ke,Yt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// rollup-bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,he,A,ut='<h3><a href="#output-target-of-bundling" id="output-target-of-bundling">📤 Output target of bundling</a></h3> <ul><li><p>IIFE (the most common target, we want to execute the script)</p></li> <li><p>CJS, ESM, UMD, AMD, ... (we want to bundle a library, exports of entry file is exported in selected module format)</p></li> <li><p>🔗 <a href="https://webpack.js.org/configuration/output/#outputlibrarytarget" rel="nofollow">https://webpack.js.org/configuration/output/#outputlibrarytarget</a></p></li> <li><p>🔗 <a href="https://rollupjs.org/guide/en/#configuration-files" rel="nofollow">https://rollupjs.org/guide/en/#configuration-files</a></p></li></ul>',ye,c,Ss,dt='<a href="#assignment-1" id="assignment-1">Assignment</a>',po,$s,xt='<a href="https://github.com/tanhauhau/rk-webpack-clone" rel="nofollow">Test cases</a>',co,As,mt="Here are some of the the interesting test cases:",ko,Es,ft="🧪 Able to handle re-export nicely",ho,Us,ve,sn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; d &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./d&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(a);</span></span></code></pre>`,yo,Rs,wt="🧪 Importing the same file twice, but are you able to make sure it's gonna be evaluated only once?",vo,Os,ue,en=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// c.js</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;c.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,uo,Bs,gt='🧪 The dreaded circular dependency, are you able to make sure to get the value of <code class="inline">a</code>, <code class="inline">b</code>, <code class="inline">c</code> in all the files?',xo,Ns,de,on=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;a.js | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;b.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// c.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;c.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;main.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,mo,Ds,bt="🧪 Are you able to export a variable before it is declared? Does the order matter?",fo,zs,xe,tn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> a);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;b = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b);</span></span></code></pre>`,wo,Vs,_t='🧪 imported variables is not a normal variable, it&#39;s a live binding of the exported variable. Are you able to make sure that the value of <code class="inline">count</code> is always up to date?',go,Ws,me,nn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// data.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> increment &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./data&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> increment &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./data&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,bo,Fs,Ct="📝 Be careful with circular dependency 🙈",fe,E,Tt=`<h3><a href="#manipulating-ast" id="manipulating-ast">🔨 Manipulating AST</a></h3> <p>📖  <a href="/manipulating-ast-with-javascript/">manipulating ast with javascript</a> (generic)
📖  <a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md" rel="nofollow">babel plugin handbook</a> (babel)</p>`;return{c(){v=e("section"),v.innerHTML=q,L=t(),T=e("section"),T.innerHTML=f,C=t(),H=e("section"),H.innerHTML=Co,Ks=t(),P=e("section"),P.innerHTML=To,Qs=t(),S=e("section"),S.innerHTML=Lo,Zs=t(),p=e("section"),R=e("h3"),R.innerHTML=Ho,we=t(),O=e("div"),Xs=new g(!1),ge=t(),B=e("p"),B.textContent=Mo,be=t(),N=e("ul"),N.innerHTML=jo,_e=t(),D=e("p"),D.textContent=Io,Ce=t(),z=e("p"),z.textContent=qo,Te=t(),V=e("p"),V.textContent=Po,Le=t(),W=e("ul"),W.innerHTML=So,He=t(),F=e("p"),F.innerHTML=$o,Me=t(),J=e("p"),J.textContent=Ao,je=t(),G=e("ul"),G.innerHTML=Eo,Ie=t(),K=e("div"),Ys=new g(!1),qe=t(),Q=e("p"),Q.textContent=Uo,Pe=t(),Z=e("ul"),Z.innerHTML=Ro,Se=t(),X=e("div"),se=new g(!1),$e=t(),Y=e("p"),Y.textContent=Oo,Ae=t(),ss=e("ul"),ss.innerHTML=Bo,ee=t(),y=e("section"),es=e("h3"),es.innerHTML=No,Ee=t(),os=e("p"),os.textContent=Do,Ue=t(),ts=e("ul"),ts.innerHTML=zo,Re=t(),ns=e("div"),oe=new g(!1),Oe=t(),as=e("p"),as.innerHTML=Vo,Be=t(),ls=e("p"),ls.textContent=Wo,Ne=t(),rs=e("p"),rs.textContent=Fo,De=t(),is=e("ul"),is.innerHTML=Jo,ze=t(),ps=e("p"),ps.innerHTML=Go,Ve=t(),cs=e("p"),cs.textContent=Ko,We=t(),ks=e("ul"),ks.innerHTML=Qo,te=t(),$=e("section"),$.innerHTML=Zo,ne=t(),u=e("section"),hs=e("h3"),hs.innerHTML=Xo,Fe=t(),ys=e("p"),ys.innerHTML=Yo,Je=t(),vs=e("p"),vs.textContent=st,Ge=t(),us=e("p"),us.textContent=et,Ke=t(),ds=e("ul"),ds.innerHTML=ot,Qe=t(),xs=e("p"),xs.textContent=tt,Ze=t(),ms=e("ul"),ms.innerHTML=nt,Xe=t(),fs=e("p"),fs.textContent=at,Ye=t(),ws=e("div"),ae=new g(!1),so=t(),gs=e("p"),gs.textContent=lt,le=t(),w=e("section"),bs=e("h2"),bs.innerHTML=rt,eo=t(),_s=e("p"),_s.textContent=it,oo=t(),Cs=e("p"),Cs.textContent=pt,to=t(),Ts=e("p"),Ts.textContent=ct,no=t(),Ls=e("div"),re=new g(!1),ie=t(),M=e("section"),Hs=e("h3"),Hs.innerHTML=kt,ao=t(),Ms=e("ul"),Ms.innerHTML=ht,lo=t(),js=e("div"),pe=new g(!1),ce=t(),j=e("section"),Is=e("h4"),Is.innerHTML=yt,ro=t(),qs=e("ul"),qs.innerHTML=vt,io=t(),Ps=e("div"),ke=new g(!1),he=t(),A=e("section"),A.innerHTML=ut,ye=t(),c=e("section"),Ss=e("h3"),Ss.innerHTML=dt,po=t(),$s=e("p"),$s.innerHTML=xt,co=t(),As=e("p"),As.textContent=mt,ko=t(),Es=e("p"),Es.textContent=ft,ho=t(),Us=e("div"),ve=new g(!1),yo=t(),Rs=e("p"),Rs.textContent=wt,vo=t(),Os=e("div"),ue=new g(!1),uo=t(),Bs=e("p"),Bs.innerHTML=gt,xo=t(),Ns=e("div"),de=new g(!1),mo=t(),Ds=e("p"),Ds.textContent=bt,fo=t(),zs=e("div"),xe=new g(!1),wo=t(),Vs=e("p"),Vs.innerHTML=_t,go=t(),Ws=e("div"),me=new g(!1),bo=t(),Fs=e("p"),Fs.textContent=Ct,fe=t(),E=e("section"),E.innerHTML=Tt,this.h()},l(l){v=o(l,"SECTION",{"data-svelte-h":!0}),r(v)!=="svelte-1y2ijxh"&&(v.innerHTML=q),L=n(l),T=o(l,"SECTION",{"data-svelte-h":!0}),r(T)!=="svelte-1iztnqj"&&(T.innerHTML=f),C=n(l),H=o(l,"SECTION",{"data-svelte-h":!0}),r(H)!=="svelte-1xb9j6"&&(H.innerHTML=Co),Ks=n(l),P=o(l,"SECTION",{"data-svelte-h":!0}),r(P)!=="svelte-18h5tfg"&&(P.innerHTML=To),Qs=n(l),S=o(l,"SECTION",{"data-svelte-h":!0}),r(S)!=="svelte-k12gnv"&&(S.innerHTML=Lo),Zs=n(l),p=o(l,"SECTION",{});var a=m(p);R=o(a,"H3",{"data-svelte-h":!0}),r(R)!=="svelte-orljwy"&&(R.innerHTML=Ho),we=n(a),O=o(a,"DIV",{class:!0});var Lt=m(O);Xs=b(Lt,!1),Lt.forEach(i),ge=n(a),B=o(a,"P",{"data-svelte-h":!0}),r(B)!=="svelte-24r5bn"&&(B.textContent=Mo),be=n(a),N=o(a,"UL",{"data-svelte-h":!0}),r(N)!=="svelte-jb2plw"&&(N.innerHTML=jo),_e=n(a),D=o(a,"P",{"data-svelte-h":!0}),r(D)!=="svelte-13plyfb"&&(D.textContent=Io),Ce=n(a),z=o(a,"P",{"data-svelte-h":!0}),r(z)!=="svelte-gdoho2"&&(z.textContent=qo),Te=n(a),V=o(a,"P",{"data-svelte-h":!0}),r(V)!=="svelte-1hbp6zo"&&(V.textContent=Po),Le=n(a),W=o(a,"UL",{"data-svelte-h":!0}),r(W)!=="svelte-12st5wb"&&(W.innerHTML=So),He=n(a),F=o(a,"P",{"data-svelte-h":!0}),r(F)!=="svelte-17ycil2"&&(F.innerHTML=$o),Me=n(a),J=o(a,"P",{"data-svelte-h":!0}),r(J)!=="svelte-kgoq8u"&&(J.textContent=Ao),je=n(a),G=o(a,"UL",{"data-svelte-h":!0}),r(G)!=="svelte-xam3i9"&&(G.innerHTML=Eo),Ie=n(a),K=o(a,"DIV",{class:!0});var Ht=m(K);Ys=b(Ht,!1),Ht.forEach(i),qe=n(a),Q=o(a,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-wvl8p9"&&(Q.textContent=Uo),Pe=n(a),Z=o(a,"UL",{"data-svelte-h":!0}),r(Z)!=="svelte-9wrlxn"&&(Z.innerHTML=Ro),Se=n(a),X=o(a,"DIV",{class:!0});var Mt=m(X);se=b(Mt,!1),Mt.forEach(i),$e=n(a),Y=o(a,"P",{"data-svelte-h":!0}),r(Y)!=="svelte-1axjrb1"&&(Y.textContent=Oo),Ae=n(a),ss=o(a,"UL",{"data-svelte-h":!0}),r(ss)!=="svelte-1kbd85c"&&(ss.innerHTML=Bo),a.forEach(i),ee=n(l),y=o(l,"SECTION",{});var d=m(y);es=o(d,"H3",{"data-svelte-h":!0}),r(es)!=="svelte-1obfp3m"&&(es.innerHTML=No),Ee=n(d),os=o(d,"P",{"data-svelte-h":!0}),r(os)!=="svelte-iusa2z"&&(os.textContent=Do),Ue=n(d),ts=o(d,"UL",{"data-svelte-h":!0}),r(ts)!=="svelte-omeprh"&&(ts.innerHTML=zo),Re=n(d),ns=o(d,"DIV",{class:!0});var jt=m(ns);oe=b(jt,!1),jt.forEach(i),Oe=n(d),as=o(d,"P",{"data-svelte-h":!0}),r(as)!=="svelte-zqua8c"&&(as.innerHTML=Vo),Be=n(d),ls=o(d,"P",{"data-svelte-h":!0}),r(ls)!=="svelte-k876ii"&&(ls.textContent=Wo),Ne=n(d),rs=o(d,"P",{"data-svelte-h":!0}),r(rs)!=="svelte-xl1d3p"&&(rs.textContent=Fo),De=n(d),is=o(d,"UL",{"data-svelte-h":!0}),r(is)!=="svelte-1icko0"&&(is.innerHTML=Jo),ze=n(d),ps=o(d,"P",{"data-svelte-h":!0}),r(ps)!=="svelte-2feaz8"&&(ps.innerHTML=Go),Ve=n(d),cs=o(d,"P",{"data-svelte-h":!0}),r(cs)!=="svelte-61a5g2"&&(cs.textContent=Ko),We=n(d),ks=o(d,"UL",{"data-svelte-h":!0}),r(ks)!=="svelte-rcrtu"&&(ks.innerHTML=Qo),d.forEach(i),te=n(l),$=o(l,"SECTION",{"data-svelte-h":!0}),r($)!=="svelte-9k1fqq"&&($.innerHTML=Zo),ne=n(l),u=o(l,"SECTION",{});var x=m(u);hs=o(x,"H3",{"data-svelte-h":!0}),r(hs)!=="svelte-qak0i7"&&(hs.innerHTML=Xo),Fe=n(x),ys=o(x,"P",{"data-svelte-h":!0}),r(ys)!=="svelte-1k26v1r"&&(ys.innerHTML=Yo),Je=n(x),vs=o(x,"P",{"data-svelte-h":!0}),r(vs)!=="svelte-1xff8tt"&&(vs.textContent=st),Ge=n(x),us=o(x,"P",{"data-svelte-h":!0}),r(us)!=="svelte-1hft5ti"&&(us.textContent=et),Ke=n(x),ds=o(x,"UL",{"data-svelte-h":!0}),r(ds)!=="svelte-1nhrsgu"&&(ds.innerHTML=ot),Qe=n(x),xs=o(x,"P",{"data-svelte-h":!0}),r(xs)!=="svelte-1992s1j"&&(xs.textContent=tt),Ze=n(x),ms=o(x,"UL",{"data-svelte-h":!0}),r(ms)!=="svelte-1ciivve"&&(ms.innerHTML=nt),Xe=n(x),fs=o(x,"P",{"data-svelte-h":!0}),r(fs)!=="svelte-7adue7"&&(fs.textContent=at),Ye=n(x),ws=o(x,"DIV",{class:!0});var It=m(ws);ae=b(It,!1),It.forEach(i),so=n(x),gs=o(x,"P",{"data-svelte-h":!0}),r(gs)!=="svelte-1adwdog"&&(gs.textContent=lt),x.forEach(i),le=n(l),w=o(l,"SECTION",{});var I=m(w);bs=o(I,"H2",{"data-svelte-h":!0}),r(bs)!=="svelte-1mcav2y"&&(bs.innerHTML=rt),eo=n(I),_s=o(I,"P",{"data-svelte-h":!0}),r(_s)!=="svelte-1el5har"&&(_s.textContent=it),oo=n(I),Cs=o(I,"P",{"data-svelte-h":!0}),r(Cs)!=="svelte-1enh3n8"&&(Cs.textContent=pt),to=n(I),Ts=o(I,"P",{"data-svelte-h":!0}),r(Ts)!=="svelte-10n5j3c"&&(Ts.textContent=ct),no=n(I),Ls=o(I,"DIV",{class:!0});var qt=m(Ls);re=b(qt,!1),qt.forEach(i),I.forEach(i),ie=n(l),M=o(l,"SECTION",{});var Js=m(M);Hs=o(Js,"H3",{"data-svelte-h":!0}),r(Hs)!=="svelte-18gz78n"&&(Hs.innerHTML=kt),ao=n(Js),Ms=o(Js,"UL",{"data-svelte-h":!0}),r(Ms)!=="svelte-sxly62"&&(Ms.innerHTML=ht),lo=n(Js),js=o(Js,"DIV",{class:!0});var Pt=m(js);pe=b(Pt,!1),Pt.forEach(i),Js.forEach(i),ce=n(l),j=o(l,"SECTION",{});var Gs=m(j);Is=o(Gs,"H4",{"data-svelte-h":!0}),r(Is)!=="svelte-130rjz2"&&(Is.innerHTML=yt),ro=n(Gs),qs=o(Gs,"UL",{"data-svelte-h":!0}),r(qs)!=="svelte-fb3sov"&&(qs.innerHTML=vt),io=n(Gs),Ps=o(Gs,"DIV",{class:!0});var St=m(Ps);ke=b(St,!1),St.forEach(i),Gs.forEach(i),he=n(l),A=o(l,"SECTION",{"data-svelte-h":!0}),r(A)!=="svelte-1eu9npg"&&(A.innerHTML=ut),ye=n(l),c=o(l,"SECTION",{});var h=m(c);Ss=o(h,"H3",{"data-svelte-h":!0}),r(Ss)!=="svelte-1xhzvsj"&&(Ss.innerHTML=dt),po=n(h),$s=o(h,"P",{"data-svelte-h":!0}),r($s)!=="svelte-1k26v1r"&&($s.innerHTML=xt),co=n(h),As=o(h,"P",{"data-svelte-h":!0}),r(As)!=="svelte-1r5936y"&&(As.textContent=mt),ko=n(h),Es=o(h,"P",{"data-svelte-h":!0}),r(Es)!=="svelte-1ozkilx"&&(Es.textContent=ft),ho=n(h),Us=o(h,"DIV",{class:!0});var $t=m(Us);ve=b($t,!1),$t.forEach(i),yo=n(h),Rs=o(h,"P",{"data-svelte-h":!0}),r(Rs)!=="svelte-mjz5ya"&&(Rs.textContent=wt),vo=n(h),Os=o(h,"DIV",{class:!0});var At=m(Os);ue=b(At,!1),At.forEach(i),uo=n(h),Bs=o(h,"P",{"data-svelte-h":!0}),r(Bs)!=="svelte-qt7khj"&&(Bs.innerHTML=gt),xo=n(h),Ns=o(h,"DIV",{class:!0});var Et=m(Ns);de=b(Et,!1),Et.forEach(i),mo=n(h),Ds=o(h,"P",{"data-svelte-h":!0}),r(Ds)!=="svelte-1xmplxe"&&(Ds.textContent=bt),fo=n(h),zs=o(h,"DIV",{class:!0});var Ut=m(zs);xe=b(Ut,!1),Ut.forEach(i),wo=n(h),Vs=o(h,"P",{"data-svelte-h":!0}),r(Vs)!=="svelte-ooizl7"&&(Vs.innerHTML=_t),go=n(h),Ws=o(h,"DIV",{class:!0});var Rt=m(Ws);me=b(Rt,!1),Rt.forEach(i),bo=n(h),Fs=o(h,"P",{"data-svelte-h":!0}),r(Fs)!=="svelte-1adwdog"&&(Fs.textContent=Ct),h.forEach(i),fe=n(l),E=o(l,"SECTION",{"data-svelte-h":!0}),r(E)!=="svelte-ju0h7k"&&(E.innerHTML=Tt),this.h()},h(){Xs.a=null,_(O,"class","code-section"),Ys.a=null,_(K,"class","code-section"),se.a=null,_(X,"class","code-section"),oe.a=null,_(ns,"class","code-section"),ae.a=null,_(ws,"class","code-section"),re.a=null,_(Ls,"class","code-section"),pe.a=null,_(js,"class","code-section"),ke.a=null,_(Ps,"class","code-section"),ve.a=null,_(Us,"class","code-section"),ue.a=null,_(Os,"class","code-section"),de.a=null,_(Ns,"class","code-section"),xe.a=null,_(zs,"class","code-section"),me.a=null,_(Ws,"class","code-section")},m(l,a){k(l,v,a),k(l,L,a),k(l,T,a),k(l,C,a),k(l,H,a),k(l,Ks,a),k(l,P,a),k(l,Qs,a),k(l,S,a),k(l,Zs,a),k(l,p,a),s(p,R),s(p,we),s(p,O),Xs.m(Ft,O),s(p,ge),s(p,B),s(p,be),s(p,N),s(p,_e),s(p,D),s(p,Ce),s(p,z),s(p,Te),s(p,V),s(p,Le),s(p,W),s(p,He),s(p,F),s(p,Me),s(p,J),s(p,je),s(p,G),s(p,Ie),s(p,K),Ys.m(Jt,K),s(p,qe),s(p,Q),s(p,Pe),s(p,Z),s(p,Se),s(p,X),se.m(Gt,X),s(p,$e),s(p,Y),s(p,Ae),s(p,ss),k(l,ee,a),k(l,y,a),s(y,es),s(y,Ee),s(y,os),s(y,Ue),s(y,ts),s(y,Re),s(y,ns),oe.m(Kt,ns),s(y,Oe),s(y,as),s(y,Be),s(y,ls),s(y,Ne),s(y,rs),s(y,De),s(y,is),s(y,ze),s(y,ps),s(y,Ve),s(y,cs),s(y,We),s(y,ks),k(l,te,a),k(l,$,a),k(l,ne,a),k(l,u,a),s(u,hs),s(u,Fe),s(u,ys),s(u,Je),s(u,vs),s(u,Ge),s(u,us),s(u,Ke),s(u,ds),s(u,Qe),s(u,xs),s(u,Ze),s(u,ms),s(u,Xe),s(u,fs),s(u,Ye),s(u,ws),ae.m(Qt,ws),s(u,so),s(u,gs),k(l,le,a),k(l,w,a),s(w,bs),s(w,eo),s(w,_s),s(w,oo),s(w,Cs),s(w,to),s(w,Ts),s(w,no),s(w,Ls),re.m(Zt,Ls),k(l,ie,a),k(l,M,a),s(M,Hs),s(M,ao),s(M,Ms),s(M,lo),s(M,js),pe.m(Xt,js),k(l,ce,a),k(l,j,a),s(j,Is),s(j,ro),s(j,qs),s(j,io),s(j,Ps),ke.m(Yt,Ps),k(l,he,a),k(l,A,a),k(l,ye,a),k(l,c,a),s(c,Ss),s(c,po),s(c,$s),s(c,co),s(c,As),s(c,ko),s(c,Es),s(c,ho),s(c,Us),ve.m(sn,Us),s(c,yo),s(c,Rs),s(c,vo),s(c,Os),ue.m(en,Os),s(c,uo),s(c,Bs),s(c,xo),s(c,Ns),de.m(on,Ns),s(c,mo),s(c,Ds),s(c,fo),s(c,zs),xe.m(tn,zs),s(c,wo),s(c,Vs),s(c,go),s(c,Ws),me.m(nn,Ws),s(c,bo),s(c,Fs),k(l,fe,a),k(l,E,a)},p:rn,d(l){l&&(i(v),i(L),i(T),i(C),i(H),i(Ks),i(P),i(Qs),i(S),i(Zs),i(p),i(ee),i(y),i(te),i($),i(ne),i(u),i(le),i(w),i(ie),i(M),i(ce),i(j),i(he),i(A),i(ye),i(c),i(fe),i(E))}}}function Sn(U){let v,q;const L=[U[0],Wt];let T={$$slots:{default:[Pn]},$$scope:{ctx:U}};for(let f=0;f<L.length;f+=1)T=_o(T,L[f]);return v=new mn({props:T}),{c(){kn(v.$$.fragment)},l(f){hn(v.$$.fragment,f)},m(f,C){yn(v,f,C),q=!0},p(f,[C]){const H=C&1?xn(L,[C&1&&Bt(f[0]),C&0&&Bt(Wt)]):{};C&2&&(H.$$scope={dirty:C,ctx:f}),v.$set(H)},i(f){q||(vn(v.$$.fragment,f),q=!0)},o(f){un(v.$$.fragment,f),q=!1},d(f){dn(v,f)}}}const Wt={title:"Building a simplified webpack clone",date:"2020-10-02T08:00:00Z",tags:["JavaScript","webpack"],label:"blog",description:'BackgroundWe are trying out a new form of our weekly sharing, which is interest group-based.I am hosting the "Building a simplified webpack clone" interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves....',tableOfContents:[{link:"background",title:"Background"},{link:"prior-art",title:"Prior Art"},{link:"week-1-resolving",title:"Week 1 - Resolving",nested:[{link:"why-module-bundler",title:"Why module bundler?"},{link:"1-we-start-from-an-entry-file",title:"1. We start from an entry file."},{link:"2-we-read-the-file-and-determine-what-is-being-imported-into-this-file",title:"2. We read the file and determine what is being imported into this file"},{link:"3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path",title:"3. Now knowing what are the names you are importing from, you need to figure out their actual file path"},{link:"4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found",title:"4️⃣ After you figured the file path you're importing from, for each of the file, 🔁 repeat step 2️⃣ until no more new files to be found."},{link:"assignment",title:"Assignment"}]},{link:"week-2-bundling",title:"Week 2 - Bundling",nested:[{link:"observation-bundle-using-webpack",title:"🔭 Observation: Bundle using webpack",nested:[{link:"observation-bundle-using-rollup",title:"🔭 Observation: Bundle using rollup"}]},{link:"output-target-of-bundling",title:"📤 Output target of bundling"},{link:"assignment-1",title:"Assignment"},{link:"manipulating-ast",title:"🔨 Manipulating AST"}]}]};function $n(U,v,q){return ln("blog",{image:fn}),U.$$set=L=>{q(0,v=_o(_o({},v),Ot(L)))},v=Ot(v),[v]}class Bn extends pn{constructor(v){super(),cn(this,v,$n,Sn,an,{})}}export{Bn as component};
