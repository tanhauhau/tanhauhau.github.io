import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as Q,g as Z,d as X,b as H,s as e,f as K,e as s,t as Y,a as ss,r as o,n}from"../chunks/C2PHntuy.js";import{h as a}from"../chunks/C3QlhiH-.js";import{s as x}from"../chunks/CEusTUg_.js";import{i as os}from"../chunks/BQOOHHT8.js";import{l as es,s as as}from"../chunks/gzNpScmH.js";import{B as ns}from"../chunks/B1caYEk9.js";const S=""+new URL("../assets/github-blame.CmqsVBUc.png",import.meta.url).href,ts=""+new URL("../assets/github-blame.C36MnGEl.png",import.meta.url).href,rs=""+new URL("../assets/github-blame.DdR8CyW2.webp",import.meta.url).href,ls=""+new URL("../assets/github-blame.ByXiQajA.webp",import.meta.url).href,is=""+new URL("../assets/hero-twitter.D8VQmZJL.jpg",import.meta.url).href,C={title:"Debugging Story: Build failed, error from Terser",date:"2020-01-08T08:00:00Z",tags:["debugging"],description:"It all started with an error message during the build: 'ERROR in bundle.xxx.js from Terser'.",label:"blog",tableOfContents:[{link:"act-i-the-first-attempt",title:"Act I - The First Attempt"},{link:"act-ii-terser-webpack-plugin",title:"Act II - terser-webpack-plugin"},{link:"act-iii-terser",title:"Act III - Terser"},{link:"final-act-the-resolution",title:"Final Act - The Resolution"},{link:"closing-note",title:"Closing Note"}]},{title:gs,date:ws,tags:fs,description:bs,label:_s,tableOfContents:Is}=C;var ps=H(`<p>The following is a record of the steps I went through when debugging a build-time bug I encountered during work.</p> <p>It all started with an error message during the build.</p> <div class="code-section"><!></div> <p>What is wrong with Terser and our code?</p> <p><strong>I must find the root cause of this!</strong></p> <section><h2><a href="#act-i-the-first-attempt" id="act-i-the-first-attempt">Act I - The First Attempt</a></h2> <p>We used Terser to minify our build code. It was part of our webpack pipeline, installed through <code class="inline">terser-webpack-plugin</code>. Since terser is throwing an error, so I disabled <code class="inline">terser-webpack-plugin</code> and build again.</p> <div class="code-section"><!></div> <p>Ok. The build was successful. Nothing wrong with the code nor the build.</p> <p>So, I run the terser manually:</p> <div class="code-section"><!></div> <p>The console output an error that was cryptic</p> <div class="code-section"><!></div> <p>I clicked into the terser source code to see what was going wrong over there. <em>(Maybe it's my chance to contribute to terser?)</em></p> <p>Little did I know, how wrong I could be.</p> <p><code class="inline">terser/dist/bundle.js</code> was a minified code and it wasn't meant for humans eyes üò≠</p> <p>Allow me to share a small snippet of what I saw:</p> <div class="code-section"><!></div> <p>At this point in time, I had another meeting to attend, so I stopped at this juncture.</p> <p>On my way there, I was thinking, well, maybe I should probe this later in another direction.</p></section> <section><h2><a href="#act-ii-terser-webpack-plugin" id="act-ii-terser-webpack-plugin">Act II - terser-webpack-plugin</a></h2> <p>After the meeting, I was thinking, well let me reenable the terser plugin, and try to probe through the plugin.</p> <p>Remember the error message: <code class="inline">"ERROR in bundle.xxxx.js from Terser"</code> ?</p> <p>I looked into the <code class="inline">node_modules/terser-webpack/plugin/dist/index.js</code> and search for the word <code class="inline">"from Terser"</code>.</p> <p><strong>Tip:</strong> Usually when you want to debug a library installed in <code class="inline">node_modules</code>, you can first look at the <code class="inline">package.json</code>, it usually has an entry called <code class="inline">"main"</code> that tells you the entry file to first look into. The main file usually exports all the public API that you use, so it is a good place to start diving into.</p> <p>So I found the line:</p> <div class="code-section"><!></div> <p>After adding logs <code class="inline">console.log(err)</code> and run the build again, I realised the err is an empty object <code class="inline">&#123;&#125;</code>, which explained why I saw <code class="inline">undefined</code> after the <code class="inline">ERROR in ... from Terser</code>.</p> <p>So, I slowly traced back the caller, and find out where this <code class="inline">err</code> object was initially created.</p> <p><strong>Tip:</strong> To trace the callers of a function that leads up to a certain state of your application, you can:</p> <ul><li>Use a <a href="https://blittle.github.io/chrome-dev-tools/sources/conditional-breakpoints.html" rel="nofollow">conditional breakpoint</a> if you are debugging through a debugger</li> <li>Throw an error within a try catch</li></ul> <div class="code-section"><!></div> <p>This is especially useful if you are tracing an unfamiliar code, you can quickly get a call stack that leads up to the current condition.</p> <p>After tracing through the call stack, I ended up at the line where the <code class="inline">terser-webpack-plugin</code> calls the terser, and when I logged out the error, it shows:</p> <div class="code-section"><!></div> <p>So familiar! After an hour of tracing and debugging, I ended up at the same place.</p> <p><strong>Note:</strong> the error must have lost somewhere from the terser to the actual print out of <code class="inline">terser-webpack-plugin</code>, it might have fixed in a later version of <code class="inline">terser-webpack-plugin</code>, but I'm not sure of it yet. Anyone interested can help check.</p></section> <section><h2><a href="#act-iii-terser" id="act-iii-terser">Act III - Terser</a></h2> <p>The circumstances left me with no choice. I needed to face the cryptic minified code.</p> <p>Luckily VSCode still able to open the huge minified file, and able to set the cursor to the right line and column:</p> <div class="code-section"><!></div> <p>(By the way, in the minified code, all the code is in one line. ü§¶‚Äç‚ôÇÔ∏è)</p> <p>Well, this may seem like the right place to throw the <code class="inline">"Cannot read property 'name' of undefined"</code> error.</p> <p>To understand what is going on in this line, I cloned <a href="https://github.com/terser/terser" rel="nofollow">terser</a>, checked out to the version tag that was installed in our codebase, and tried to figure out where that line was in the original code.</p> <p><strong>Tip:</strong> String, property and method names are usually the best marker to trace a <a href="http://lisperator.net/uglifyjs/mangle" rel="nofollow">mangled code</a>. Even though all the variables have mangled into a single character variable name, you can still clearly see the method <code class="inline">has_directive()</code> and the string <code class="inline">"use strict"</code>.</p> <p>Conversely, please don't write long windy property / method names, it doesn't mangle well.</p> <p>So I global searched the keyword <code class="inline">has_directive("use strict")</code> and landed with a small number of results, which I looked through every one of them and ended up with the following line:</p> <div class="code-section"><!></div> <p>Which I was and still am clueless of what this code was trying to do.</p> <p>So I did the most reasonable thing, add a <code class="inline">console.log(node)</code>.</p> <div class="code-section"><!></div> <p>I found out that the <code class="inline">node</code> is an object, that does not have a property <code class="inline">key</code>, which explains the error. And <code class="inline">node</code> has a property call <code class="inline">name</code> that has a value <code class="inline">"foobar"</code>, which I assumed is a variable name in our codebase. Luckily <code class="inline">foobar</code> wasn't commonly used in our codebase, and I managed to find only 1 instance of it, and astonishingly, the code was last changed 1 year ago!</p> <p>So Terser just decided to break, without a sign, on a line of code that was written 1 year ago. This is the life of a programmer.</p></section> <section><h2><a href="#final-act-the-resolution" id="final-act-the-resolution">Final Act - The Resolution</a></h2> <p>I kind of concluded that the root cause was a Terser bug, (because I can't just change the code that wasn't touched for nearly 1 year for no good reason), so the obvious thing to do next was to figured out whether someone fixed it on Terser upstream.</p> <p>So, I checked out the master branch of Terser, found out the code has changed to</p> <div class="code-section"><!></div> <p><code class="inline">node.key</code> is checked to be existed before checking <code class="inline">node.key.name</code>. What a simple patch!</p> <p>The next thing I needed to figure out was when was this fix landed, whether I can upgrade it.</p> <p>The Terser in the codebase was one major version behind the latest Terser version, so, I was more reserved to upgrade to the latest version.</p> <p>The git blame for the line of code was for some code refactoring, so I went to Github to trace the blame.</p> <p><strong>Tip:</strong> Github blame has this very useful button, that allows you to view blame prior to the change.</p> <p><span style="display: block; position: relative; padding-top: 29.585%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Github: view blame prior to the change"/></picture></span></p> <p>A few blame traces later, I ended up with a commit that fixed the bug:</p> <blockquote><p><a href="https://github.com/terser/terser/pull/286" rel="nofollow">fix node.key crashing lib/compress by hytromo ¬∑ Pull Request #286 ¬∑ terser/terser</a></p></blockquote> <p>By looking at the MR merged date, I found that the commit was landed in between <a href="https://github.com/terser/terser/compare/v3.16.0...v3.17.0" rel="nofollow">v3.16.0 and v3.17.0</a>.</p> <p>v3.17.0 was a minor version bump for our codebase, so I assumed it has no breaking changes.</p> <p><code class="inline">terser</code> was installed as a dependency of <code class="inline">terser-webpack-plugin</code>, which we had no control on the terser version, so I added a resolution to our <code class="inline">package.json</code>:</p> <div class="code-section"><!></div> <p>After I upgraded terser, I build the code again.</p> <p>The build was successful! üéâ</p></section> <section><h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>As I was explaining all these to my colleague, I realised that should I upgraded the terser once I found out that it was a terser error, it would have fixed the bug as well. I wouldn't need to go through all these to end up in the same fix.</p> <p>Oh well. ü§∑‚Äç‚ôÇÔ∏è</p></section>`,1);function Ts($,g){const E=es(g,["children","$$slots","$$events","$$legacy"]);Q(g,!1),Z("blog",{image:is}),os(),ns($,as(()=>E,()=>C,{children:(B,cs)=>{var w=ps(),t=e(K(w),4),L=s(t);a(L,()=>`<pre class="prism language-"><code><span class="line">ERROR in bundle.xxxx.js from Terser</span>
<span class="line">undefined</span>
<span class="line"></span>
<span class="line">...</span>
<span class="line"></span>
<span class="line">Command failed with exit code 2</span>
<span class="line">Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.</span>
<span class="line">Error: Command failed: yarn build</span></code></pre>`),o(t);var r=e(t,6),l=e(s(r),4),O=s(l);a(O,()=>`<div class="filename">webpackConfig.prod.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// disable terser first</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// new TerserPlugin(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 	terserOptions: &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//     // ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//   &#125;,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// &#125;),</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`),o(l);var i=e(l,6),U=s(i);a(U,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">terser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;terser&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;fs&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;path&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(__dirname</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;dist/bundle.xxxx.js&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">terser</span><span style="color: var(--shiki-token-function)">.minify</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...terser options</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(output);</span></span></code></pre>`),o(i);var p=e(i,4),F=s(p);a(F,()=>`<pre class="prism language-"><code><span class="line">&#123;</span>
<span class="line">  &quot;error&quot;:</span>
<span class="line">  TypeError: Cannot read property &#39;name&#39; of undefined</span>
<span class="line">      at A.f (node_modules/terser/dist/bundle.js:44:146028)</span>
<span class="line">      at D (node_modules/terser/dist/bundle.js:44:2863)</span>
<span class="line">      at A (node_modules/terser/dist/bundle.js:44:146075)</span>
<span class="line">      at k (node_modules/terser/dist/bundle.js:44:146998)</span>
<span class="line">      at vn (node_modules/terser/dist/bundle.js:44:133003)</span>
<span class="line">      at node_modules/terser/dist/bundle.js:44:165250</span>
<span class="line">      at AST_BlockStatement.optimize (node_modules/terser/dist/bundle.js:44:121400)</span>
<span class="line">      at Ct.before (node_modules/terser/dist/bundle.js:44:121157)</span>
<span class="line">      at AST_BlockStatement.transform (node_modules/terser/dist/bundle.js:44:78200)</span>
<span class="line">      at node_modules/terser/dist/bundle.js:44:78849</span>
<span class="line">&#125;</span></code></pre>`),o(p);var f=e(p,10),W=s(f);a(W,()=>`<pre class="prism language-"><code><span class="line">...</span>
<span class="line">s) &#125; else if (u instanceof Se &amp;&amp; r === u.expression &amp;&amp; (p(e, t, i, u, o = n(o, u.property), a + 1,</span>
<span class="line">  s + 1), o)) return; a &gt; 0 || u instanceof Be &amp;&amp; r !== u.tail_node() || u instanceof S ||</span>
<span class="line">(t.direct_access = !0) &#125; e(F, u); var d = new qn(function (e) &#123; if (e instanceof Je) &#123; var n =</span>
<span class="line">e.definition(); n &amp;&amp; (e instanceof hn &amp;&amp; n.references.push(e), n.fixed = !1) &#125; &#125;); function h(e, n,</span>
<span class="line">t) &#123; this.inlined = !1; var r = e.safe_ids; return e.safe_ids = Object.create(null), i(e, t, this),</span>
<span class="line">n(), e.safe_ids = r, !0 &#125; function m(e, n, t) &#123; var r, o = this; return o.inlined = !1, a(e), i(e,</span>
<span class="line">t, o), !o.name &amp;&amp; (r = e.parent()) instanceof ke &amp;&amp; r.expression === o &amp;&amp; o.argnames.forEach(</span>
<span class="line">function (n, t) &#123; if (n.definition) &#123; var i = n.definition(); void 0 !== i.fixed || o.uses_arguments</span>
<span class="line">&amp;&amp; !e.has_directive(&quot;use strict&quot;) ? i.fixed = !1 : (i.fixed = function () &#123; return r.args[t] || v(kn, r)</span>
<span class="line">...</span></code></pre>`),o(f),n(4),o(r);var c=e(r,2),k=e(s(c),12),D=s(k);a(D,()=>'<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">file</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> from Terser&#92;n</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">err</span><span style="color: var(--shiki-color-text)">.message</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>'),o(k);var h=e(k,10),z=s(h);a(z,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">someFunction</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (someConditionThatLeadsToErrorLaterOn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(error);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(h);var b=e(h,6),G=s(b);a(G,()=>`<pre class="prism language-"><code><span class="line">&#123;</span>
<span class="line">  &quot;error&quot;:</span>
<span class="line">  TypeError: Cannot read property &#39;name&#39; of undefined</span>
<span class="line">      at A.f (node_modules/terser/dist/bundle.js:44:146028)</span>
<span class="line">      at D (node_modules/terser/dist/bundle.js:44:2863)</span>
<span class="line">      at A (node_modules/terser/dist/bundle.js:44:146075)</span>
<span class="line">      at k (node_modules/terser/dist/bundle.js:44:146998)</span>
<span class="line">      at vn (node_modules/terser/dist/bundle.js:44:133003)</span>
<span class="line">      at node_modules/terser/dist/bundle.js:44:165250</span>
<span class="line">      at AST_BlockStatement.optimize (node_modules/terser/dist/bundle.js:44:121400)</span>
<span class="line">      at Ct.before (node_modules/terser/dist/bundle.js:44:121157)</span>
<span class="line">      at AST_BlockStatement.transform (node_modules/terser/dist/bundle.js:44:78200)</span>
<span class="line">      at node_modules/terser/dist/bundle.js:44:78849</span>
<span class="line">&#125;</span></code></pre>`),o(b),n(4),o(c);var d=e(c,2),y=e(s(d),6),N=s(y);a(N,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> f </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">n</span><span style="color: var(--shiki-token-function)">.option</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;ecma&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">6</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">n</span><span style="color: var(--shiki-token-function)">.has_directive</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;use strict&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">?</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (e) &#123; </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">e</span><span style="color: var(--shiki-color-text)">.key</span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)">u </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">e</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)">u &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                                        </span><span style="color: var(--shiki-token-keyword)">^</span></span></code></pre>`),o(y);var v=e(y,14),P=s(v);a(P,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> diff </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">compressor</span><span style="color: var(--shiki-token-function)">.option</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;ecma&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">6</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">compressor</span><span style="color: var(--shiki-token-function)">.has_directive</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;use strict&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.key </span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)"> prop </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)"> prop;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)"> prop;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span></code></pre>`),o(v);var _=e(v,6),V=s(_);a(V,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> f </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">n</span><span style="color: var(--shiki-token-function)">.option</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;ecma&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">6</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">n</span><span style="color: var(--shiki-token-function)">.has_directive</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;use strict&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">?</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (e) &#123; </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">e</span><span style="color: var(--shiki-color-text)">.key) &#123; </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(e); &#125; </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">e</span><span style="color: var(--shiki-color-text)">.key</span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)">u</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">               </span><span style="color: var(--shiki-token-keyword)">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">e</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)">u &#125;</span></span></code></pre>`),o(_),n(4),o(d);var I=e(d,2),u=e(s(I),6),M=s(u);a(M,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> diff </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">compressor</span><span style="color: var(--shiki-token-function)">.option</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;ecma&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2015</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">compressor</span><span style="color: var(--shiki-token-function)">.has_directive</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;use strict&quot;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.key </span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)"> prop </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.key </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)"> prop);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.key </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">!=</span><span style="color: var(--shiki-color-text)"> prop;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`),o(u);var m=e(u,12),T=s(m),j=s(T),q=s(j),A=e(q);o(j),o(T),o(m);var R=e(m,12),J=s(R);a(J,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;resolution&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;terser&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;3.17.0&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(R),n(4),o(I),n(2),Y(()=>{x(q,"srcset",`${rs}, ${ls} 2x`),x(A,"src",S),x(A,"srcset",`${S}, ${ts} 2x`)}),ss(B,w)},$$slots:{default:!0}})),X()}export{Ts as component};
