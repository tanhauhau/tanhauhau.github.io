import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as g,g as m,d as f,b as u,f as w,s as o,e as s,a as b,r as n,n as _}from"../chunks/C2PHntuy.js";import{h as t}from"../chunks/C3QlhiH-.js";import{i as $}from"../chunks/BQOOHHT8.js";import{l as R,s as T}from"../chunks/gzNpScmH.js";import{B as C}from"../chunks/B1caYEk9.js";import{t as L}from"../chunks/C3bQ3Oc7.js";const p={title:"'g' flag in regex",tags:["regex"],description:"test and exec with `g`When having a Regex with `g` (global) flag, the regex instance will store some internal state about the last match.This happens with `regex.test()` and `regex.exec()`This is useful for the following match + while loop pattern:...",tableOfContents:[{link:"test-and-exec-with-g",title:"test and exec with  `g`"},{link:"related-links",title:"Related Links"}]},{title:D,tags:E,description:F,tableOfContents:G}=p;var j=u('<section><h2><a href="#test-and-exec-with-g" id="test-and-exec-with-g">test and exec with <code class="inline">g</code></a></h2> <p>When having a Regex with <code class="inline">g</code> (global) flag, the regex instance will store some internal state about the last match.</p> <p>This happens with <code class="inline">regex.test()</code> and <code class="inline">regex.exec()</code></p> <div class="code-section"><!></div> <p>This is useful for the following match + while loop pattern:</p> <div class="code-section"><!></div> <p><strong>Note the state is stored in the regex instance</strong>, using a different regex instance will not have this behavior:</p> <div class="code-section"><!></div></section> <section><h2><a href="#related-links" id="related-links">Related Links</a></h2> <ul><li><a href="https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex" rel="nofollow">https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex</a></li></ul></section>',1);function H(k,r){const h=R(r,["children","$$slots","$$events","$$legacy"]);g(r,!1),m("blog",{image:L}),$(),C(k,T(()=>h,()=>p,{children:(v,q)=>{var i=j(),l=w(i),a=o(s(l),6),y=s(a);t(y,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;car boats car&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 10, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// null</span></span></code></pre>`),n(a);var e=o(a,4),x=s(e);t(x,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> match;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> ((match </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence))) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">match</span><span style="color: var(--shiki-color-text)">.index);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),n(e);var c=o(e,4),d=s(c);t(d,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;car boats car&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`),n(c),n(l),_(2),b(v,i)},$$slots:{default:!0}})),f()}export{H as component};
