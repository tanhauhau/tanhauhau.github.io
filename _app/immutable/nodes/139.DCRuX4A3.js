import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as ss,g as os,d as as,b as ns,s,f as es,e as o,a as ts,r as a,n as e}from"../chunks/C2PHntuy.js";import{h as n}from"../chunks/C3QlhiH-.js";import{i as is}from"../chunks/BQOOHHT8.js";import{l as ls,s as rs}from"../chunks/gzNpScmH.js";import{B as ps}from"../chunks/B1caYEk9.js";import{t as cs}from"../chunks/C3bQ3Oc7.js";const F={title:"Webpack Additional Compilation Pass",date:"2020-02-20T08:00:00Z",lastUpdated:"2020-02-27T08:00:00Z",label:"blog",description:'Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires "double compilation" with webpack.The problemI am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it....',tableOfContents:[{link:"the-problem",title:"The problem"},{link:"the-1st-approach",title:"The 1st approach",nested:[{link:"updated-feb-27-2020",title:"Updated Feb 27, 2020"}]},{link:"the-2nd-approach",title:"The 2nd approach",nested:[{link:"updated-feb-27-2020-1",title:"Updated Feb 27, 2020"}]},{link:"the-3rd-approach",title:"The 3rd approach"},{link:"closing-notes",title:"Closing Notes",nested:[{link:"updated-feb-27-2020-2",title:"Updated Feb 27, 2020"}]}]},{title:gs,date:bs,lastUpdated:_s,label:Ss,description:Is,tableOfContents:Cs}=F;var ks=ns(`<p>Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires "double compilation" with webpack.</p> <section><h2><a href="#the-problem" id="the-problem">The problem</a></h2> <p>I am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it.</p> <p>The server-side rendering application that I worked on, has an endpoint that takes in request and respond with a partial HTML content and CSS files required for styling:</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <p>The application code itself uses <a href="https://expressjs.com/" rel="nofollow">Express</a> and <a href="https://reactjs.org/" rel="nofollow">React</a>:</p> <div class="code-section"><!></div> <p>Now, the problem is, how do I get the list of CSS files?</p> <p>The list of CSS files produced by the build is only available after I compile the application, but I need the information to be part of compiled code.</p> <p>The compiled code being part of the compilation, needs to contain information of the compilation.</p></section> <section><h2><a href="#the-1st-approach" id="the-1st-approach">The 1st approach</a></h2> <p>A naive solution at first is to use <a href="https://www.npmjs.com/package/webpack-manifest-plugin" rel="nofollow">Webpack Manifest Plugin</a> to get the compilation manifest, and in the code, import the manifest as json and consumes it:</p> <div class="code-section"><!></div> <p>Yet, the <code class="inline">./dist/webpack-manifest.json</code> is not available in the first place, before compiling the code.</p> <p>Since the <code class="inline">./dist/webpack-manifest.json</code> can only be available after build, maybe we can import it during runtime, using <a href="https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific" rel="nofollow"><strong>non_webpack_require</strong></a>. The difference between <code class="inline">require</code> and <code class="inline">__non_webpack_require__</code> is that the latter is webpack specific, which tells webpack to transform it to just pure <code class="inline">require()</code> expression, without bundling the required module:</p> <div class="code-section"><!></div> <p>If you scrutinize the code, you may wonder whether <code class="inline">./dist/webpack-manifest.json</code> is the correct relative path from the compiled code?</p> <p>Probably <code class="inline">./webpack-manifest.json</code> would be more accurate, if our output folder looks like this:</p> <div class="code-section"><!></div> <p>One can safely argue that, the approach above works and let's move on the next task. But, curiosity drives me to seek deeper for a more "elegant" solution, where one don't need <code class="inline">require('webpack-manifest.json')</code> in runtime, but that information is compiled into the code.</p></section> <section><h3><a href="#updated-feb-27-2020" id="updated-feb-27-2020">[Updated Feb 27, 2020]</a></h3> <p>Thanks to <a href="https://twitter.com/wSokra" rel="nofollow">@wSokra</a>'s <a href="https://twitter.com/wSokra/status/1230448421351444482" rel="nofollow">suggestion</a>, instead of using <code class="inline">__non_webpack_require__()</code>, you can use a normal import and declaring the manifest file as an external:</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <p>What this output is something similar to the following:</p> <div class="code-section"><!></div> <p>The reason we are using the relative path <code class="inline">./webpack-manifest.json</code> is that we are assuming the output folder looks like this:</p> <div class="code-section"><!></div> <p>You can read more about webpack externals from <a href="https://webpack.js.org/configuration/externals/" rel="nofollow">the webpack documentation</a>.</p></section> <section><h2><a href="#the-2nd-approach" id="the-2nd-approach">The 2nd approach</a></h2> <p>So, the next "intuitive" approach is to <a href="/webpack-plugin-main-template">write a custom template plugin</a>, that adds the webpack manifest on top of the main bundle, an example of the output:</p> <div class="code-section"><!></div> <p>In the source code, I will use the global variable <code class="inline">CSS_FILES</code>, and hopefully it will get defined by webpack, by adding <code class="inline">const CSS_FILES = ...</code> at the very top of the file.</p> <p>And to be extra careful, I have to make sure also that there's no variable <code class="inline">CSS_FILES</code> declared between the global scope and the current scope the variable is being used.</p> <div class="code-section"><!></div> <p>Apparently, this does not work at all. The compiled output shows:</p> <div class="code-section"><!></div> <p>After tracing through the code, I realised that I was ignorant of the sequence of execution of the <a href="https://webpack.js.org/api/compiler-hooks/" rel="nofollow">compiler hooks</a>.</p> <p>In the <a href="https://webpack.js.org/api/compiler-hooks/" rel="nofollow">docs for compiler hooks</a>, each hooks is executed in sequence:</p> <ul><li>...</li> <li>run</li> <li>...</li> <li>thisCompilation</li> <li>...</li> <li>emit</li> <li>afterEmit</li> <li>...</li></ul> <p>The webpack manifest plugin executes mainly <a href="https://github.com/danethurber/webpack-manifest-plugin/blob/63d3ee2/lib/plugin.js#L255" rel="nofollow">during the <code class="inline">emit</code> phase</a>, right before webpack writes all the assets into the output directory. And, we are modifying the template source in the <code class="inline">thisCompilation</code> phase, which is way before the <code class="inline">emit</code> phase. That's why <code class="inline">this.manifest</code> property is still undefined at the time of execution.</p> <div class="code-section"><!></div> <p>Upon reading the code fot he <code class="inline">webpack-manifest-plugin</code>, I realised that during the <code class="inline">emit</code> phase, I can access to the <code class="inline">compilation.assets</code>, and so, I could modifying the source for the assets during that time!</p> <div class="code-section"><!></div> <p>Apparently that works, but I wonder whether is it a good practice to modifying the source of an asset during the <code class="inline">emit</code> phase? ðŸ¤”</p> <p>And, if you noticed, I need to append the <code class="inline">const CSS_FILES = [...]</code> to every file, that's because I have no idea in which file <code class="inline">CSS_FILES</code> is referenced. And because I declared it using <code class="inline">const</code>, it only exists within the file's scope, so I have to redeclare it all the other files.</p></section> <section><h3><a href="#updated-feb-27-2020-1" id="updated-feb-27-2020-1">[Updated Feb 27, 2020]</a></h3> <p>According to <a href="https://twitter.com/evilebottnawi" rel="nofollow">@evilebottnawi</a> that this is not appropriate</p> <blockquote class="twitter-tweet"><p lang="en" dir="ltr">A lot of plugin uses \`compiler.hooks.emit\` for emitting new assets, it is invalid. Ideally plugins should use \`compilation.hooks.additionalAssets\` for adding new assets.</p>&mdash; evilebottnawi (@evilebottnawi) <a href="https://twitter.com/evilebottnawi/status/1230417598677954560?ref_src=twsrc%5Etfw">February 20, 2020</a></blockquote></section> <section><h2><a href="#the-3rd-approach" id="the-3rd-approach">The 3rd approach</a></h2> <p>I was still not convinced that this is the best I could do, so I continued looking around webpack's doc. I found a particular compilation hooks, <a href="https://webpack.js.org/api/compilation-hooks/#needadditionalpass" rel="nofollow"><code class="inline">needAdditionalPass</code></a>, which seems useful. It says, <em>"Called to determine if an asset needs to be processed further after being emitted."</em>.</p> <p>So, if I return <code class="inline">true</code> in the <code class="inline">needAdditionalPass</code>, webpack will re<code class="inline">compile</code> the asset again:</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <p>Note that using <code class="inline">needAdditionalPass</code> will cause the build time to roughly doubled!</p> <p>You may argue that why do we need to rerun the <code class="inline">compilation</code> process again, isn't the end result can be equally achieved by modifying the assets source in the <code class="inline">emit</code> phase?</p> <p>Well, that's because, I realised I could make use <a href="https://github.com/webpack/webpack/blob/d426b6c/lib/DefinePlugin.js" rel="nofollow">some of the code from the <code class="inline">DefinePlugin</code></a>, which could replace the usage of <code class="inline">CSS_FILES</code> throughout the code. That way, I don't have to prefix every file with <code class="inline">const CSS_FILES = ...</code>.</p> <p>DefinePlugin uses something called <a href="https://webpack.js.org/api/parser/" rel="nofollow"><strong>JavaScriptParser Hooks</strong></a>, which you can rename a variable through <code class="inline">canRename</code> and <code class="inline">identifier</code> hooks or replace an expression through the <code class="inline">expression</code> hook:</p> <div class="code-section"><!></div> <p>The complete code can be found in <a href="https://gist.github.com/tanhauhau/2dc6cc376fd190e05d14901b984c7fc1" rel="nofollow">this gist</a>.</p> <p>An example of the compiled output:</p> <div class="code-section"><!></div></section> <section><h2><a href="#closing-notes" id="closing-notes">Closing Notes</a></h2> <p>The compile output for the 3rd approach seemed to be better (more precise?) than the other, yet I am not entirely sure using a <code class="inline">needAdditionalPass</code> is the right way of going about it.</p> <p>So, <a href="https://twitter.com/lihautan" rel="nofollow">let me know</a> if you have any thoughts or suggestions, yea?</p></section> <section><h3><a href="#updated-feb-27-2020-2" id="updated-feb-27-2020-2">[Updated Feb 27, 2020]</a></h3> <p>You can read <a href="https://twitter.com/lihautan/status/1230301241533583360" rel="nofollow">the discussions that's happening on Twitter</a>:</p> <blockquote class="twitter-tweet"><p lang="en" dir="ltr">Need some suggestions and inputs from <a href="https://twitter.com/webpack?ref_src=twsrc%5Etfw">@webpack</a> masters, I&#39;ve written the problem and approaches that I&#39;ve taken over here: <a href="https://t.co/gLsPG9Joeq">https://t.co/gLsPG9Joeq</a>, still I&#39;m not sure I am doing it right ðŸ™ˆ<a href="https://twitter.com/wSokra?ref_src=twsrc%5Etfw">@wSokra</a> <a href="https://twitter.com/evilebottnawi?ref_src=twsrc%5Etfw">@evilebottnawi</a></p>&mdash; Tan Li Hau (@lihautan) <a href="https://twitter.com/lihautan/status/1230301241533583360?ref_src=twsrc%5Etfw">February 20, 2020</a></blockquote></section>`,1);function js(T,_){const E=ls(_,["children","$$slots","$$events","$$legacy"]);ss(_,!1),os("blog",{image:cs}),is(),ps(T,rs(()=>E,()=>F,{children:(A,hs)=>{var S=ks(),t=s(es(S),2),i=s(o(t),6),L=o(i);n(L,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;css&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;http://cdn/assets/style.xxx.css&quot;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;html&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&lt;div class=&quot;container_xyz&quot;&gt;Hello world&lt;/div&gt;&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(i);var l=s(i,2),W=o(l);n(W,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: http://cdn/assets/style.xxx.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.container_xyz</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">font-family</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Comic Sans&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(l);var I=s(l,4),$=o(I);n($,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> express </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;express&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; renderToStaticMarkup &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-dom/server&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> styles </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./app.scss&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">express</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;</span><span style="color: var(--shiki-token-constant)">styles</span><span style="color: var(--shiki-color-text)">.container&#125;&gt;Hello world&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">htmlContent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">renderToStaticMarkup</span><span style="color: var(--shiki-color-text)">(app);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.listen</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`),a(I),e(6),a(t);var r=s(t,2),p=s(o(r),4),N=o(p);n(N,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> webpackManifest </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> cssFiles</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`),a(p);var c=s(p,6),O=o(c);n(O,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpackManifest</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__non_webpack_require__</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> cssFiles</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`),a(c);var C=s(c,6),U=o(C);n(U,()=>`<pre class="prism language-"><code><span class="line">dist</span>
<span class="line">â”œâ”€â”€ webpack-manifest.json</span>
<span class="line">â””â”€â”€ bundle.js  // &lt;-- the main output bundle</span></code></pre>`),a(C),e(2),a(r);var k=s(r,2),h=s(o(k),4),H=o(h);n(H,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> webpackManifest </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`),a(h);var y=s(h,2),J=o(y);n(J,()=>`<div class="filename">webpack.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  externals</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;commonjs2 ./webpack-manifest.json&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(y);var v=s(y,4),R=o(v);n(R,()=>`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpackManifest</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`),a(v);var j=s(v,4),D=o(j);n(D,()=>`<pre class="prism language-"><code><span class="line">dist</span>
<span class="line">â”œâ”€â”€ bundle.js  // &lt;-- the main output bundle</span>
<span class="line">â””â”€â”€ webpack-manifest.json // &lt;-- relative to bundle.js</span></code></pre>`),a(j),e(2),a(k);var d=s(k,2),u=s(o(d),4),z=o(u);n(z,()=>`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// added by template plugin</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;http://cdn/assets/style.xxx.css&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// END added by template plugin</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...the main bundle</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`),a(u);var x=s(u,6),Y=o(x);n(Y,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ManifestPlugin</span><span style="color: var(--shiki-color-text)">(manifestOptions)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get manifest from &#96;webpack-manifest-plugin&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-token-function)">.getCompilerHooks</span><span style="color: var(--shiki-color-text)">(compiler).</span><span style="color: var(--shiki-token-constant)">afterEmit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      manifest </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// see https://lihautan.com/webpack-plugin-main-template</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// on writing template plugin</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">render</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; chunk</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> chunkGraph &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;const CSS_FILES = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(prefix</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(x);var m=s(x,4),B=o(m);n(B,()=>`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...continue with bundle.js</span></span></code></pre>`),a(m);var f=s(m,10),G=o(f);n(G,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompliation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// too late!</span></span></code></pre>`),a(f);var q=s(f,4),Z=o(q);n(Z,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ManifestPlugin</span><span style="color: var(--shiki-color-text)">(manifestOptions)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get manifest from &#96;webpack-manifest-plugin&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-token-function)">.getCompilerHooks</span><span style="color: var(--shiki-color-text)">(compiler).</span><span style="color: var(--shiki-token-constant)">afterEmit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      manifest </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">emit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;const CSS_FILES = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.endsWith</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;.js&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">continue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets[file] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          prefix</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets[file]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(q),e(4),a(d);var P=s(d,4),w=s(o(P),6),K=o(w);n(K,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">needAdditionalPass</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if it is always true, will lead to infinite loop!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(w);var g=s(w,2),Q=o(g);n(Q,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompliation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// too late!</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">needAddtionalPass</span><span style="color: var(--shiki-color-text)"> (return </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// to start the compilation again</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompilation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// now &#96;this.manifest&#96; is available</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ... will continue run through every stages again</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`),a(g);var b=s(g,10),V=o(b);n(V,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      (compilation</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; normalModuleFactory &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">normalModuleFactory</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-color-text)">.parser</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;javascript/auto&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parser </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-color-text)">.expression</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;CSS_FILES&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> expr </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ParserHelpers</span><span style="color: var(--shiki-token-function)">.toConstantDependency</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  parser</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                )(expr);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(b);var M=s(b,6),X=o(M);n(X,()=>`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// replaced via parser hooks</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;http://cdn/assets/style.xxx.css&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`),a(M),a(P),e(4),ts(A,S)},$$slots:{default:!0}})),as()}export{js as component};
