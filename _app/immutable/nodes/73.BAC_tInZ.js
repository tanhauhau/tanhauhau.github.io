import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as m,g,d as w,b as f,s,f as b,a as S,e as o,r as a,n as C}from"../chunks/C2PHntuy.js";import{h as n}from"../chunks/C3QlhiH-.js";import{i as P}from"../chunks/BQOOHHT8.js";import{l as _,s as $}from"../chunks/gzNpScmH.js";import{B as j}from"../chunks/B1caYEk9.js";import{t as W}from"../chunks/C3bQ3Oc7.js";const c={title:"The CSS Podcast: 028: Houdini Series: Paint",tags:["css houdini","The CSS Podcast"],description:"workletpaint workleta.k.a CSS Paint APIallow developers to define canvas like custom painting functions, that can be used directly in CSS as background, border, ...workletself-contained, can be run off the main thread..."},{title:Z,tags:G,description:L}=c;var I=f(`<p>worklet</p> <p>paint worklet</p> <ul><li>a.k.a CSS Paint API</li> <li>allow developers to define canvas like custom painting functions, that can be used directly in CSS as background, border, ...</li></ul> <p>worklet</p> <ul><li><p>self-contained, can be run off the main thread</p></li> <li><p>all worklets are workers, worklet is more specific workers</p></li> <li><p>worklet have a tight limited contract between the script and the application that created it</p></li> <li><p>limited in the hopes of doing something powerful</p></li> <li><p>worklet scripts are always invoked in their own sandbox, with their allocated computing power, allow them to be created and destroyed very quickly</p></li> <li><p>secure, served and run from a https server</p></li> <li><p>will run off the main thread</p></li> <li><p>browser will forward the request found in the CSS for background paint job from a custom houdini worklet, worklet will run in it's own thread, and will return a painted canvas for the browser to use</p></li> <li><p>secure, fast, off-the-main thread</p></li></ul> <p>gotcha: if run locally, need to serve from a local server</p> <p>registerPaint(name, workletClass)</p> <div class="code-section"><!></div> <p>paint(ctx, geometry, property, arguments)</p> <ul><li>ctx <ul><li>akin to the canvas context, <code class="inline">canvas.getContext('2d')</code></li> <li>same full API as canvas context, <code class="inline">ctx.fill()</code></li></ul></li> <li>geometry <ul><li>height and width of your element</li> <li><code class="inline">geometry.height</code>, <code class="inline">geometry.width</code></li></ul></li> <li>property <ul><li>pull in input properties, custom properties in CSS, and used them as values to customise the worklet</li> <li>can use together with CSS Properties and Values API</li></ul></li></ul> <div class="code-section"><!></div> <ul><li>arguments <ul><li>don't have to share the same property if using the multiple paint worklet on the same element</li> <li>can give different argument for each of the paint worklet</li></ul></li></ul> <div class="code-section"><!></div> <div class="code-section"><!></div> <ul><li>take note if using <code class="inline">Math.random()</code> within paint() to paint a random background</li> <li>background will change when you are typing, or resizing, because it repaints</li> <li><a href="https://jakearchibald.com/2020/css-paint-predictably-random/" rel="nofollow">https://jakearchibald.com/2020/css-paint-predictably-random/</a></li></ul> <p>PIZZA NIGHT</p>`,1);function N(k,r){const h=_(r,["children","$$slots","$$events","$$legacy"]);m(r,!1),g("blog",{image:W}),P(),j(k,$(()=>h,()=>c,{children:(y,A)=>{var i=I(),t=s(b(i),14),v=o(t);n(v,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 1️⃣ define the worklet class</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CheckerboardPainter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> geometry</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> property</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...    </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 2️⃣ register the worklet: registerPaint(name, workletClass)</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">registerPaint</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;checkerboard&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> CheckerboardPaint);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ---------------------</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 3️⃣ add worklet</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">paintWorklet</span><span style="color: var(--shiki-token-function)">.addModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;worklet.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.css</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 4️⃣ use the paint worklet</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">li &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(checkerboard);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  border</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(checkerboard);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(t);var e=s(t,6),u=o(e);n(u,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SuperUnderlinePainter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// return an array of input properties</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">inputProperties</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineWidth&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineColor&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> geometry</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> properties) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get the property value from CSS</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineWidth</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">properties</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineWidth&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineColor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">properties</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineColor&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// use them to paint</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.fillStyle </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> underlineColor;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.fillRect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> underlineWidth);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.css</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">li &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">underlineWidth</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">underlineColor</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> red;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(super</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">underline);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(e);var l=s(e,4),d=o(l);n(d,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SuperUnderlinePainter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// return an array of input argument types</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">inputArguments</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;number&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// underline width</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;color&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// underline color</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> geometry</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> properties</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get the argument value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">underlineWidth</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineColor</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> args;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// use them to paint</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.fillStyle </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineColor</span><span style="color: var(--shiki-color-text)">.cssText;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.fillRect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineWidth</span><span style="color: var(--shiki-color-text)">.value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.css</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">li &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(super</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">underline</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> red);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(l);var p=s(l,2),x=o(p);n(x,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Painter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    define if alphatransparency is allowed</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">contextOptions</span><span style="color: var(--shiki-color-text)">() &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; alpha</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(p),C(4),S(y,i)},$$slots:{default:!0}})),w()}export{N as component};
