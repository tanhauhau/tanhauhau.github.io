import{s as ua,d as dn,e as da,f as Qn,n as xa}from"../chunks/scheduler.D6VJxl8L.js";import{S as ma,i as Sa,m as fa,n as ga,o as Ca,t as _a,a as wa,p as Ma,e as o,s as i,H as h,c as t,d as c,q as v,h as r,r as y,g as a,u,j as p,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as Ta,a as Zn}from"../chunks/code-snippet.Gym6WUAG.js";import{B as ba}from"../chunks/BlogLayout.BTH3PMCG.js";import{t as Va}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function Ha(I){let l,d,w='<a href="#css-typed-object-model-typed-om" id="css-typed-object-model-typed-om">CSS Typed Object Model (Typed OM)</a>',H,k,m="<li>CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string.</li> <li>Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch.</li>",U,O,ms,na=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// browser needs to parse the string to understand and use it</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;5px&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// browser understands and use the value as 5px</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ws,P,xn="<li>Built-in error handling. You can&#39;t provide invalid value to a type.</li>",Ys,N,Ss,aa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// TypeError: Failed to set, invalid type for property</span></span></code></pre>`,Fs,D,mn="<li>Rather than manipulating raw string, developer can create / transform CSS in a meaningful object</li>",Xs,z,fs,oa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_5px</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 5px</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_15px</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_5px</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 15px;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _15px;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &lt;div style=&quot;height: 15px;&quot;&gt;&lt;/div&gt;</span></span></code></pre>`,Gs,j,Sn="<li>API based on functional programming concept</li> <li>To check browser support Typed OM, currently (21 Nov 2020) supported in Safari Tech Preview &amp; Chromium</li>",Qs,$,gs,ta=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// checking browser support</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-color-text)">.number) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// üòç browser supports Typed OM!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cs,M,A,fn='<a href="#computedstylemap" id="computedstylemap">computedStyleMap</a>',Zs,K,_s,ea=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.computedStyleMap</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Specification: CSSUnitValue &#123; value: 2, unit: &#39;rem&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Chrome: CSSUnitValue &#123; value: 32, unit: &#39;px&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.getComputedStyle</span><span style="color: var(--shiki-color-text)">(element).fontSize);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &quot;32px&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ws,x,R,gn='<a href="#attributestylemap" id="attributestylemap">attributeStyleMap</a>',sn,B,Cn="<li>parse, modify inline styles</li>",nn,J,Ms,la=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.attributeStyleMap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 2, unit: &#39;rem&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;height&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;font-size: 2rem; height: 10px;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background-image&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;linear-gradient(yellow, green)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background-image&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;linear-gradient(to bottom, blue, red)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//   style=&quot;background-image: linear-gradient(yellow, green), </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//                      linear-gradient(to bottom, blue, red)&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.delete</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;opacity&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// false</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,an,W,Ts,ia=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &#96;attributeStyleMap&#96; only gets inline style</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.computedStyleMap</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSStyleValue &#123; /* red */ &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">#app</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,bs,L,_n='<h2><a href="#types-of-cssstylevalue" id="types-of-cssstylevalue">Types of CSSStyleValue</a></h2> <ul><li>CSSImageValue</li> <li>CSSKeywordValue</li> <li>CSSNumericValue</li> <li>CSSPositionValue</li> <li>CSSTransformValue</li> <li>CSSUnparsedValue</li></ul>',Vs,T,Y,wn='<a href="#create-cssstylevalue" id="create-cssstylevalue">create CSSStyleValue</a>',on,F,Hs,ra=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;32px&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 2, unit: &#39;px&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;transform&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;translate3d(10px, 20px, 30px) scale(1.5)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">/* </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">CSSTransformValue &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  0: CSSTranslate &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    is2D: false</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    x: CSSUnitValue &#123; value: 10, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    y: CSSUnitValue &#123; value: 20, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    z: CSSUnitValue &#123; value: 30, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  1: CSSScale &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    is2D: true</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    x: CSSUnitValue &#123; value: 1.5, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    y: CSSUnitValue &#123; value: 1.5, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    z: CSSUnitValue &#123; value: 1, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">*/</span></span></code></pre>`,Ls,q,Mn='<h3><a href="#cssimagevalue" id="cssimagevalue">CSSImageValue</a></h3> <ul><li>does not cover <code class="inline">linear-gradient</code></li></ul>',qs,S,X,Tn='<a href="#csskeywordvalue" id="csskeywordvalue">CSSKeywordValue</a>',tn,G,bn='<li><code class="inline">display: none</code>, <code class="inline">none</code> is a CSSKeywordValue</li>',en,Q,Es,pa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;display&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;none&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSKeywordValue &#123; value: &#39;none&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keywordValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSKeywordValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;flex&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSKeywordValue &#123; value: &#39;flex&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">keywordValue</span><span style="color: var(--shiki-color-text)">.value;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &#39;flex&#39;</span></span></code></pre>`,Is,f,Z,Vn='<a href="#cssnumericvalue" id="cssnumericvalue">CSSNumericValue</a>',ln,ss,Hn="<li>CSSNumericValue has a few subclasses, eg: CSSUnitValue, CSSMathValue</li>",rn,ns,Us,ca=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Convert units</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">48</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.to</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;in&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 0.5, unit: &#39;in&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">48</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.to</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;rem&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Error</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Cannot transform absolute unit to relative unit</span></span></code></pre>`,Os,g,as,Ln='<a href="#cssmathvalue" id="cssmathvalue">CSSMathValue</a>',pn,os,qn="<li>CSSMathNegate, CSSMathMin, CSSMathMax, CSSMathSum, CSSMathProduct, CSSMathInvert</li>",cn,ts,Ps,ka=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSMathSum</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 15px</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;width&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSMathMax</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.rem</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">30</span><span style="color: var(--shiki-color-text)">)));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &lt;div style=&quot;width: max(10rem, 30px)&quot;&gt;&lt;/div&gt;</span></span></code></pre>`,Ns,b,es,En='<a href="#csspositionvalue" id="csspositionvalue">CSSPositionValue</a>',kn,ls,Ds,va=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSPositionValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">20</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.x; </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 20, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.y; </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 50, unit: &#39;px&#39; &#125;</span></span></code></pre>`,zs,C,is,In='<a href="#csstransformvalue" id="csstransformvalue">CSSTransformValue</a>',vn,rs,Un="<li>CSSTranslate, CSSScale, CSSRotate, CSSSkew, CSSSkewX, CSSSkewY, CSSPerspective, CSSMatrixComponent</li>",hn,ps,js,ha=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transformValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;transform&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;translate3d(10px, 20px, 30px) scale(1.5)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// iterate through each transformation</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> transformValue) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(transform);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSTranslate &#123; ... &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSScale &#123; ... &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// get DOMMatrix out of the transformValue</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">transformValue</span><span style="color: var(--shiki-token-function)">.toMatrix</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// DOMMatrix¬†&#123; a: 1.5, b: 0, c: 0, ... &#125;</span></span></code></pre>`,$s,_,cs,On='<a href="#cssunparsedvalue" id="cssunparsedvalue">CSSUnparsedValue</a>',yn,ks,Pn="<li>CSSCustomProperty, that is not Houdini Property</li> <li>the value is parsed as string</li>",un,vs,As,ya=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--length&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSUnparsedValue &#123; 0: 3px &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;--length: 3px;&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Ks,E,Nn='<h3><a href="#references" id="references">References</a></h3> <ul><li>Specifications <a href="https://www.w3.org/TR/css-typed-om-1/" rel="nofollow">https://www.w3.org/TR/css-typed-om-1/</a></li> <li>MDN <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API</a></li> <li>caniuse <code class="inline">attributeStyleMap</code> <a href="https://caniuse.com/mdn-api_element_attributestylemap" rel="nofollow">https://caniuse.com/mdn-api_element_attributestylemap</a></li> <li>caniuse <code class="inline">computedStyleMap</code> <a href="https://caniuse.com/mdn-api_element_computedstylemap" rel="nofollow">https://caniuse.com/mdn-api_element_computedstylemap</a></li></ul>';return{c(){l=o("section"),d=o("h2"),d.innerHTML=w,H=i(),k=o("ul"),k.innerHTML=m,U=i(),O=o("div"),ms=new h(!1),Ws=i(),P=o("ul"),P.innerHTML=xn,Ys=i(),N=o("div"),Ss=new h(!1),Fs=i(),D=o("ul"),D.innerHTML=mn,Xs=i(),z=o("div"),fs=new h(!1),Gs=i(),j=o("ul"),j.innerHTML=Sn,Qs=i(),$=o("div"),gs=new h(!1),Cs=i(),M=o("section"),A=o("h2"),A.innerHTML=fn,Zs=i(),K=o("div"),_s=new h(!1),ws=i(),x=o("section"),R=o("h2"),R.innerHTML=gn,sn=i(),B=o("ul"),B.innerHTML=Cn,nn=i(),J=o("div"),Ms=new h(!1),an=i(),W=o("div"),Ts=new h(!1),bs=i(),L=o("section"),L.innerHTML=_n,Vs=i(),T=o("section"),Y=o("h3"),Y.innerHTML=wn,on=i(),F=o("div"),Hs=new h(!1),Ls=i(),q=o("section"),q.innerHTML=Mn,qs=i(),S=o("section"),X=o("h3"),X.innerHTML=Tn,tn=i(),G=o("ul"),G.innerHTML=bn,en=i(),Q=o("div"),Es=new h(!1),Is=i(),f=o("section"),Z=o("h3"),Z.innerHTML=Vn,ln=i(),ss=o("ul"),ss.innerHTML=Hn,rn=i(),ns=o("div"),Us=new h(!1),Os=i(),g=o("section"),as=o("h3"),as.innerHTML=Ln,pn=i(),os=o("ul"),os.innerHTML=qn,cn=i(),ts=o("div"),Ps=new h(!1),Ns=i(),b=o("section"),es=o("h3"),es.innerHTML=En,kn=i(),ls=o("div"),Ds=new h(!1),zs=i(),C=o("section"),is=o("h3"),is.innerHTML=In,vn=i(),rs=o("ul"),rs.innerHTML=Un,hn=i(),ps=o("div"),js=new h(!1),$s=i(),_=o("section"),cs=o("h3"),cs.innerHTML=On,yn=i(),ks=o("ul"),ks.innerHTML=Pn,un=i(),vs=o("div"),As=new h(!1),Ks=i(),E=o("section"),E.innerHTML=Nn,this.h()},l(n){l=t(n,"SECTION",{});var e=c(l);d=t(e,"H2",{"data-svelte-h":!0}),v(d)!=="svelte-vafblm"&&(d.innerHTML=w),H=r(e),k=t(e,"UL",{"data-svelte-h":!0}),v(k)!=="svelte-hut1xl"&&(k.innerHTML=m),U=r(e),O=t(e,"DIV",{class:!0});var Dn=c(O);ms=y(Dn,!1),Dn.forEach(a),Ws=r(e),P=t(e,"UL",{"data-svelte-h":!0}),v(P)!=="svelte-1maavvv"&&(P.innerHTML=xn),Ys=r(e),N=t(e,"DIV",{class:!0});var zn=c(N);Ss=y(zn,!1),zn.forEach(a),Fs=r(e),D=t(e,"UL",{"data-svelte-h":!0}),v(D)!=="svelte-1xgx8gh"&&(D.innerHTML=mn),Xs=r(e),z=t(e,"DIV",{class:!0});var jn=c(z);fs=y(jn,!1),jn.forEach(a),Gs=r(e),j=t(e,"UL",{"data-svelte-h":!0}),v(j)!=="svelte-a4ghjo"&&(j.innerHTML=Sn),Qs=r(e),$=t(e,"DIV",{class:!0});var $n=c($);gs=y($n,!1),$n.forEach(a),e.forEach(a),Cs=r(n),M=t(n,"SECTION",{});var Rs=c(M);A=t(Rs,"H2",{"data-svelte-h":!0}),v(A)!=="svelte-k3zz02"&&(A.innerHTML=fn),Zs=r(Rs),K=t(Rs,"DIV",{class:!0});var An=c(K);_s=y(An,!1),An.forEach(a),Rs.forEach(a),ws=r(n),x=t(n,"SECTION",{});var V=c(x);R=t(V,"H2",{"data-svelte-h":!0}),v(R)!=="svelte-p57h9t"&&(R.innerHTML=gn),sn=r(V),B=t(V,"UL",{"data-svelte-h":!0}),v(B)!=="svelte-i0o089"&&(B.innerHTML=Cn),nn=r(V),J=t(V,"DIV",{class:!0});var Kn=c(J);Ms=y(Kn,!1),Kn.forEach(a),an=r(V),W=t(V,"DIV",{class:!0});var Rn=c(W);Ts=y(Rn,!1),Rn.forEach(a),V.forEach(a),bs=r(n),L=t(n,"SECTION",{"data-svelte-h":!0}),v(L)!=="svelte-104amsv"&&(L.innerHTML=_n),Vs=r(n),T=t(n,"SECTION",{});var Bs=c(T);Y=t(Bs,"H3",{"data-svelte-h":!0}),v(Y)!=="svelte-12iarlf"&&(Y.innerHTML=wn),on=r(Bs),F=t(Bs,"DIV",{class:!0});var Bn=c(F);Hs=y(Bn,!1),Bn.forEach(a),Bs.forEach(a),Ls=r(n),q=t(n,"SECTION",{"data-svelte-h":!0}),v(q)!=="svelte-1kjcyzw"&&(q.innerHTML=Mn),qs=r(n),S=t(n,"SECTION",{});var hs=c(S);X=t(hs,"H3",{"data-svelte-h":!0}),v(X)!=="svelte-d5qaov"&&(X.innerHTML=Tn),tn=r(hs),G=t(hs,"UL",{"data-svelte-h":!0}),v(G)!=="svelte-ld7xmt"&&(G.innerHTML=bn),en=r(hs),Q=t(hs,"DIV",{class:!0});var Jn=c(Q);Es=y(Jn,!1),Jn.forEach(a),hs.forEach(a),Is=r(n),f=t(n,"SECTION",{});var ys=c(f);Z=t(ys,"H3",{"data-svelte-h":!0}),v(Z)!=="svelte-1rb9z7b"&&(Z.innerHTML=Vn),ln=r(ys),ss=t(ys,"UL",{"data-svelte-h":!0}),v(ss)!=="svelte-1a288gp"&&(ss.innerHTML=Hn),rn=r(ys),ns=t(ys,"DIV",{class:!0});var Wn=c(ns);Us=y(Wn,!1),Wn.forEach(a),ys.forEach(a),Os=r(n),g=t(n,"SECTION",{});var us=c(g);as=t(us,"H3",{"data-svelte-h":!0}),v(as)!=="svelte-p2d9cs"&&(as.innerHTML=Ln),pn=r(us),os=t(us,"UL",{"data-svelte-h":!0}),v(os)!=="svelte-103f0vp"&&(os.innerHTML=qn),cn=r(us),ts=t(us,"DIV",{class:!0});var Yn=c(ts);Ps=y(Yn,!1),Yn.forEach(a),us.forEach(a),Ns=r(n),b=t(n,"SECTION",{});var Js=c(b);es=t(Js,"H3",{"data-svelte-h":!0}),v(es)!=="svelte-13mym93"&&(es.innerHTML=En),kn=r(Js),ls=t(Js,"DIV",{class:!0});var Fn=c(ls);Ds=y(Fn,!1),Fn.forEach(a),Js.forEach(a),zs=r(n),C=t(n,"SECTION",{});var ds=c(C);is=t(ds,"H3",{"data-svelte-h":!0}),v(is)!=="svelte-vtfo56"&&(is.innerHTML=In),vn=r(ds),rs=t(ds,"UL",{"data-svelte-h":!0}),v(rs)!=="svelte-js8hxj"&&(rs.innerHTML=Un),hn=r(ds),ps=t(ds,"DIV",{class:!0});var Xn=c(ps);js=y(Xn,!1),Xn.forEach(a),ds.forEach(a),$s=r(n),_=t(n,"SECTION",{});var xs=c(_);cs=t(xs,"H3",{"data-svelte-h":!0}),v(cs)!=="svelte-f22a0c"&&(cs.innerHTML=On),yn=r(xs),ks=t(xs,"UL",{"data-svelte-h":!0}),v(ks)!=="svelte-1th1qqw"&&(ks.innerHTML=Pn),un=r(xs),vs=t(xs,"DIV",{class:!0});var Gn=c(vs);As=y(Gn,!1),Gn.forEach(a),xs.forEach(a),Ks=r(n),E=t(n,"SECTION",{"data-svelte-h":!0}),v(E)!=="svelte-1ff83k4"&&(E.innerHTML=Nn),this.h()},h(){ms.a=null,u(O,"class","code-section"),Ss.a=null,u(N,"class","code-section"),fs.a=null,u(z,"class","code-section"),gs.a=null,u($,"class","code-section"),_s.a=null,u(K,"class","code-section"),Ms.a=null,u(J,"class","code-section"),Ts.a=null,u(W,"class","code-section"),Hs.a=null,u(F,"class","code-section"),Es.a=null,u(Q,"class","code-section"),Us.a=null,u(ns,"class","code-section"),Ps.a=null,u(ts,"class","code-section"),Ds.a=null,u(ls,"class","code-section"),js.a=null,u(ps,"class","code-section"),As.a=null,u(vs,"class","code-section")},m(n,e){p(n,l,e),s(l,d),s(l,H),s(l,k),s(l,U),s(l,O),ms.m(na,O),s(l,Ws),s(l,P),s(l,Ys),s(l,N),Ss.m(aa,N),s(l,Fs),s(l,D),s(l,Xs),s(l,z),fs.m(oa,z),s(l,Gs),s(l,j),s(l,Qs),s(l,$),gs.m(ta,$),p(n,Cs,e),p(n,M,e),s(M,A),s(M,Zs),s(M,K),_s.m(ea,K),p(n,ws,e),p(n,x,e),s(x,R),s(x,sn),s(x,B),s(x,nn),s(x,J),Ms.m(la,J),s(x,an),s(x,W),Ts.m(ia,W),p(n,bs,e),p(n,L,e),p(n,Vs,e),p(n,T,e),s(T,Y),s(T,on),s(T,F),Hs.m(ra,F),p(n,Ls,e),p(n,q,e),p(n,qs,e),p(n,S,e),s(S,X),s(S,tn),s(S,G),s(S,en),s(S,Q),Es.m(pa,Q),p(n,Is,e),p(n,f,e),s(f,Z),s(f,ln),s(f,ss),s(f,rn),s(f,ns),Us.m(ca,ns),p(n,Os,e),p(n,g,e),s(g,as),s(g,pn),s(g,os),s(g,cn),s(g,ts),Ps.m(ka,ts),p(n,Ns,e),p(n,b,e),s(b,es),s(b,kn),s(b,ls),Ds.m(va,ls),p(n,zs,e),p(n,C,e),s(C,is),s(C,vn),s(C,rs),s(C,hn),s(C,ps),js.m(ha,ps),p(n,$s,e),p(n,_,e),s(_,cs),s(_,yn),s(_,ks),s(_,un),s(_,vs),As.m(ya,vs),p(n,Ks,e),p(n,E,e)},p:xa,d(n){n&&(a(l),a(Cs),a(M),a(ws),a(x),a(bs),a(L),a(Vs),a(T),a(Ls),a(q),a(qs),a(S),a(Is),a(f),a(Os),a(g),a(Ns),a(b),a(zs),a(C),a($s),a(_),a(Ks),a(E))}}}function La(I){let l,d;const w=[I[0],sa];let H={$$slots:{default:[Ha]},$$scope:{ctx:I}};for(let k=0;k<w.length;k+=1)H=dn(H,w[k]);return l=new ba({props:H}),{c(){fa(l.$$.fragment)},l(k){ga(l.$$.fragment,k)},m(k,m){Ca(l,k,m),d=!0},p(k,[m]){const U=m&1?Ta(w,[m&1&&Zn(k[0]),m&0&&Zn(sa)]):{};m&2&&(U.$$scope={dirty:m,ctx:k}),l.$set(U)},i(k){d||(_a(l.$$.fragment,k),d=!0)},o(k){wa(l.$$.fragment,k),d=!1},d(k){Ma(l,k)}}}const sa={title:"The CSS Podcast: 027: Houdini Series: Typed Object Model",tags:["css houdini","The CSS Podcast"],description:"CSS Typed Object Model (Typed OM)CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string.Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch....",tableOfContents:[{link:"css-typed-object-model-typed-om",title:"CSS Typed Object Model (Typed OM)"},{link:"computedstylemap",title:"computedStyleMap"},{link:"attributestylemap",title:"attributeStyleMap"},{link:"types-of-cssstylevalue",title:"Types of CSSStyleValue",nested:[{link:"create-cssstylevalue",title:"create CSSStyleValue"},{link:"cssimagevalue",title:"CSSImageValue"},{link:"csskeywordvalue",title:"CSSKeywordValue"},{link:"cssnumericvalue",title:"CSSNumericValue"},{link:"cssmathvalue",title:"CSSMathValue"},{link:"csspositionvalue",title:"CSSPositionValue"},{link:"csstransformvalue",title:"CSSTransformValue"},{link:"cssunparsedvalue",title:"CSSUnparsedValue"},{link:"references",title:"References"}]}]};function qa(I,l,d){return da("blog",{image:Va}),I.$$set=w=>{d(0,l=dn(dn({},l),Qn(w)))},l=Qn(l),[l]}class Na extends ma{constructor(l){super(),Sa(this,l,qa,La,ua,{})}}export{Na as component};
