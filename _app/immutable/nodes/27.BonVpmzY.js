import{s as ci,d as ro,e as pi,f as Pr,n as hi}from"../chunks/scheduler.D6VJxl8L.js";import{S as ki,i as vi,m as yi,n as di,o as ui,t as fi,a as xi,p as mi,e,s as n,H as g,c as t,q as o,h as a,d as v,r as b,g as l,u as w,j as x,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as gi,a as Er}from"../chunks/code-snippet.Gym6WUAG.js";import{B as bi}from"../chunks/BlogLayout.BPekX0dI.js";const wi=""+new URL("../assets/custom-parser.LusfYZn8.gif",import.meta.url).href,Ir=""+new URL("../assets/custom-parser.2APi0JZ1.gif",import.meta.url).href,_i=""+new URL("../assets/curry-function.3rBTH_wV.webp",import.meta.url).href,Ti=""+new URL("../assets/curry-function.D7zzWAE9.webp",import.meta.url).href,Ci=""+new URL("../assets/curry-function.moCV26bA.png",import.meta.url).href,qr=""+new URL("../assets/curry-function.Bve-biPB.png",import.meta.url).href,Li=""+new URL("../assets/generator-function.BAP_qltB.webp",import.meta.url).href,Hi=""+new URL("../assets/generator-function.BFi72hph.webp",import.meta.url).href,Mi=""+new URL("../assets/generator-function.DSUMRy05.png",import.meta.url).href,jr=""+new URL("../assets/generator-function.CubVRj7J.png",import.meta.url).href,Pi=""+new URL("../assets/forking.DWvYVWJS.webp",import.meta.url).href,Ei=""+new URL("../assets/forking.u09O6-Hw.webp",import.meta.url).href,Ii=""+new URL("../assets/forking.CTiCVikz.png",import.meta.url).href,Sr=""+new URL("../assets/forking.CPaIi2D-.png",import.meta.url).href,qi=""+new URL("../assets/hero-twitter.BQGafvYC.jpg",import.meta.url).href;function ji(V){let H,A='Following my previous post on <a href="/step-by-step-guide-for-writing-a-babel-transformation">writing a custom babel transformation</a>, today I am going to show you how you can create a custom JavaScript syntax with Babel.',j,d,P,S='<a href="#overview" id="overview">Overview</a>',B,F,io="Let me show you what we will achieve at the end of this article:",Wt,$,ot,Or=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// &#39;@@&#39; makes the function &#96;foo&#96; curried</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> @@ </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)(</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 6</span></span></code></pre>`,Jt,W,co='We are going to create a <a href="https://en.wikipedia.org/wiki/Currying" rel="nofollow">curry function</a> syntax <code class="inline">@@</code>. The syntax is like the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*" rel="nofollow">generator function</a>, except you place <code class="inline">@@</code> instead of <code class="inline">*</code> in between the <code class="inline">function</code> keyword and the function name, eg <code class="inline">function @@ name(arg1, arg2)</code>.',Gt,J,po='In this example, you can have <a href="https://scotch.io/tutorials/javascript-functional-programming-explained-partial-application-and-currying" rel="nofollow">partial application</a> with the function <code class="inline">foo</code>. Calling <code class="inline">foo</code> with the number of parameters less than the arguments required will return a new function of the remaining arguments:',Yt,G,lt,zr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 6</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">bar</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// (n) =&gt; 1 + 2 + n</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">bar</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 6</span></span></code></pre>`,Xt,Y,ho='<p>The reason I choose <code class="inline">@@</code> is that you can&#39;t have <code class="inline">@</code> in a variable name, so <code class="inline">function@@foo(){}</code> is still a valid syntax. And the &quot;operator&quot; <code class="inline">@</code> is used for <a href="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841" rel="nofollow">decorator functions</a> but I wanted to use something entirely new, thus <code class="inline">@@</code>.</p>',Zt,X,ko="To achieve this, we are going to:",Qt,Z,vo="<li>Fork the babel parser</li> <li>Create a custom babel transformation plugin</li>",Kt,Q,yo="Sounds impossible 😨?",sn,K,uo="Don't worry, I will guide you through every step. Hopefully, at the end of this article, you will be the babel master amongst your peers. 🤠",rt,M,ss,fo='<a href="#fork-the-babel" id="fork-the-babel">Fork the babel</a>',en,es,xo='Head over to <a href="https://github.com/babel/babel" rel="nofollow">babel&#39;s Github repo</a>, click the &quot;Fork&quot; button located at the top left of the page.',tn,ts,mo=`<span style="display: block; position: relative; padding-top: 54.570%; width: 100%;"><picture><source type="image/webp" srcset="${Ei}, ${Pi} 2x"/><img src="${Sr}" srcset="${Sr}, ${Ii} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="forking babel" title="Forking babel"/></picture></span>`,nn,ns,go="If this is your first time forking a popular open-source project, congratulations! 🎉",an,as,bo='Clone your forked babel to your local workspace and <a href="https://github.com/tanhauhau/babel/blob/master/CONTRIBUTING.md#setup" rel="nofollow">set it up</a>:',on,os,it,Dr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git clone https://github.com/tanhauhau/babel.git</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># set up</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ </span><span style="color: var(--shiki-token-function)">cd</span><span style="color: var(--shiki-color-text)"> babel</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ make bootstrap</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ make build</span></span></code></pre>`,ln,ls,wo="Meanwhile, let me briefly walk you through how the babel repository is organised.",rn,rs,_o='Babel uses a monorepo structure, all the packages, eg: <code class="inline">@babel/core</code>, <code class="inline">@babel/parser</code>, <code class="inline">@babel/plugin-transform-react-jsx</code>, etc are in the <code class="inline">packages/</code> folder:',cn,is,ct,Ur='<pre class="prism language-yml"><code><div class="line"><span class="token punctuation">-</span> doc</div><div class="line"><span class="token punctuation">-</span> packages</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>core</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>parser</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>plugin<span class="token punctuation">-</span>transform<span class="token punctuation">-</span>react<span class="token punctuation">-</span>jsx</div><div class="line">  <span class="token punctuation">-</span> <span class="token punctuation">...</span></div><div class="line"><span class="token punctuation">-</span> Gulpfile.js</div><div class="line"><span class="token punctuation">-</span> Makefile</div><div class="line"><span class="token punctuation">-</span> <span class="token punctuation">...</span></div></code></pre>',pn,cs,To="<small>**Trivia:** Babel uses [Makefile](https://opensource.com/article/18/8/what-how-makefile) for automating tasks. For build task, such as `make build`, it will use [Gulp](https://gulpjs.com) as the task runner.</small>",pt,O,Co='<h3><a href="#crash-course-on-parsing-code-to-ast" id="crash-course-on-parsing-code-to-ast">Crash Course on Parsing Code to AST</a></h3> <p>Before we proceed, if you are unfamiliar with parsers and Abstract Syntax Tree (AST), I highly recommend to checkout <a href="https://twitter.com/vaidehijoshi" rel="nofollow">Vaidehi Joshi</a>&#39;s <a href="https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff" rel="nofollow">Leveling Up One’s Parsing Game With ASTs</a>.</p> <p>To summarise, this is what happened when babel is parsing your code:</p> <ul><li>Your code as a <code class="inline">string</code> is a long list of characters: <code class="inline">f, u, n, c, t, i, o, n, , @, @, f, ...</code></li> <li>The first step is called <strong>tokenization</strong>, where babel scans through each character and creates <em>tokens</em>, like <code class="inline">function, @@, foo, (, a, ...</code></li> <li>The tokens then pass through a parser for <strong>Syntax analysis</strong>, where babel creates an AST based on <a href="https://www.ecma-international.org/ecma-262/10.0/index.html#Title" rel="nofollow">JavaScript language specification</a>.</li></ul> <p>If you want to learn more in-depth on compilers in general, <a href="https://twitter.com/munificentbob?lang=en" rel="nofollow">Robert Nystrom</a>&#39;s <a href="https://craftinginterpreters.com/introduction.html" rel="nofollow">Crafting Interpreters</a> is a gem.</p> <blockquote><small>Don&#39;t get scared of by the word **compiler**, it is nothing but parsing your code and generate XXX out of it. XXX could be machine code, which is the compiler most of us have in mind; XXX could be JavaScript compatible with older browsers, which is the case for Babel.</small></blockquote>',ht,c,ps,Lo='<a href="#our-custom-babel-parser" id="our-custom-babel-parser">Our custom babel parser</a>',hn,hs,Ho='The folder we are going to work on is <code class="inline">packages/babel-parser/</code>:',kn,ks,kt,Nr=`<pre class="prism language-"><code><span class="line">- src/</span>
<span class="line">  - tokenizer/</span>
<span class="line">  - parser/</span>
<span class="line">  - plugins/</span>
<span class="line">    - jsx/</span>
<span class="line">    - typescript/</span>
<span class="line">    - flow/</span>
<span class="line">    - ...</span>
<span class="line">- test/</span></code></pre>`,vn,vs,Mo='We&#39;ve talked about <em>tokenization</em> and <em>parsing</em>, now it&#39;s clear where to find the code for each process. <code class="inline">plugins/</code> folder contains plugins that extend the base parser and add custom syntaxes, such as <code class="inline">jsx</code> and <code class="inline">flow</code>.',yn,ys,Po='Let&#39;s do a <a href="https://en.wikipedia.org/wiki/Test-driven_development" rel="nofollow">Test-driven development (TDD)</a>. I find it easier to define the test case then slowly work our way to &quot;fix&quot; it. It is especially true in an unfamiliar codebase, TDD allows you to &quot;easily&quot; point out code places you need to change.',dn,ds,vt,Rr=`<div class="filename">packages/babel-parser/test/curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; parse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../lib&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getParser</span><span style="color: var(--shiki-color-text)">(code) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; sourceType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;module&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;curry function syntax&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">it</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;should parse&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">getParser</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;function @@ foo() &#123;&#125;&#96;</span><span style="color: var(--shiki-color-text)">)())</span><span style="color: var(--shiki-token-function)">.toMatchSnapshot</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,un,us,Eo='You can run <code class="inline">TEST_ONLY=babel-parser TEST_GREP=&quot;curry function&quot; make test-only</code> to run tests for <code class="inline">babel-parser</code> and see your failing case:',fn,fs,yt,Vr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">SyntaxError: Unexpected token (1:9)</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.raise (packages/babel-parser/src/parser/location.js:39:63)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.raise [as unexpected] (packages/babel-parser/src/parser/util.js:133:16)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.unexpected [as parseIdentifierName] (packages/babel-parser/src/parser/expression.js:2090:18)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.parseIdentifierName [as parseIdentifier] (packages/babel-parser/src/parser/expression.js:2052:23)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.parseIdentifier (packages/babel-parser/src/parser/statement.js:1096:52)</span></span></code></pre>`,xn,z,xs,Io="If you find scanning through all the test cases takes time, you can directly call `jest` to run the test:",mn,ms,dt,Br='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">BABEL_ENV=test node_modules/.bin/jest -u packages/babel-parser/test/curry-function.js</span></span></code></pre>',gn,gs,qo='Our parser found 2 seemingly innocent <code class="inline">@</code> tokens at a place where they shouldn&#39;t be present.',bn,bs,jo='How do I know that? Let&#39;s start the watch mode, <code class="inline">make watch</code>, wear our detective cap 🕵️‍ and start digging!',wn,ws,So='Tracing the stack trace, led us to <a href="https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-parser/src/parser/expression.js#L2092" rel="nofollow"><code class="inline">packages/babel-parser/src/parser/expression.js</code></a> where it throws <code class="inline">this.unexpected()</code>.',_n,_s,Ao='Let us add some <code class="inline">console.log</code>:',Tn,Ts,ut,Fr=`<div class="filename">packages/babel-parser/src/parser/expression.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">parseIdentifierName</span><span style="color: var(--shiki-color-text)">(pos: number</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> liberal</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> boolean): string &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.name)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.type); </span><span style="color: var(--shiki-token-comment)">// current token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.lookahead</span><span style="color: var(--shiki-color-text)">().type); </span><span style="color: var(--shiki-token-comment)">// next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.unexpected</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cn,Cs,Oo='As you can see, both tokens are <code class="inline">@</code> token:',Ln,Ls,ft,$r=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Hn,Hs,zo='How do I know <code class="inline">this.state.type</code> and <code class="inline">this.lookahead().type</code> will give me the current and the next token?',Mn,Ms,Do='Well, I&#39;ll explained them <a href="#thiseat-thismatch-thisnext">later</a>.',Pn,Ps,Uo="Let's recap what we've done so far before we move on:",En,Es,No='<li>We&#39;ve written a test case for <code class="inline">babel-parser</code></li> <li>We ran <code class="inline">make test-only</code> to run the test case</li> <li>We&#39;ve started the watch mode via <code class="inline">make watch</code></li> <li>We&#39;ve learned about parser state, and console out the current token type, <code class="inline">this.state.type</code></li>',In,Is,Ro="Here's what we are going to do next:",qn,qs,Vo='If there&#39;s 2 consecutive <code class="inline">@</code>, it should not be separate tokens, it should be a <code class="inline">@@</code> token, the new token we just defined for our curry function',xt,_,js,Bo='<a href="#a-new-token" id="a-new-token">A new token: &#39;@@&#39;</a>',jn,Ss,Fo='Let&#39;s first look at where a token type is defined: <a href="https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-parser/src/tokenizer/types.js#L86" rel="nofollow">packages/babel-parser/src/tokenizer/types.js</a>.',Sn,As,$o="Here you see a list of tokens, so let's add our new token definition in as well:",An,Os,mt,Wr=`<div class="filename">packages/babel-parser/src/tokenizer/types.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; [name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  atat</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@@&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,On,zs,Wo='Next, let&#39;s find out where the token gets created during <em>tokenization</em>. A quick search on <code class="inline">tt.at</code> within <code class="inline">babel-parser/src/tokenizer</code> lead us to <a href="https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-parser/src/tokenizer/index.js#L790" rel="nofollow">packages/babel-parser/src/tokenizer/index.js</a>',zn,Ds,Jo="<small>Well, token types are import as `tt` throughout the babel-parser.</small>",Dn,Us,Go='Let&#39;s create the token <code class="inline">tt.atat</code> instead of <code class="inline">tt.at</code> if there&#39;s another <code class="inline">@</code> succeed the current <code class="inline">@</code>:',Un,Ns,gt,Jr=`<div class="filename">packages/babel-parser/src/tokenizer/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">getTokenFromCode</span><span style="color: var(--shiki-color-text)">(code: number): </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (code) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">charCodes</span><span style="color: var(--shiki-color-text)">.atSign:</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if the next character is a &#96;@&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-token-function)">.charCodeAt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.pos </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">charCodes</span><span style="color: var(--shiki-color-text)">.atSign) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// create &#96;tt.atat&#96; instead</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishOp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishOp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.at</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Nn,Rs,Yo="If you run the test again, you will see that the current token and the next token has changed:",Rn,Vs,bt,Gr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// current token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@@&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vn,Bs,Xo='Yeah! It looks good and lets move on. <span style="transform:scaleX(-1);display:inline-block;">🏃‍</span>',wt,u,Fs,Zo='<a href="#the-new-parser" id="the-new-parser">The new parser</a>',Bn,$s,Qo='Before we move on, let&#39;s inspect how <a href="https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjYuMCJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uICogZm9vKCkge30ifQ==" rel="nofollow">generator functions are represented in AST</a>:',Fn,Ws,Ko=`<span style="display: block; position: relative; padding-top: 37.422%; width: 100%;"><picture><source type="image/webp" srcset="${Hi}, ${Li} 2x"/><img src="${jr}" srcset="${jr}, ${Mi} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="AST for generator function" title="AST for generator function"/></picture></span>`,$n,Js,sl='As you can see, a generator function is represented by the <code class="inline">generator: true</code> attribute of a <code class="inline">FunctionDeclaration</code>.',Wn,Gs,el='Similarly, we can add a <code class="inline">curry: true</code> attribute of the <code class="inline">FunctionDeclaration</code> too if it is a curry function:',Jn,Ys,tl=`<span style="display: block; position: relative; padding-top: 39.297%; width: 100%;"><picture><source type="image/webp" srcset="${Ti}, ${_i} 2x"/><img src="${qr}" srcset="${qr}, ${Ci} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="AST for curry function" title="AST for curry function"/></picture></span>`,Gn,Xs,nl="We have a plan now, let's implement it.",Yn,Zs,al='A quick search on <em>&quot;FunctionDeclaration&quot;</em> leads us to a function called <code class="inline">parseFunction</code> in <a href="https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-parser/src/parser/statement.js#L1030" rel="nofollow">packages/babel-parser/src/parser/statement.js</a>, and here we find a line that sets the <code class="inline">generator</code> attribute, let&#39;s add one more line:',Xn,Qs,_t,Yr=`<div class="filename">packages/babel-parser/src/parser/statement.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StatementParser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExpressionParser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseFunction</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">N</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">NormalFunction</span><span style="color: var(--shiki-color-text)">&gt;(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    statement</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">FUNC_NO_FLAGS</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    isAsync</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  )</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.generator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.star);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Zn,Ks,ol="If you run the test again, you will be amazed that it passed!",Qn,se,Tt,Xr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)"> PASS  packages/babel-parser/test/curry-function.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  curry </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">syntax</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ✓ should parse (12ms)</span></span></code></pre>`,Kn,ee,ll="That's it? How did we miraculously fix it?",sa,te,rl="I am going to briefly explain how parsing works, and in the process hopefully, you understood what that one-liner change did.",Ct,y,ne,il='<a href="#how-parsing-works" id="how-parsing-works">How parsing works</a>',ea,ae,cl="With the list of tokens from the <em>tokenizer</em>, the parser consumes the token one by one and constructs the AST. The parser uses the language grammar specification to decide how to use the tokens, which token to expect next.",ta,oe,pl="The grammar specification looks something like this:",na,le,Lt,Zr=`<pre class="prism language-"><code><span class="line">...</span>
<span class="line">ExponentiationExpression -&gt; UnaryExpression</span>
<span class="line">                            UpdateExpression ** ExponentiationExpression</span>
<span class="line">MultiplicativeExpression -&gt; ExponentiationExpression</span>
<span class="line">                            MultiplicativeExpression (&quot;*&quot; or &quot;/&quot; or &quot;%&quot;) ExponentiationExpression</span>
<span class="line">AdditiveExpression       -&gt; MultiplicativeExpression</span>
<span class="line">                            AdditiveExpression + MultiplicativeExpression</span>
<span class="line">                            AdditiveExpression - MultiplicativeExpression</span>
<span class="line">...</span></code></pre>`,aa,re,hl='It explains the precedence of each expressions/statements. For example, an <code class="inline">AdditiveExpression</code> is made up of either:',oa,ie,kl='<li>a <code class="inline">MultiplicativeExpression</code>, or</li> <li>an <code class="inline">AdditiveExpression</code> followed by <code class="inline">+</code> operator token followed by <code class="inline">MultiplicativeExpression</code>, or</li> <li>an <code class="inline">AdditiveExpression</code> followed by <code class="inline">-</code> operator token followed by <code class="inline">MultiplicativeExpression</code>.</li>',la,ce,vl='So if you have an expression <code class="inline">1 + 2 * 3</code>, it will be like:',ra,pe,Ht,Qr='<pre class="prism language-"><code><span class="line">(AdditiveExpression &quot;+&quot; 1 (MultiplicativeExpression &quot;*&quot; 2 3))</span></code></pre>',ia,he,yl="instead of",ca,ke,Mt,Kr='<pre class="prism language-"><code><span class="line">(MultiplicativeExpression &quot;*&quot; (AdditiveExpression &quot;+&quot; 1 2) 3)</span></code></pre>',pa,ve,dl="With these rules, we translate them into parser code:",ha,ye,Pt,si=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseAdditiveExpression</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">left</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseMultiplicativeExpression</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// if the current token is &#96;+&#96; or &#96;-&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.plus) </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.minus)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operator</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.type;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move on to the next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.nextToken</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">right</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseMultiplicativeExpression</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// create the node</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishNode</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          operator</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          left</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          right</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;BinaryExpression&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// return as MultiplicativeExpression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> left;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ka,de,ul="<em>This is a made-up code that oversimplifies what babel have, but I hope you get the gist of it.</em>",va,ue,fl='As you can see here, the parser is recursively in nature, and it goes from the lowest precedence to the highest precedence expressions/statements. Eg: <code class="inline">parseAdditiveExpression</code> calls <code class="inline">parseMultiplicativeExpression</code>, which in turn calls <code class="inline">parseExponentiationExpression</code>, which in turn calls ... . This recursive process is called the <a href="https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing" rel="nofollow">Recursive Descent Parsing</a>.',Et,f,fe,xl='<a href="#this-eat-this-match-this-next" id="this-eat-this-match-this-next">this.eat, this.match, this.next</a>',ya,xe,ml='If you have noticed, in my examples above, I used some utility function, such as <code class="inline">this.eat</code>, <code class="inline">this.match</code>, <code class="inline">this.next</code>, etc. These are babel parser&#39;s internal functions, yet they are quite ubiquitous amongst parsers as well:',da,me,gl='<li><strong><code class="inline">this.match</code></strong> returns a <code class="inline">boolean</code> indicating whether the current token matches the condition</li> <li><strong><code class="inline">this.next</code></strong> moves the token list forward to point to the next token</li> <li><strong><code class="inline">this.eat</code></strong> return what <code class="inline">this.match</code> returns and if <code class="inline">this.match</code> returns <code class="inline">true</code>, will do <code class="inline">this.next</code><ul><li><code class="inline">this.eat</code> is commonly used for optional operators, like <code class="inline">*</code> in generator function, <code class="inline">;</code> at the end of statements, and <code class="inline">?</code> in typescript types.</li></ul></li> <li><strong><code class="inline">this.lookahead</code></strong> get the next token without moving forward to make a decision on the current node</li>',ua,ge,bl="If you take a look again the parser code we just changed, it's easier to read it in now.",fa,be,It,ei=`<div class="filename">packages/babel-parser/src/parser/statement.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StatementParser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExpressionParser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseStatementContent</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* ...*/</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: we call match to check the current token</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">._function)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.next</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// NOTE: function statement has a higher precendence than a generic statement</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseFunction</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseFunction</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: we call eat to check whether the optional token exists</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.generator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.star);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseFunctionId</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xa,we,wl="I know I didn't do a good job explaining how a parser works. Here are some resources that I learned from, and I highly recommend them:",ma,_e,_l='<li><a href="https://craftinginterpreters.com/introduction.html" rel="nofollow">Crafting Interpreters</a> by <a href="https://twitter.com/munificentbob?lang=en" rel="nofollow">Robert Nystrom</a></li> <li><a href="https://www.udacity.com/course/compilers-theory-and-practice--ud168" rel="nofollow">Free Udacity course: &quot;Compilers: Theory and Practice&quot;</a>, offered by Georgia Tech</li>',ga,ba,wa,Te,Tl="<strong>Side Note</strong>: You might be curious how am I able to visualize the custom syntax in the Babel AST Explorer, where I showed you the new &quot;curry&quot; attribute in the AST.",_a,Ce,Cl="That's because I've added a new feature in the Babel AST Explorer where you can upload your custom parser!",Ta,Le,Ll='If you go to <code class="inline">packages/babel-parser/lib</code>, you would find the compiled version of your parser and the source map. Open the drawer of the Babel AST Explorer, you will see a button to upload a custom parser. Drag the <code class="inline">packages/babel-parser/lib/index.js</code> in and you will be visualizing the AST generated via your custom parser!',Ca,He,Hl=`<span style="display: block; position: relative; padding-top: 54.000%; width: 100%;"><img src="${Ir}" srcset="${Ir}, ${wi} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Uploading custom parser"/></span>`,La,Ha,qt,p,Me,Ml='<a href="#our-babel-plugin" id="our-babel-plugin">Our babel plugin</a>',Ma,Pe,Pl="With our custom babel parser done, let's move on to write our babel plugin.",Pa,Ee,El="But maybe before that, you may have some doubts on how are we going to use our custom babel parser, especially with whatever build stack we are using right now?",Ea,Ie,Il='Well, fret not. A babel plugin can provide a custom parser, which is <a href="https://babeljs.io/docs/en/babel-parser#will-the-babel-parser-support-a-plugin-system" rel="nofollow">documented on the babel website</a>',Ia,qe,jt,ti=`<div class="filename">babel-plugin-transformation-curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> customParser </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./custom-parser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ourBabelPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">parserOverride</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> opts) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">customParser</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> opts);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qa,je,ql="Since we forked out the babel parser, all existing babel parser options or built-in plugins will still work perfectly.",ja,Se,jl="With this doubt out of the way, let see how we can make our curry function curryable? <em>(not entirely sure there&#39;s such word)</em>",Sa,Aa,Oa,Ae,Sl="Before we start, if you have eagerly tried to add our plugin into your build system, you would notice that the curry function gets compiled to a normal function.",za,Oe,Al='This is because, after parsing + transformation, babel will use <a href="https://babeljs.io/docs/en/babel-generator" rel="nofollow">@babel/generator</a> to generate code from the transformed AST. Since the <code class="inline">@babel/generator</code> has no idea about the new <code class="inline">curry</code> attribute we added, it will be omitted.',Da,ze,Ol='<p>If one day curry function becomes the new JavaScript syntax, you may want to make a pull request to add one more line <a href="https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-generator/src/generators/methods.js#L82" rel="nofollow">here</a>!</p>',Ua,Na,Ra,De,zl='Ok, to make our function curryable, we can wrap it with a <code class="inline">currying</code> helper higher-order function:',Va,Ue,St,ni=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">currying</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">numParamsRequired</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">(params) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newParams</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-token-function)">.concat</span><span style="color: var(--shiki-color-text)">(args);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">newParams</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;=</span><span style="color: var(--shiki-color-text)"> numParamsRequired) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">newParams);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">(newParams);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">([]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ba,Ne,Dl='<p>If you want to learn how to write a currying function, you can read this <a href="https://hackernoon.com/currying-in-js-d9ddc64f162e" rel="nofollow">Currying in JS</a> by <a href="https://twitter.com/zhirzh" rel="nofollow">Shirsh Zibbu</a></p>',Fa,Re,Ul="So when we transform our curry function, we can transform it into the following:",$a,Ve,At,ai=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// from</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> @@ </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">currying</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)</span></span></code></pre>`,Wa,Be,Nl='<p>Let&#39;s first ignore <a href="https://scotch.io/tutorials/understanding-hoisting-in-javascript" rel="nofollow">function hoisting</a> in JavaScript, where you can call <code class="inline">foo</code> before it is defined.</p>',Ja,Fe,Rl='If you have read my <a href="/step-by-step-guide-for-writing-a-babel-transformation">step-by-step guide on babel transformation</a>, writing this transformation should be manageable:',Ga,$e,Ot,oi=`<div class="filename">babel-plugin-transformation-curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ourBabelPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">FunctionDeclaration</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;curry&#39;</span><span style="color: var(--shiki-color-text)">).node) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// const foo = curry(function () &#123; ... &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclaration</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;const&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclarator</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;id.name&#39;</span><span style="color: var(--shiki-color-text)">).node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;currying&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.toExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                ])</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            ])</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ya,We,Vl='The question is how do we provide the <code class="inline">currying</code> function?',Xa,Je,Bl="There are 2 ways:",zt,D,Fl='<h3><a href="#1-assume-currying-has-been-declared-in-the-global-scope" id="1-assume-currying-has-been-declared-in-the-global-scope">1. Assume <code class="inline">currying</code> has been declared in the global scope.</a></h3> <p>Basically, your job is done here.</p> <p>If <code class="inline">currying</code> is not defined, then when executing the compiled code, the runtime will scream out <em>&quot;currying is not defined&quot;</em>, just like the <a href="https://www.google.com/search?q=regeneratorRuntime+is+not+defined" rel="nofollow">&quot;regeneratorRuntime is not defined&quot;</a>.</p> <p>So probably you have to educate the users to install <code class="inline">currying</code> polyfills in order to use your <code class="inline">babel-plugin-transformation-curry-function</code>.</p>',Dt,T,Ge,$l='<a href="#2-use-the-babel-helpers" id="2-use-the-babel-helpers">2. Use the <code class="inline">@babel/helpers</code></a>',Za,Ye,Wl='You can add a new helper to <code class="inline">@babel/helpers</code>, which of course you are unlikely to merge that into the official <code class="inline">@babel/helpers</code>, so you would have to figure a way to make <code class="inline">@babel/core</code> to resolve to your <code class="inline">@babel/helpers</code>:',Qa,Xe,Ut,li=`<div class="filename">package.json</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;resolutions&quot;</span><span style="color: var(--shiki-color-text)">: &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;@babel/helpers&quot;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;7.6.0--your-custom-forked-version&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ka,Ze,Jl='<em><strong>Disclaimer:</strong> I have not personally tried this, but I believe it will work. If you encountered problems trying this, <a href="https://twitter.com/lihautan" rel="nofollow">DM me</a>, I am very happy to discuss it with you.</em>',so,Qe,Gl='Adding a new helper function into <code class="inline">@babel/helpers</code> is very easy.',eo,Ke,Yl='Head over to <a href="https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-helpers/src/helpers.js" rel="nofollow">packages/babel-helpers/src/helpers.js</a> and add a new entry:',to,st,Nt,ri=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">helpers</span><span style="color: var(--shiki-color-text)">.currying </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">helper</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;7.6.0&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  export default function currying(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    const numParamsRequired = fn.length;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    function curryFactory(params) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      return function (...args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        const newParams = params.concat(args);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        if (newParams.length &gt;= numParamsRequired) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">          return fn(...newParams);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        return curryFactory(newParams);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return curryFactory([]);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,no,et,Xl='The helper tag function specifies the <code class="inline">@babel/core</code> version required. The trick here is to <code class="inline">export default</code> the <code class="inline">currying</code> function.',ao,tt,Zl='To use the helper, just call the <code class="inline">this.addHelper()</code>:',oo,nt,Rt,ii=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclaration</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;const&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclarator</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;id.name&#39;</span><span style="color: var(--shiki-color-text)">).node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.addHelper</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;currying&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.toExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      ])</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ])</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,lo,at,Ql='The <code class="inline">this.addHelper</code> will inject the helper at the top of the file if needed, and returns an <code class="inline">Identifier</code> to the injected function.',Vt,U,Kl='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>We&#39;ve seen how we can modify the babel parser function, write our own babel transform plugin <em>(which was brief mainly because I have <a href="/step-by-step-guide-for-writing-a-babel-transformation">a detailed cover in my previous post</a>)</em>, a brief touch on <code class="inline">@babel/generator</code> and also how we can add helper functions via <code class="inline">@babel/helpers</code>.</p> <p>Along the way, we had a crash course on how a parser works, which I will provide the links to <a href="#further-reading">further reading</a> at the bottom.</p> <p>The steps we&#39;ve gone through above is similar to part of the <a href="https://github.com/tc39/proposals" rel="nofollow">TC39 proposal</a> <a href="https://tc39.es/process-document/" rel="nofollow">process</a> when defining a new JavaScript specification. When proposing a new specification, the champion of the proposal usually write polyfills or forked out babel to write proof-of-concept demos. As you&#39;ve seen, forking a parser or writing polyfills is not the hardest part of the process, but to define the problem space, plan and think through the use cases and edge cases, and gather opinions and suggestions from the community. To this end, I am grateful to the proposal champion, for their effort in pushing the JavaScript language forward.</p> <p>Finally, if you want to see the code we&#39;ve done so far in a full picture, you can <a href="https://github.com/tanhauhau/babel/compare/3a7b6e1c2...b793efad1" rel="nofollow">check it out from Github</a>.</p> <hr/>',Bt,N,sr='<h2><a href="#editor-s-note" id="editor-s-note">Editor&#39;s Note</a></h2> <p>I&#39;ve worked on the babel repository for a while, yet I&#39;ve never added a new syntax to the babel parser before. Most of my contributions were just fixing bugs and specs compliance feature.</p> <p>Yet this idea of creating a new syntax has been in my mind for a while. So I took the chance of writing a blog to try it out. It is an exhilarating experience to see it work as expected.</p> <p>Having the ability to manipulate the syntax of the language you are writing is invigorating. It empowers us the possibility of writing less code or more straightforward code and shifts that complexity to compile time. Just as how <code class="inline">async-await</code> solves the callback hell and promise-chaining hell.</p> <p>If this article inspires you to some great idea, and you wish to discuss it with somebody, you are always more than welcome to reach out to me through <a href="https://twitter.com/lihautan" rel="nofollow">Twitter</a>.</p>',Ft,R,er='<h2><a href="#further-reading" id="further-reading">Further Reading</a></h2> <p>About compilers:</p> <ul><li><a href="https://craftinginterpreters.com/introduction.html" rel="nofollow">Crafting Interpreters</a> by <a href="https://twitter.com/munificentbob?lang=en" rel="nofollow">Robert Nystrom</a></li> <li><a href="https://www.udacity.com/course/compilers-theory-and-practice--ud168" rel="nofollow">Free Udacity course: &quot;Compilers: Theory and Practice&quot;</a>, offered by Georgia Tech</li> <li><a href="https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff" rel="nofollow">Leveling Up One’s Parsing Game With ASTs</a> by <a href="https://twitter.com/vaidehijoshi" rel="nofollow">Vaidehi Joshi</a></li></ul> <p>Misc:</p> <ul><li><a href="https://scotch.io/tutorials/understanding-hoisting-in-javascript" rel="nofollow">Understanding hoisting in JavaScript</a> by <a href="https://twitter.com/emabishi" rel="nofollow">Mabishi Wakio</a></li> <li><a href="https://hackernoon.com/currying-in-js-d9ddc64f162e" rel="nofollow">Currying in JS</a> by <a href="https://twitter.com/zhirzh" rel="nofollow">Shirsh Zibbu</a></li> <li><a href="https://github.com/tc39/proposals" rel="nofollow">TC39 Proposals</a></li> <li><a href="https://tc39.es/process-document/" rel="nofollow">TC39 Process Document</a></li></ul>';return{c(){H=e("p"),H.innerHTML=A,j=n(),d=e("section"),P=e("h2"),P.innerHTML=S,B=n(),F=e("p"),F.textContent=io,Wt=n(),$=e("div"),ot=new g(!1),Jt=n(),W=e("p"),W.innerHTML=co,Gt=n(),J=e("p"),J.innerHTML=po,Yt=n(),G=e("div"),lt=new g(!1),Xt=n(),Y=e("blockquote"),Y.innerHTML=ho,Zt=n(),X=e("p"),X.textContent=ko,Qt=n(),Z=e("ul"),Z.innerHTML=vo,Kt=n(),Q=e("p"),Q.textContent=yo,sn=n(),K=e("p"),K.textContent=uo,rt=n(),M=e("section"),ss=e("h2"),ss.innerHTML=fo,en=n(),es=e("p"),es.innerHTML=xo,tn=n(),ts=e("p"),ts.innerHTML=mo,nn=n(),ns=e("p"),ns.textContent=go,an=n(),as=e("p"),as.innerHTML=bo,on=n(),os=e("div"),it=new g(!1),ln=n(),ls=e("p"),ls.textContent=wo,rn=n(),rs=e("p"),rs.innerHTML=_o,cn=n(),is=e("div"),ct=new g(!1),pn=n(),cs=e("blockquote"),cs.innerHTML=To,pt=n(),O=e("section"),O.innerHTML=Co,ht=n(),c=e("section"),ps=e("h2"),ps.innerHTML=Lo,hn=n(),hs=e("p"),hs.innerHTML=Ho,kn=n(),ks=e("div"),kt=new g(!1),vn=n(),vs=e("p"),vs.innerHTML=Mo,yn=n(),ys=e("p"),ys.innerHTML=Po,dn=n(),ds=e("div"),vt=new g(!1),un=n(),us=e("p"),us.innerHTML=Eo,fn=n(),fs=e("div"),yt=new g(!1),xn=n(),z=e("blockquote"),xs=e("small"),xs.textContent=Io,mn=n(),ms=e("div"),dt=new g(!1),gn=n(),gs=e("p"),gs.innerHTML=qo,bn=n(),bs=e("p"),bs.innerHTML=jo,wn=n(),ws=e("p"),ws.innerHTML=So,_n=n(),_s=e("p"),_s.innerHTML=Ao,Tn=n(),Ts=e("div"),ut=new g(!1),Cn=n(),Cs=e("p"),Cs.innerHTML=Oo,Ln=n(),Ls=e("div"),ft=new g(!1),Hn=n(),Hs=e("p"),Hs.innerHTML=zo,Mn=n(),Ms=e("p"),Ms.innerHTML=Do,Pn=n(),Ps=e("p"),Ps.textContent=Uo,En=n(),Es=e("ul"),Es.innerHTML=No,In=n(),Is=e("p"),Is.textContent=Ro,qn=n(),qs=e("p"),qs.innerHTML=Vo,xt=n(),_=e("section"),js=e("h3"),js.innerHTML=Bo,jn=n(),Ss=e("p"),Ss.innerHTML=Fo,Sn=n(),As=e("p"),As.textContent=$o,An=n(),Os=e("div"),mt=new g(!1),On=n(),zs=e("p"),zs.innerHTML=Wo,zn=n(),Ds=e("blockquote"),Ds.innerHTML=Jo,Dn=n(),Us=e("p"),Us.innerHTML=Go,Un=n(),Ns=e("div"),gt=new g(!1),Nn=n(),Rs=e("p"),Rs.textContent=Yo,Rn=n(),Vs=e("div"),bt=new g(!1),Vn=n(),Bs=e("p"),Bs.innerHTML=Xo,wt=n(),u=e("section"),Fs=e("h3"),Fs.innerHTML=Zo,Bn=n(),$s=e("p"),$s.innerHTML=Qo,Fn=n(),Ws=e("p"),Ws.innerHTML=Ko,$n=n(),Js=e("p"),Js.innerHTML=sl,Wn=n(),Gs=e("p"),Gs.innerHTML=el,Jn=n(),Ys=e("p"),Ys.innerHTML=tl,Gn=n(),Xs=e("p"),Xs.textContent=nl,Yn=n(),Zs=e("p"),Zs.innerHTML=al,Xn=n(),Qs=e("div"),_t=new g(!1),Zn=n(),Ks=e("p"),Ks.textContent=ol,Qn=n(),se=e("div"),Tt=new g(!1),Kn=n(),ee=e("p"),ee.textContent=ll,sa=n(),te=e("p"),te.textContent=rl,Ct=n(),y=e("section"),ne=e("h3"),ne.innerHTML=il,ea=n(),ae=e("p"),ae.innerHTML=cl,ta=n(),oe=e("p"),oe.textContent=pl,na=n(),le=e("div"),Lt=new g(!1),aa=n(),re=e("p"),re.innerHTML=hl,oa=n(),ie=e("ul"),ie.innerHTML=kl,la=n(),ce=e("p"),ce.innerHTML=vl,ra=n(),pe=e("div"),Ht=new g(!1),ia=n(),he=e("p"),he.textContent=yl,ca=n(),ke=e("div"),Mt=new g(!1),pa=n(),ve=e("p"),ve.textContent=dl,ha=n(),ye=e("div"),Pt=new g(!1),ka=n(),de=e("p"),de.innerHTML=ul,va=n(),ue=e("p"),ue.innerHTML=fl,Et=n(),f=e("section"),fe=e("h4"),fe.innerHTML=xl,ya=n(),xe=e("p"),xe.innerHTML=ml,da=n(),me=e("ul"),me.innerHTML=gl,ua=n(),ge=e("p"),ge.textContent=bl,fa=n(),be=e("div"),It=new g(!1),xa=n(),we=e("p"),we.textContent=wl,ma=n(),_e=e("ul"),_e.innerHTML=_l,ga=n(),ba=e("hr"),wa=n(),Te=e("p"),Te.innerHTML=Tl,_a=n(),Ce=e("p"),Ce.textContent=Cl,Ta=n(),Le=e("p"),Le.innerHTML=Ll,Ca=n(),He=e("p"),He.innerHTML=Hl,La=n(),Ha=e("hr"),qt=n(),p=e("section"),Me=e("h2"),Me.innerHTML=Ml,Ma=n(),Pe=e("p"),Pe.textContent=Pl,Pa=n(),Ee=e("p"),Ee.textContent=El,Ea=n(),Ie=e("p"),Ie.innerHTML=Il,Ia=n(),qe=e("div"),jt=new g(!1),qa=n(),je=e("p"),je.textContent=ql,ja=n(),Se=e("p"),Se.innerHTML=jl,Sa=n(),Aa=e("hr"),Oa=n(),Ae=e("p"),Ae.textContent=Sl,za=n(),Oe=e("p"),Oe.innerHTML=Al,Da=n(),ze=e("blockquote"),ze.innerHTML=Ol,Ua=n(),Na=e("hr"),Ra=n(),De=e("p"),De.innerHTML=zl,Va=n(),Ue=e("div"),St=new g(!1),Ba=n(),Ne=e("blockquote"),Ne.innerHTML=Dl,Fa=n(),Re=e("p"),Re.textContent=Ul,$a=n(),Ve=e("div"),At=new g(!1),Wa=n(),Be=e("blockquote"),Be.innerHTML=Nl,Ja=n(),Fe=e("p"),Fe.innerHTML=Rl,Ga=n(),$e=e("div"),Ot=new g(!1),Ya=n(),We=e("p"),We.innerHTML=Vl,Xa=n(),Je=e("p"),Je.textContent=Bl,zt=n(),D=e("section"),D.innerHTML=Fl,Dt=n(),T=e("section"),Ge=e("h3"),Ge.innerHTML=$l,Za=n(),Ye=e("p"),Ye.innerHTML=Wl,Qa=n(),Xe=e("div"),Ut=new g(!1),Ka=n(),Ze=e("p"),Ze.innerHTML=Jl,so=n(),Qe=e("p"),Qe.innerHTML=Gl,eo=n(),Ke=e("p"),Ke.innerHTML=Yl,to=n(),st=e("div"),Nt=new g(!1),no=n(),et=e("p"),et.innerHTML=Xl,ao=n(),tt=e("p"),tt.innerHTML=Zl,oo=n(),nt=e("div"),Rt=new g(!1),lo=n(),at=e("p"),at.innerHTML=Ql,Vt=n(),U=e("section"),U.innerHTML=Kl,Bt=n(),N=e("section"),N.innerHTML=sr,Ft=n(),R=e("section"),R.innerHTML=er,this.h()},l(r){H=t(r,"P",{"data-svelte-h":!0}),o(H)!=="svelte-14dw38m"&&(H.innerHTML=A),j=a(r),d=t(r,"SECTION",{});var i=v(d);P=t(i,"H2",{"data-svelte-h":!0}),o(P)!=="svelte-1vu30zv"&&(P.innerHTML=S),B=a(i),F=t(i,"P",{"data-svelte-h":!0}),o(F)!=="svelte-uqzftm"&&(F.textContent=io),Wt=a(i),$=t(i,"DIV",{class:!0});var tr=v($);ot=b(tr,!1),tr.forEach(l),Jt=a(i),W=t(i,"P",{"data-svelte-h":!0}),o(W)!=="svelte-1orv2bk"&&(W.innerHTML=co),Gt=a(i),J=t(i,"P",{"data-svelte-h":!0}),o(J)!=="svelte-flpjac"&&(J.innerHTML=po),Yt=a(i),G=t(i,"DIV",{class:!0});var nr=v(G);lt=b(nr,!1),nr.forEach(l),Xt=a(i),Y=t(i,"BLOCKQUOTE",{"data-svelte-h":!0}),o(Y)!=="svelte-d6st6p"&&(Y.innerHTML=ho),Zt=a(i),X=t(i,"P",{"data-svelte-h":!0}),o(X)!=="svelte-13tj9gb"&&(X.textContent=ko),Qt=a(i),Z=t(i,"UL",{"data-svelte-h":!0}),o(Z)!=="svelte-dzteyi"&&(Z.innerHTML=vo),Kt=a(i),Q=t(i,"P",{"data-svelte-h":!0}),o(Q)!=="svelte-l0x2nn"&&(Q.textContent=yo),sn=a(i),K=t(i,"P",{"data-svelte-h":!0}),o(K)!=="svelte-1rlnnoj"&&(K.textContent=uo),i.forEach(l),rt=a(r),M=t(r,"SECTION",{});var q=v(M);ss=t(q,"H2",{"data-svelte-h":!0}),o(ss)!=="svelte-f3i5nj"&&(ss.innerHTML=fo),en=a(q),es=t(q,"P",{"data-svelte-h":!0}),o(es)!=="svelte-13lsjoc"&&(es.innerHTML=xo),tn=a(q),ts=t(q,"P",{"data-svelte-h":!0}),o(ts)!=="svelte-xz55bo"&&(ts.innerHTML=mo),nn=a(q),ns=t(q,"P",{"data-svelte-h":!0}),o(ns)!=="svelte-clxwgx"&&(ns.textContent=go),an=a(q),as=t(q,"P",{"data-svelte-h":!0}),o(as)!=="svelte-8ja2di"&&(as.innerHTML=bo),on=a(q),os=t(q,"DIV",{class:!0});var ar=v(os);it=b(ar,!1),ar.forEach(l),ln=a(q),ls=t(q,"P",{"data-svelte-h":!0}),o(ls)!=="svelte-qnq6wg"&&(ls.textContent=wo),rn=a(q),rs=t(q,"P",{"data-svelte-h":!0}),o(rs)!=="svelte-gpt0qz"&&(rs.innerHTML=_o),cn=a(q),is=t(q,"DIV",{class:!0});var or=v(is);ct=b(or,!1),or.forEach(l),pn=a(q),cs=t(q,"BLOCKQUOTE",{"data-svelte-h":!0}),o(cs)!=="svelte-1atgo6e"&&(cs.innerHTML=To),q.forEach(l),pt=a(r),O=t(r,"SECTION",{"data-svelte-h":!0}),o(O)!=="svelte-1hvlfta"&&(O.innerHTML=Co),ht=a(r),c=t(r,"SECTION",{});var h=v(c);ps=t(h,"H2",{"data-svelte-h":!0}),o(ps)!=="svelte-pkvu1a"&&(ps.innerHTML=Lo),hn=a(h),hs=t(h,"P",{"data-svelte-h":!0}),o(hs)!=="svelte-1jhzedo"&&(hs.innerHTML=Ho),kn=a(h),ks=t(h,"DIV",{class:!0});var lr=v(ks);kt=b(lr,!1),lr.forEach(l),vn=a(h),vs=t(h,"P",{"data-svelte-h":!0}),o(vs)!=="svelte-owmys4"&&(vs.innerHTML=Mo),yn=a(h),ys=t(h,"P",{"data-svelte-h":!0}),o(ys)!=="svelte-2l171o"&&(ys.innerHTML=Po),dn=a(h),ds=t(h,"DIV",{class:!0});var rr=v(ds);vt=b(rr,!1),rr.forEach(l),un=a(h),us=t(h,"P",{"data-svelte-h":!0}),o(us)!=="svelte-12pzstp"&&(us.innerHTML=Eo),fn=a(h),fs=t(h,"DIV",{class:!0});var ir=v(fs);yt=b(ir,!1),ir.forEach(l),xn=a(h),z=t(h,"BLOCKQUOTE",{});var $t=v(z);xs=t($t,"SMALL",{"data-svelte-h":!0}),o(xs)!=="svelte-1e5kc6d"&&(xs.textContent=Io),mn=a($t),ms=t($t,"DIV",{class:!0});var cr=v(ms);dt=b(cr,!1),cr.forEach(l),$t.forEach(l),gn=a(h),gs=t(h,"P",{"data-svelte-h":!0}),o(gs)!=="svelte-1uk6rpz"&&(gs.innerHTML=qo),bn=a(h),bs=t(h,"P",{"data-svelte-h":!0}),o(bs)!=="svelte-hjo2x4"&&(bs.innerHTML=jo),wn=a(h),ws=t(h,"P",{"data-svelte-h":!0}),o(ws)!=="svelte-xzdgt5"&&(ws.innerHTML=So),_n=a(h),_s=t(h,"P",{"data-svelte-h":!0}),o(_s)!=="svelte-1j98f1g"&&(_s.innerHTML=Ao),Tn=a(h),Ts=t(h,"DIV",{class:!0});var pr=v(Ts);ut=b(pr,!1),pr.forEach(l),Cn=a(h),Cs=t(h,"P",{"data-svelte-h":!0}),o(Cs)!=="svelte-19le2pt"&&(Cs.innerHTML=Oo),Ln=a(h),Ls=t(h,"DIV",{class:!0});var hr=v(Ls);ft=b(hr,!1),hr.forEach(l),Hn=a(h),Hs=t(h,"P",{"data-svelte-h":!0}),o(Hs)!=="svelte-kio4e0"&&(Hs.innerHTML=zo),Mn=a(h),Ms=t(h,"P",{"data-svelte-h":!0}),o(Ms)!=="svelte-yp3g6y"&&(Ms.innerHTML=Do),Pn=a(h),Ps=t(h,"P",{"data-svelte-h":!0}),o(Ps)!=="svelte-1f9qe4o"&&(Ps.textContent=Uo),En=a(h),Es=t(h,"UL",{"data-svelte-h":!0}),o(Es)!=="svelte-97oc7t"&&(Es.innerHTML=No),In=a(h),Is=t(h,"P",{"data-svelte-h":!0}),o(Is)!=="svelte-1kbpsx7"&&(Is.textContent=Ro),qn=a(h),qs=t(h,"P",{"data-svelte-h":!0}),o(qs)!=="svelte-z7bvk0"&&(qs.innerHTML=Vo),h.forEach(l),xt=a(r),_=t(r,"SECTION",{});var E=v(_);js=t(E,"H3",{"data-svelte-h":!0}),o(js)!=="svelte-144g6kk"&&(js.innerHTML=Bo),jn=a(E),Ss=t(E,"P",{"data-svelte-h":!0}),o(Ss)!=="svelte-6rafna"&&(Ss.innerHTML=Fo),Sn=a(E),As=t(E,"P",{"data-svelte-h":!0}),o(As)!=="svelte-18uw9ln"&&(As.textContent=$o),An=a(E),Os=t(E,"DIV",{class:!0});var kr=v(Os);mt=b(kr,!1),kr.forEach(l),On=a(E),zs=t(E,"P",{"data-svelte-h":!0}),o(zs)!=="svelte-krbd6f"&&(zs.innerHTML=Wo),zn=a(E),Ds=t(E,"BLOCKQUOTE",{"data-svelte-h":!0}),o(Ds)!=="svelte-sdke5w"&&(Ds.innerHTML=Jo),Dn=a(E),Us=t(E,"P",{"data-svelte-h":!0}),o(Us)!=="svelte-1cuxi1v"&&(Us.innerHTML=Go),Un=a(E),Ns=t(E,"DIV",{class:!0});var vr=v(Ns);gt=b(vr,!1),vr.forEach(l),Nn=a(E),Rs=t(E,"P",{"data-svelte-h":!0}),o(Rs)!=="svelte-1usnwta"&&(Rs.textContent=Yo),Rn=a(E),Vs=t(E,"DIV",{class:!0});var yr=v(Vs);bt=b(yr,!1),yr.forEach(l),Vn=a(E),Bs=t(E,"P",{"data-svelte-h":!0}),o(Bs)!=="svelte-1c42sao"&&(Bs.innerHTML=Xo),E.forEach(l),wt=a(r),u=t(r,"SECTION",{});var C=v(u);Fs=t(C,"H3",{"data-svelte-h":!0}),o(Fs)!=="svelte-1ekldp6"&&(Fs.innerHTML=Zo),Bn=a(C),$s=t(C,"P",{"data-svelte-h":!0}),o($s)!=="svelte-1566pjo"&&($s.innerHTML=Qo),Fn=a(C),Ws=t(C,"P",{"data-svelte-h":!0}),o(Ws)!=="svelte-1mkqu92"&&(Ws.innerHTML=Ko),$n=a(C),Js=t(C,"P",{"data-svelte-h":!0}),o(Js)!=="svelte-16mtnv2"&&(Js.innerHTML=sl),Wn=a(C),Gs=t(C,"P",{"data-svelte-h":!0}),o(Gs)!=="svelte-3gm84v"&&(Gs.innerHTML=el),Jn=a(C),Ys=t(C,"P",{"data-svelte-h":!0}),o(Ys)!=="svelte-sjd6ad"&&(Ys.innerHTML=tl),Gn=a(C),Xs=t(C,"P",{"data-svelte-h":!0}),o(Xs)!=="svelte-1t962i3"&&(Xs.textContent=nl),Yn=a(C),Zs=t(C,"P",{"data-svelte-h":!0}),o(Zs)!=="svelte-1l1x5ci"&&(Zs.innerHTML=al),Xn=a(C),Qs=t(C,"DIV",{class:!0});var dr=v(Qs);_t=b(dr,!1),dr.forEach(l),Zn=a(C),Ks=t(C,"P",{"data-svelte-h":!0}),o(Ks)!=="svelte-zv1rgp"&&(Ks.textContent=ol),Qn=a(C),se=t(C,"DIV",{class:!0});var ur=v(se);Tt=b(ur,!1),ur.forEach(l),Kn=a(C),ee=t(C,"P",{"data-svelte-h":!0}),o(ee)!=="svelte-1jrx3vq"&&(ee.textContent=ll),sa=a(C),te=t(C,"P",{"data-svelte-h":!0}),o(te)!=="svelte-1siyz3x"&&(te.textContent=rl),C.forEach(l),Ct=a(r),y=t(r,"SECTION",{});var m=v(y);ne=t(m,"H3",{"data-svelte-h":!0}),o(ne)!=="svelte-tfinho"&&(ne.innerHTML=il),ea=a(m),ae=t(m,"P",{"data-svelte-h":!0}),o(ae)!=="svelte-chlqhx"&&(ae.innerHTML=cl),ta=a(m),oe=t(m,"P",{"data-svelte-h":!0}),o(oe)!=="svelte-69vzj4"&&(oe.textContent=pl),na=a(m),le=t(m,"DIV",{class:!0});var fr=v(le);Lt=b(fr,!1),fr.forEach(l),aa=a(m),re=t(m,"P",{"data-svelte-h":!0}),o(re)!=="svelte-m7scdb"&&(re.innerHTML=hl),oa=a(m),ie=t(m,"UL",{"data-svelte-h":!0}),o(ie)!=="svelte-3o743n"&&(ie.innerHTML=kl),la=a(m),ce=t(m,"P",{"data-svelte-h":!0}),o(ce)!=="svelte-17qzuwo"&&(ce.innerHTML=vl),ra=a(m),pe=t(m,"DIV",{class:!0});var xr=v(pe);Ht=b(xr,!1),xr.forEach(l),ia=a(m),he=t(m,"P",{"data-svelte-h":!0}),o(he)!=="svelte-sjtqip"&&(he.textContent=yl),ca=a(m),ke=t(m,"DIV",{class:!0});var mr=v(ke);Mt=b(mr,!1),mr.forEach(l),pa=a(m),ve=t(m,"P",{"data-svelte-h":!0}),o(ve)!=="svelte-pmh1gw"&&(ve.textContent=dl),ha=a(m),ye=t(m,"DIV",{class:!0});var gr=v(ye);Pt=b(gr,!1),gr.forEach(l),ka=a(m),de=t(m,"P",{"data-svelte-h":!0}),o(de)!=="svelte-1p0h1ut"&&(de.innerHTML=ul),va=a(m),ue=t(m,"P",{"data-svelte-h":!0}),o(ue)!=="svelte-1d2e6g"&&(ue.innerHTML=fl),m.forEach(l),Et=a(r),f=t(r,"SECTION",{});var L=v(f);fe=t(L,"H4",{"data-svelte-h":!0}),o(fe)!=="svelte-19zbc70"&&(fe.innerHTML=xl),ya=a(L),xe=t(L,"P",{"data-svelte-h":!0}),o(xe)!=="svelte-hqtzs"&&(xe.innerHTML=ml),da=a(L),me=t(L,"UL",{"data-svelte-h":!0}),o(me)!=="svelte-1txns9z"&&(me.innerHTML=gl),ua=a(L),ge=t(L,"P",{"data-svelte-h":!0}),o(ge)!=="svelte-qrtu2f"&&(ge.textContent=bl),fa=a(L),be=t(L,"DIV",{class:!0});var br=v(be);It=b(br,!1),br.forEach(l),xa=a(L),we=t(L,"P",{"data-svelte-h":!0}),o(we)!=="svelte-11kx2jt"&&(we.textContent=wl),ma=a(L),_e=t(L,"UL",{"data-svelte-h":!0}),o(_e)!=="svelte-13q6tv8"&&(_e.innerHTML=_l),ga=a(L),ba=t(L,"HR",{}),wa=a(L),Te=t(L,"P",{"data-svelte-h":!0}),o(Te)!=="svelte-1h5432g"&&(Te.innerHTML=Tl),_a=a(L),Ce=t(L,"P",{"data-svelte-h":!0}),o(Ce)!=="svelte-92lo4f"&&(Ce.textContent=Cl),Ta=a(L),Le=t(L,"P",{"data-svelte-h":!0}),o(Le)!=="svelte-m33dfl"&&(Le.innerHTML=Ll),Ca=a(L),He=t(L,"P",{"data-svelte-h":!0}),o(He)!=="svelte-1ee5jb3"&&(He.innerHTML=Hl),La=a(L),Ha=t(L,"HR",{}),L.forEach(l),qt=a(r),p=t(r,"SECTION",{});var k=v(p);Me=t(k,"H2",{"data-svelte-h":!0}),o(Me)!=="svelte-13utha1"&&(Me.innerHTML=Ml),Ma=a(k),Pe=t(k,"P",{"data-svelte-h":!0}),o(Pe)!=="svelte-i2dhxs"&&(Pe.textContent=Pl),Pa=a(k),Ee=t(k,"P",{"data-svelte-h":!0}),o(Ee)!=="svelte-8g5jot"&&(Ee.textContent=El),Ea=a(k),Ie=t(k,"P",{"data-svelte-h":!0}),o(Ie)!=="svelte-1mr2ypq"&&(Ie.innerHTML=Il),Ia=a(k),qe=t(k,"DIV",{class:!0});var wr=v(qe);jt=b(wr,!1),wr.forEach(l),qa=a(k),je=t(k,"P",{"data-svelte-h":!0}),o(je)!=="svelte-vd5f6o"&&(je.textContent=ql),ja=a(k),Se=t(k,"P",{"data-svelte-h":!0}),o(Se)!=="svelte-1soiqk7"&&(Se.innerHTML=jl),Sa=a(k),Aa=t(k,"HR",{}),Oa=a(k),Ae=t(k,"P",{"data-svelte-h":!0}),o(Ae)!=="svelte-19618zb"&&(Ae.textContent=Sl),za=a(k),Oe=t(k,"P",{"data-svelte-h":!0}),o(Oe)!=="svelte-zv3m2s"&&(Oe.innerHTML=Al),Da=a(k),ze=t(k,"BLOCKQUOTE",{"data-svelte-h":!0}),o(ze)!=="svelte-1faw8jo"&&(ze.innerHTML=Ol),Ua=a(k),Na=t(k,"HR",{}),Ra=a(k),De=t(k,"P",{"data-svelte-h":!0}),o(De)!=="svelte-1gomsig"&&(De.innerHTML=zl),Va=a(k),Ue=t(k,"DIV",{class:!0});var _r=v(Ue);St=b(_r,!1),_r.forEach(l),Ba=a(k),Ne=t(k,"BLOCKQUOTE",{"data-svelte-h":!0}),o(Ne)!=="svelte-9uhx0e"&&(Ne.innerHTML=Dl),Fa=a(k),Re=t(k,"P",{"data-svelte-h":!0}),o(Re)!=="svelte-1ef4slc"&&(Re.textContent=Ul),$a=a(k),Ve=t(k,"DIV",{class:!0});var Tr=v(Ve);At=b(Tr,!1),Tr.forEach(l),Wa=a(k),Be=t(k,"BLOCKQUOTE",{"data-svelte-h":!0}),o(Be)!=="svelte-1f14954"&&(Be.innerHTML=Nl),Ja=a(k),Fe=t(k,"P",{"data-svelte-h":!0}),o(Fe)!=="svelte-1wpz2jz"&&(Fe.innerHTML=Rl),Ga=a(k),$e=t(k,"DIV",{class:!0});var Cr=v($e);Ot=b(Cr,!1),Cr.forEach(l),Ya=a(k),We=t(k,"P",{"data-svelte-h":!0}),o(We)!=="svelte-tlt423"&&(We.innerHTML=Vl),Xa=a(k),Je=t(k,"P",{"data-svelte-h":!0}),o(Je)!=="svelte-1e3cn3w"&&(Je.textContent=Bl),k.forEach(l),zt=a(r),D=t(r,"SECTION",{"data-svelte-h":!0}),o(D)!=="svelte-m3ev12"&&(D.innerHTML=Fl),Dt=a(r),T=t(r,"SECTION",{});var I=v(T);Ge=t(I,"H3",{"data-svelte-h":!0}),o(Ge)!=="svelte-6jhkz5"&&(Ge.innerHTML=$l),Za=a(I),Ye=t(I,"P",{"data-svelte-h":!0}),o(Ye)!=="svelte-mkdb40"&&(Ye.innerHTML=Wl),Qa=a(I),Xe=t(I,"DIV",{class:!0});var Lr=v(Xe);Ut=b(Lr,!1),Lr.forEach(l),Ka=a(I),Ze=t(I,"P",{"data-svelte-h":!0}),o(Ze)!=="svelte-1cdjk8f"&&(Ze.innerHTML=Jl),so=a(I),Qe=t(I,"P",{"data-svelte-h":!0}),o(Qe)!=="svelte-3tj555"&&(Qe.innerHTML=Gl),eo=a(I),Ke=t(I,"P",{"data-svelte-h":!0}),o(Ke)!=="svelte-1ig4txo"&&(Ke.innerHTML=Yl),to=a(I),st=t(I,"DIV",{class:!0});var Hr=v(st);Nt=b(Hr,!1),Hr.forEach(l),no=a(I),et=t(I,"P",{"data-svelte-h":!0}),o(et)!=="svelte-120napj"&&(et.innerHTML=Xl),ao=a(I),tt=t(I,"P",{"data-svelte-h":!0}),o(tt)!=="svelte-u3p8kb"&&(tt.innerHTML=Zl),oo=a(I),nt=t(I,"DIV",{class:!0});var Mr=v(nt);Rt=b(Mr,!1),Mr.forEach(l),lo=a(I),at=t(I,"P",{"data-svelte-h":!0}),o(at)!=="svelte-uuhd35"&&(at.innerHTML=Ql),I.forEach(l),Vt=a(r),U=t(r,"SECTION",{"data-svelte-h":!0}),o(U)!=="svelte-ayiavg"&&(U.innerHTML=Kl),Bt=a(r),N=t(r,"SECTION",{"data-svelte-h":!0}),o(N)!=="svelte-1hdfu3e"&&(N.innerHTML=sr),Ft=a(r),R=t(r,"SECTION",{"data-svelte-h":!0}),o(R)!=="svelte-7axvwp"&&(R.innerHTML=er),this.h()},h(){ot.a=null,w($,"class","code-section"),lt.a=null,w(G,"class","code-section"),it.a=null,w(os,"class","code-section"),ct.a=null,w(is,"class","code-section"),kt.a=null,w(ks,"class","code-section"),vt.a=null,w(ds,"class","code-section"),yt.a=null,w(fs,"class","code-section"),dt.a=null,w(ms,"class","code-section"),ut.a=null,w(Ts,"class","code-section"),ft.a=null,w(Ls,"class","code-section"),mt.a=null,w(Os,"class","code-section"),gt.a=null,w(Ns,"class","code-section"),bt.a=null,w(Vs,"class","code-section"),_t.a=null,w(Qs,"class","code-section"),Tt.a=null,w(se,"class","code-section"),Lt.a=null,w(le,"class","code-section"),Ht.a=null,w(pe,"class","code-section"),Mt.a=null,w(ke,"class","code-section"),Pt.a=null,w(ye,"class","code-section"),It.a=null,w(be,"class","code-section"),jt.a=null,w(qe,"class","code-section"),St.a=null,w(Ue,"class","code-section"),At.a=null,w(Ve,"class","code-section"),Ot.a=null,w($e,"class","code-section"),Ut.a=null,w(Xe,"class","code-section"),Nt.a=null,w(st,"class","code-section"),Rt.a=null,w(nt,"class","code-section")},m(r,i){x(r,H,i),x(r,j,i),x(r,d,i),s(d,P),s(d,B),s(d,F),s(d,Wt),s(d,$),ot.m(Or,$),s(d,Jt),s(d,W),s(d,Gt),s(d,J),s(d,Yt),s(d,G),lt.m(zr,G),s(d,Xt),s(d,Y),s(d,Zt),s(d,X),s(d,Qt),s(d,Z),s(d,Kt),s(d,Q),s(d,sn),s(d,K),x(r,rt,i),x(r,M,i),s(M,ss),s(M,en),s(M,es),s(M,tn),s(M,ts),s(M,nn),s(M,ns),s(M,an),s(M,as),s(M,on),s(M,os),it.m(Dr,os),s(M,ln),s(M,ls),s(M,rn),s(M,rs),s(M,cn),s(M,is),ct.m(Ur,is),s(M,pn),s(M,cs),x(r,pt,i),x(r,O,i),x(r,ht,i),x(r,c,i),s(c,ps),s(c,hn),s(c,hs),s(c,kn),s(c,ks),kt.m(Nr,ks),s(c,vn),s(c,vs),s(c,yn),s(c,ys),s(c,dn),s(c,ds),vt.m(Rr,ds),s(c,un),s(c,us),s(c,fn),s(c,fs),yt.m(Vr,fs),s(c,xn),s(c,z),s(z,xs),s(z,mn),s(z,ms),dt.m(Br,ms),s(c,gn),s(c,gs),s(c,bn),s(c,bs),s(c,wn),s(c,ws),s(c,_n),s(c,_s),s(c,Tn),s(c,Ts),ut.m(Fr,Ts),s(c,Cn),s(c,Cs),s(c,Ln),s(c,Ls),ft.m($r,Ls),s(c,Hn),s(c,Hs),s(c,Mn),s(c,Ms),s(c,Pn),s(c,Ps),s(c,En),s(c,Es),s(c,In),s(c,Is),s(c,qn),s(c,qs),x(r,xt,i),x(r,_,i),s(_,js),s(_,jn),s(_,Ss),s(_,Sn),s(_,As),s(_,An),s(_,Os),mt.m(Wr,Os),s(_,On),s(_,zs),s(_,zn),s(_,Ds),s(_,Dn),s(_,Us),s(_,Un),s(_,Ns),gt.m(Jr,Ns),s(_,Nn),s(_,Rs),s(_,Rn),s(_,Vs),bt.m(Gr,Vs),s(_,Vn),s(_,Bs),x(r,wt,i),x(r,u,i),s(u,Fs),s(u,Bn),s(u,$s),s(u,Fn),s(u,Ws),s(u,$n),s(u,Js),s(u,Wn),s(u,Gs),s(u,Jn),s(u,Ys),s(u,Gn),s(u,Xs),s(u,Yn),s(u,Zs),s(u,Xn),s(u,Qs),_t.m(Yr,Qs),s(u,Zn),s(u,Ks),s(u,Qn),s(u,se),Tt.m(Xr,se),s(u,Kn),s(u,ee),s(u,sa),s(u,te),x(r,Ct,i),x(r,y,i),s(y,ne),s(y,ea),s(y,ae),s(y,ta),s(y,oe),s(y,na),s(y,le),Lt.m(Zr,le),s(y,aa),s(y,re),s(y,oa),s(y,ie),s(y,la),s(y,ce),s(y,ra),s(y,pe),Ht.m(Qr,pe),s(y,ia),s(y,he),s(y,ca),s(y,ke),Mt.m(Kr,ke),s(y,pa),s(y,ve),s(y,ha),s(y,ye),Pt.m(si,ye),s(y,ka),s(y,de),s(y,va),s(y,ue),x(r,Et,i),x(r,f,i),s(f,fe),s(f,ya),s(f,xe),s(f,da),s(f,me),s(f,ua),s(f,ge),s(f,fa),s(f,be),It.m(ei,be),s(f,xa),s(f,we),s(f,ma),s(f,_e),s(f,ga),s(f,ba),s(f,wa),s(f,Te),s(f,_a),s(f,Ce),s(f,Ta),s(f,Le),s(f,Ca),s(f,He),s(f,La),s(f,Ha),x(r,qt,i),x(r,p,i),s(p,Me),s(p,Ma),s(p,Pe),s(p,Pa),s(p,Ee),s(p,Ea),s(p,Ie),s(p,Ia),s(p,qe),jt.m(ti,qe),s(p,qa),s(p,je),s(p,ja),s(p,Se),s(p,Sa),s(p,Aa),s(p,Oa),s(p,Ae),s(p,za),s(p,Oe),s(p,Da),s(p,ze),s(p,Ua),s(p,Na),s(p,Ra),s(p,De),s(p,Va),s(p,Ue),St.m(ni,Ue),s(p,Ba),s(p,Ne),s(p,Fa),s(p,Re),s(p,$a),s(p,Ve),At.m(ai,Ve),s(p,Wa),s(p,Be),s(p,Ja),s(p,Fe),s(p,Ga),s(p,$e),Ot.m(oi,$e),s(p,Ya),s(p,We),s(p,Xa),s(p,Je),x(r,zt,i),x(r,D,i),x(r,Dt,i),x(r,T,i),s(T,Ge),s(T,Za),s(T,Ye),s(T,Qa),s(T,Xe),Ut.m(li,Xe),s(T,Ka),s(T,Ze),s(T,so),s(T,Qe),s(T,eo),s(T,Ke),s(T,to),s(T,st),Nt.m(ri,st),s(T,no),s(T,et),s(T,ao),s(T,tt),s(T,oo),s(T,nt),Rt.m(ii,nt),s(T,lo),s(T,at),x(r,Vt,i),x(r,U,i),x(r,Bt,i),x(r,N,i),x(r,Ft,i),x(r,R,i)},p:hi,d(r){r&&(l(H),l(j),l(d),l(rt),l(M),l(pt),l(O),l(ht),l(c),l(xt),l(_),l(wt),l(u),l(Ct),l(y),l(Et),l(f),l(qt),l(p),l(zt),l(D),l(Dt),l(T),l(Vt),l(U),l(Bt),l(N),l(Ft),l(R))}}}function Si(V){let H,A;const j=[V[0],Ar];let d={$$slots:{default:[ji]},$$scope:{ctx:V}};for(let P=0;P<j.length;P+=1)d=ro(d,j[P]);return H=new bi({props:d}),{c(){yi(H.$$.fragment)},l(P){di(H.$$.fragment,P)},m(P,S){ui(H,P,S),A=!0},p(P,[S]){const B=S&1?gi(j,[S&1&&Er(P[0]),S&0&&Er(Ar)]):{};S&2&&(B.$$scope={dirty:S,ctx:P}),H.$set(B)},i(P){A||(fi(H.$$.fragment,P),A=!0)},o(P){xi(H.$$.fragment,P),A=!1},d(P){mi(H,P)}}}const Ar={title:"Creating custom JavaScript syntax with Babel",date:"2019-09-25T08:00:00Z",description:"Forking babel parser and creating your custom JavaScript syntax isn't as hard as you think.",tags:["JavaScript","babel","AST","transform"],series:"Intermediate Babel",label:"blog",tableOfContents:[{link:"overview",title:"Overview"},{link:"fork-the-babel",title:"Fork the babel",nested:[{link:"crash-course-on-parsing-code-to-ast",title:"Crash Course on Parsing Code to AST"}]},{link:"our-custom-babel-parser",title:"Our custom babel parser",nested:[{link:"a-new-token",title:"A new token: '@@'"},{link:"the-new-parser",title:"The new parser"},{link:"how-parsing-works",title:"How parsing works",nested:[{link:"this-eat-this-match-this-next",title:"this.eat, this.match, this.next"}]}]},{link:"our-babel-plugin",title:"Our babel plugin",nested:[{link:"1-assume-currying-has-been-declared-in-the-global-scope",title:"1. Assume  `currying`  has been declared in the global scope."},{link:"2-use-the-babel-helpers",title:"2. Use the  `@babel/helpers`"}]},{link:"closing-note",title:"Closing Note"},{link:"editor-s-note",title:"Editor's Note"},{link:"further-reading",title:"Further Reading"}]};function Ai(V,H,A){return pi("blog",{image:qi}),V.$$set=j=>{A(0,H=ro(ro({},H),Pr(j)))},H=Pr(H),[H]}class Ni extends ki{constructor(H){super(),vi(this,H,Ai,Si,ci,{})}}export{Ni as component};
