import{s as ms,d as Q,e as fs,f as ks,n as ws}from"../chunks/scheduler.D6VJxl8L.js";import{S as gs,i as _s,m as Cs,n as bs,o as Ss,t as Ps,a as Ls,p as Hs,e as l,s as r,H as O,c as i,q as k,h as p,d as F,r as J,g as n,u as K,j as t}from"../chunks/index.CLAVN-Y5.js";import{g as Ts,a as hs}from"../chunks/code-snippet.Gym6WUAG.js";import{B as js}from"../chunks/BlogLayout.BMJM32nZ.js";import{t as Ms}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function Is(T){let o,u="worklet",v,h,e="paint worklet",c,y,X="<li>a.k.a CSS Paint API</li> <li>allow developers to define canvas like custom painting functions, that can be used directly in CSS as background, border, ...</li>",j,x,Y="worklet",M,d,ss="<li><p>self-contained, can be run off the main thread</p></li> <li><p>all worklets are workers, worklet is more specific workers</p></li> <li><p>worklet have a tight limited contract between the script and the application that created it</p></li> <li><p>limited in the hopes of doing something powerful</p></li> <li><p>worklet scripts are always invoked in their own sandbox, with their allocated computing power, allow them to be created and destroyed very quickly</p></li> <li><p>secure, served and run from a https server</p></li> <li><p>will run off the main thread</p></li> <li><p>browser will forward the request found in the CSS for background paint job from a custom houdini worklet, worklet will run in it&#39;s own thread, and will return a painted canvas for the browser to use</p></li> <li><p>secure, fast, off-the-main thread</p></li>",I,m,ns="gotcha: if run locally, need to serve from a local server",$,f,as="registerPaint(name, workletClass)",W,w,U,ys=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 1️⃣ define the worklet class</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CheckerboardPainter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> geometry</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> property</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...    </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 2️⃣ register the worklet: registerPaint(name, workletClass)</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">registerPaint</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;checkerboard&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> CheckerboardPaint);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ---------------------</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 3️⃣ add worklet</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">paintWorklet</span><span style="color: var(--shiki-token-function)">.addModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;worklet.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.css</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 4️⃣ use the paint worklet</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">li &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(checkerboard);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  border</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(checkerboard);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,A,g,ts="paint(ctx, geometry, property, arguments)",q,_,os='<li>ctx<ul><li>akin to the canvas context, <code class="inline">canvas.getContext(&#39;2d&#39;)</code></li> <li>same full API as canvas context, <code class="inline">ctx.fill()</code></li></ul></li> <li>geometry<ul><li>height and width of your element</li> <li><code class="inline">geometry.height</code>, <code class="inline">geometry.width</code></li></ul></li> <li>property<ul><li>pull in input properties, custom properties in CSS, and used them as values to customise the worklet</li> <li>can use together with CSS Properties and Values API</li></ul></li>',V,C,D,us=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SuperUnderlinePainter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// return an array of input properties</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">inputProperties</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineWidth&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineColor&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> geometry</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> properties) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get the property value from CSS</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineWidth</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">properties</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineWidth&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineColor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">properties</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineColor&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// use them to paint</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.fillStyle </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> underlineColor;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.fillRect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> underlineWidth);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.css</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">li &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">underlineWidth</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">underlineColor</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> red;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(super</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">underline);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,E,b,es="<li>arguments<ul><li>don&#39;t have to share the same property if using the multiple paint worklet on the same element</li> <li>can give different argument for each of the paint worklet</li></ul></li>",z,S,B,xs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SuperUnderlinePainter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// return an array of input argument types</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">inputArguments</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;number&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// underline width</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;color&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// underline color</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> geometry</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> properties</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get the argument value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">underlineWidth</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineColor</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> args;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// use them to paint</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.fillStyle </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineColor</span><span style="color: var(--shiki-color-text)">.cssText;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.fillRect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineWidth</span><span style="color: var(--shiki-color-text)">.value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.css</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">li &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(super</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">underline</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> red);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,R,P,Z,ds=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Painter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    define if alphatransparency is allowed</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">contextOptions</span><span style="color: var(--shiki-color-text)">() &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; alpha</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,G,L,ls='<li>take note if using <code class="inline">Math.random()</code> within paint() to paint a random background</li> <li>background will change when you are typing, or resizing, because it repaints</li> <li><a href="https://jakearchibald.com/2020/css-paint-predictably-random/" rel="nofollow">https://jakearchibald.com/2020/css-paint-predictably-random/</a></li>',N,H,is="PIZZA NIGHT";return{c(){o=l("p"),o.textContent=u,v=r(),h=l("p"),h.textContent=e,c=r(),y=l("ul"),y.innerHTML=X,j=r(),x=l("p"),x.textContent=Y,M=r(),d=l("ul"),d.innerHTML=ss,I=r(),m=l("p"),m.textContent=ns,$=r(),f=l("p"),f.textContent=as,W=r(),w=l("div"),U=new O(!1),A=r(),g=l("p"),g.textContent=ts,q=r(),_=l("ul"),_.innerHTML=os,V=r(),C=l("div"),D=new O(!1),E=r(),b=l("ul"),b.innerHTML=es,z=r(),S=l("div"),B=new O(!1),R=r(),P=l("div"),Z=new O(!1),G=r(),L=l("ul"),L.innerHTML=ls,N=r(),H=l("p"),H.textContent=is,this.h()},l(s){o=i(s,"P",{"data-svelte-h":!0}),k(o)!=="svelte-v5a80m"&&(o.textContent=u),v=p(s),h=i(s,"P",{"data-svelte-h":!0}),k(h)!=="svelte-njvzy"&&(h.textContent=e),c=p(s),y=i(s,"UL",{"data-svelte-h":!0}),k(y)!=="svelte-kdn4k"&&(y.innerHTML=X),j=p(s),x=i(s,"P",{"data-svelte-h":!0}),k(x)!=="svelte-v5a80m"&&(x.textContent=Y),M=p(s),d=i(s,"UL",{"data-svelte-h":!0}),k(d)!=="svelte-7no4qv"&&(d.innerHTML=ss),I=p(s),m=i(s,"P",{"data-svelte-h":!0}),k(m)!=="svelte-1tuxwpd"&&(m.textContent=ns),$=p(s),f=i(s,"P",{"data-svelte-h":!0}),k(f)!=="svelte-1ws0s8v"&&(f.textContent=as),W=p(s),w=i(s,"DIV",{class:!0});var a=F(w);U=J(a,!1),a.forEach(n),A=p(s),g=i(s,"P",{"data-svelte-h":!0}),k(g)!=="svelte-1h6cbub"&&(g.textContent=ts),q=p(s),_=i(s,"UL",{"data-svelte-h":!0}),k(_)!=="svelte-1n3hufr"&&(_.innerHTML=os),V=p(s),C=i(s,"DIV",{class:!0});var rs=F(C);D=J(rs,!1),rs.forEach(n),E=p(s),b=i(s,"UL",{"data-svelte-h":!0}),k(b)!=="svelte-15fc6sp"&&(b.innerHTML=es),z=p(s),S=i(s,"DIV",{class:!0});var ps=F(S);B=J(ps,!1),ps.forEach(n),R=p(s),P=i(s,"DIV",{class:!0});var cs=F(P);Z=J(cs,!1),cs.forEach(n),G=p(s),L=i(s,"UL",{"data-svelte-h":!0}),k(L)!=="svelte-1hrd00x"&&(L.innerHTML=ls),N=p(s),H=i(s,"P",{"data-svelte-h":!0}),k(H)!=="svelte-183semk"&&(H.textContent=is),this.h()},h(){U.a=null,K(w,"class","code-section"),D.a=null,K(C,"class","code-section"),B.a=null,K(S,"class","code-section"),Z.a=null,K(P,"class","code-section")},m(s,a){t(s,o,a),t(s,v,a),t(s,h,a),t(s,c,a),t(s,y,a),t(s,j,a),t(s,x,a),t(s,M,a),t(s,d,a),t(s,I,a),t(s,m,a),t(s,$,a),t(s,f,a),t(s,W,a),t(s,w,a),U.m(ys,w),t(s,A,a),t(s,g,a),t(s,q,a),t(s,_,a),t(s,V,a),t(s,C,a),D.m(us,C),t(s,E,a),t(s,b,a),t(s,z,a),t(s,S,a),B.m(xs,S),t(s,R,a),t(s,P,a),Z.m(ds,P),t(s,G,a),t(s,L,a),t(s,N,a),t(s,H,a)},p:ws,d(s){s&&(n(o),n(v),n(h),n(c),n(y),n(j),n(x),n(M),n(d),n(I),n(m),n($),n(f),n(W),n(w),n(A),n(g),n(q),n(_),n(V),n(C),n(E),n(b),n(z),n(S),n(R),n(P),n(G),n(L),n(N),n(H))}}}function $s(T){let o,u;const v=[T[0],vs];let h={$$slots:{default:[Is]},$$scope:{ctx:T}};for(let e=0;e<v.length;e+=1)h=Q(h,v[e]);return o=new js({props:h}),{c(){Cs(o.$$.fragment)},l(e){bs(o.$$.fragment,e)},m(e,c){Ss(o,e,c),u=!0},p(e,[c]){const y=c&1?Ts(v,[c&1&&hs(e[0]),c&0&&hs(vs)]):{};c&2&&(y.$$scope={dirty:c,ctx:e}),o.$set(y)},i(e){u||(Ps(o.$$.fragment,e),u=!0)},o(e){Ls(o.$$.fragment,e),u=!1},d(e){Hs(o,e)}}}const vs={title:"The CSS Podcast: 028: Houdini Series: Paint",tags:["css houdini","The CSS Podcast"],description:"workletpaint workleta.k.a CSS Paint APIallow developers to define canvas like custom painting functions, that can be used directly in CSS as background, border, ...workletself-contained, can be run off the main thread..."};function Ws(T,o,u){return fs("blog",{image:Ms}),T.$$set=v=>{u(0,o=Q(Q({},o),ks(v)))},o=ks(o),[o]}class Es extends gs{constructor(o){super(),_s(this,o,Ws,$s,ms,{})}}export{Es as component};
