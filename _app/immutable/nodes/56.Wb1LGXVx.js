import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as v,g as d,d as u,b as m,s as n,f as x,a as g,e,r}from"../chunks/C2PHntuy.js";import{h as i}from"../chunks/C3QlhiH-.js";import{i as w}from"../chunks/BQOOHHT8.js";import{l as f,s as b}from"../chunks/gzNpScmH.js";import{B as q}from"../chunks/B1caYEk9.js";import{t as _}from"../chunks/C3bQ3Oc7.js";const l={title:"Async initialisation of node lib",tags:["nodejs"],description:"..."},{title:L,tags:P,description:S}=l;var $=m('<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I have a library that needs to be called synchronously but has an async initialization step.<br/><br/>Can I use pkg.exports or something else to use top-level await when supported, and fallback to export the initialization promise so that Node.js 12-13 users can await it themselves?</p>&mdash; Nicol√≤ Ribaudo üè≥Ô∏è‚Äçüåà (@NicoloRibaudo) <a href="https://twitter.com/NicoloRibaudo/status/1304710001982877697?ref_src=twsrc%5Etfw">September 12, 2020</a></blockquote> <div class="code-section"><!></div> <div class="code-section"><!></div>',1);function D(p,o){const c=f(o,["children","$$slots","$$events","$$legacy"]);v(o,!1),d("blog",{image:_}),w(),q(p,b(()=>c,()=>l,{children:(k,j)=>{var a=$(),s=n(x(a),2),h=e(s);i(h,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// package.json</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;name&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;your-pkg&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;exports&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;.&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./with-top-level-await.js&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">&quot;./init&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./without-top-level-await.js&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),r(s);var t=n(s,2),y=e(t);i(y,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// &gt;= node 14 (with top-level await support)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> api </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;your-pkg&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &lt; node 14</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> init </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;your-pkg/init&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">api</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)();</span></span></code></pre>`),r(t),g(k,a)},$$slots:{default:!0}})),u()}export{D as component};
