import{s as ol,d as Wo,e as al,f as En,h as On,n as nl}from"../chunks/scheduler.85ImRbsk.js";import{S as ll,i as rl,m as il,n as pl,o as cl,t as kl,a as hl,p as vl,e,s as o,H as f,c as t,q as l,h as a,d as y,r as w,g as p,u as d,v as I,j as v,k as s}from"../chunks/index.JMRAb4ib.js";import{g as yl,a as In}from"../chunks/code-snippet.p32Anx_S.js";import{B as dl}from"../chunks/BlogLayout.TadBQAnB.js";const xl=""+new URL("../assets/hero-twitter.sxyU2PdE.jpg",import.meta.url).href;function ul(K){let x,N="The interview question of the week for this week on Cassidoo's weekly newsletter is,",S,M,g=`<p>Write a function that takes in a string of valid JSON and converts it to an object (or whatever your chosen language uses, dicts, maps, etc).
Example input:</p>`,q,P,He,Jn='<pre class="prism language-"><code><span class="line">fakeParseJSON(&#39;&#123; &quot;data&quot;: &#123; &quot;fish&quot;: &quot;cake&quot;, &quot;array&quot;: [1,2,3], &quot;children&quot;: [ &#123; &quot;something&quot;: &quot;else&quot; &#125;, &#123; &quot;candy&quot;: &quot;cane&quot; &#125;, &#123; &quot;sponge&quot;: &quot;bob&quot; &#125; ] &#125; &#125; &#39;)</span></code></pre>',Me,J,Do="At one point, I was tempted to just to write:",Se,U,Pe,Un='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fakeParseJSON</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',je,V,Ao="But, I thought, I've written quite a few articles about AST:",Ee,W,zo='<li><a href="/creating-custom-javascript-syntax-with-babel">Creating custom JavaScript syntax with Babel</a></li> <li><a href="/step-by-step-guide-for-writing-a-babel-transformation">Step-by-step guide for writing a custom babel transformation</a></li> <li><a href="/manipulating-ast-with-javascript">Manipulating AST with JavaScript</a></li>',Oe,D,Ro="which covers the overview of the compiler pipeline, as well as how to manipulate AST, but I haven't covered much on how to implement a parser.",Ie,A,Bo="That's because, implementing a JavaScript compiler in an article is a task too daunting for me.",Ne,z,Fo='Well, fret not. JSON is also a language. It has its own grammar, which you can refer from <a href="https://www.json.org/json-en.html" rel="nofollow">the specifications</a>. The knowledge and technique you need to write a JSON parser is transferrable to writing a JS parser.',Je,R,$o="So, let's start writing a JSON parser!",Ue,c,G,Ko='<a href="#understand-the-grammar" id="understand-the-grammar">Understand the grammar</a>',ht,Y,Go='If you look at <a href="https://www.json.org/json-en.html" rel="nofollow">the specification page</a>, there&#39;s 2 diagrams:',vt,Q,Yo='<li><a href="https://en.wikipedia.org/wiki/Syntax_diagram" rel="nofollow">The syntax diagram (or railroad diagram)</a> on the left,</li>',yt,X,Qo='<img src="https://www.json.org/img/object.png" alt="https://www.json.org/img/object.png"/>',dt,Z,Xo="Image source: https://www.json.org/img/object.png",xt,ss,Zo='<li><a href="https://www.crockford.com/mckeeman.html" rel="nofollow">The McKeeman Form</a>, a variant of <a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form" rel="nofollow">Backus-Naur Form (BNF)</a>, on the right</li>',ut,es,Ve,Vn=`<pre class="prism language-"><code><span class="line">json</span>
<span class="line">  element</span>
<span class="line"></span>
<span class="line">value</span>
<span class="line">  object</span>
<span class="line">  array</span>
<span class="line">  string</span>
<span class="line">  number</span>
<span class="line">  &quot;true&quot;</span>
<span class="line">  &quot;false&quot;</span>
<span class="line">  &quot;null&quot;</span>
<span class="line"></span>
<span class="line">object</span>
<span class="line">  &#39;&#123;&#39; ws &#39;&#125;&#39;</span>
<span class="line">  &#39;&#123;&#39; members &#39;&#125;&#39;</span></code></pre>`,mt,ts,sa="Both diagrams are equivalent.",ft,os,ea="One is visual and one is text based. The text based grammar syntax, Backus-Naur Form, is usually fed to another parser that parse this grammar and generate a parser for it. Speaking of parser-ception! ðŸ¤¯",wt,as,ta="In this article, we will focus on the railroad diagram, because it is visual and seemed to be more friendly to me.",gt,ns,oa="Lets' look at the first railroad diagram:",_t,ls,aa='<img src="https://www.json.org/img/object.png" alt="https://www.json.org/img/object.png"/>',Ct,rs,na="Image source: https://www.json.org/img/object.png",bt,is,la="So this is the grammar for <strong>&quot;object&quot;</strong> in JSON.",Tt,ps,ra="We start from the left, following the arrow, and then we end at the right.",Lt,cs,ia='The circles, eg <code class="inline">{</code>, <code class="inline">,</code>, <code class="inline">:</code>, <code class="inline">}</code>, are the characters, and the boxes eg: <code class="inline">whitespace</code>, <code class="inline">string</code>, and <code class="inline">value</code> is a placeholder for another grammar. So to parse the &quot;whitespace&quot;, we will need to look at the grammar for <strong>&quot;whitepsace&quot;</strong>.',qt,ks,pa='So, starting from the left, for an object, the first character has to be an open curly bracket, <code class="inline">{</code>. and then we have 2 options from here:',Ht,hs,ca='<li><code class="inline">whitespace</code> â†’ <code class="inline">}</code> â†’ end, or</li> <li><code class="inline">whitespace</code> â†’ <code class="inline">string</code> â†’ <code class="inline">whitespace</code> â†’ <code class="inline">:</code> â†’ <code class="inline">value</code> â†’ <code class="inline">}</code> â†’ end</li>',Mt,vs,ka='Of course, when you reach "value", you can choose to go to:',St,ys,ha='<li>â†’ <code class="inline">}</code> â†’ end, or</li> <li>â†’ <code class="inline">,</code> â†’ <code class="inline">whitespace</code> â†’ ... â†’ value</li>',Pt,ds,va="and you can keep looping, until you decide to go to:",jt,xs,ya='<li>â†’ <code class="inline">}</code> â†’ end.</li>',Et,us,da="So, I guess we are now acquainted with the railroad diagram, let's carry on to the next section.",We,r,ms,xa='<a href="#implementing-the-parser" id="implementing-the-parser">Implementing the parser</a>',Ot,fs,ua="Let's start with the following structure:",It,ws,De,Wn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Nt,gs,ma='We initialise <code class="inline">i</code> as the index for the current character, we will end as soon as <code class="inline">i</code> reaches the end of the <code class="inline">str</code>.',Jt,_s,fa="Let&#39;s implement the grammar for the <strong>&quot;object&quot;:</strong>",Ut,Cs,Ae,Dn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vt,bs,wa='In the <code class="inline">parseObject</code>, we will call parse of other grammars, like &quot;string&quot; and &quot;whitespace&quot;, when we implement them, everything will work ðŸ¤ž.',Wt,Ts,ga='One thing that I forgot to add is the comma, <code class="inline">,</code>. The <code class="inline">,</code> only appears before we start the second loop of <code class="inline">whitespace</code> â†’ <code class="inline">string</code> â†’ <code class="inline">whitespace</code> â†’ <code class="inline">:</code> â†’ ...',Dt,Ls,_a="Based on that, we add the following lines:",At,qs,ze,An=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zt,Hs,Ca="Some naming convention:",Rt,Ms,ba='<li>We call <code class="inline">parseSomething</code>, when we parse the code based on grammar and use the return value</li> <li>We call <code class="inline">eatSomething</code>, when we expect the character(s) to be there, but we are not using the character(s)</li> <li>We call <code class="inline">skipSomething</code>, when we are okay if the character(s) is not there.</li>',Bt,Ss,Ta='Let&#39;s implement the <code class="inline">eatComma</code> and <code class="inline">eatColon</code>:',Ft,Ps,Re,zn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;,&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Expected &quot;,&quot;.&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;:&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Expected &quot;:&quot;.&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$t,js,La='So we have finished implemented the <code class="inline">parseObject</code> grammar, but what is the return value from this parse function?',Kt,Es,qa="Well, we need to return a JavaScript object:",Gt,Os,Be,Rn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        result[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yt,Is,Ha=`Now that you've seen me implementing the "object" grammar, it's time for you to try out the "array" grammar:`,Qt,Ns,Ma='<img src="https://www.json.org/img/array.png" alt="https://www.json.org/img/array.png"/>',Xt,Js,Sa="Image source: https://www.json.org/img/array.png",Zt,Us,Fe,Bn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseArray</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;]&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;]&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,so,Vs,Pa='Now, move on to a more interesting grammar, "value":',eo,Ws,ja='<img src="https://www.json.org/img/value.png" alt="https://www.json.org/img/value.png"/>',to,Ds,Ea="Image source: https://www.json.org/img/value.png",oo,As,Oa='A value starts with "whitespace", then any of the following: "string", "number", "object", "array", "true", "false" or "null", and then end with a "whitespace":',ao,zs,$e,Fn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseNumber</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseArray</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;true&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;false&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;null&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,no,Rs,Ia='The <code class="inline">??</code> is called the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator" rel="nofollow">nullish coalescing operator</a>, it is like the <code class="inline">||</code> that we used to use for defaulting a value <code class="inline">foo || default</code>, except that <code class="inline">||</code> will return the <code class="inline">default</code> as long as <code class="inline">foo</code> is falsy, whereas the nullish coalescing operator will only return <code class="inline">default</code> when <code class="inline">foo</code> is either <code class="inline">null</code> or <code class="inline">undefined</code>.',lo,Bs,Na='The parseKeyword will check whether the current <code class="inline">str.slice(i)</code> matches the keyword string, if so, it will return the keyword value:',ro,Fs,Ke,$n=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(i</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,io,$s,Ja='That&#39;s it for <code class="inline">parseValue</code>!',po,Ks,Ua="We still have 3 more grammars to go, but I will save the length of this article, and implement them in the following CodeSandbox:",co,C,Va,ko,Gs,Wa='After we have finished implementing all the grammars, now let&#39;s return the value of the json, which is return by the <code class="inline">parseValue</code>:',ho,Ys,Ge,Kn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vo,Qs,Da="That's it!",yo,Xs,Aa="Well, not so fast my friend, we've just finished the happy path, what about unhappy path?",Ye,B,za='<h2><a href="#handling-the-unexpected-input" id="handling-the-unexpected-input">Handling the unexpected input</a></h2> <p>As a good developer, we need to handle the unhappy path gracefully as well. For a parser, that means shouting at the developer with appropriate error message.</p> <p>Let&#39;s handle the 2 most common error cases:</p> <ul><li>Unexpected token</li> <li>Unexpected end of string</li></ul>',Qe,F,Ra='<h3><a href="#unexpected-token" id="unexpected-token">Unexpected token</a></h3>',Xe,b,Zs,Ba='<a href="#unexpected-end-of-string" id="unexpected-end-of-string">Unexpected end of string</a>',xo,se,Fa='In all the while loops, for example the while loop in <code class="inline">parseObject</code>:',uo,ee,Ze,Gn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)">(str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span></code></pre>`,mo,te,$a=`We need to make sure that we don't access the character beyond the length of the string. This happens when the string ended unexpectedly, while we are still waiting for a closing character, "}" in this example:`,fo,oe,st,Yn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">checkUnexpectedEndOfInput</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,et,_,ae,Ka='<a href="#going-the-extra-mile" id="going-the-extra-mile">Going the extra mile</a>',wo,ne,Ga="Do you remember the time you were a junior developer, every time when you encounter Syntax error with cryptic messages, you are completely clueless of what went wrong?",go,le,Ya="Now you are more experienced, it is time to stop this virtuous cycle and stop yelling",_o,re,tt,Qn='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span></code></pre>',Co,ie,Qa="and leave the user staring at the screen confounded.",bo,pe,Xa="There's a lot of better ways of handling error messages than yelling, here are some points you can consider adding to your parser:",ot,j,ce,Za='<a href="#error-code-and-standard-error-message" id="error-code-and-standard-error-message">Error code and standard error message</a>',To,ke,sn="This is useful as a standard keyword for user to Google for help.",Lo,he,at,Xn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected end </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> input</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_002</span><span style="color: var(--shiki-color-text)"> Unexpected end </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> input</span></span></code></pre>`,nt,T,ve,en='<a href="#a-better-view-of-what-went-wrong" id="a-better-view-of-what-went-wrong">A better view of what went wrong</a>',qo,ye,tn="Parser like Babel, will show you a code frame, a snippet of your code with underline, arrow or highlighting of what went wrong",Ho,de,lt,Zn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)"> at position </span><span style="color: var(--shiki-token-constant)">5</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">a</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span></code></pre>`,Mo,xe,on="An example on how you can print out the code snippet:",So,ue,rt,sl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">printCodeSnippet</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.max</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">trimmed</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> from </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (trimmed </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> (i </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> from);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">snippet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      (trimmed </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;...&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(from</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-token-function)">.repeat</span><span style="color: var(--shiki-color-text)">(padding) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;^&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-token-function)">.repeat</span><span style="color: var(--shiki-color-text)">(padding) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> message</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(snippet);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,it,u,me,an='<a href="#suggestions-for-error-recovery" id="suggestions-for-error-recovery">Suggestions for error recovery</a>',Po,fe,nn="If possible, explain what went wrong and give suggestions on how to fix them",jo,we,pt,el=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)"> at position </span><span style="color: var(--shiki-token-constant)">5</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">a</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">.</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&quot;:&quot;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-string-expression)">&quot;bar&quot;</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">You can learn more about valid </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-color-text)"> string </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> http</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-token-comment)">//goo.gl/xxxxx</span></span></code></pre>`,Eo,ge,ln="If possible, provide suggestions based on the context that the parser has collected so far",Oo,_e,ct,tl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&quot;Lorem ipsum&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;&#96;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;Foo Bar&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;&#96;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;Lorem ipsum&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">^</span></span></code></pre>`,Io,Ce,rn="The suggestion that based on the context will feel more relatable and actionable.",No,be,pn="With all the suggestions in mind, check out the updated CodeSandbox with",Jo,Te,cn="<li>Meaningful error message</li> <li>Code snippet with error pointing point of failure</li> <li>Provide suggestions for error recovery</li>",Uo,L,kn,Vo,Le,hn='Also, read the <a href="https://elm-lang.org/news/compiler-errors-for-humans" rel="nofollow">&quot;Compiler Errors for Humans&quot;</a> by <a href="https://twitter.com/czaplic" rel="nofollow">Evan Czaplicki</a> for how Elm improves the UX problems of the Elm compiler.',kt,$,vn='<h2><a href="#summary" id="summary">Summary</a></h2> <p>To implement a parser, you need to start with the grammar.</p> <p>You can formalise the grammar with the railroad diagrams or the Backus-Naur Form. Designing the grammar is the hardest step.</p> <p>Once you&#39;ve settled with the grammar, you can start implementing the parser based on it.</p> <p>Error handling is important, what&#39;s more important is to have meaningful error messages, so that the user knows how to fix it.</p> <p>Now you know how a simple parser is implemented, it&#39;s time to set eyes on a more complex one:</p> <ul><li><a href="https://github.com/babel/babel/tree/master/packages/babel-parser" rel="nofollow">Babel parser</a></li> <li><a href="https://github.com/sveltejs/svelte/tree/master/src/compiler/parse" rel="nofollow">Svelte parser</a></li></ul> <p>Lastly, do follow <a href="https://twitter.com/cassidoo" rel="nofollow">@cassidoo</a>, her weekly newsletter is awesome!</p>';return{c(){x=e("p"),x.textContent=N,S=o(),M=e("blockquote"),M.innerHTML=g,q=o(),P=e("div"),He=new f(!1),Me=o(),J=e("p"),J.textContent=Do,Se=o(),U=e("div"),Pe=new f(!1),je=o(),V=e("p"),V.textContent=Ao,Ee=o(),W=e("ul"),W.innerHTML=zo,Oe=o(),D=e("p"),D.textContent=Ro,Ie=o(),A=e("p"),A.textContent=Bo,Ne=o(),z=e("p"),z.innerHTML=Fo,Je=o(),R=e("p"),R.textContent=$o,Ue=o(),c=e("section"),G=e("h2"),G.innerHTML=Ko,ht=o(),Y=e("p"),Y.innerHTML=Go,vt=o(),Q=e("ul"),Q.innerHTML=Yo,yt=o(),X=e("p"),X.innerHTML=Qo,dt=o(),Z=e("small"),Z.textContent=Xo,xt=o(),ss=e("ul"),ss.innerHTML=Zo,ut=o(),es=e("div"),Ve=new f(!1),mt=o(),ts=e("p"),ts.textContent=sa,ft=o(),os=e("p"),os.textContent=ea,wt=o(),as=e("p"),as.textContent=ta,gt=o(),ns=e("p"),ns.textContent=oa,_t=o(),ls=e("p"),ls.innerHTML=aa,Ct=o(),rs=e("small"),rs.textContent=na,bt=o(),is=e("p"),is.innerHTML=la,Tt=o(),ps=e("p"),ps.textContent=ra,Lt=o(),cs=e("p"),cs.innerHTML=ia,qt=o(),ks=e("p"),ks.innerHTML=pa,Ht=o(),hs=e("ul"),hs.innerHTML=ca,Mt=o(),vs=e("p"),vs.textContent=ka,St=o(),ys=e("ul"),ys.innerHTML=ha,Pt=o(),ds=e("p"),ds.textContent=va,jt=o(),xs=e("ul"),xs.innerHTML=ya,Et=o(),us=e("p"),us.textContent=da,We=o(),r=e("section"),ms=e("h2"),ms.innerHTML=xa,Ot=o(),fs=e("p"),fs.textContent=ua,It=o(),ws=e("div"),De=new f(!1),Nt=o(),gs=e("p"),gs.innerHTML=ma,Jt=o(),_s=e("p"),_s.innerHTML=fa,Ut=o(),Cs=e("div"),Ae=new f(!1),Vt=o(),bs=e("p"),bs.innerHTML=wa,Wt=o(),Ts=e("p"),Ts.innerHTML=ga,Dt=o(),Ls=e("p"),Ls.textContent=_a,At=o(),qs=e("div"),ze=new f(!1),zt=o(),Hs=e("p"),Hs.textContent=Ca,Rt=o(),Ms=e("ul"),Ms.innerHTML=ba,Bt=o(),Ss=e("p"),Ss.innerHTML=Ta,Ft=o(),Ps=e("div"),Re=new f(!1),$t=o(),js=e("p"),js.innerHTML=La,Kt=o(),Es=e("p"),Es.textContent=qa,Gt=o(),Os=e("div"),Be=new f(!1),Yt=o(),Is=e("p"),Is.textContent=Ha,Qt=o(),Ns=e("p"),Ns.innerHTML=Ma,Xt=o(),Js=e("small"),Js.textContent=Sa,Zt=o(),Us=e("div"),Fe=new f(!1),so=o(),Vs=e("p"),Vs.textContent=Pa,eo=o(),Ws=e("p"),Ws.innerHTML=ja,to=o(),Ds=e("small"),Ds.textContent=Ea,oo=o(),As=e("p"),As.textContent=Oa,ao=o(),zs=e("div"),$e=new f(!1),no=o(),Rs=e("p"),Rs.innerHTML=Ia,lo=o(),Bs=e("p"),Bs.innerHTML=Na,ro=o(),Fs=e("div"),Ke=new f(!1),io=o(),$s=e("p"),$s.innerHTML=Ja,po=o(),Ks=e("p"),Ks.textContent=Ua,co=o(),C=e("iframe"),ko=o(),Gs=e("p"),Gs.innerHTML=Wa,ho=o(),Ys=e("div"),Ge=new f(!1),vo=o(),Qs=e("p"),Qs.textContent=Da,yo=o(),Xs=e("p"),Xs.textContent=Aa,Ye=o(),B=e("section"),B.innerHTML=za,Qe=o(),F=e("section"),F.innerHTML=Ra,Xe=o(),b=e("section"),Zs=e("h3"),Zs.innerHTML=Ba,xo=o(),se=e("p"),se.innerHTML=Fa,uo=o(),ee=e("div"),Ze=new f(!1),mo=o(),te=e("p"),te.textContent=$a,fo=o(),oe=e("div"),st=new f(!1),et=o(),_=e("section"),ae=e("h2"),ae.innerHTML=Ka,wo=o(),ne=e("p"),ne.textContent=Ga,go=o(),le=e("p"),le.textContent=Ya,_o=o(),re=e("div"),tt=new f(!1),Co=o(),ie=e("p"),ie.textContent=Qa,bo=o(),pe=e("p"),pe.textContent=Xa,ot=o(),j=e("section"),ce=e("h3"),ce.innerHTML=Za,To=o(),ke=e("p"),ke.textContent=sn,Lo=o(),he=e("div"),at=new f(!1),nt=o(),T=e("section"),ve=e("h3"),ve.innerHTML=en,qo=o(),ye=e("p"),ye.textContent=tn,Ho=o(),de=e("div"),lt=new f(!1),Mo=o(),xe=e("p"),xe.textContent=on,So=o(),ue=e("div"),rt=new f(!1),it=o(),u=e("section"),me=e("h3"),me.innerHTML=an,Po=o(),fe=e("p"),fe.textContent=nn,jo=o(),we=e("div"),pt=new f(!1),Eo=o(),ge=e("p"),ge.textContent=ln,Oo=o(),_e=e("div"),ct=new f(!1),Io=o(),Ce=e("p"),Ce.textContent=rn,No=o(),be=e("p"),be.textContent=pn,Jo=o(),Te=e("ul"),Te.innerHTML=cn,Uo=o(),L=e("iframe"),Vo=o(),Le=e("p"),Le.innerHTML=hn,kt=o(),$=e("section"),$.innerHTML=vn,this.h()},l(n){x=t(n,"P",{"data-svelte-h":!0}),l(x)!=="svelte-1to34h5"&&(x.textContent=N),S=a(n),M=t(n,"BLOCKQUOTE",{"data-svelte-h":!0}),l(M)!=="svelte-1qfh0eu"&&(M.innerHTML=g),q=a(n),P=t(n,"DIV",{class:!0});var h=y(P);He=w(h,!1),h.forEach(p),Me=a(n),J=t(n,"P",{"data-svelte-h":!0}),l(J)!=="svelte-13nnyjx"&&(J.textContent=Do),Se=a(n),U=t(n,"DIV",{class:!0});var yn=y(U);Pe=w(yn,!1),yn.forEach(p),je=a(n),V=t(n,"P",{"data-svelte-h":!0}),l(V)!=="svelte-a5xqs6"&&(V.textContent=Ao),Ee=a(n),W=t(n,"UL",{"data-svelte-h":!0}),l(W)!=="svelte-g6jhps"&&(W.innerHTML=zo),Oe=a(n),D=t(n,"P",{"data-svelte-h":!0}),l(D)!=="svelte-1js6w9g"&&(D.textContent=Ro),Ie=a(n),A=t(n,"P",{"data-svelte-h":!0}),l(A)!=="svelte-dvvyz0"&&(A.textContent=Bo),Ne=a(n),z=t(n,"P",{"data-svelte-h":!0}),l(z)!=="svelte-11us17i"&&(z.innerHTML=Fo),Je=a(n),R=t(n,"P",{"data-svelte-h":!0}),l(R)!=="svelte-fr2ehi"&&(R.textContent=$o),Ue=a(n),c=t(n,"SECTION",{});var k=y(c);G=t(k,"H2",{"data-svelte-h":!0}),l(G)!=="svelte-tiz0gg"&&(G.innerHTML=Ko),ht=a(k),Y=t(k,"P",{"data-svelte-h":!0}),l(Y)!=="svelte-wl37is"&&(Y.innerHTML=Go),vt=a(k),Q=t(k,"UL",{"data-svelte-h":!0}),l(Q)!=="svelte-yjwk41"&&(Q.innerHTML=Yo),yt=a(k),X=t(k,"P",{"data-svelte-h":!0}),l(X)!=="svelte-1j9024q"&&(X.innerHTML=Qo),dt=a(k),Z=t(k,"SMALL",{"data-svelte-h":!0}),l(Z)!=="svelte-46strv"&&(Z.textContent=Xo),xt=a(k),ss=t(k,"UL",{"data-svelte-h":!0}),l(ss)!=="svelte-1u9omzv"&&(ss.innerHTML=Zo),ut=a(k),es=t(k,"DIV",{class:!0});var dn=y(es);Ve=w(dn,!1),dn.forEach(p),mt=a(k),ts=t(k,"P",{"data-svelte-h":!0}),l(ts)!=="svelte-rqobd7"&&(ts.textContent=sa),ft=a(k),os=t(k,"P",{"data-svelte-h":!0}),l(os)!=="svelte-6fbsez"&&(os.textContent=ea),wt=a(k),as=t(k,"P",{"data-svelte-h":!0}),l(as)!=="svelte-163h9re"&&(as.textContent=ta),gt=a(k),ns=t(k,"P",{"data-svelte-h":!0}),l(ns)!=="svelte-c41wed"&&(ns.textContent=oa),_t=a(k),ls=t(k,"P",{"data-svelte-h":!0}),l(ls)!=="svelte-1j9024q"&&(ls.innerHTML=aa),Ct=a(k),rs=t(k,"SMALL",{"data-svelte-h":!0}),l(rs)!=="svelte-46strv"&&(rs.textContent=na),bt=a(k),is=t(k,"P",{"data-svelte-h":!0}),l(is)!=="svelte-1vho4p8"&&(is.innerHTML=la),Tt=a(k),ps=t(k,"P",{"data-svelte-h":!0}),l(ps)!=="svelte-cyh56c"&&(ps.textContent=ra),Lt=a(k),cs=t(k,"P",{"data-svelte-h":!0}),l(cs)!=="svelte-1jk0ylu"&&(cs.innerHTML=ia),qt=a(k),ks=t(k,"P",{"data-svelte-h":!0}),l(ks)!=="svelte-h8rm40"&&(ks.innerHTML=pa),Ht=a(k),hs=t(k,"UL",{"data-svelte-h":!0}),l(hs)!=="svelte-1myzyvi"&&(hs.innerHTML=ca),Mt=a(k),vs=t(k,"P",{"data-svelte-h":!0}),l(vs)!=="svelte-8hdh3"&&(vs.textContent=ka),St=a(k),ys=t(k,"UL",{"data-svelte-h":!0}),l(ys)!=="svelte-calwwl"&&(ys.innerHTML=ha),Pt=a(k),ds=t(k,"P",{"data-svelte-h":!0}),l(ds)!=="svelte-aeiaj6"&&(ds.textContent=va),jt=a(k),xs=t(k,"UL",{"data-svelte-h":!0}),l(xs)!=="svelte-13brkg9"&&(xs.innerHTML=ya),Et=a(k),us=t(k,"P",{"data-svelte-h":!0}),l(us)!=="svelte-1lq7uis"&&(us.textContent=da),k.forEach(p),We=a(n),r=t(n,"SECTION",{});var i=y(r);ms=t(i,"H2",{"data-svelte-h":!0}),l(ms)!=="svelte-xh6ddv"&&(ms.innerHTML=xa),Ot=a(i),fs=t(i,"P",{"data-svelte-h":!0}),l(fs)!=="svelte-5admhe"&&(fs.textContent=ua),It=a(i),ws=t(i,"DIV",{class:!0});var xn=y(ws);De=w(xn,!1),xn.forEach(p),Nt=a(i),gs=t(i,"P",{"data-svelte-h":!0}),l(gs)!=="svelte-1iynse9"&&(gs.innerHTML=ma),Jt=a(i),_s=t(i,"P",{"data-svelte-h":!0}),l(_s)!=="svelte-40kakk"&&(_s.innerHTML=fa),Ut=a(i),Cs=t(i,"DIV",{class:!0});var un=y(Cs);Ae=w(un,!1),un.forEach(p),Vt=a(i),bs=t(i,"P",{"data-svelte-h":!0}),l(bs)!=="svelte-7wew8g"&&(bs.innerHTML=wa),Wt=a(i),Ts=t(i,"P",{"data-svelte-h":!0}),l(Ts)!=="svelte-tqk932"&&(Ts.innerHTML=ga),Dt=a(i),Ls=t(i,"P",{"data-svelte-h":!0}),l(Ls)!=="svelte-1kdehfb"&&(Ls.textContent=_a),At=a(i),qs=t(i,"DIV",{class:!0});var mn=y(qs);ze=w(mn,!1),mn.forEach(p),zt=a(i),Hs=t(i,"P",{"data-svelte-h":!0}),l(Hs)!=="svelte-19hbacz"&&(Hs.textContent=Ca),Rt=a(i),Ms=t(i,"UL",{"data-svelte-h":!0}),l(Ms)!=="svelte-q0diib"&&(Ms.innerHTML=ba),Bt=a(i),Ss=t(i,"P",{"data-svelte-h":!0}),l(Ss)!=="svelte-l40wgw"&&(Ss.innerHTML=Ta),Ft=a(i),Ps=t(i,"DIV",{class:!0});var fn=y(Ps);Re=w(fn,!1),fn.forEach(p),$t=a(i),js=t(i,"P",{"data-svelte-h":!0}),l(js)!=="svelte-1c5iddq"&&(js.innerHTML=La),Kt=a(i),Es=t(i,"P",{"data-svelte-h":!0}),l(Es)!=="svelte-1qpkus6"&&(Es.textContent=qa),Gt=a(i),Os=t(i,"DIV",{class:!0});var wn=y(Os);Be=w(wn,!1),wn.forEach(p),Yt=a(i),Is=t(i,"P",{"data-svelte-h":!0}),l(Is)!=="svelte-14jkd8q"&&(Is.textContent=Ha),Qt=a(i),Ns=t(i,"P",{"data-svelte-h":!0}),l(Ns)!=="svelte-1x4y0w8"&&(Ns.innerHTML=Ma),Xt=a(i),Js=t(i,"SMALL",{"data-svelte-h":!0}),l(Js)!=="svelte-vaf6rj"&&(Js.textContent=Sa),Zt=a(i),Us=t(i,"DIV",{class:!0});var gn=y(Us);Fe=w(gn,!1),gn.forEach(p),so=a(i),Vs=t(i,"P",{"data-svelte-h":!0}),l(Vs)!=="svelte-1jqkywr"&&(Vs.textContent=Pa),eo=a(i),Ws=t(i,"P",{"data-svelte-h":!0}),l(Ws)!=="svelte-thcvug"&&(Ws.innerHTML=ja),to=a(i),Ds=t(i,"SMALL",{"data-svelte-h":!0}),l(Ds)!=="svelte-1lqgs0v"&&(Ds.textContent=Ea),oo=a(i),As=t(i,"P",{"data-svelte-h":!0}),l(As)!=="svelte-5o1ylw"&&(As.textContent=Oa),ao=a(i),zs=t(i,"DIV",{class:!0});var _n=y(zs);$e=w(_n,!1),_n.forEach(p),no=a(i),Rs=t(i,"P",{"data-svelte-h":!0}),l(Rs)!=="svelte-uez25i"&&(Rs.innerHTML=Ia),lo=a(i),Bs=t(i,"P",{"data-svelte-h":!0}),l(Bs)!=="svelte-1jjnecr"&&(Bs.innerHTML=Na),ro=a(i),Fs=t(i,"DIV",{class:!0});var Cn=y(Fs);Ke=w(Cn,!1),Cn.forEach(p),io=a(i),$s=t(i,"P",{"data-svelte-h":!0}),l($s)!=="svelte-u7mwt1"&&($s.innerHTML=Ja),po=a(i),Ks=t(i,"P",{"data-svelte-h":!0}),l(Ks)!=="svelte-19o47zv"&&(Ks.textContent=Ua),co=a(i),C=t(i,"IFRAME",{src:!0,style:!0,title:!0,allow:!0,sandbox:!0}),y(C).forEach(p),ko=a(i),Gs=t(i,"P",{"data-svelte-h":!0}),l(Gs)!=="svelte-13t2ntw"&&(Gs.innerHTML=Wa),ho=a(i),Ys=t(i,"DIV",{class:!0});var bn=y(Ys);Ge=w(bn,!1),bn.forEach(p),vo=a(i),Qs=t(i,"P",{"data-svelte-h":!0}),l(Qs)!=="svelte-fr2jpp"&&(Qs.textContent=Da),yo=a(i),Xs=t(i,"P",{"data-svelte-h":!0}),l(Xs)!=="svelte-1mz7la7"&&(Xs.textContent=Aa),i.forEach(p),Ye=a(n),B=t(n,"SECTION",{"data-svelte-h":!0}),l(B)!=="svelte-z0ztqb"&&(B.innerHTML=za),Qe=a(n),F=t(n,"SECTION",{"data-svelte-h":!0}),l(F)!=="svelte-306vqp"&&(F.innerHTML=Ra),Xe=a(n),b=t(n,"SECTION",{});var E=y(b);Zs=t(E,"H3",{"data-svelte-h":!0}),l(Zs)!=="svelte-122ps7e"&&(Zs.innerHTML=Ba),xo=a(E),se=t(E,"P",{"data-svelte-h":!0}),l(se)!=="svelte-wrefsu"&&(se.innerHTML=Fa),uo=a(E),ee=t(E,"DIV",{class:!0});var Tn=y(ee);Ze=w(Tn,!1),Tn.forEach(p),mo=a(E),te=t(E,"P",{"data-svelte-h":!0}),l(te)!=="svelte-7scisj"&&(te.textContent=$a),fo=a(E),oe=t(E,"DIV",{class:!0});var Ln=y(oe);st=w(Ln,!1),Ln.forEach(p),E.forEach(p),et=a(n),_=t(n,"SECTION",{});var H=y(_);ae=t(H,"H2",{"data-svelte-h":!0}),l(ae)!=="svelte-1q24fb8"&&(ae.innerHTML=Ka),wo=a(H),ne=t(H,"P",{"data-svelte-h":!0}),l(ne)!=="svelte-1i9i1ny"&&(ne.textContent=Ga),go=a(H),le=t(H,"P",{"data-svelte-h":!0}),l(le)!=="svelte-wko0x"&&(le.textContent=Ya),_o=a(H),re=t(H,"DIV",{class:!0});var qn=y(re);tt=w(qn,!1),qn.forEach(p),Co=a(H),ie=t(H,"P",{"data-svelte-h":!0}),l(ie)!=="svelte-1cjayih"&&(ie.textContent=Qa),bo=a(H),pe=t(H,"P",{"data-svelte-h":!0}),l(pe)!=="svelte-xqfhqt"&&(pe.textContent=Xa),H.forEach(p),ot=a(n),j=t(n,"SECTION",{});var qe=y(j);ce=t(qe,"H3",{"data-svelte-h":!0}),l(ce)!=="svelte-1hlgr3o"&&(ce.innerHTML=Za),To=a(qe),ke=t(qe,"P",{"data-svelte-h":!0}),l(ke)!=="svelte-1e9vm99"&&(ke.textContent=sn),Lo=a(qe),he=t(qe,"DIV",{class:!0});var Hn=y(he);at=w(Hn,!1),Hn.forEach(p),qe.forEach(p),nt=a(n),T=t(n,"SECTION",{});var O=y(T);ve=t(O,"H3",{"data-svelte-h":!0}),l(ve)!=="svelte-fvzase"&&(ve.innerHTML=en),qo=a(O),ye=t(O,"P",{"data-svelte-h":!0}),l(ye)!=="svelte-ev06j8"&&(ye.textContent=tn),Ho=a(O),de=t(O,"DIV",{class:!0});var Mn=y(de);lt=w(Mn,!1),Mn.forEach(p),Mo=a(O),xe=t(O,"P",{"data-svelte-h":!0}),l(xe)!=="svelte-16uf4ev"&&(xe.textContent=on),So=a(O),ue=t(O,"DIV",{class:!0});var Sn=y(ue);rt=w(Sn,!1),Sn.forEach(p),O.forEach(p),it=a(n),u=t(n,"SECTION",{});var m=y(u);me=t(m,"H3",{"data-svelte-h":!0}),l(me)!=="svelte-roax55"&&(me.innerHTML=an),Po=a(m),fe=t(m,"P",{"data-svelte-h":!0}),l(fe)!=="svelte-1szo6ca"&&(fe.textContent=nn),jo=a(m),we=t(m,"DIV",{class:!0});var Pn=y(we);pt=w(Pn,!1),Pn.forEach(p),Eo=a(m),ge=t(m,"P",{"data-svelte-h":!0}),l(ge)!=="svelte-1es2t5d"&&(ge.textContent=ln),Oo=a(m),_e=t(m,"DIV",{class:!0});var jn=y(_e);ct=w(jn,!1),jn.forEach(p),Io=a(m),Ce=t(m,"P",{"data-svelte-h":!0}),l(Ce)!=="svelte-loklxk"&&(Ce.textContent=rn),No=a(m),be=t(m,"P",{"data-svelte-h":!0}),l(be)!=="svelte-1dhsw"&&(be.textContent=pn),Jo=a(m),Te=t(m,"UL",{"data-svelte-h":!0}),l(Te)!=="svelte-9kp1uj"&&(Te.innerHTML=cn),Uo=a(m),L=t(m,"IFRAME",{src:!0,style:!0,title:!0,allow:!0,sandbox:!0}),y(L).forEach(p),Vo=a(m),Le=t(m,"P",{"data-svelte-h":!0}),l(Le)!=="svelte-14np4na"&&(Le.innerHTML=hn),m.forEach(p),kt=a(n),$=t(n,"SECTION",{"data-svelte-h":!0}),l($)!=="svelte-lzfwz1"&&($.innerHTML=vn),this.h()},h(){He.a=null,d(P,"class","code-section"),Pe.a=null,d(U,"class","code-section"),Ve.a=null,d(es,"class","code-section"),De.a=null,d(ws,"class","code-section"),Ae.a=null,d(Cs,"class","code-section"),ze.a=null,d(qs,"class","code-section"),Re.a=null,d(Ps,"class","code-section"),Be.a=null,d(Os,"class","code-section"),Fe.a=null,d(Us,"class","code-section"),$e.a=null,d(zs,"class","code-section"),Ke.a=null,d(Fs,"class","code-section"),On(C.src,Va="https://codesandbox.io/embed/json-parser-k4c3w?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark&view=editor")||d(C,"src",Va),I(C,"width","100%"),I(C,"height","500px"),I(C,"border","0"),I(C,"border-radius","4px"),I(C,"overflow","hidden"),d(C,"title","JSON parser"),d(C,"allow","geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb"),d(C,"sandbox","allow-modals allow-forms allow-popups allow-scripts allow-same-origin"),Ge.a=null,d(Ys,"class","code-section"),Ze.a=null,d(ee,"class","code-section"),st.a=null,d(oe,"class","code-section"),tt.a=null,d(re,"class","code-section"),at.a=null,d(he,"class","code-section"),lt.a=null,d(de,"class","code-section"),rt.a=null,d(ue,"class","code-section"),pt.a=null,d(we,"class","code-section"),ct.a=null,d(_e,"class","code-section"),On(L.src,kn="https://codesandbox.io/embed/json-parser-hjwxk?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark&view=editor")||d(L,"src",kn),I(L,"width","100%"),I(L,"height","500px"),I(L,"border","0"),I(L,"border-radius","4px"),I(L,"overflow","hidden"),d(L,"title","JSON parser (with error handling)"),d(L,"allow","geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb"),d(L,"sandbox","allow-modals allow-forms allow-popups allow-scripts allow-same-origin")},m(n,h){v(n,x,h),v(n,S,h),v(n,M,h),v(n,q,h),v(n,P,h),He.m(Jn,P),v(n,Me,h),v(n,J,h),v(n,Se,h),v(n,U,h),Pe.m(Un,U),v(n,je,h),v(n,V,h),v(n,Ee,h),v(n,W,h),v(n,Oe,h),v(n,D,h),v(n,Ie,h),v(n,A,h),v(n,Ne,h),v(n,z,h),v(n,Je,h),v(n,R,h),v(n,Ue,h),v(n,c,h),s(c,G),s(c,ht),s(c,Y),s(c,vt),s(c,Q),s(c,yt),s(c,X),s(c,dt),s(c,Z),s(c,xt),s(c,ss),s(c,ut),s(c,es),Ve.m(Vn,es),s(c,mt),s(c,ts),s(c,ft),s(c,os),s(c,wt),s(c,as),s(c,gt),s(c,ns),s(c,_t),s(c,ls),s(c,Ct),s(c,rs),s(c,bt),s(c,is),s(c,Tt),s(c,ps),s(c,Lt),s(c,cs),s(c,qt),s(c,ks),s(c,Ht),s(c,hs),s(c,Mt),s(c,vs),s(c,St),s(c,ys),s(c,Pt),s(c,ds),s(c,jt),s(c,xs),s(c,Et),s(c,us),v(n,We,h),v(n,r,h),s(r,ms),s(r,Ot),s(r,fs),s(r,It),s(r,ws),De.m(Wn,ws),s(r,Nt),s(r,gs),s(r,Jt),s(r,_s),s(r,Ut),s(r,Cs),Ae.m(Dn,Cs),s(r,Vt),s(r,bs),s(r,Wt),s(r,Ts),s(r,Dt),s(r,Ls),s(r,At),s(r,qs),ze.m(An,qs),s(r,zt),s(r,Hs),s(r,Rt),s(r,Ms),s(r,Bt),s(r,Ss),s(r,Ft),s(r,Ps),Re.m(zn,Ps),s(r,$t),s(r,js),s(r,Kt),s(r,Es),s(r,Gt),s(r,Os),Be.m(Rn,Os),s(r,Yt),s(r,Is),s(r,Qt),s(r,Ns),s(r,Xt),s(r,Js),s(r,Zt),s(r,Us),Fe.m(Bn,Us),s(r,so),s(r,Vs),s(r,eo),s(r,Ws),s(r,to),s(r,Ds),s(r,oo),s(r,As),s(r,ao),s(r,zs),$e.m(Fn,zs),s(r,no),s(r,Rs),s(r,lo),s(r,Bs),s(r,ro),s(r,Fs),Ke.m($n,Fs),s(r,io),s(r,$s),s(r,po),s(r,Ks),s(r,co),s(r,C),s(r,ko),s(r,Gs),s(r,ho),s(r,Ys),Ge.m(Kn,Ys),s(r,vo),s(r,Qs),s(r,yo),s(r,Xs),v(n,Ye,h),v(n,B,h),v(n,Qe,h),v(n,F,h),v(n,Xe,h),v(n,b,h),s(b,Zs),s(b,xo),s(b,se),s(b,uo),s(b,ee),Ze.m(Gn,ee),s(b,mo),s(b,te),s(b,fo),s(b,oe),st.m(Yn,oe),v(n,et,h),v(n,_,h),s(_,ae),s(_,wo),s(_,ne),s(_,go),s(_,le),s(_,_o),s(_,re),tt.m(Qn,re),s(_,Co),s(_,ie),s(_,bo),s(_,pe),v(n,ot,h),v(n,j,h),s(j,ce),s(j,To),s(j,ke),s(j,Lo),s(j,he),at.m(Xn,he),v(n,nt,h),v(n,T,h),s(T,ve),s(T,qo),s(T,ye),s(T,Ho),s(T,de),lt.m(Zn,de),s(T,Mo),s(T,xe),s(T,So),s(T,ue),rt.m(sl,ue),v(n,it,h),v(n,u,h),s(u,me),s(u,Po),s(u,fe),s(u,jo),s(u,we),pt.m(el,we),s(u,Eo),s(u,ge),s(u,Oo),s(u,_e),ct.m(tl,_e),s(u,Io),s(u,Ce),s(u,No),s(u,be),s(u,Jo),s(u,Te),s(u,Uo),s(u,L),s(u,Vo),s(u,Le),v(n,kt,h),v(n,$,h)},p:nl,d(n){n&&(p(x),p(S),p(M),p(q),p(P),p(Me),p(J),p(Se),p(U),p(je),p(V),p(Ee),p(W),p(Oe),p(D),p(Ie),p(A),p(Ne),p(z),p(Je),p(R),p(Ue),p(c),p(We),p(r),p(Ye),p(B),p(Qe),p(F),p(Xe),p(b),p(et),p(_),p(ot),p(j),p(nt),p(T),p(it),p(u),p(kt),p($))}}}function ml(K){let x,N;const S=[K[0],Nn];let M={$$slots:{default:[ul]},$$scope:{ctx:K}};for(let g=0;g<S.length;g+=1)M=Wo(M,S[g]);return x=new dl({props:M}),{c(){il(x.$$.fragment)},l(g){pl(x.$$.fragment,g)},m(g,q){cl(x,g,q),N=!0},p(g,[q]){const P=q&1?yl(S,[q&1&&In(g[0]),q&0&&In(Nn)]):{};q&2&&(P.$$scope={dirty:q,ctx:g}),x.$set(P)},i(g){N||(kl(x.$$.fragment,g),N=!0)},o(g){hl(x.$$.fragment,g),N=!1},d(g){vl(x,g)}}}const Nn={title:"JSON Parser with JavaScript",date:"2019-12-12T08:00:00Z",description:"Step-by-step guide on implementing a JSON parser",tags:["JavaScript","AST"],series:"AST",label:"blog",tableOfContents:[{link:"understand-the-grammar",title:"Understand the grammar"},{link:"implementing-the-parser",title:"Implementing the parser"},{link:"handling-the-unexpected-input",title:"Handling the unexpected input",nested:[{link:"unexpected-token",title:"Unexpected token"},{link:"unexpected-end-of-string",title:"Unexpected end of string"}]},{link:"going-the-extra-mile",title:"Going the extra mile",nested:[{link:"error-code-and-standard-error-message",title:"Error code and standard error message"},{link:"a-better-view-of-what-went-wrong",title:"A better view of what went wrong"},{link:"suggestions-for-error-recovery",title:"Suggestions for error recovery"}]},{link:"summary",title:"Summary"}]};function fl(K,x,N){return al("blog",{image:xl}),K.$$set=S=>{N(0,x=Wo(Wo({},x),En(S)))},x=En(x),[x]}class bl extends ll{constructor(x){super(),rl(this,x,fl,ml,ol,{})}}export{bl as component};
