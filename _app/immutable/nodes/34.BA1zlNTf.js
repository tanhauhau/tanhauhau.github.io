import{s as Gs,d as fs,e as Zs,f as Qs,n as Js}from"../chunks/scheduler.D6VJxl8L.js";import{S as Xs,i as se,m as ee,n as oe,o as te,t as ne,a as ae,p as re,e as t,s as a,H as us,c as n,q as p,h as r,d as K,r as xs,g as y,u as ms,j as x,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as le,a as Ws}from"../chunks/code-snippet.Gym6WUAG.js";import{B as ie}from"../chunks/BlogLayout.BLHkC4CD.js";import{t as pe}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function ce(w){let l,v="<p>This article assumes you have basic knowledge on React and Redux. If you like to learn more about React or Redux, you can go here to learn more.</p>",d,m,c,i,u,ws='<a href="#context" id="context">Context</a>',F,g,gs="A common pattern to write a React Redux application is to have:",G,_,_s='<li>a <code class="inline">rootReducer</code> that imports <strong>all the reducers</strong> that will be used in the application</li> <li>a <code class="inline">reduxStore</code> that is created using <code class="inline">rootReducer</code></li> <li>the React application</li> <li><a href="https://github.com/reduxjs/react-redux" rel="nofollow">react-redux</a> that bridge React components and Redux together</li>',Z,b,bs="This is what its going to be look like in code:",J,C,Q,Vs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// root.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; Provider &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-redux&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; store &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;./store&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> CustomComponent </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./CustomComponent&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// react-redux provider to provide the store in React context</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-constant)">Provider</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">store</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;store&#125;&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-constant)">CustomComponent</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-constant)">Provider</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// store.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; createStore</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> combineReducers &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;redux&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// import all your reducers here</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> reducerA </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./reducerA&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> reducerB </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./reducerB&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> reducerC </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./reducerC&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// combine all your reducers here</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rootReducer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">combineReducers</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  reducerA</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> reducerA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  reducerB</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> reducerB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  reducerC</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> reducerC</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the redux store!</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">store</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createStore</span><span style="color: var(--shiki-color-text)">(rootReducer);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CustomComponent.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; connect &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-redux&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CustomComponent</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mapStateToProps</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> state </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;&#125;; &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mapDispatchToProps</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> dispatch </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> ( return &#123;&#125;; &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">export default </span><span style="color: var(--shiki-token-function)">connect</span><span style="color: var(--shiki-color-text)">(mapStateToProps</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> mapDispatchToProps)(CustomComponent);</span></span></code></pre>`,W,f,Cs='<h2><a href="#problem" id="problem">Problem</a></h2> <p>Everything seemed perfect, until your app size increases too fast…</p> <p>It takes much longer time to load your web app, and things got worse with a crappy internet speed…</p>',N,e,T,Ts='<a href="#solution" id="solution">Solution</a>',X,H,Hs='I know you <a href="http://lmgtfy.com/?q=code-splitting" rel="nofollow">must have googled for the solution online.</a> 😉',ss,L,Ls='So, lets talk about one of the solutions that you can do to make your app bundle smaller  — <a href="https://webpack.js.org/guides/code-splitting/" rel="nofollow"> code splitting using webpack</a>!',es,M,Ms='<p>Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time. —<a href="https://webpack.js.org/guides/code-splitting/" rel="nofollow"> webpack</a></p>',os,R,Rs='Great! Webpack provides <a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" rel="nofollow">import()</a> syntax, that conforms to the <a href="https://github.com/tc39/proposal-dynamic-import" rel="nofollow">ECMAScript proposal</a> for dynamic imports. Let’s try to split our code <a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/code-splitting.md" rel="nofollow">based on different entry points of your routes</a>. This makes perfect sense, user that goes to <code class="inline">mywebsite/foo</code> do not need code that is written only for <code class="inline">mywebsite/bar</code>!',ts,P,Ps='By now, you should realise, reducer that is written only for <code class="inline">mywebsite/bar</code>, shouldn’t be imported or included when you are visiting <code class="inline">mywebsite/foo</code>!',ns,j,js="<p>Then how do I dynamically load reducers for code splitting in a Redux application?</p>",as,q,qs='That’s a <a href="https://stackoverflow.com/questions/32968016/how-to-dynamically-load-reducers-for-code-splitting-in-a-redux-application" rel="nofollow">StackOverflow thread</a> that you should read about.',rs,O,Os="<p>There may be neater way of expressing this — I’m just showing the idea.</p>",ls,S,Ss="Yes, one of a neater way is to write a higher order component that takes care of dynamically loading of reducers.",is,I,V,Ys=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> gameReducer </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./gameReducer&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> injectReducer </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;inducer&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CustomComponent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">React</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// component logic here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">injectReducer</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  game</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> gameReducer</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)(CustomComponent);</span></span></code></pre>`,ps,E,Is='<a href="https://www.npmjs.com/package/inducer" rel="nofollow">inducer</a> (read: <strong>In</strong>ject Re<strong>ducer</strong>) gives you a HOC that will add you reducer to the Redux store that is currently using during <code class="inline">componentWillMount</code> and remove it during <code class="inline">componentWillUnmount</code>. It’s that simple!',cs,B,Es="<p>So, how does inducer actually works?</p>",ks,z,Bs='Firstly, inducer HOC gets the store from context, provided from the StoreProvider of <code class="inline">react-redux</code> .',hs,$,Y,Fs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">InjectReducer</span><span style="color: var(--shiki-color-text)">.contextTypes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  store</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PropTypes</span><span style="color: var(--shiki-token-function)">.shape</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     replaceReducer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PropTypes</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">func</span><span style="color: var(--shiki-color-text)">.isRequired</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,ys,U,zs='Next, inducer HOC comes up with the new async root reducer that includes the reducer you want to include, and use <a href="https://redux.js.org/api/store#replaceReducer" rel="nofollow">replaceReducer</a> from Redux to updates the reducer.',ds,A,$s='When <code class="inline">componentWillUnmount</code> inducer will remove your reducer and call <code class="inline">replaceReducer</code> again!',vs,D,Us='You can read the <a href="https://github.com/tanhauhau/inducer/blob/master/src/index.js" rel="nofollow">complete code</a> here!';return{c(){l=t("blockquote"),l.innerHTML=v,d=a(),m=t("hr"),c=a(),i=t("section"),u=t("h2"),u.innerHTML=ws,F=a(),g=t("p"),g.textContent=gs,G=a(),_=t("ul"),_.innerHTML=_s,Z=a(),b=t("p"),b.textContent=bs,J=a(),C=t("div"),Q=new us(!1),W=a(),f=t("section"),f.innerHTML=Cs,N=a(),e=t("section"),T=t("h2"),T.innerHTML=Ts,X=a(),H=t("p"),H.innerHTML=Hs,ss=a(),L=t("p"),L.innerHTML=Ls,es=a(),M=t("blockquote"),M.innerHTML=Ms,os=a(),R=t("p"),R.innerHTML=Rs,ts=a(),P=t("p"),P.innerHTML=Ps,ns=a(),j=t("blockquote"),j.innerHTML=js,as=a(),q=t("p"),q.innerHTML=qs,rs=a(),O=t("blockquote"),O.innerHTML=Os,ls=a(),S=t("p"),S.textContent=Ss,is=a(),I=t("div"),V=new us(!1),ps=a(),E=t("p"),E.innerHTML=Is,cs=a(),B=t("blockquote"),B.innerHTML=Es,ks=a(),z=t("p"),z.innerHTML=Bs,hs=a(),$=t("div"),Y=new us(!1),ys=a(),U=t("p"),U.innerHTML=zs,ds=a(),A=t("p"),A.innerHTML=$s,vs=a(),D=t("p"),D.innerHTML=Us,this.h()},l(k){l=n(k,"BLOCKQUOTE",{"data-svelte-h":!0}),p(l)!=="svelte-1w1mtvj"&&(l.innerHTML=v),d=r(k),m=n(k,"HR",{}),c=r(k),i=n(k,"SECTION",{});var h=K(i);u=n(h,"H2",{"data-svelte-h":!0}),p(u)!=="svelte-1pmuhmn"&&(u.innerHTML=ws),F=r(h),g=n(h,"P",{"data-svelte-h":!0}),p(g)!=="svelte-zt7lzd"&&(g.textContent=gs),G=r(h),_=n(h,"UL",{"data-svelte-h":!0}),p(_)!=="svelte-v6peyk"&&(_.innerHTML=_s),Z=r(h),b=n(h,"P",{"data-svelte-h":!0}),p(b)!=="svelte-5nag28"&&(b.textContent=bs),J=r(h),C=n(h,"DIV",{class:!0});var As=K(C);Q=xs(As,!1),As.forEach(y),h.forEach(y),W=r(k),f=n(k,"SECTION",{"data-svelte-h":!0}),p(f)!=="svelte-x27jkm"&&(f.innerHTML=Cs),N=r(k),e=n(k,"SECTION",{});var o=K(e);T=n(o,"H2",{"data-svelte-h":!0}),p(T)!=="svelte-1socz9v"&&(T.innerHTML=Ts),X=r(o),H=n(o,"P",{"data-svelte-h":!0}),p(H)!=="svelte-1u536qm"&&(H.innerHTML=Hs),ss=r(o),L=n(o,"P",{"data-svelte-h":!0}),p(L)!=="svelte-8hx5o8"&&(L.innerHTML=Ls),es=r(o),M=n(o,"BLOCKQUOTE",{"data-svelte-h":!0}),p(M)!=="svelte-b33plt"&&(M.innerHTML=Ms),os=r(o),R=n(o,"P",{"data-svelte-h":!0}),p(R)!=="svelte-nscixm"&&(R.innerHTML=Rs),ts=r(o),P=n(o,"P",{"data-svelte-h":!0}),p(P)!=="svelte-1qjdzrt"&&(P.innerHTML=Ps),ns=r(o),j=n(o,"BLOCKQUOTE",{"data-svelte-h":!0}),p(j)!=="svelte-1shaz4r"&&(j.innerHTML=js),as=r(o),q=n(o,"P",{"data-svelte-h":!0}),p(q)!=="svelte-1p53u2u"&&(q.innerHTML=qs),rs=r(o),O=n(o,"BLOCKQUOTE",{"data-svelte-h":!0}),p(O)!=="svelte-qjt4ws"&&(O.innerHTML=Os),ls=r(o),S=n(o,"P",{"data-svelte-h":!0}),p(S)!=="svelte-cpgycy"&&(S.textContent=Ss),is=r(o),I=n(o,"DIV",{class:!0});var Ds=K(I);V=xs(Ds,!1),Ds.forEach(y),ps=r(o),E=n(o,"P",{"data-svelte-h":!0}),p(E)!=="svelte-1pl12mn"&&(E.innerHTML=Is),cs=r(o),B=n(o,"BLOCKQUOTE",{"data-svelte-h":!0}),p(B)!=="svelte-1upquq4"&&(B.innerHTML=Es),ks=r(o),z=n(o,"P",{"data-svelte-h":!0}),p(z)!=="svelte-11dmazz"&&(z.innerHTML=Bs),hs=r(o),$=n(o,"DIV",{class:!0});var Ks=K($);Y=xs(Ks,!1),Ks.forEach(y),ys=r(o),U=n(o,"P",{"data-svelte-h":!0}),p(U)!=="svelte-11ixrh4"&&(U.innerHTML=zs),ds=r(o),A=n(o,"P",{"data-svelte-h":!0}),p(A)!=="svelte-1gbc22"&&(A.innerHTML=$s),vs=r(o),D=n(o,"P",{"data-svelte-h":!0}),p(D)!=="svelte-nw1qq8"&&(D.innerHTML=Us),o.forEach(y),this.h()},h(){Q.a=null,ms(C,"class","code-section"),V.a=null,ms(I,"class","code-section"),Y.a=null,ms($,"class","code-section")},m(k,h){x(k,l,h),x(k,d,h),x(k,m,h),x(k,c,h),x(k,i,h),s(i,u),s(i,F),s(i,g),s(i,G),s(i,_),s(i,Z),s(i,b),s(i,J),s(i,C),Q.m(Vs,C),x(k,W,h),x(k,f,h),x(k,N,h),x(k,e,h),s(e,T),s(e,X),s(e,H),s(e,ss),s(e,L),s(e,es),s(e,M),s(e,os),s(e,R),s(e,ts),s(e,P),s(e,ns),s(e,j),s(e,as),s(e,q),s(e,rs),s(e,O),s(e,ls),s(e,S),s(e,is),s(e,I),V.m(Ys,I),s(e,ps),s(e,E),s(e,cs),s(e,B),s(e,ks),s(e,z),s(e,hs),s(e,$),Y.m(Fs,$),s(e,ys),s(e,U),s(e,ds),s(e,A),s(e,vs),s(e,D)},p:Js,d(k){k&&(y(l),y(d),y(m),y(c),y(i),y(W),y(f),y(N),y(e))}}}function ke(w){let l,v;const d=[w[0],Ns];let m={$$slots:{default:[ce]},$$scope:{ctx:w}};for(let c=0;c<d.length;c+=1)m=fs(m,d[c]);return l=new ie({props:m}),{c(){ee(l.$$.fragment)},l(c){oe(l.$$.fragment,c)},m(c,i){te(l,c,i),v=!0},p(c,[i]){const u=i&1?le(d,[i&1&&Ws(c[0]),i&0&&Ws(Ns)]):{};i&2&&(u.$$scope={dirty:i,ctx:c}),l.$set(u)},i(c){v||(ne(l.$$.fragment,c),v=!0)},o(c){ae(l.$$.fragment,c),v=!1},d(c){re(l,c)}}}const Ns={title:"Dynamically load reducers for code splitting in a React Redux application",date:"2017-11-16T08:00:00Z",description:"How to inject reducer asynchronously",label:"blog",tableOfContents:[{link:"context",title:"Context"},{link:"problem",title:"Problem"},{link:"solution",title:"Solution"}]};function he(w,l,v){return Zs("blog",{image:pe}),w.$$set=d=>{v(0,l=fs(fs({},l),Qs(d)))},l=Qs(l),[l]}class me extends Xs{constructor(l){super(),se(this,l,he,ke,Gs,{})}}export{me as component};
