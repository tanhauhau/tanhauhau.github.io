import{s as zs,d as hs,e as As,f as Ps,n as Fs}from"../chunks/scheduler.85ImRbsk.js";import{S as Ns,i as Us,m as Gs,n as Js,o as Ks,t as Qs,a as Xs,p as Ys,e,s as l,H as R,c as o,q as k,h as i,d as m,r as V,g as v,u as z,j as g,k as s}from"../chunks/index.JMRAb4ib.js";import{g as Zs,a as Ss}from"../chunks/code-snippet.p32Anx_S.js";import{B as sn}from"../chunks/BlogLayout.TadBQAnB.js";import{t as nn}from"../chunks/twitter-card-image.6izpPI6I.js";function an(f){let t,x="Anyone who",d,u,p="<li>wants to get started in contributing to the Svelte source code</li>",y,a,_,ys='<a href="#overview" id="overview">Overview</a>',Q,w,us='Today we are going to dive in and implmeent <code class="inline">{#range}</code> logic block in Svelte.',X,b,ds="We are going to look at how",Y,T,xs='if you are unfamiliar with the Svelte compiler, I recommend you to read <a href="/the-svelte-compiler-handbook">&quot;The Svelte Compiler Handbook&quot;</a>, which talks about the Svelte compiler at a high level.',Z,j,ms='Armed with the overview of the compilation pipeline, let&#39;s dive into the detail, by implementing a new logic block, <code class="inline">{#range}</code>.',ss,H,gs='A quick idea of how <code class="inline">{#range}</code> behaves:',ns,C,fs="<strong>1. The syntax:</strong>",as,L,A,Bs='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- loop &#96;n&#96; through 1, 2, 3, 4, 5 --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#range <span class="token number">1.</span><span class="token number">.5</span> <span class="token keyword">as</span> n<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>range<span class="token punctuation">&#125;</span></span></div></code></pre>',ts,M,F,Os='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- loop &#96;n&#96; through 1, 2, 3, 4, 5 --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#range start<span class="token punctuation">.</span><span class="token punctuation">.</span>end <span class="token keyword">as</span> n<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>range<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>start<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>end<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div></code></pre>',es,q,_s="<strong>2. The behavior:</strong>",os,E,ws='The <code class="inline">{#range}</code> behaves like <a href="https://www.rubyguides.com/2016/06/ruby-ranges-how-do-they-work/" rel="nofollow">Ruby range</a>:',ls,I,bs='<li><code class="inline">{#range}</code> loops from the start to end inclusively</li> <li>allow descending range too: <code class="inline">{#range 5..1 as n}</code></li> <li>allow ranging through characters: <code class="inline">{#range &#39;a&#39;..&#39;z&#39; as n}</code></li>',N,r,P,Ts='<a href="#start-implementation" id="start-implementation">Start implementation</a>',is,S,js='With an <a href="https://github.com/sveltejs/svelte/issues/2968" rel="nofollow">https://github.com/sveltejs/svelte/issues/2968</a>',ps,W,U,$s=`<pre class="prism language-"><code><span class="line">ParseError: Expected if, each or await</span>
<span class="line">  at error (compiler.js:6208:16)</span>
<span class="line">  at Parser.error (compiler.js:6336:3)</span>
<span class="line">  at mustache (compiler.js:5911:11)</span>
<span class="line">  at new Parser (compiler.js:6288:12)</span></code></pre>`,rs,B,G,Ds=`<pre class="prism language-"><code><span class="line">Error: Not implemented: RangeBlock</span>
<span class="line">  at get_constructor (compiler.js:17451:18)</span>
<span class="line">  at children.map.child (compiler.js:17460:23)</span>
<span class="line">  at Array.map (&lt;anonymous&gt;)</span>
<span class="line">  at map_children (compiler.js:17459:18)</span>
<span class="line">  at new Element$1 (compiler.js:16523:19)</span></code></pre>`,cs,O,Hs=`TODO: don't add the dependencies yet
NOTE: copy code from EachBlock, since they lookalike`,ks,$,J,Rs=`<pre class="prism language-"><code><span class="line">Error: TODO implement RangeBlock</span>
<span class="line">  at new FragmentWrapper (compiler.js:12846:11)</span>
<span class="line">  at new ElementWrapper (compiler.js:10261:19)</span>
<span class="line">  at new FragmentWrapper (compiler.js:12888:21)</span>
<span class="line">  at new Renderer (compiler.js:12983:19)</span>
<span class="line">  at dom (compiler.js:13199:19)</span></code></pre>`,vs,D,K,Vs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RangeBlockWrapper</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RangeBlock</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	fragment</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FragmentWrapper</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	index_name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		renderer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		parent</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RangeBlock</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		strip_whitespace</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		next_sibling</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.cannot_use_innerhtml</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.not_static_content</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// const &#123; dependencies &#125; = node.expression;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// block.add_dependencies(dependencies);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.add_to_context</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.child</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			comment</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_debugging_comment</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)">.component)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-token-function)">.get_unique_name</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;create_range_block&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;range&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.index_name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Identifier&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.index &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">blocks</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FragmentWrapper</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			renderer</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.children</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			strip_whitespace</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			next_sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;#nodes&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`;return{c(){t=e("p"),t.textContent=x,d=l(),u=e("ul"),u.innerHTML=p,y=l(),a=e("section"),_=e("h2"),_.innerHTML=ys,Q=l(),w=e("p"),w.innerHTML=us,X=l(),b=e("p"),b.textContent=ds,Y=l(),T=e("p"),T.innerHTML=xs,Z=l(),j=e("p"),j.innerHTML=ms,ss=l(),H=e("p"),H.innerHTML=gs,ns=l(),C=e("p"),C.innerHTML=fs,as=l(),L=e("div"),A=new R(!1),ts=l(),M=e("div"),F=new R(!1),es=l(),q=e("p"),q.innerHTML=_s,os=l(),E=e("p"),E.innerHTML=ws,ls=l(),I=e("ul"),I.innerHTML=bs,N=l(),r=e("section"),P=e("h2"),P.innerHTML=Ts,is=l(),S=e("p"),S.innerHTML=js,ps=l(),W=e("div"),U=new R(!1),rs=l(),B=e("div"),G=new R(!1),cs=l(),O=e("p"),O.textContent=Hs,ks=l(),$=e("div"),J=new R(!1),vs=l(),D=e("div"),K=new R(!1),this.h()},l(c){t=o(c,"P",{"data-svelte-h":!0}),k(t)!=="svelte-i1of4q"&&(t.textContent=x),d=i(c),u=o(c,"UL",{"data-svelte-h":!0}),k(u)!=="svelte-yzbzou"&&(u.innerHTML=p),y=i(c),a=o(c,"SECTION",{});var n=m(a);_=o(n,"H2",{"data-svelte-h":!0}),k(_)!=="svelte-1vu30zv"&&(_.innerHTML=ys),Q=i(n),w=o(n,"P",{"data-svelte-h":!0}),k(w)!=="svelte-121e6mf"&&(w.innerHTML=us),X=i(n),b=o(n,"P",{"data-svelte-h":!0}),k(b)!=="svelte-1x1vjdr"&&(b.textContent=ds),Y=i(n),T=o(n,"P",{"data-svelte-h":!0}),k(T)!=="svelte-g42ctd"&&(T.innerHTML=xs),Z=i(n),j=o(n,"P",{"data-svelte-h":!0}),k(j)!=="svelte-bcvrbc"&&(j.innerHTML=ms),ss=i(n),H=o(n,"P",{"data-svelte-h":!0}),k(H)!=="svelte-tetowl"&&(H.innerHTML=gs),ns=i(n),C=o(n,"P",{"data-svelte-h":!0}),k(C)!=="svelte-6dnvsw"&&(C.innerHTML=fs),as=i(n),L=o(n,"DIV",{class:!0});var Cs=m(L);A=V(Cs,!1),Cs.forEach(v),ts=i(n),M=o(n,"DIV",{class:!0});var Ls=m(M);F=V(Ls,!1),Ls.forEach(v),es=i(n),q=o(n,"P",{"data-svelte-h":!0}),k(q)!=="svelte-aqtgq0"&&(q.innerHTML=_s),os=i(n),E=o(n,"P",{"data-svelte-h":!0}),k(E)!=="svelte-13z4dh5"&&(E.innerHTML=ws),ls=i(n),I=o(n,"UL",{"data-svelte-h":!0}),k(I)!=="svelte-ho4xda"&&(I.innerHTML=bs),n.forEach(v),N=i(c),r=o(c,"SECTION",{});var h=m(r);P=o(h,"H2",{"data-svelte-h":!0}),k(P)!=="svelte-1ihjdpq"&&(P.innerHTML=Ts),is=i(h),S=o(h,"P",{"data-svelte-h":!0}),k(S)!=="svelte-1jfjqf4"&&(S.innerHTML=js),ps=i(h),W=o(h,"DIV",{class:!0});var Ms=m(W);U=V(Ms,!1),Ms.forEach(v),rs=i(h),B=o(h,"DIV",{class:!0});var qs=m(B);G=V(qs,!1),qs.forEach(v),cs=i(h),O=o(h,"P",{"data-svelte-h":!0}),k(O)!=="svelte-coqt9g"&&(O.textContent=Hs),ks=i(h),$=o(h,"DIV",{class:!0});var Es=m($);J=V(Es,!1),Es.forEach(v),vs=i(h),D=o(h,"DIV",{class:!0});var Is=m(D);K=V(Is,!1),Is.forEach(v),h.forEach(v),this.h()},h(){A.a=null,z(L,"class","code-section"),F.a=null,z(M,"class","code-section"),U.a=null,z(W,"class","code-section"),G.a=null,z(B,"class","code-section"),J.a=null,z($,"class","code-section"),K.a=null,z(D,"class","code-section")},m(c,n){g(c,t,n),g(c,d,n),g(c,u,n),g(c,y,n),g(c,a,n),s(a,_),s(a,Q),s(a,w),s(a,X),s(a,b),s(a,Y),s(a,T),s(a,Z),s(a,j),s(a,ss),s(a,H),s(a,ns),s(a,C),s(a,as),s(a,L),A.m(Bs,L),s(a,ts),s(a,M),F.m(Os,M),s(a,es),s(a,q),s(a,os),s(a,E),s(a,ls),s(a,I),g(c,N,n),g(c,r,n),s(r,P),s(r,is),s(r,S),s(r,ps),s(r,W),U.m($s,W),s(r,rs),s(r,B),G.m(Ds,B),s(r,cs),s(r,O),s(r,ks),s(r,$),J.m(Rs,$),s(r,vs),s(r,D),K.m(Vs,D)},p:Fs,d(c){c&&(v(t),v(d),v(u),v(y),v(a),v(N),v(r))}}}function tn(f){let t,x;const d=[f[0],Ws];let u={$$slots:{default:[an]},$$scope:{ctx:f}};for(let p=0;p<d.length;p+=1)u=hs(u,d[p]);return t=new sn({props:u}),{c(){Gs(t.$$.fragment)},l(p){Js(t.$$.fragment,p)},m(p,y){Ks(t,p,y),x=!0},p(p,[y]){const a=y&1?Zs(d,[y&1&&Ss(p[0]),y&0&&Ss(Ws)]):{};y&2&&(a.$$scope={dirty:y,ctx:p}),t.$set(a)},i(p){x||(Qs(t.$$.fragment,p),x=!0)},o(p){Xs(t.$$.fragment,p),x=!1},d(p){Ys(t,p)}}}const Ws={title:"Implementing {#range} in Svelte",wip:!0,label:"blog",description:"Anyone whowants to get started in contributing to the Svelte source codeOverviewToday we are going to dive in and implmeent `&#123;#range&#125;` logic block in Svelte.We are going to look at how if you are unfamiliar with the Svelte compiler, I recommend you to read ...",tableOfContents:[{link:"overview",title:"Overview"},{link:"start-implementation",title:"Start implementation"}]};function en(f,t,x){return As("blog",{image:nn}),f.$$set=d=>{x(0,t=hs(hs({},t),Ps(d)))},t=Ps(t),[t]}class kn extends Ns{constructor(t){super(),Us(this,t,en,tn,zs,{})}}export{kn as component};
