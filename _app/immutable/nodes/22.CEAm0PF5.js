import{s as ds,d as Q,e as xs,f as is,n as us}from"../chunks/scheduler.D6VJxl8L.js";import{S as ms,i as fs,m as gs,n as ws,o as _s,t as bs,a as Ms,p as Cs,e as n,s as r,H as $,c as e,d as S,q as c,h as i,r as E,g as v,u as D,j as K,k as a}from"../chunks/index.CLAVN-Y5.js";import{g as Ts,a as ps}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Ls}from"../chunks/BlogLayout.BTH3PMCG.js";import{t as Hs}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function Ss(x){let s,l,h='<a href="#monaco-samples" id="monaco-samples">monaco samples:</a>',y,t,p='<a href="https://github.com/microsoft/monaco-editor-samples/blob/master/browser-amd-monarch/index.html" rel="nofollow">https://github.com/microsoft/monaco-editor-samples/blob/master/browser-amd-monarch/index.html</a>',u,m,R="tab + history undo buffer",P,f,W="<li>link to issues that was fixed previously</li>",U,g,X="get inspiration from the playground",O,w,Y=`<li>it has 3 tabs
<a href="https://microsoft.github.io/monaco-editor/playground.html" rel="nofollow">https://microsoft.github.io/monaco-editor/playground.html</a></li>`,z,_,j,ks=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">changeTab</span><span style="color: var(--shiki-color-text)">(selectedTabNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> desiredModelId) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">tabArea</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">childNodes</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> child </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">tabArea</span><span style="color: var(--shiki-color-text)">.childNodes[i];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-string-expression)">/tab/</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.className)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.className </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tab&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">selectedTabNode</span><span style="color: var(--shiki-color-text)">.className </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tab active&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> currentState </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.saveViewState</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> currentModel </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.getModel</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (currentModel </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-color-text)">.model) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-color-text)">.state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> currentState;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (currentModel </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)">.model) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)">.state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> currentState;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (currentModel </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">html</span><span style="color: var(--shiki-color-text)">.model) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">html</span><span style="color: var(--shiki-color-text)">.state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> currentState;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.setModel</span><span style="color: var(--shiki-color-text)">(data[desiredModelId].model);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.restoreViewState</span><span style="color: var(--shiki-color-text)">(data[desiredModelId].state);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.focus</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,A,b,I,hs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">loadSample</span><span style="color: var(--shiki-color-text)">(sampleId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (err</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sample) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (err) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">alert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Sample not found! &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">err</span><span style="color: var(--shiki-color-text)">.message);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (myToken </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> currentToken) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">model</span><span style="color: var(--shiki-token-function)">.setValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">sample</span><span style="color: var(--shiki-color-text)">.js);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">html</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">model</span><span style="color: var(--shiki-token-function)">.setValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">sample</span><span style="color: var(--shiki-color-text)">.html);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">model</span><span style="color: var(--shiki-token-function)">.setValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">sample</span><span style="color: var(--shiki-color-text)">.css);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.setScrollTop</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">run</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,B,M,q,vs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-color-text)">.model </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">monaco</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.createModel</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;console.log(&quot;hi&quot;)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;javascript&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)">.model </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">monaco</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.createModel</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;css&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;css&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">html</span><span style="color: var(--shiki-color-text)">.model </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">monaco</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.createModel</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;html&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;html&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		editor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">monaco</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">(editorContainer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			model</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-color-text)">.model</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			minimap</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">				enabled</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&#125;);</span></span></code></pre>`,J,C,ss="<li>how to add svlete language server into it</li> <li>markdown</li>",Z,T,os="** store as global variable",F,L,as=`<li><p>window.xxx</p></li> <li><p>right-click, &quot;store as global variable&quot;
quickly test out apis, without having to wait for reload</p></li> <li><p>allow switching tabs
create new model on new tab / init
store the state when switching tabs
restore state upon selecting tabs</p></li> <li><p>listen to changes</p></li>`,G,H,N,ys='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-color-text)">.onDidChangeModelContent</span></span></code></pre>',V,d,ts='<h2><a href="#syntax-highlighting" id="syntax-highlighting">syntax highlighting</a></h2> <p>this is rough man</p> <ul><li><p><a href="https://gearset.com/blog/writing-an-open-source-apex-syntax-highlighter-for-monaco-editor" rel="nofollow">https://gearset.com/blog/writing-an-open-source-apex-syntax-highlighter-for-monaco-editor</a></p> <ul><li>vs code vs monaco</li> <li>text mate grammars, language servers, monarch grammars</li> <li>native library</li></ul></li> <li><p><a href="https://github.com/microsoft/monaco-editor/issues/171" rel="nofollow">https://github.com/microsoft/monaco-editor/issues/171</a></p></li> <li><p>implement a monaco language, shouldn&#39;t be hard? 🤷‍♂️</p></li></ul> <p>playground <a href="https://microsoft.github.io/monaco-editor/monarch.html" rel="nofollow">https://microsoft.github.io/monaco-editor/monarch.html</a></p> <ul><li>proxy based language server<ul><li><a href="https://medium.com/dscddu/language-server-protocol-adding-support-for-multiple-language-servers-to-monaco-editor-a3c35e42a98d" rel="nofollow">https://medium.com/dscddu/language-server-protocol-adding-support-for-multiple-language-servers-to-monaco-editor-a3c35e42a98d</a></li></ul></li></ul>';return{c(){s=n("section"),l=n("h2"),l.innerHTML=h,y=r(),t=n("p"),t.innerHTML=p,u=r(),m=n("p"),m.textContent=R,P=r(),f=n("ul"),f.innerHTML=W,U=r(),g=n("p"),g.textContent=X,O=r(),w=n("ul"),w.innerHTML=Y,z=r(),_=n("div"),j=new $(!1),A=r(),b=n("div"),I=new $(!1),B=r(),M=n("div"),q=new $(!1),J=r(),C=n("ul"),C.innerHTML=ss,Z=r(),T=n("p"),T.textContent=os,F=r(),L=n("ul"),L.innerHTML=as,G=r(),H=n("div"),N=new $(!1),V=r(),d=n("section"),d.innerHTML=ts,this.h()},l(k){s=e(k,"SECTION",{});var o=S(s);l=e(o,"H2",{"data-svelte-h":!0}),c(l)!=="svelte-1yglzyq"&&(l.innerHTML=h),y=i(o),t=e(o,"P",{"data-svelte-h":!0}),c(t)!=="svelte-18dr9gr"&&(t.innerHTML=p),u=i(o),m=e(o,"P",{"data-svelte-h":!0}),c(m)!=="svelte-1bjarai"&&(m.textContent=R),P=i(o),f=e(o,"UL",{"data-svelte-h":!0}),c(f)!=="svelte-1784sr2"&&(f.innerHTML=W),U=i(o),g=e(o,"P",{"data-svelte-h":!0}),c(g)!=="svelte-qajpzk"&&(g.textContent=X),O=i(o),w=e(o,"UL",{"data-svelte-h":!0}),c(w)!=="svelte-583uku"&&(w.innerHTML=Y),z=i(o),_=e(o,"DIV",{class:!0});var ns=S(_);j=E(ns,!1),ns.forEach(v),A=i(o),b=e(o,"DIV",{class:!0});var es=S(b);I=E(es,!1),es.forEach(v),B=i(o),M=e(o,"DIV",{class:!0});var ls=S(M);q=E(ls,!1),ls.forEach(v),J=i(o),C=e(o,"UL",{"data-svelte-h":!0}),c(C)!=="svelte-twoxjc"&&(C.innerHTML=ss),Z=i(o),T=e(o,"P",{"data-svelte-h":!0}),c(T)!=="svelte-xflb5y"&&(T.textContent=os),F=i(o),L=e(o,"UL",{"data-svelte-h":!0}),c(L)!=="svelte-9na339"&&(L.innerHTML=as),G=i(o),H=e(o,"DIV",{class:!0});var rs=S(H);N=E(rs,!1),rs.forEach(v),o.forEach(v),V=i(k),d=e(k,"SECTION",{"data-svelte-h":!0}),c(d)!=="svelte-1otof6w"&&(d.innerHTML=ts),this.h()},h(){j.a=null,D(_,"class","code-section"),I.a=null,D(b,"class","code-section"),q.a=null,D(M,"class","code-section"),N.a=null,D(H,"class","code-section")},m(k,o){K(k,s,o),a(s,l),a(s,y),a(s,t),a(s,u),a(s,m),a(s,P),a(s,f),a(s,U),a(s,g),a(s,O),a(s,w),a(s,z),a(s,_),j.m(ks,_),a(s,A),a(s,b),I.m(hs,b),a(s,B),a(s,M),q.m(vs,M),a(s,J),a(s,C),a(s,Z),a(s,T),a(s,F),a(s,L),a(s,G),a(s,H),N.m(ys,H),K(k,V,o),K(k,d,o)},p:us,d(k){k&&(v(s),v(V),v(d))}}}function js(x){let s,l;const h=[x[0],cs];let y={$$slots:{default:[Ss]},$$scope:{ctx:x}};for(let t=0;t<h.length;t+=1)y=Q(y,h[t]);return s=new Ls({props:y}),{c(){gs(s.$$.fragment)},l(t){ws(s.$$.fragment,t)},m(t,p){_s(s,t,p),l=!0},p(t,[p]){const u=p&1?Ts(h,[p&1&&ps(t[0]),p&0&&ps(cs)]):{};p&2&&(u.$$scope={dirty:p,ctx:t}),s.$set(u)},i(t){l||(bs(s.$$.fragment,t),l=!0)},o(t){Ms(s.$$.fragment,t),l=!1},d(t){Cs(s,t)}}}const cs={title:"adding monaco to the svelte repl",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],wip:!0,label:"blog",description:"monaco samples:https://github.com/microsoft/monaco-editor-samples/blob/master/browser-amd-monarch/index.htmltab + history undo bufferlink to issues that was fixed previouslyget inspiration from the playground...",tableOfContents:[{link:"monaco-samples",title:"monaco samples:"},{link:"syntax-highlighting",title:"syntax highlighting"}]};function Is(x,s,l){return xs("blog",{image:Hs}),x.$$set=h=>{l(0,s=Q(Q({},s),is(h)))},s=is(s),[s]}class Ds extends ms{constructor(s){super(),fs(this,s,Is,js,ds,{})}}export{Ds as component};
