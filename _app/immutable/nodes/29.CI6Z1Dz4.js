import{s as ue,d as X,e as ye,f as ve,n as me}from"../chunks/scheduler.D6VJxl8L.js";import{S as _e,i as xe,m as we,n as ge,o as be,t as He,a as Te,p as Le,e as n,s as r,H as J,c as i,q as v,h as c,d as K,r as O,g as t,u as Q,j as o}from"../chunks/index.CLAVN-Y5.js";import{g as Me,a as ke}from"../chunks/code-snippet.Gym6WUAG.js";import{B as je}from"../chunks/BlogLayout.BTH3PMCG.js";import{t as Ce}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function Pe(j){let a,h="Imagine you have the code below:",k,p,l,d=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,f,u,Y='after passing this code through <a href="https://www.npmjs.com/package/uglify-js" rel="nofollow">uglify-js</a>, you will get the code below:',C,y,P,de=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">()&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$,m,ee='<strong>uglify-js</strong> will do dead code removal, ie: it will remove code that will not affect the program results. Since we defined <code class="inline">a</code> and <code class="inline">b</code> in the function <code class="inline">foo</code> and we are not using <code class="inline">a</code> and <code class="inline">b</code> within the <code class="inline">foo</code>, <strong>uglify-js</strong> safely removes it from the uglified code.',E,_,se='However, if you can see from the uglified code, <code class="inline">foobar()</code> is preserved. This is because calling <code class="inline">foobar</code> may have side effects on the program, so <strong>uglify-js</strong> preserves foobar(). But since we do not need the return value of <code class="inline">foobar()</code>, which is assigned to <code class="inline">a</code>, <code class="inline">a</code> got removed by uglify-js.',R,q,I,x,te='What if we know that <code class="inline">foobar()</code> will not caused any side effects?',D,w,oe='How do we tell <strong>uglify-js</strong> that if we are not using the return value from <code class="inline">foobar()</code>, please remove it as well?',S,U,B,g,ae='Turns out that <strong>uglify-js</strong> will treat a function call as ‚Äúpure‚Äù if there is a comment annotation <code class="inline">/*@__PURE__*/</code> or <code class="inline">/*#__PURE__*/</code> immediately precedes the call.',V,b,le='For example: <code class="inline">/* @__PURE__ */ foobar()</code> !',A,H,F,fe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// before uglify</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*@__PURE__*/</span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// after uglify</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">()&#123;</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,N,T,ne='Note that now <code class="inline">foobar()</code> is being removed!',W,Z,z,L,ie="So, how is this useful?",G,M,re='As a library author, you can write a babel plugin to mark your function to be pure, so that <strong>uglify-js</strong> can drop the function call if the return value is not being used in the code. (There is a <a href="https://babeljs.io/docs/en/next/babel-helper-annotate-as-pure.html" rel="nofollow">util from babel</a> to do just the job of marking function as pure üòé)';return{c(){a=n("p"),a.textContent=h,k=r(),p=n("div"),l=new J(!1),f=r(),u=n("p"),u.innerHTML=Y,C=r(),y=n("div"),P=new J(!1),$=r(),m=n("p"),m.innerHTML=ee,E=r(),_=n("p"),_.innerHTML=se,R=r(),q=n("hr"),I=r(),x=n("p"),x.innerHTML=te,D=r(),w=n("p"),w.innerHTML=oe,S=r(),U=n("hr"),B=r(),g=n("p"),g.innerHTML=ae,V=r(),b=n("p"),b.innerHTML=le,A=r(),H=n("div"),F=new J(!1),N=r(),T=n("p"),T.innerHTML=ne,W=r(),Z=n("hr"),z=r(),L=n("p"),L.textContent=ie,G=r(),M=n("p"),M.innerHTML=re,this.h()},l(e){a=i(e,"P",{"data-svelte-h":!0}),v(a)!=="svelte-bf5ft6"&&(a.textContent=h),k=c(e),p=i(e,"DIV",{class:!0});var s=K(p);l=O(s,!1),s.forEach(t),f=c(e),u=i(e,"P",{"data-svelte-h":!0}),v(u)!=="svelte-mw6si1"&&(u.innerHTML=Y),C=c(e),y=i(e,"DIV",{class:!0});var ce=K(y);P=O(ce,!1),ce.forEach(t),$=c(e),m=i(e,"P",{"data-svelte-h":!0}),v(m)!=="svelte-1lpa9pa"&&(m.innerHTML=ee),E=c(e),_=i(e,"P",{"data-svelte-h":!0}),v(_)!=="svelte-15ilfnr"&&(_.innerHTML=se),R=c(e),q=i(e,"HR",{}),I=c(e),x=i(e,"P",{"data-svelte-h":!0}),v(x)!=="svelte-1g8sms6"&&(x.innerHTML=te),D=c(e),w=i(e,"P",{"data-svelte-h":!0}),v(w)!=="svelte-180qgjv"&&(w.innerHTML=oe),S=c(e),U=i(e,"HR",{}),B=c(e),g=i(e,"P",{"data-svelte-h":!0}),v(g)!=="svelte-2secvo"&&(g.innerHTML=ae),V=c(e),b=i(e,"P",{"data-svelte-h":!0}),v(b)!=="svelte-13aqod7"&&(b.innerHTML=le),A=c(e),H=i(e,"DIV",{class:!0});var pe=K(H);F=O(pe,!1),pe.forEach(t),N=c(e),T=i(e,"P",{"data-svelte-h":!0}),v(T)!=="svelte-8g4628"&&(T.innerHTML=ne),W=c(e),Z=i(e,"HR",{}),z=c(e),L=i(e,"P",{"data-svelte-h":!0}),v(L)!=="svelte-rqhkf3"&&(L.textContent=ie),G=c(e),M=i(e,"P",{"data-svelte-h":!0}),v(M)!=="svelte-9fopm3"&&(M.innerHTML=re),this.h()},h(){l.a=null,Q(p,"class","code-section"),P.a=null,Q(y,"class","code-section"),F.a=null,Q(H,"class","code-section")},m(e,s){o(e,a,s),o(e,k,s),o(e,p,s),l.m(d,p),o(e,f,s),o(e,u,s),o(e,C,s),o(e,y,s),P.m(de,y),o(e,$,s),o(e,m,s),o(e,E,s),o(e,_,s),o(e,R,s),o(e,q,s),o(e,I,s),o(e,x,s),o(e,D,s),o(e,w,s),o(e,S,s),o(e,U,s),o(e,B,s),o(e,g,s),o(e,V,s),o(e,b,s),o(e,A,s),o(e,H,s),F.m(fe,H),o(e,N,s),o(e,T,s),o(e,W,s),o(e,Z,s),o(e,z,s),o(e,L,s),o(e,G,s),o(e,M,s)},p:me,d(e){e&&(t(a),t(k),t(p),t(f),t(u),t(C),t(y),t($),t(m),t(E),t(_),t(R),t(q),t(I),t(x),t(D),t(w),t(S),t(U),t(B),t(g),t(V),t(b),t(A),t(H),t(N),t(T),t(W),t(Z),t(z),t(L),t(G),t(M))}}}function $e(j){let a,h;const k=[j[0],he];let p={$$slots:{default:[Pe]},$$scope:{ctx:j}};for(let l=0;l<k.length;l+=1)p=X(p,k[l]);return a=new je({props:p}),{c(){we(a.$$.fragment)},l(l){ge(a.$$.fragment,l)},m(l,d){be(a,l,d),h=!0},p(l,[d]){const f=d&1?Me(k,[d&1&&ke(l[0]),d&0&&ke(he)]):{};d&2&&(f.$$scope={dirty:d,ctx:l}),a.$set(f)},i(l){h||(He(a.$$.fragment,l),h=!0)},o(l){Te(a.$$.fragment,l),h=!1},d(l){Le(a,l)}}}const he={title:"Dead-code elimination",date:"2018-10-24T08:00:00Z",description:"How to hint uglify-js that your function is pure",label:"blog"};function Ee(j,a,h){return ye("blog",{image:Ce}),j.$$set=k=>{h(0,a=X(X({},a),ve(k)))},a=ve(a),[a]}class Ue extends _e{constructor(a){super(),xe(this,a,Ee,$e,ue,{})}}export{Ue as component};
