import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as s,g as r,d as l,b as d,a as c}from"../chunks/C2PHntuy.js";import{i as p}from"../chunks/BQOOHHT8.js";import{l as h,s as m}from"../chunks/gzNpScmH.js";import{B as f}from"../chunks/B1caYEk9.js";import{t as u}from"../chunks/C3bQ3Oc7.js";const i={title:"Thoughts on Technical Interview",tags:["interview"],description:"Interview experience from @zhaojinjiang`@zhaojinjiang` shared some of his interview experiencehe prepared a ton of questions, but in the end he used 1 question, bubble sort, to eliminate 80% of the candidate...",tableOfContents:[{link:"interview-experience-from-zhaojinjiang",title:"Interview experience from @zhaojinjiang"}]},{title:q,tags:y,description:I,tableOfContents:C}=i;var g=d(`<section><h2><a href="#interview-experience-from-zhaojinjiang" id="interview-experience-from-zhaojinjiang">Interview experience from @zhaojinjiang</a></h2> <ul><li><code class="inline">@zhaojinjiang</code> shared some of his interview experience <ul><li>he prepared a ton of questions, but in the end he used 1 question, bubble sort, to eliminate 80% of the candidate</li> <li>he shared one of his prev boss classic interview question, given a DOM node, reverse all it's child element.</li> <li>open-ended question, we have <code class="inline">insertBefore</code> and <code class="inline">appendChild</code>, so if you are given a chance to add a new api, <code class="inline">insertAfter</code>, explain how you would design the api.</li></ul></li></ul></section>`);function B(n,e){const o=h(e,["children","$$slots","$$events","$$legacy"]);s(e,!1),r("blog",{image:u}),p(),f(n,m(()=>o,()=>i,{children:(t,v)=>{var a=g();c(t,a)},$$slots:{default:!0}})),l()}export{B as component};
