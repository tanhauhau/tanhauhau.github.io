import{s as Za,d as Xo,e as Ga,f as La,n as Qa}from"../chunks/scheduler.D6VJxl8L.js";import{S as Xa,i as sn,m as en,n as on,o as tn,t as an,a as nn,p as ln,e,s as t,H as m,c as o,d as v,q as r,h as a,r as g,g as p,u as w,j as d,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as rn,a as Pa}from"../chunks/code-snippet.Gym6WUAG.js";import{B as pn}from"../chunks/BlogLayout.BMJM32nZ.js";const cn=""+new URL("../assets/hero-twitter.D2uJmNjo.jpg",import.meta.url).href;function kn(D){let l,_,M='<a href="#what-is-mangling-property" id="what-is-mangling-property">What is Mangling Property</a>',P,x,H="Assume you have the following JavaScript code:",R,B,le,ja=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Human</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(chewAmount) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.chewAmount </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">eat</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> amount </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">; amount </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.chewAmount; amount</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.chew</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">chew</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getHumanEating</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lihau</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Human</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lihau</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,De,N,st="<strong>Original: 268 Bytes</strong>",Re,V,et='If you minify this with the default options with <a href="https://github.com/terser/terser" rel="nofollow">Terser</a>, you probably get something like:',Be,z,re,Ea=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Human</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(chewAmount) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.chewAmount </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">eat</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.chewAmount; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.chew</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">chew</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getHumanEating</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Human</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ne,W,ot="<strong>207 Bytes (77.2%)</strong>",Ve,$,tt="<em>(Usually Terser would compress whitespace too, but for ease of reading, allow me to keep the whitespace)</em>",ze,J,at="Your code still behaves the same, even though the variable name has changed.",We,F,nt="This behavior of renaming variable name to compress JavaScript code is called <strong>Mangle</strong>.",$e,Y,lt='Terser has several <a href="https://github.com/terser/terser#mangle-options" rel="nofollow">Mangle options</a>, that allows you to control whether or not to mangle <strong>class name</strong>, <strong>function name</strong>, <strong>property name</strong>, or specify any reserved keywords to not mangle, or should it mangle global variable.',Je,K,rt='If the above code is written within a ES Module, then probably we wont refer the class <code class="inline">Human</code> globally, rather refer it through <code class="inline">import</code>, then the name of the class probably does not matter:',Fe,U,ie,Sa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Terser option: &#123; mangle: &#123; module: true &#125; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">H</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(chewAmount) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.chewAmount </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">eat</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.chewAmount; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.chew</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">chew</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">e</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">H</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; H </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> Human</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> e </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> getHumanEating &#125;;</span></span></code></pre>`,Ye,Z,it="<strong>186 Bytes (69.4%)</strong>",Ke,G,pt="But can we do better?",Ue,Q,ct='Well, if you look at the code, the property named <code class="inline">chewAmount</code> takes up 20 characters, which is almost 10% of the code.',Ze,X,kt="If we rename all the property name to 1 character variable, then we would end up with a much smaller code:",Ge,ss,pe,Aa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">H</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(t) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">a</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">; t </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.c; t</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.s</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">s</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">e</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">H</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.a</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; H </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> Human</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> e </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> getHumanEating &#125;;</span></span></code></pre>`,Qe,es,ht="<strong>107 Bytes (39.9%)</strong>",Xe,os,yt="If it ends up with a much smaller bundle, should we rename our property name and method name to a shorter name? And why didn't Terser do this by default?",so,ts,vt="<strong>Should we rename our property name and method name to something short?</strong>",eo,as,dt="No! That would hurt the readability of the code. 😥",oo,ns,ut='Also, what if someone else imports the class <code class="inline">Human</code> and wants to use the property <code class="inline">chewAmount</code>?',to,ls,xt='He would have to rename it to <code class="inline">human.c</code> instead of <code class="inline">human.chewAmount</code> and probably scratching his head everytime he reads his code, wondering what does <code class="inline">human.c</code> mean?',ao,rs,ft="<strong>Why Terser didn&#39;t mangle property name by default?</strong>",no,is,mt='Because property mangling requires certain assumption on your code, therefore it is marked as <strong>very unsafe</strong> in the <a href="https://github.com/terser/terser#cli-mangling-property-names---mangle-props" rel="nofollow">Terser documentation</a> to turn it on entirely.',ce,c,ps,gt='<a href="#why-is-property-mangling-considered-unsafe" id="why-is-property-mangling-considered-unsafe">Why is property mangling considered unsafe?</a>',lo,cs,wt="If you are a library author, or you wrote a module that will be used by others, and if you mangle the property of the library / module <strong>alone</strong>, all your method name, object property name will be mangled, and therefore all your APIs will be broken!",ro,ks,ke,qa=`<div class="filename">source.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(&#123; paramA</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> paramB &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; sum</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> paramA </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> paramB &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Car</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(&#123; model &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.model </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> model;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">drive</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,io,hs,he,Oa=`<div class="filename">source.min.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(&#123; o: t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t: o &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; m</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> o &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Car</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(&#123; s: t &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.s </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> t;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">i</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,po,ys,bt='Your user that calls <code class="inline">doSomething({ paramA: 1, paramB: 2 })</code> or <code class="inline">car.drive()</code> will not work with the minified code!',co,vs,_t="The same ways goes if you are importing some other library or module, and you mangle your code <strong>alone</strong>, your code will be broken too!",ko,ds,ye,Da=`<div class="filename">source.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; doSomething &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;some-library&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(&#123; paramA</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> paramB</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span></code></pre>`,ho,us,ve,Ra=`<div class="filename">source.min.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; doSomething </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> r &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;some-library&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">r</span><span style="color: var(--shiki-color-text)">(&#123; m</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> o</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span></code></pre>`,yo,xs,Tt='I ran both the code above through the same Terser configuration, which means it also serves as a good example that the property name Terser mangles into is not consistent. It is computed and assigned at <em>&quot;random&quot;</em>. You should not expect that <code class="inline">paramA</code> always get mangled into <code class="inline">m</code> everytime!',vo,fs,Ct="In summary, property mangling will break your code if you mangle your code alone. It will break at the boundary of your code, where you exports your functions or class that relies on <strong>public property or method</strong>; or where you import functions or class which you <strong>pass in an object or calls a public method</strong>.",uo,ms,Ht="If you <strong>do neither of those</strong>, you are actually safe to mangle all properties by default.",xo,gs,Mt="If you have a standalone script that:",fo,ws,Lt="<li>does not import nor export anything</li> <li>does not set or read any property from the global scope (*)</li>",mo,bs,Pt="Then you are safe to mangle all your properties. Property or method name across the file will be mangled consistently:",go,_s,de,Ba=`<div class="filename">source.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CarA</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">drive</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CarB</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">drive</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">car</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.random</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0.5</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CarA</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CarB</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">car</span><span style="color: var(--shiki-token-function)">.drive</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(&#123; drive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span></code></pre>`,wo,Ts,ue,Na=`<div class="filename">source.min.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">s</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">s</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">e</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">s</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.random</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0.5</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">s</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">e</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-token-function)">.s</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(&#123; s</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span></code></pre>`,bo,Cs,It='If you use the property or method named <code class="inline">&quot;drive&quot;</code>, it will be mangled to the same name throughout the file.',_o,Hs,jt='In the example above, the method <code class="inline">drive</code> in both classes and the property <code class="inline">drive</code> in <code class="inline">foo({ drive: &#39;bar&#39; })</code> means different things, but they are mangled into the same name, <code class="inline">s</code>.',xe,I,Et='<h4><a href="#set-or-get-property-from-the-global-scope" id="set-or-get-property-from-the-global-scope">Set or get property from the global scope</a></h4> <p><strong>Rule of thumb:</strong> If you set or get property from global scope, property mangling blindly will break your code.</p> <p>Of course, there&#39;s caveat of when this might be safe, protected by <code class="inline">default: false</code> options that you can turn on at your own risk. 🙈</p> <p><strong>Accessing DOM properties or method from built-in Objects</strong></p> <p>Terser keeps a list of property names that exempt from mangling, such as:</p> <ul><li>DOM properties: <code class="inline">window.location</code>, <code class="inline">document.createElement</code></li> <li>Methods of built-in objects: <code class="inline">Array.from</code>, <code class="inline">Object.defineProperty</code></li></ul> <p>The list can be found in <a href="https://github.com/terser/terser/blob/aacd5770d9364ecaca80ff450fe329e021ac98aa/tools/domprops.js" rel="nofollow">domprops.js</a> and <a href="https://github.com/terser/terser/blob/aacd5770d9364ecaca80ff450fe329e021ac98aa/lib/propmangle.js#L67" rel="nofollow"><code class="inline">find_builtins</code></a>.</p> <p>This behavior is protected by the <code class="inline">builtins</code> option in the <a href="https://github.com/terser/terser#mangle-properties-options" rel="nofollow">Mangle properties option</a>, set it to <code class="inline">true</code> to mangle builtin properties as well. <strong>Override at your own risk</strong></p> <p><strong>Accessing property or method of a undeclared variable</strong></p> <p>Variable that is not declared within the code, can be considered as global variable that is defined outside. Their properties or methods will not be mangled too.</p> <p>You can override this behavior via the <code class="inline">undeclared</code> option in the <a href="https://github.com/terser/terser#mangle-properties-options" rel="nofollow">Mangle properties option</a>, set it to <code class="inline">true</code> to mangle them too.</p>',fe,j,St='<h3><a href="#mangling-for-rollup-webpack-bundled-code" id="mangling-for-rollup-webpack-bundled-code">Mangling for rollup / webpack bundled code</a></h3> <p>If you add <a href="https://webpack.js.org/plugins/terser-webpack-plugin/" rel="nofollow">terser-webpack-plugin</a> or <a href="https://www.npmjs.com/package/rollup-plugin-terser" rel="nofollow">rollup-plugin-terser</a> to your bundling step, are you safe to mangle properties?</p> <p><strong>Rule of thumb:</strong> If your bundler emits more than 1 file, No.</p> <p>This means any bundling set up that involves code-splitting.</p> <p>It is not safe because, terser is run after the code is split into separate files. Thus, the property or method names across files will not be mangled consistently.</p>',me,E,At='<h2><a href="#how-to-mangle-property-responsibly-and-safely" id="how-to-mangle-property-responsibly-and-safely">How to mangle property responsibly and safely</a></h2> <p>With so much restrictions in mind, you may wonder how can I utilise property mangling safely and responsibly?</p> <p>Property mangling is not a all-or-nothing option in Terser, there&#39;s a few options you can play around to do property mangling safely.</p>',ge,h,Ms,qt='<a href="#private-property" id="private-property">Private property</a>',To,Ls,Ot='In the following example, the only publicly documented method in the class <code class="inline">Car</code> is <code class="inline">driveTo()</code>, so it is okay to mangle other private methods.',Co,Ps,we,Va=`<div class="filename">source.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Car</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">driveTo</span><span style="color: var(--shiki-color-text)">(&#123; destination &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destination;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.calculateRoute</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.startDriving</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">calculateRoute</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.planRoute</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.currentLocation</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.destination);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">startDriving</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">planRoute</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ho,Is,Dt='We want to mangle <code class="inline">this.currentLocation</code>, <code class="inline">this.destination</code>, <code class="inline">this.calculateRoute</code>, <code class="inline">this.startDriving</code>, <code class="inline">this.planRoute</code>, but give <code class="inline">this.driveTo</code> untouched.',Mo,js,Rt="You can choose to either",Lo,Es,Bt="<strong>1. mangle all methods and properties, except a reserved list of names:</strong>",Po,Ss,be,za=`<div class="filename">terser_options.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">terserOptions</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  mangle</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    properties</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      reserved</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;driveTo&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Io,As,Nt="<strong>2. specify a list of names to be mangled with a regex:</strong>",jo,qs,_e,Wa=`<div class="filename">terser_options.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">terserOptions</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  mangle</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    properties</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      regex</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-string-expression)"> /</span><span style="color: var(--shiki-token-keyword)">^</span><span style="color: var(--shiki-token-string-expression)">(destination</span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-token-string-expression)">calculateRoute</span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-token-string-expression)">currentLocation</span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-token-string-expression)">startDriving</span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-token-string-expression)">planRoute)</span><span style="color: var(--shiki-token-keyword)">$</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Eo,Os,Vt='Here, a <a href="https://www.robinwieruch.de/javascript-naming-conventions" rel="nofollow">unofficial JavaScript naming convention</a> for private method / properties come in handy. Often times, when a variable name starts with <code class="inline">_</code>, it is intended to be private.',So,Ds,Te,$a=`<div class="filename">source.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Car</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">driveTo</span><span style="color: var(--shiki-color-text)">(&#123; destination &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">._destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destination;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">._calculateRoute</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">._startDriving</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_calculateRoute</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">._planRoute</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">._currentLocation</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">._destination);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_startDriving</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_planRoute</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ao,Rs,zt="This way, it makes our regex much easier:",qo,Bs,Ce,Ja=`<div class="filename">terser_options.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">terserOptions</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  mangle</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    properties</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      regex</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-string-expression)"> /</span><span style="color: var(--shiki-token-keyword)">^</span><span style="color: var(--shiki-token-string-expression)">_/</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,He,T,Ns,Wt='<a href="#consistent-property-mangling-across-subsequent-minifications" id="consistent-property-mangling-across-subsequent-minifications">Consistent property mangling across subsequent minifications</a>',Oo,Vs,$t='If you want <code class="inline">_calculateRoute</code> to always mangled to the same name no matter how much you have changed the input file, the <code class="inline">nameCache</code> may come in handy.',Do,zs,Jt='<code class="inline">nameCache</code> is the internal state of Terser, that can be serialised and deserialised to seed the Terser mangling state.',Ro,Ws,Me,Fa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;fs&#39;</span><span style="color: var(--shiki-color-text)">).promises;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">terser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;terser&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nameCache</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">terser</span><span style="color: var(--shiki-token-function)">.minify</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  nameCache</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// serialise and store &#96;nameCache&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;nameCache.json&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(nameCache)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// deserialise and seed Terser</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nameCache</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;nameCache.json&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">terser</span><span style="color: var(--shiki-token-function)">.minify</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  nameCache</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Le,u,$s,Ft='<a href="#consistent-property-mangling-across-different-builds" id="consistent-property-mangling-across-different-builds">Consistent property mangling across different builds</a>',Bo,Js,Yt="What if you have multiple independent projects, and you want to make sure property mangling work across these projects?",No,Fs,Kt="If the variables you mangled are private properties or methods, then, you don't have an issue with this. Different projects should be nicely encapsulated, and should not depends on internal properties or methods.",Vo,Ys,Ut="So, what I am describing now is for public API methods and properties.",zo,Ks,Zt="What if you want to mangle them as well, how do you make sure that they wont break the user after mangling the public methods or properties?",Wo,Us,Gt="Since it involves public methods and properties, additional steps in setting up is understandable.",$o,Zs,Qt='In that case, I would recommend maintain a name mapping of how the properties should mangle into, and use <a href="https://www.npmjs.com/package/babel-plugin-transform-rename-properties" rel="nofollow">babel-plugin-transform-rename-properties</a> to rename them.',Jo,Gs,Xt="The name mapping is a manually curated list of names of your public properties and methods, and only need to be updated whenever there's a change in your public API.",Fo,Qs,sa="Think of it as part of your documentation, which should be updated whenever you change your public API.",Yo,Xs,Pe,Ya=`<div class="filename">babel.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nameMapping</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  driveTo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// rename all &#96;.driveTo&#96; to &#96;.d&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-transform-rename-properties&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        rename</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> nameMapping</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Ie,S,ea='<h2><a href="#misc" id="misc">Misc</a></h2>',je,b,se,oa='<a href="#webpack-and-rollup" id="webpack-and-rollup">Webpack and Rollup</a>',Ko,ee,ta='Throughout the article, we mentioned Terser and <code class="inline">terserOptions</code>, and didnt really go into how you would use it for projects bundled with <a href="https://webpack.js.org/" rel="nofollow">webpack</a> or <a href="https://rollupjs.org/" rel="nofollow">rollup</a>.',Uo,oe,aa='For webpack user, you can use <a href="https://github.com/webpack-contrib/terser-webpack-plugin/" rel="nofollow">terser-webpack-plugin</a>.',Zo,te,Ee,Ka=`<div class="filename">webpack.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">TerserPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;terser-webpack-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  optimization</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    minimize</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    minimizer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TerserPlugin</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        terserOptions</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          mangle</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            properties</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              regex</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-string-expression)"> /</span><span style="color: var(--shiki-token-keyword)">^</span><span style="color: var(--shiki-token-string-expression)">_/</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Go,ae,na='For rollup user, you can use <a href="https://www.npmjs.com/package/rollup-plugin-terser" rel="nofollow">rollup-plugin-terser</a>',Qo,ne,Se,Ua=`<div class="filename">rollup.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; terser &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;rollup-plugin-terser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">rollup</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">terser</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      mangle</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        properties</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          regex</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-token-string-expression)"> /</span><span style="color: var(--shiki-token-keyword)">^</span><span style="color: var(--shiki-token-string-expression)">_/</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ae,A,la='<h3><a href="#a-curious-case-of-preact" id="a-curious-case-of-preact">A curious case of Preact</a></h3> <blockquote><p>The rabbit hole of how to mangle property names starts with investigating the <a href="https://github.com/preactjs/preact" rel="nofollow">Preact</a> <a href="https://github.com/preactjs/preact/pull/2661" rel="nofollow">Suspense bug</a>, but that would be a story for another time.</p></blockquote> <p>Preact is a fast 3kB React alternative, with the same modern API.</p> <p>Property mangling contributed an important part to keep the library slim.</p> <table><thead><tr><th>Without mangling</th> <th>With mangling</th></tr></thead> <tbody><tr><td>10.7 KB minified</td> <td>9.7 Kb minified (reduced ~10%)</td></tr> <tr><td>4.2 KB minified + gzipped</td> <td>3.9 KB minified + gzipped (reduced ~5%)</td></tr></tbody></table> <p>There&#39;s several different builds for <code class="inline">preact</code>:</p> <ul><li><code class="inline">preact/core</code></li> <li><code class="inline">preact/compat</code> - a compat layer on top of preact to provide all React API</li> <li><code class="inline">preact/debug</code> - a layer on top of <code class="inline">preact/core</code> that provides a better debugging experience</li> <li><code class="inline">preact/devtools</code> - the bridge between <code class="inline">preact/core</code> and the devtools extension.</li></ul> <p>To have a consistent mangle properties across different builds, <code class="inline">babel-plugin-transform-rename-properties</code> is used, and the name mapping is stored at <a href="https://github.com/preactjs/preact/blob/c2c9b9414bc4202b2ac487b55be626f955fba65f/mangle.json" rel="nofollow"><code class="inline">mangle.json</code></a>.</p> <blockquote><p>Check out this Pull Request that adds <code class="inline">babel-plugin-transform-rename-properties</code> into Preact: <a href="https://github.com/preactjs/preact/pull/2548" rel="nofollow">https://github.com/preactjs/preact/pull/2548</a></p></blockquote> <p>For mangling private properties, the bundling process of Preact is abstracted in <a href="https://github.com/developit/microbundle" rel="nofollow">microbundle</a>, which reads the mangle options from <code class="inline">mangle.json</code> or the <code class="inline">mangle</code> property from <code class="inline">package.json</code>. See <a href="https://github.com/developit/microbundle#mangling-properties" rel="nofollow">Mangling Properties for microbundle</a>.</p>',qe,q,ra='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>We&#39;ve covered what is property mangling and all the caveats come along with it.</p> <p>With the full grasp of the caveats, we looked at various tactics that we can use to utilise property mangling to reduce our minified code output.</p>',Oe,O,ia='<h2><a href="#further-reading" id="further-reading">Further Reading</a></h2> <ul><li><a href="https://github.com/terser/terser#mangle-options" rel="nofollow">Terser Mangle options</a></li> <li><a href="https://github.com/developit/microbundle#mangling-properties" rel="nofollow">microbundle Mangling Properties</a></li> <li><a href="https://www.npmjs.com/package/babel-plugin-transform-rename-properties" rel="nofollow">babel-plugin-transform-rename-properties</a></li></ul>';return{c(){l=e("section"),_=e("h2"),_.innerHTML=M,P=t(),x=e("p"),x.textContent=H,R=t(),B=e("div"),le=new m(!1),De=t(),N=e("p"),N.innerHTML=st,Re=t(),V=e("p"),V.innerHTML=et,Be=t(),z=e("div"),re=new m(!1),Ne=t(),W=e("p"),W.innerHTML=ot,Ve=t(),$=e("p"),$.innerHTML=tt,ze=t(),J=e("p"),J.textContent=at,We=t(),F=e("p"),F.innerHTML=nt,$e=t(),Y=e("p"),Y.innerHTML=lt,Je=t(),K=e("p"),K.innerHTML=rt,Fe=t(),U=e("div"),ie=new m(!1),Ye=t(),Z=e("p"),Z.innerHTML=it,Ke=t(),G=e("p"),G.textContent=pt,Ue=t(),Q=e("p"),Q.innerHTML=ct,Ze=t(),X=e("p"),X.textContent=kt,Ge=t(),ss=e("div"),pe=new m(!1),Qe=t(),es=e("p"),es.innerHTML=ht,Xe=t(),os=e("p"),os.textContent=yt,so=t(),ts=e("p"),ts.innerHTML=vt,eo=t(),as=e("p"),as.textContent=dt,oo=t(),ns=e("p"),ns.innerHTML=ut,to=t(),ls=e("p"),ls.innerHTML=xt,ao=t(),rs=e("p"),rs.innerHTML=ft,no=t(),is=e("p"),is.innerHTML=mt,ce=t(),c=e("section"),ps=e("h3"),ps.innerHTML=gt,lo=t(),cs=e("p"),cs.innerHTML=wt,ro=t(),ks=e("div"),ke=new m(!1),io=t(),hs=e("div"),he=new m(!1),po=t(),ys=e("p"),ys.innerHTML=bt,co=t(),vs=e("p"),vs.innerHTML=_t,ko=t(),ds=e("div"),ye=new m(!1),ho=t(),us=e("div"),ve=new m(!1),yo=t(),xs=e("p"),xs.innerHTML=Tt,vo=t(),fs=e("p"),fs.innerHTML=Ct,uo=t(),ms=e("p"),ms.innerHTML=Ht,xo=t(),gs=e("p"),gs.textContent=Mt,fo=t(),ws=e("ul"),ws.innerHTML=Lt,mo=t(),bs=e("p"),bs.textContent=Pt,go=t(),_s=e("div"),de=new m(!1),wo=t(),Ts=e("div"),ue=new m(!1),bo=t(),Cs=e("p"),Cs.innerHTML=It,_o=t(),Hs=e("p"),Hs.innerHTML=jt,xe=t(),I=e("section"),I.innerHTML=Et,fe=t(),j=e("section"),j.innerHTML=St,me=t(),E=e("section"),E.innerHTML=At,ge=t(),h=e("section"),Ms=e("h3"),Ms.innerHTML=qt,To=t(),Ls=e("p"),Ls.innerHTML=Ot,Co=t(),Ps=e("div"),we=new m(!1),Ho=t(),Is=e("p"),Is.innerHTML=Dt,Mo=t(),js=e("p"),js.textContent=Rt,Lo=t(),Es=e("p"),Es.innerHTML=Bt,Po=t(),Ss=e("div"),be=new m(!1),Io=t(),As=e("p"),As.innerHTML=Nt,jo=t(),qs=e("div"),_e=new m(!1),Eo=t(),Os=e("p"),Os.innerHTML=Vt,So=t(),Ds=e("div"),Te=new m(!1),Ao=t(),Rs=e("p"),Rs.textContent=zt,qo=t(),Bs=e("div"),Ce=new m(!1),He=t(),T=e("section"),Ns=e("h3"),Ns.innerHTML=Wt,Oo=t(),Vs=e("p"),Vs.innerHTML=$t,Do=t(),zs=e("p"),zs.innerHTML=Jt,Ro=t(),Ws=e("div"),Me=new m(!1),Le=t(),u=e("section"),$s=e("h3"),$s.innerHTML=Ft,Bo=t(),Js=e("p"),Js.textContent=Yt,No=t(),Fs=e("p"),Fs.textContent=Kt,Vo=t(),Ys=e("p"),Ys.textContent=Ut,zo=t(),Ks=e("p"),Ks.textContent=Zt,Wo=t(),Us=e("p"),Us.textContent=Gt,$o=t(),Zs=e("p"),Zs.innerHTML=Qt,Jo=t(),Gs=e("p"),Gs.textContent=Xt,Fo=t(),Qs=e("p"),Qs.textContent=sa,Yo=t(),Xs=e("div"),Pe=new m(!1),Ie=t(),S=e("section"),S.innerHTML=ea,je=t(),b=e("section"),se=e("h3"),se.innerHTML=oa,Ko=t(),ee=e("p"),ee.innerHTML=ta,Uo=t(),oe=e("p"),oe.innerHTML=aa,Zo=t(),te=e("div"),Ee=new m(!1),Go=t(),ae=e("p"),ae.innerHTML=na,Qo=t(),ne=e("div"),Se=new m(!1),Ae=t(),A=e("section"),A.innerHTML=la,qe=t(),q=e("section"),q.innerHTML=ra,Oe=t(),O=e("section"),O.innerHTML=ia,this.h()},l(i){l=o(i,"SECTION",{});var n=v(l);_=o(n,"H2",{"data-svelte-h":!0}),r(_)!=="svelte-bdpmjq"&&(_.innerHTML=M),P=a(n),x=o(n,"P",{"data-svelte-h":!0}),r(x)!=="svelte-1q47a83"&&(x.textContent=H),R=a(n),B=o(n,"DIV",{class:!0});var pa=v(B);le=g(pa,!1),pa.forEach(p),De=a(n),N=o(n,"P",{"data-svelte-h":!0}),r(N)!=="svelte-9i9wh"&&(N.innerHTML=st),Re=a(n),V=o(n,"P",{"data-svelte-h":!0}),r(V)!=="svelte-91g8qw"&&(V.innerHTML=et),Be=a(n),z=o(n,"DIV",{class:!0});var ca=v(z);re=g(ca,!1),ca.forEach(p),Ne=a(n),W=o(n,"P",{"data-svelte-h":!0}),r(W)!=="svelte-zm2f4l"&&(W.innerHTML=ot),Ve=a(n),$=o(n,"P",{"data-svelte-h":!0}),r($)!=="svelte-adslk0"&&($.innerHTML=tt),ze=a(n),J=o(n,"P",{"data-svelte-h":!0}),r(J)!=="svelte-g6i1qa"&&(J.textContent=at),We=a(n),F=o(n,"P",{"data-svelte-h":!0}),r(F)!=="svelte-9zoj2c"&&(F.innerHTML=nt),$e=a(n),Y=o(n,"P",{"data-svelte-h":!0}),r(Y)!=="svelte-11gwf8i"&&(Y.innerHTML=lt),Je=a(n),K=o(n,"P",{"data-svelte-h":!0}),r(K)!=="svelte-tpwt4z"&&(K.innerHTML=rt),Fe=a(n),U=o(n,"DIV",{class:!0});var ka=v(U);ie=g(ka,!1),ka.forEach(p),Ye=a(n),Z=o(n,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-1ux0d9q"&&(Z.innerHTML=it),Ke=a(n),G=o(n,"P",{"data-svelte-h":!0}),r(G)!=="svelte-19fu9x3"&&(G.textContent=pt),Ue=a(n),Q=o(n,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-12zo2wm"&&(Q.innerHTML=ct),Ze=a(n),X=o(n,"P",{"data-svelte-h":!0}),r(X)!=="svelte-30ithb"&&(X.textContent=kt),Ge=a(n),ss=o(n,"DIV",{class:!0});var ha=v(ss);pe=g(ha,!1),ha.forEach(p),Qe=a(n),es=o(n,"P",{"data-svelte-h":!0}),r(es)!=="svelte-toi3n3"&&(es.innerHTML=ht),Xe=a(n),os=o(n,"P",{"data-svelte-h":!0}),r(os)!=="svelte-1t7dxa6"&&(os.textContent=yt),so=a(n),ts=o(n,"P",{"data-svelte-h":!0}),r(ts)!=="svelte-z86trr"&&(ts.innerHTML=vt),eo=a(n),as=o(n,"P",{"data-svelte-h":!0}),r(as)!=="svelte-kanka5"&&(as.textContent=dt),oo=a(n),ns=o(n,"P",{"data-svelte-h":!0}),r(ns)!=="svelte-nlw5sf"&&(ns.innerHTML=ut),to=a(n),ls=o(n,"P",{"data-svelte-h":!0}),r(ls)!=="svelte-dxk57w"&&(ls.innerHTML=xt),ao=a(n),rs=o(n,"P",{"data-svelte-h":!0}),r(rs)!=="svelte-1obl7c9"&&(rs.innerHTML=ft),no=a(n),is=o(n,"P",{"data-svelte-h":!0}),r(is)!=="svelte-1w2v809"&&(is.innerHTML=mt),n.forEach(p),ce=a(i),c=o(i,"SECTION",{});var k=v(c);ps=o(k,"H3",{"data-svelte-h":!0}),r(ps)!=="svelte-1xdr2tv"&&(ps.innerHTML=gt),lo=a(k),cs=o(k,"P",{"data-svelte-h":!0}),r(cs)!=="svelte-1gcm2lg"&&(cs.innerHTML=wt),ro=a(k),ks=o(k,"DIV",{class:!0});var ya=v(ks);ke=g(ya,!1),ya.forEach(p),io=a(k),hs=o(k,"DIV",{class:!0});var va=v(hs);he=g(va,!1),va.forEach(p),po=a(k),ys=o(k,"P",{"data-svelte-h":!0}),r(ys)!=="svelte-l68ymk"&&(ys.innerHTML=bt),co=a(k),vs=o(k,"P",{"data-svelte-h":!0}),r(vs)!=="svelte-zwt9jb"&&(vs.innerHTML=_t),ko=a(k),ds=o(k,"DIV",{class:!0});var da=v(ds);ye=g(da,!1),da.forEach(p),ho=a(k),us=o(k,"DIV",{class:!0});var ua=v(us);ve=g(ua,!1),ua.forEach(p),yo=a(k),xs=o(k,"P",{"data-svelte-h":!0}),r(xs)!=="svelte-1umdo63"&&(xs.innerHTML=Tt),vo=a(k),fs=o(k,"P",{"data-svelte-h":!0}),r(fs)!=="svelte-1p48pli"&&(fs.innerHTML=Ct),uo=a(k),ms=o(k,"P",{"data-svelte-h":!0}),r(ms)!=="svelte-1vlyag1"&&(ms.innerHTML=Ht),xo=a(k),gs=o(k,"P",{"data-svelte-h":!0}),r(gs)!=="svelte-oaujzy"&&(gs.textContent=Mt),fo=a(k),ws=o(k,"UL",{"data-svelte-h":!0}),r(ws)!=="svelte-1t0ow3v"&&(ws.innerHTML=Lt),mo=a(k),bs=o(k,"P",{"data-svelte-h":!0}),r(bs)!=="svelte-15m1kql"&&(bs.textContent=Pt),go=a(k),_s=o(k,"DIV",{class:!0});var xa=v(_s);de=g(xa,!1),xa.forEach(p),wo=a(k),Ts=o(k,"DIV",{class:!0});var fa=v(Ts);ue=g(fa,!1),fa.forEach(p),bo=a(k),Cs=o(k,"P",{"data-svelte-h":!0}),r(Cs)!=="svelte-192acso"&&(Cs.innerHTML=It),_o=a(k),Hs=o(k,"P",{"data-svelte-h":!0}),r(Hs)!=="svelte-ty7ozt"&&(Hs.innerHTML=jt),k.forEach(p),xe=a(i),I=o(i,"SECTION",{"data-svelte-h":!0}),r(I)!=="svelte-ajq1q8"&&(I.innerHTML=Et),fe=a(i),j=o(i,"SECTION",{"data-svelte-h":!0}),r(j)!=="svelte-153efyi"&&(j.innerHTML=St),me=a(i),E=o(i,"SECTION",{"data-svelte-h":!0}),r(E)!=="svelte-xh2vxt"&&(E.innerHTML=At),ge=a(i),h=o(i,"SECTION",{});var y=v(h);Ms=o(y,"H3",{"data-svelte-h":!0}),r(Ms)!=="svelte-1bwu8ki"&&(Ms.innerHTML=qt),To=a(y),Ls=o(y,"P",{"data-svelte-h":!0}),r(Ls)!=="svelte-4pgrdy"&&(Ls.innerHTML=Ot),Co=a(y),Ps=o(y,"DIV",{class:!0});var ma=v(Ps);we=g(ma,!1),ma.forEach(p),Ho=a(y),Is=o(y,"P",{"data-svelte-h":!0}),r(Is)!=="svelte-x7t28j"&&(Is.innerHTML=Dt),Mo=a(y),js=o(y,"P",{"data-svelte-h":!0}),r(js)!=="svelte-bi2fds"&&(js.textContent=Rt),Lo=a(y),Es=o(y,"P",{"data-svelte-h":!0}),r(Es)!=="svelte-1psxfxg"&&(Es.innerHTML=Bt),Po=a(y),Ss=o(y,"DIV",{class:!0});var ga=v(Ss);be=g(ga,!1),ga.forEach(p),Io=a(y),As=o(y,"P",{"data-svelte-h":!0}),r(As)!=="svelte-fws26w"&&(As.innerHTML=Nt),jo=a(y),qs=o(y,"DIV",{class:!0});var wa=v(qs);_e=g(wa,!1),wa.forEach(p),Eo=a(y),Os=o(y,"P",{"data-svelte-h":!0}),r(Os)!=="svelte-yi0z1s"&&(Os.innerHTML=Vt),So=a(y),Ds=o(y,"DIV",{class:!0});var ba=v(Ds);Te=g(ba,!1),ba.forEach(p),Ao=a(y),Rs=o(y,"P",{"data-svelte-h":!0}),r(Rs)!=="svelte-jy48pc"&&(Rs.textContent=zt),qo=a(y),Bs=o(y,"DIV",{class:!0});var _a=v(Bs);Ce=g(_a,!1),_a.forEach(p),y.forEach(p),He=a(i),T=o(i,"SECTION",{});var L=v(T);Ns=o(L,"H3",{"data-svelte-h":!0}),r(Ns)!=="svelte-wbdi9z"&&(Ns.innerHTML=Wt),Oo=a(L),Vs=o(L,"P",{"data-svelte-h":!0}),r(Vs)!=="svelte-c42l9k"&&(Vs.innerHTML=$t),Do=a(L),zs=o(L,"P",{"data-svelte-h":!0}),r(zs)!=="svelte-1mjtskd"&&(zs.innerHTML=Jt),Ro=a(L),Ws=o(L,"DIV",{class:!0});var Ta=v(Ws);Me=g(Ta,!1),Ta.forEach(p),L.forEach(p),Le=a(i),u=o(i,"SECTION",{});var f=v(u);$s=o(f,"H3",{"data-svelte-h":!0}),r($s)!=="svelte-1ymkntl"&&($s.innerHTML=Ft),Bo=a(f),Js=o(f,"P",{"data-svelte-h":!0}),r(Js)!=="svelte-130nemu"&&(Js.textContent=Yt),No=a(f),Fs=o(f,"P",{"data-svelte-h":!0}),r(Fs)!=="svelte-c05zxh"&&(Fs.textContent=Kt),Vo=a(f),Ys=o(f,"P",{"data-svelte-h":!0}),r(Ys)!=="svelte-jk2pen"&&(Ys.textContent=Ut),zo=a(f),Ks=o(f,"P",{"data-svelte-h":!0}),r(Ks)!=="svelte-ncsam"&&(Ks.textContent=Zt),Wo=a(f),Us=o(f,"P",{"data-svelte-h":!0}),r(Us)!=="svelte-kf4xg2"&&(Us.textContent=Gt),$o=a(f),Zs=o(f,"P",{"data-svelte-h":!0}),r(Zs)!=="svelte-12kg8ms"&&(Zs.innerHTML=Qt),Jo=a(f),Gs=o(f,"P",{"data-svelte-h":!0}),r(Gs)!=="svelte-x46s6q"&&(Gs.textContent=Xt),Fo=a(f),Qs=o(f,"P",{"data-svelte-h":!0}),r(Qs)!=="svelte-6yietm"&&(Qs.textContent=sa),Yo=a(f),Xs=o(f,"DIV",{class:!0});var Ca=v(Xs);Pe=g(Ca,!1),Ca.forEach(p),f.forEach(p),Ie=a(i),S=o(i,"SECTION",{"data-svelte-h":!0}),r(S)!=="svelte-1uaqq71"&&(S.innerHTML=ea),je=a(i),b=o(i,"SECTION",{});var C=v(b);se=o(C,"H3",{"data-svelte-h":!0}),r(se)!=="svelte-2bbdwm"&&(se.innerHTML=oa),Ko=a(C),ee=o(C,"P",{"data-svelte-h":!0}),r(ee)!=="svelte-o8my8y"&&(ee.innerHTML=ta),Uo=a(C),oe=o(C,"P",{"data-svelte-h":!0}),r(oe)!=="svelte-r9wwfh"&&(oe.innerHTML=aa),Zo=a(C),te=o(C,"DIV",{class:!0});var Ha=v(te);Ee=g(Ha,!1),Ha.forEach(p),Go=a(C),ae=o(C,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-g1qzu8"&&(ae.innerHTML=na),Qo=a(C),ne=o(C,"DIV",{class:!0});var Ma=v(ne);Se=g(Ma,!1),Ma.forEach(p),C.forEach(p),Ae=a(i),A=o(i,"SECTION",{"data-svelte-h":!0}),r(A)!=="svelte-1ibagke"&&(A.innerHTML=la),qe=a(i),q=o(i,"SECTION",{"data-svelte-h":!0}),r(q)!=="svelte-1svihtb"&&(q.innerHTML=ra),Oe=a(i),O=o(i,"SECTION",{"data-svelte-h":!0}),r(O)!=="svelte-wo6e0k"&&(O.innerHTML=ia),this.h()},h(){le.a=null,w(B,"class","code-section"),re.a=null,w(z,"class","code-section"),ie.a=null,w(U,"class","code-section"),pe.a=null,w(ss,"class","code-section"),ke.a=null,w(ks,"class","code-section"),he.a=null,w(hs,"class","code-section"),ye.a=null,w(ds,"class","code-section"),ve.a=null,w(us,"class","code-section"),de.a=null,w(_s,"class","code-section"),ue.a=null,w(Ts,"class","code-section"),we.a=null,w(Ps,"class","code-section"),be.a=null,w(Ss,"class","code-section"),_e.a=null,w(qs,"class","code-section"),Te.a=null,w(Ds,"class","code-section"),Ce.a=null,w(Bs,"class","code-section"),Me.a=null,w(Ws,"class","code-section"),Pe.a=null,w(Xs,"class","code-section"),Ee.a=null,w(te,"class","code-section"),Se.a=null,w(ne,"class","code-section")},m(i,n){d(i,l,n),s(l,_),s(l,P),s(l,x),s(l,R),s(l,B),le.m(ja,B),s(l,De),s(l,N),s(l,Re),s(l,V),s(l,Be),s(l,z),re.m(Ea,z),s(l,Ne),s(l,W),s(l,Ve),s(l,$),s(l,ze),s(l,J),s(l,We),s(l,F),s(l,$e),s(l,Y),s(l,Je),s(l,K),s(l,Fe),s(l,U),ie.m(Sa,U),s(l,Ye),s(l,Z),s(l,Ke),s(l,G),s(l,Ue),s(l,Q),s(l,Ze),s(l,X),s(l,Ge),s(l,ss),pe.m(Aa,ss),s(l,Qe),s(l,es),s(l,Xe),s(l,os),s(l,so),s(l,ts),s(l,eo),s(l,as),s(l,oo),s(l,ns),s(l,to),s(l,ls),s(l,ao),s(l,rs),s(l,no),s(l,is),d(i,ce,n),d(i,c,n),s(c,ps),s(c,lo),s(c,cs),s(c,ro),s(c,ks),ke.m(qa,ks),s(c,io),s(c,hs),he.m(Oa,hs),s(c,po),s(c,ys),s(c,co),s(c,vs),s(c,ko),s(c,ds),ye.m(Da,ds),s(c,ho),s(c,us),ve.m(Ra,us),s(c,yo),s(c,xs),s(c,vo),s(c,fs),s(c,uo),s(c,ms),s(c,xo),s(c,gs),s(c,fo),s(c,ws),s(c,mo),s(c,bs),s(c,go),s(c,_s),de.m(Ba,_s),s(c,wo),s(c,Ts),ue.m(Na,Ts),s(c,bo),s(c,Cs),s(c,_o),s(c,Hs),d(i,xe,n),d(i,I,n),d(i,fe,n),d(i,j,n),d(i,me,n),d(i,E,n),d(i,ge,n),d(i,h,n),s(h,Ms),s(h,To),s(h,Ls),s(h,Co),s(h,Ps),we.m(Va,Ps),s(h,Ho),s(h,Is),s(h,Mo),s(h,js),s(h,Lo),s(h,Es),s(h,Po),s(h,Ss),be.m(za,Ss),s(h,Io),s(h,As),s(h,jo),s(h,qs),_e.m(Wa,qs),s(h,Eo),s(h,Os),s(h,So),s(h,Ds),Te.m($a,Ds),s(h,Ao),s(h,Rs),s(h,qo),s(h,Bs),Ce.m(Ja,Bs),d(i,He,n),d(i,T,n),s(T,Ns),s(T,Oo),s(T,Vs),s(T,Do),s(T,zs),s(T,Ro),s(T,Ws),Me.m(Fa,Ws),d(i,Le,n),d(i,u,n),s(u,$s),s(u,Bo),s(u,Js),s(u,No),s(u,Fs),s(u,Vo),s(u,Ys),s(u,zo),s(u,Ks),s(u,Wo),s(u,Us),s(u,$o),s(u,Zs),s(u,Jo),s(u,Gs),s(u,Fo),s(u,Qs),s(u,Yo),s(u,Xs),Pe.m(Ya,Xs),d(i,Ie,n),d(i,S,n),d(i,je,n),d(i,b,n),s(b,se),s(b,Ko),s(b,ee),s(b,Uo),s(b,oe),s(b,Zo),s(b,te),Ee.m(Ka,te),s(b,Go),s(b,ae),s(b,Qo),s(b,ne),Se.m(Ua,ne),d(i,Ae,n),d(i,A,n),d(i,qe,n),d(i,q,n),d(i,Oe,n),d(i,O,n)},p:Qa,d(i){i&&(p(l),p(ce),p(c),p(xe),p(I),p(fe),p(j),p(me),p(E),p(ge),p(h),p(He),p(T),p(Le),p(u),p(Ie),p(S),p(je),p(b),p(Ae),p(A),p(qe),p(q),p(Oe),p(O))}}}function hn(D){let l,_;const M=[D[0],Ia];let P={$$slots:{default:[kn]},$$scope:{ctx:D}};for(let x=0;x<M.length;x+=1)P=Xo(P,M[x]);return l=new pn({props:P}),{c(){en(l.$$.fragment)},l(x){on(l.$$.fragment,x)},m(x,H){tn(l,x,H),_=!0},p(x,[H]){const R=H&1?rn(M,[H&1&&Pa(x[0]),H&0&&Pa(Ia)]):{};H&2&&(R.$$scope={dirty:H,ctx:x}),l.$set(R)},i(x){_||(an(l.$$.fragment,x),_=!0)},o(x){nn(l.$$.fragment,x),_=!1},d(x){ln(l,x)}}}const Ia={title:"Reduce minified code size by property mangling",date:"2020-08-08T08:00:00Z",tags:["JavaScript","Terser"],label:"blog",description:"What is Mangling PropertyAssume you have the following JavaScript code:Original: 268 BytesIf you minify this with the default options with Terser, you probably get something like:207 Bytes (77.2%)(Usually Terser would compress whitespace too, but for ease of reading, allow me to keep the whitespace)...",tableOfContents:[{link:"what-is-mangling-property",title:"What is Mangling Property",nested:[{link:"why-is-property-mangling-considered-unsafe",title:"Why is property mangling considered unsafe?",nested:[{link:"set-or-get-property-from-the-global-scope",title:"Set or get property from the global scope"}]},{link:"mangling-for-rollup-webpack-bundled-code",title:"Mangling for rollup / webpack bundled code"}]},{link:"how-to-mangle-property-responsibly-and-safely",title:"How to mangle property responsibly and safely",nested:[{link:"private-property",title:"Private property"},{link:"consistent-property-mangling-across-subsequent-minifications",title:"Consistent property mangling across subsequent minifications"},{link:"consistent-property-mangling-across-different-builds",title:"Consistent property mangling across different builds"}]},{link:"misc",title:"Misc",nested:[{link:"webpack-and-rollup",title:"Webpack and Rollup"},{link:"a-curious-case-of-preact",title:"A curious case of Preact"}]},{link:"closing-note",title:"Closing Note"},{link:"further-reading",title:"Further Reading"}]};function yn(D,l,_){return Ga("blog",{image:cn}),D.$$set=M=>{_(0,l=Xo(Xo({},l),La(M)))},l=La(l),[l]}class fn extends Xa{constructor(l){super(),sn(this,l,yn,hn,Za,{})}}export{fn as component};
