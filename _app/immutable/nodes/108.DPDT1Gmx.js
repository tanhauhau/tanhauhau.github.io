import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as D,g as L,d as C,b as j,f as A,s as a,e as s,a as F,r as o,n as c}from"../chunks/C2PHntuy.js";import{h as e}from"../chunks/C3QlhiH-.js";import{i as G}from"../chunks/BQOOHHT8.js";import{l as W,s as B}from"../chunks/gzNpScmH.js";import{B as M}from"../chunks/B1caYEk9.js";import{t as O}from"../chunks/C3bQ3Oc7.js";const u={title:"Webpack Define Plugin",tags:["define plugin","feature flag"],description:"Define Plugina high level of define plugin, treeshake + minification happens in the followingfor any module, webpack reads the source codeapply all the loadersapply define pluginfor the final code after loaders + define plugin, ...",tableOfContents:[{link:"define-plugin",title:"Define Plugin",nested:[{link:"what-about-terser",title:"What about terser?"}]},{link:"read-more",title:"Read More"}]},{title:T,tags:U,description:V,tableOfContents:X}=u;var R=j(`<section><h2><a href="#define-plugin" id="define-plugin">Define Plugin</a></h2> <p>a high level of define plugin, treeshake + minification happens in the following</p> <p>for any module,</p> <ul><li>webpack reads the source code</li> <li>apply all the loaders</li> <li>apply define plugin</li> <li>for the final code after loaders + define plugin, <ul><li>for code at <code class="inline">if (truthy)</code> or <code class="inline">truthy && ...</code> or <code class="inline">truthy ? ... : ...</code>, webpack will try to collapse that conditional, meaning based on truthy / falsy value, remove unwanted code logic paths</li></ul></li> <li>find all the <code class="inline">imports</code> or <code class="inline">require</code> in the code</li> <li>traverse them and apply the same step for each module</li></ul> <p>after creating the module map</p> <ul><li>create chunks based on dynamic import()</li> <li>apply graph based optimisation - such as mark unused exports and treeshake them away</li> <li>granular split chuks optimisation</li> <li>lastly, for each chunk <ul><li>run terser to minify the code, will remove any unused variables / functions within each chunk</li></ul></li></ul> <p>which means, there's a difference between the following contrived code:</p> <div class="code-section"><!></div> <p>and</p> <div class="code-section"><!></div> <p>after applying <code class="inline">new DefinePlugin(&#123; __FLAG__: true &#125;)</code>, you get:</p> <div class="code-section"><!></div> <p>and</p> <div class="code-section"><!></div> <p>webpack's parser is able to collapse the conditional of the latter, but not the former.</p> <blockquote><p>the collapse of conditional expression happens <a href="https://github.com/webpack/webpack/blob/master/lib/ConstPlugin.js#L133" rel="nofollow">here</a></p></blockquote> <div class="code-section"><!></div> <p>so, the former case, will have both <code class="inline">foo</code> and <code class="inline">bar</code> in the bundled code ,but the latter will only have <code class="inline">foo</code>.</p></section> <section><h3><a href="#what-about-terser" id="what-about-terser">What about terser?</a></h3> <p>terser runs on chunk level after all the bundling and chunking logic, so even though terser is smart enough to collapse</p> <div class="code-section"><!></div> <p>into</p> <div class="code-section"><!></div> <p>the bundled code still have <code class="inline">foo</code> and <code class="inline">bar</code>'s code.</p></section> <section><h2><a href="#read-more" id="read-more">Read More</a></h2> <ul><li><a href="https://webpack.js.org/plugins/internal-plugins/#constplugin" rel="nofollow">https://webpack.js.org/plugins/internal-plugins/#constplugin</a></li></ul></section>`,1);function Y(f,k){const x=W(k,["children","$$slots","$$events","$$legacy"]);D(k,!1),L("blog",{image:O}),G(),M(f,B(()=>x,()=>u,{children:(g,z)=>{var h=R(),n=A(h),l=a(s(n),14),b=s(l);e(b,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> __FLAG__;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(l);var r=a(l,4),m=s(r);e(m,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (__FLAG__) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(r);var i=a(r,4),w=s(i);e(w,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(i);var t=a(i,4),_=s(t);e(_,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(t);var d=a(t,6),q=s(d);e(q,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123; &#125;</span></span></code></pre>`),o(d),c(2),o(n);var v=a(n,2),p=a(s(v),4),$=s(p);e($,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(p);var y=a(p,4),P=s(y);e(P,()=>'<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>'),o(y),c(2),o(v),c(2),F(g,h)},$$slots:{default:!0}})),C()}export{Y as component};
