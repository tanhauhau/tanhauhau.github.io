import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as f,g as u,d as m,b as g,s as a,f as w,a as b,e,r as n,n as x}from"../chunks/C2PHntuy.js";import{h as t}from"../chunks/C3QlhiH-.js";import{i as _}from"../chunks/BQOOHHT8.js";import{l as j,s as $}from"../chunks/gzNpScmH.js";import{B as P}from"../chunks/B1caYEk9.js";import{t as E}from"../chunks/C3bQ3Oc7.js";const c={title:"Dead-code elimination",date:"2018-10-24T08:00:00Z",description:"How to hint uglify-js that your function is pure",label:"blog"},{title:D,date:F,description:L,label:N}=c;var R=g('<p>Imagine you have the code below:</p> <div class="code-section"><!></div> <p>after passing this code through <a href="https://www.npmjs.com/package/uglify-js" rel="nofollow">uglify-js</a>, you will get the code below:</p> <div class="code-section"><!></div> <p><strong>uglify-js</strong> will do dead code removal, ie: it will remove code that will not affect the program results. Since we defined <code class="inline">a</code> and <code class="inline">b</code> in the function <code class="inline">foo</code> and we are not using <code class="inline">a</code> and <code class="inline">b</code> within the <code class="inline">foo</code>, <strong>uglify-js</strong> safely removes it from the uglified code.</p> <p>However, if you can see from the uglified code, <code class="inline">foobar()</code> is preserved. This is because calling <code class="inline">foobar</code> may have side effects on the program, so <strong>uglify-js</strong> preserves foobar(). But since we do not need the return value of <code class="inline">foobar()</code>, which is assigned to <code class="inline">a</code>, <code class="inline">a</code> got removed by uglify-js.</p> <hr/> <p>What if we know that <code class="inline">foobar()</code> will not caused any side effects?</p> <p>How do we tell <strong>uglify-js</strong> that if we are not using the return value from <code class="inline">foobar()</code>, please remove it as well?</p> <hr/> <p>Turns out that <strong>uglify-js</strong> will treat a function call as ‚Äúpure‚Äù if there is a comment annotation <code class="inline">/*@__PURE__*/</code> or <code class="inline">/*#__PURE__*/</code> immediately precedes the call.</p> <p>For example: <code class="inline">/* @__PURE__ */ foobar()</code> !</p> <div class="code-section"><!></div> <p>Note that now <code class="inline">foobar()</code> is being removed!</p> <hr/> <p>So, how is this useful?</p> <p>As a library author, you can write a babel plugin to mark your function to be pure, so that <strong>uglify-js</strong> can drop the function call if the return value is not being used in the code. (There is a <a href="https://babeljs.io/docs/en/next/babel-helper-annotate-as-pure.html" rel="nofollow">util from babel</a> to do just the job of marking function as pure üòé)</p>',1);function W(p,l){const d=j(l,["children","$$slots","$$events","$$legacy"]);f(l,!1),u("blog",{image:E}),_(),P(p,$(()=>d,()=>c,{children:(h,T)=>{var r=R(),s=a(w(r),2),k=e(s);t(k,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),n(s);var o=a(s,4),y=e(o);t(y,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">()&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),n(o);var i=a(o,18),v=e(i);t(v,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// before uglify</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*@__PURE__*/</span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// after uglify</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">()&#123;</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),n(i),x(8),b(h,r)},$$slots:{default:!0}})),m()}export{W as component};
