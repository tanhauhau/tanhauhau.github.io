import{s as Ri,d as Ut,e as Oi,f as oi,n as Ki}from"../chunks/scheduler.D6VJxl8L.js";import{S as zi,i as Ui,m as Ji,n as Yi,o as Gi,t as Fi,a as Qi,p as Zi,e as n,s as a,H as y,c as e,q as i,h as t,d as k,r as d,g as r,u,j as b,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as Xi,a as li}from"../chunks/code-snippet.Gym6WUAG.js";import{B as sr}from"../chunks/BlogLayout.BTH3PMCG.js";const nr=""+new URL("../assets/hero-twitter.BMYe1IDC.jpg",import.meta.url).href;function er($){let g,P='<h2><a href="#background" id="background">Background</a></h2> <p>Unlike the other contributing to Svelte posts [<a href="/contributing-to-svelte-fixing-issue-5012">1</a>] [<a href="/contributing-to-svelte-fixing-issue-4392">2</a>], which I wrote it while implementing the fix, describing as detailed as possible, today I am going to share the process of how I implemented the <code class="inline">{#key}</code> block retrospectively.</p> <p>The implementation of the <code class="inline">{#key}</code> block is much simpler, relative to <code class="inline">{#if}</code>, <code class="inline">{#await}</code> or <code class="inline">{#each}</code>. And I believe the process of implementing the <code class="inline">{#key}</code> block helps paint the pratical side of <a href="/the-svelte-compiler-handbook">&quot;The Svelte Compiler Handbook&quot;</a> or my <a href="/looking-into-the-svelte-compiler">&quot;Looking into the Svelte compiler&quot; talk</a>.</p>',C,h,_,M='<a href="#the-motivation" id="the-motivation">The motivation</a>',N,W,Jt='The idea of <code class="inline">{#key}</code> block starts with the feature request 2 years ago <em>(yea, it&#39;s that long)</em> for <strong>the ability to key a non-each component</strong>, <a href="https://github.com/sveltejs/svelte/issues/1469" rel="nofollow">GitHub issue #1469</a>.',Re,R,Yt='To <code class="inline">key</code> a component, is to force recreation of the component when the <code class="inline">key</code> changes.',Oe,O,Gt='And you see this ability of destroying and creating new components when using <code class="inline">{#each}</code> with <code class="inline">key</code>:',Ke,K,Fn,ri=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'alice'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">data </span><span class="token keyword">as</span> <span class="token language-javascript">item </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></div></code></pre>`,ze,z,Ft='<a href="https://svelte.dev/repl/1be3a0b123aa4384853ff5abd103f9ae" rel="nofollow">REPL</a>',Ue,U,Qt='When we call the function <code class="inline">update</code>, we removed <code class="inline">alice</code> from the <code class="inline">data</code> and we added <code class="inline">bob</code>. The net effect is still having a list of 1 item. However, instead of reusing the 1 <code class="inline">&lt;div /&gt;</code> by updating <code class="inline">{ item.name }</code> to <code class="inline">&quot;bob&quot;</code>, Svelte removes and destroys the <code class="inline">&lt;div /&gt;</code> and create a new <code class="inline">&lt;div /&gt;</code> for <code class="inline">bob</code>. This is because of the <a href="https://svelte.dev/tutorial/keyed-each-blocks" rel="nofollow">key we specified to the <code class="inline">{#each}</code> block</a>. Svelte will not reuse the <code class="inline">&lt;div /&gt;</code> because it was created with a different <code class="inline">key</code>.',Je,J,Zt='One of the benefits of having a key for <code class="inline">{#each}</code> item is to be able to add transition to the item correctly. Without a <code class="inline">key</code> to identify which item is added / removed, the transiion on a <code class="inline">{#each}</code> list will always applied to the last item, when the list grows or shrinks in length.',Ye,Y,Xt='<a href="https://svelte.dev/repl/b1f5815f8b5f4634afa9025492739fa4" rel="nofollow">Try with and without the <code class="inline">key</code> in this REPL</a> to see the importance of having a <code class="inline">key</code>.',Ge,G,so='<p>This is similar to the <code class="inline">key</code> attribute of React, if you are familiar with React. <a href="https://www.nikgraf.com/blog/using-reacts-key-attribute-to-remount-a-component" rel="nofollow">Check this out on how to remount a component with the <code class="inline">key</code> attribute in React</a>.</p>',Fe,F,no='However, the ability of having to <code class="inline">key</code> an element / component only exist for the <code class="inline">{#each}</code> block. To workaround the constraint, it&#39;s common to use the <strong>&quot;1-item keyed-each hack&quot;</strong>:',Qe,Q,Qn,pi='<pre class="prism language-svelte"><code><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">key </span><span class="token keyword">as</span> <span class="token language-javascript">k </span><span class="token language-javascript"><span class="token punctuation">(</span>k<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Ze,Z,eo='The <code class="inline">&lt;div /&gt;</code> will be recreated if the <code class="inline">key</code> has changed.',Zn,w,X,ao='<a href="#transitions-for-reactive-data-change" id="transitions-for-reactive-data-change">Transitions for reactive data change</a>',Xe,ss,to='Another commonly brought up request, to <strong>be able to apply <code class="inline">transition:</code> to an element when a reactive data changes</strong> (<a href="https://github.com/sveltejs/svelte/issues/5119" rel="nofollow">GitHub issue #5119</a>):',sa,ns,Xn,ci=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte/transition'</span></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span><span class="token number">1</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></div></code></pre>`,na,es,oo="This is another facet of the same issue.",ea,as,lo='We need an ability to transition the old element out, and transition a new element in when a data, or a <code class="inline">key</code> changes.',aa,ts,io="A workaround, again, is to use the <strong>&quot;1-item keyed-each hack&quot;</strong>:",ta,os,se,ki=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte/transition'</span></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span><span class="token number">1</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked</div><div class="line">  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript"><span class="token punctuation">[</span>count<span class="token punctuation">]</span> </span><span class="token keyword">as</span> <span class="token language-javascript">count </span><span class="token language-javascript"><span class="token punctuation">(</span>count<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></div><div class="line"> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></div></code></pre>`,oa,ls,ro='So the proposal of the feature request was to have a <code class="inline">{#key}</code> block:',la,is,ne,hi=`<pre class="prism language-"><code><span class="line">&lt;p&gt;You clicked</span>
<span class="line">  &#123;#key count&#125;</span>
<span class="line">    &lt;strong transition:fade&gt;&#123;count&#125;&lt;/strong&gt;</span>
<span class="line">  &#123;/key&#125;</span>
<span class="line"> times&lt;/p&gt;</span></code></pre>`,ia,rs,po='I&#39;ve seen this issue months ago, and I passed the issue. I didn&#39;t think I know good enough to implement a new logic block. However, the issue recently resurfaced as someone commented on it recently. And this time, I felt I am ready, so here&#39;s my journey of implementing the <code class="inline">{#key}</code> block.',ee,j,co='<h2><a href="#the-implementation" id="the-implementation">The implementation</a></h2> <p>As explained in <a href="/the-svelte-compiler-handbook">&quot;The Svelte Compiler Handbook&quot;</a>, the Svelte compilation process can be broken into steps:</p> <ul><li>Parsing</li> <li>Tracking references and dependencies</li> <li>Creating code blocks &amp; fragments</li> <li>Generate code</li></ul> <p>Of course, that&#39;s the steps that we are going to work on as well.</p>',ae,v,ps,ko='<a href="#parsing" id="parsing">Parsing</a>',ra,cs,ho='The actual parsing starts <a href="https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/index.ts#L51" rel="nofollow">here in src/compiler/parse/index.ts</a>:',pa,ks,te,vi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ParserState</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> fragment;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.index </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">state</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> fragment;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ca,hs,vo="There are 4 states in the parser:",ka,vs,yo='<li><strong>fragment</strong> - in this state, we check the current character and determine which state we should proceed to</li> <li><strong>tag</strong> - we enter this state when we encounter <code class="inline">&lt;</code> character. In this state, we are going to parse HTML tags (eg: <code class="inline">&lt;p&gt;</code>), attributes (eg: <code class="inline">class</code>) and directives (eg: <code class="inline">on:</code>).</li> <li><strong>mustache</strong> - we enter this state when we encounter <code class="inline">{</code> character. In this state, we are going to parse expression, <code class="inline">{ value }</code> and logic blocks <code class="inline">{#if}</code></li> <li><strong>text</strong> - In this state, we are going to parse texts that are neither <code class="inline">&lt;</code> nor <code class="inline">{</code>, which includes whitespace, newlines, and texts!</li>',ha,ys,uo='To be able to parse the <code class="inline">{#key}</code> block, we are going to take a look at the <a href="https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/state/mustache.ts#L35" rel="nofollow"><strong>mustache</strong> state function</a>.',va,ds,xo='The <code class="inline">{#key}</code> block syntax is similar to <code class="inline">{#if}</code> without <code class="inline">else</code>, we take in an expression in the opening block and that&#39;s all:',ya,us,oe,yi='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key expression<span class="token punctuation">&#125;</span></span></div><div class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- similar to --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> expression<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',da,xs,fo='So over here, when we encounter a <code class="inline">{#</code>, we add a case to check if we are starting a <code class="inline">{#key}</code> block:',ua,fs,le,di=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(#)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if &#123;#if foo&#125;, &#123;#each foo&#125; or &#123;#await foo&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> type;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;if&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;IfBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;each&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;EachBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;await&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AwaitBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">   &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      code</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;expected-block-type&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">       message</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Expected if, each or await&#96;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">       message: </span><span style="color: var(--shiki-token-string-expression)">&#96;Expected if, each, await or key&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span></code></pre>`,xa,ms,mo='Similarly, for closing block <code class="inline">{/</code>, we are going to make sure that <code class="inline">{#key}</code> closes with <code class="inline">{/key}</code>:',fa,gs,ie,ui=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.current</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> expected;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;IfBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;if&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;EachBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;each&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AwaitBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;await&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">   &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      code</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;unexpected-block-close&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      message</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Unexpected block closing tag&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span></code></pre>`,ma,ws,go='The next step is to read the JS expression. Since all logic blocks, <code class="inline">{#if}</code>, <code class="inline">{#each}</code> and <code class="inline">{#await}</code> will read the JS expression next, it is no different for <code class="inline">{#key}</code> and it is already taken care of:',ga,_s,re,xi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.require_whitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// read the JS expression</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">expression</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">read_expression</span><span style="color: var(--shiki-color-text)">(parser);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// create the AST node</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TemplateNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.allow_whitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// other logic blocks specific syntax</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;EachBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &#123;#each&#125; block specific syntax for &#123;#each list as item&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wa,bs,wo="So, let's move on to the next step!",pe,x,Ts,_o='<a href="#tracking-references-and-dependencies" id="tracking-references-and-dependencies">Tracking references and dependencies</a>',_a,Hs,bo='If you noticed in the previous step, the type name we created for <code class="inline">{#key}</code> block is called <code class="inline">KeyBlock</code>.',ba,Ls,To='So, to keep the name consistent, we are going to create a <code class="inline">KeyBlock</code> class in <code class="inline">src/compiler/compile/nodes/KeyBlock.ts</code>:',Ta,Cs,ce,fi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Expression </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./shared/Expression&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> map_children </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./shared/map_children&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> AbstractBlock </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./shared/AbstractBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlock</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">AbstractBlock</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for discriminant property for TypeScript to differentiate types</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  expression</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Expression</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> info) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> info);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create an Expression instance for the expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.expression </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Expression</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">info</span><span style="color: var(--shiki-color-text)">.expression);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// loop through children and create respective node instance</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.children </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">map_children</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">info</span><span style="color: var(--shiki-color-text)">.children);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// simple validation: make sure the block is not empty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.warn_if_empty_block</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ha,Ms,Ho="I've added comments annotating the code above, hopefully it's self-explanatory.",La,Is,Lo="A few more points:",Ca,Ps,Co='<li><code class="inline">info</code> is the AST node we got from the parsing.</li> <li>the <code class="inline">class Expression</code> is constructed with the JavaScript AST of the expression and it is where we traverse the AST and marked the variables within the expression as <code class="inline">referenced: true</code>.</li> <li><code class="inline">map_children</code> is used to map the <code class="inline">children</code> of the <code class="inline">KeyBlock</code> AST node to the compile node.</li>',Ma,Ss,Mo='<p>Pardon for my lack of &quot;appropriate&quot; naming to differentiate the nodes in the Svelte codebase.</p> <p>Throughout the Svelte compilation process, the node is transformed one to another, which in every step of the transformation, new analysis is performed, and new information are added.</p> <p>Here, I am going to call:</p> <ul><li>the node resulting from the parser: <strong>AST node</strong></li> <li>the node created by the <code class="inline">Component</code>, which extends from <a href="https://github.com/sveltejs/svelte/blob/caebe0deb80d959ad7c7b5276d7e017be71769c7/src/compiler/compile/nodes/shared/Node.ts" rel="nofollow"><code class="inline">compiler/compile/nodes/shared/Node.ts</code></a>: <strong>compile node</strong> <em>(because they are stored in the <code class="inline">compile</code> folder)</em></li> <li>the node created by the <code class="inline">Renderer</code>, which extends from <a href="https://github.com/sveltejs/svelte/blob/2b2f40d32ae36a94b77b69959494687073a3ebbc/src/compiler/compile/render_dom/wrappers/shared/Wrapper.ts#L7" rel="nofollow"><code class="inline">compiler/compile/render_dom/wrappers/shared/Wrapper.ts</code></a>: <strong>render-dom Wrapper</strong> <em>(also because they are stored in the <code class="inline">render_dom/wrappers</code> folder)</em></li></ul>',Ia,Es,Io="If you managed to keep up so far, you may be sensing where we are heading next.",Pa,js,Po='We need to add <code class="inline">KeyBlock</code> into <code class="inline">map_children</code>:',Sa,qs,ke,mi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/compiler/compile/nodes/shared/map_children.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get_constructor</span><span style="color: var(--shiki-color-text)">(type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AwaitBlock&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> AwaitBlock;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Body&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> Body;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> KeyBlock;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ea,Bs,So='Also, we need to add <code class="inline">KeyBlock</code> as one of the <code class="inline">INode</code> type for TypeScript:',ja,Ds,he,gi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/compiler/compile/nodes/interfaces.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">INode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Action</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Animation</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlock</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,qa,Vs,Eo='And now, let&#39;s move on to implementing a <strong>render-dom Wrapper</strong> for <code class="inline">KeyBlock</code>.',ve,o,As,jo='<a href="#creating-code-blocks-fragments" id="creating-code-blocks-fragments">Creating code blocks &amp; fragments</a>',Ba,$s,qo="At this point, we need to decide how the compiled JS should look like, it&#39;s time for us to <strong>reverse-compile Svelte in your head</strong>!",Da,Ns,Bo='If you&#39;ve read my <a href="/compile-svelte-in-your-head-part-4">Compile Svelte in your head (Part 4)</a>, you&#39;ve seen how we create a different <code class="inline">create_fragment</code> function for each of the logic branches, so we can control the content within a logic branch as a whole.',Va,Ws,Do='Similarly, we can create a <code class="inline">create_fragment</code> function for the content of the <code class="inline">{#key}</code>, then we can control when to create / mount / update / destroy the content.',Aa,Rs,ye,wi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// instructions to create / mount / update / destroy inner content of &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$a,Os,Vo='To use the <code class="inline">create_key_block</code>:',Na,Ks,de,_i=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the elements for the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mount the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// update the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// destroy the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(detaching);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// intro &amp; outro the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_in</span><span style="color: var(--shiki-color-text)">(key_block);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_out</span><span style="color: var(--shiki-color-text)">(key_block);</span></span></code></pre>`,Wa,zs,Ao="The next thing to do, is to place these statements in the right position:",Ra,Us,ue,bi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// init</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> key_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// create</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// mount</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">i</span><span style="color: var(--shiki-color-text)">(local) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// intro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">transition_in</span><span style="color: var(--shiki-color-text)">(key_block);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">o</span><span style="color: var(--shiki-color-text)">(local) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// outro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">transition_out</span><span style="color: var(--shiki-color-text)">(key_block);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// destroy</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(detaching);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Oa,Js,$o='Now, the most important piece of the <code class="inline">{#key}</code> block, the logic to',Ka,Ys,No='<li>check if the expression has changed</li> <li>if so, recreate the elements inside the <code class="inline">{#key}</code> block</li>',za,Gs,xe,Ti=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// we store the previous key expression value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if the any variables within the key has changed, and</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> dynamic_variables_in_key_expression </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if the value of the key expression has changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        previous_key </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// destroy the elements</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// detaching = 1 (true) to remove the elements immediately</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// create a new key_block</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        key_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// mount the new key_block</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if the key has not changed, make sure the content of &#123;#key&#125; is up to date</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ua,Fs,Wo='If there is transition in the content of the <code class="inline">key_block</code>, we need extra code for the transition:',Ja,Qs,fe,Hi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of key_block.d(1);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">group_outros</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_out</span><span style="color: var(--shiki-color-text)">(key_block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> noop);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">check_outros</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// before key_block.m(...)</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_in</span><span style="color: var(--shiki-color-text)">(key_block);</span></span></code></pre>`,Ya,Zs,Ro='I am going to gloss over the details of how <code class="inline">outros</code> / <code class="inline">intros</code> work, we will cover them in the later parts of &quot;Compile Svelte in your head&quot;, so let&#39;s assume these code are up for the job.',Ga,Xs,Oo='Now we have done the reverse-compile Svelte in your head, let&#39;s reverse the reverse, and write the render code for Svelte <code class="inline">{#key}</code> block.',Fa,sn,Ko='Here are some setup code for the render-dom Wrapper for <code class="inline">{#key}</code>:',Qa,nn,me,Li=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlockWrapper</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// the &#96;key_block&#96; variable</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  var</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;key_block&#39;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">EachBlock</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> strip_whitespace</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> next_sibling</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// deoptimisation, set flag indicate the content is not static</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.cannot_use_innerhtml</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.not_static_content</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get all the dynamic variables within the expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// useful for later</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">expression</span><span style="color: var(--shiki-token-function)">.dynamic_dependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create a new &#96;create_fragment&#96; function</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.child</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      comment</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_debugging_comment</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)">.component)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-token-function)">.get_unique_name</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;create_key_block&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">blocks</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create render-dom Wrappers for the children</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FragmentWrapper</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.children</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> strip_whitespace</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> next_sibling);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: here is where we write the render code</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Za,en,zo="A few more points:",Xa,an,Uo='<li>the <code class="inline">block</code> in the <code class="inline">render</code> method is the current <code class="inline">create_fragment</code> function that the <code class="inline">{#key}</code> block is in; <code class="inline">this.block</code> is the new <code class="inline">create_fragment</code> function that we created to put the content of the <code class="inline">{#key}</code> block<ul><li>we named the new <code class="inline">create_fragment</code> function <code class="inline">&quot;create_key_block&quot;</code></li> <li>to make sure there&#39;s no conflicting names, we use <code class="inline">renderer.component.get_unique_name()</code></li></ul></li> <li>All <strong>render-dom wrappers</strong> has a property named <code class="inline">var</code>, which is the variable name referencing the element / block to be created by the <strong>render-dom wrapper</strong>.<ul><li>the <code class="inline">var</code> name will be <a href="https://github.com/sveltejs/svelte/blob/8148a7a33444805320923e4c4e071f62dee3df6c/src/compiler/compile/render_dom/Block.ts#L118-L152" rel="nofollow">deconflicted by the Renderer</a></li></ul></li>',st,tn,Jo='Now, let&#39;s implement the <code class="inline">render</code> method.',nt,on,Yo='Firstly, render the children into <code class="inline">this.block</code>:',et,ln,ge,Ci=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block: Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node: Identifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes: Identifier) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    (</span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;#nodes&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">unknown</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,at,rn,Go='We pass in <code class="inline">null</code> as <code class="inline">parent_node</code> and <code class="inline">x`#nodes`</code> as <code class="inline">parent_nodes</code> to indicate that the children will be rendered at the root of the <code class="inline">this.block</code>.',tt,ot,lt,pn,Fo='If I am implementing the <code class="inline">render</code> method of an Element render-dom Wrapper, and currently rendering the <code class="inline">&lt;div&gt;</code> in the following code snippet:',it,cn,we,Mi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,rt,kn,Qo='then I will render the <code class="inline">&lt;span /&gt;</code> with:',pt,hn,_e,Ii=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">spanWrapper</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// div&#39;s var</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">var</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.childNodes&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// div.childNodes</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,ct,vn,Zo='so the <code class="inline">&lt;span /&gt;</code> will be inserted into the current <code class="inline">&lt;div /&gt;</code> and hydrate from the <code class="inline">&lt;div /&gt;</code>&#39;s childNodes.',kt,ht,vt,yn,Xo="Next, I am going to insert code into each of the fragment methods:",yt,dn,be,Pi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// let key_block = create_key_block(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">init</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;let </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">(#ctx)&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.c();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">create</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.c();&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.m(...);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.m(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">parent_node </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;#target&quot;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">parent_node </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;null&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;#anchor&quot;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.p(...);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.p(#ctx, #dirty);&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.d(...);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">destroy</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.d(detaching)&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,dt,un,sl="A few more points:",ut,xn,nl='<li>we push the code into respective methods of the <code class="inline">block</code>, eg: <code class="inline">init</code>, <code class="inline">create</code>, <code class="inline">mount</code>, ...</li> <li>we use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates" rel="nofollow">tagged templates</a>, <code class="inline">b`...`</code> to create a JavaScript AST node. The <code class="inline">b</code> tag function allow us to pass in JavaScript AST node as placeholder, so that is very convenient.<ul><li>You can check out more about the <code class="inline">b</code> tag function from <a href="https://github.com/Rich-Harris/code-red" rel="nofollow">code-red</a></li></ul></li>',xt,fn,el='Now, to implement the dirty checking, we use <code class="inline">this.dependencies</code>',ft,mn,Te,Si='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">is_dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.dirty</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies);</span></span></code></pre>',mt,gn,al='To determine whether our expression value has changed, we are going to compute the expression and compare it with <code class="inline">previous_key</code> and determine whether it has changed.',gt,wn,tl="Here's a recap of the compiled code that we've come up previously:",wt,_n,He,Ei=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// we store the previous key expression value</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if the value of the key expression has changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">previous_key </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression)</span></span></code></pre>`,_t,bn,ol='We start with declaring the variable, <code class="inline">previous_key</code>:',bt,Tn,Le,ji=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">previous_key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.get_unique_name</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;previous_key&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">snippet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">expression</span><span style="color: var(--shiki-token-function)">.manipulate</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.add_variable</span><span style="color: var(--shiki-color-text)">(previous_key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> snippet);</span></span></code></pre>`,Tt,Hn,ll='<code class="inline">expression.manipulate(block)</code> will convert the expression to refer to the <code class="inline">ctx</code> variable, for example:',Ht,Ln,Ce,qi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">human</span><span style="color: var(--shiki-color-text)">.age </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> limit</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// into something like</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].age </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">]</span></span></code></pre>`,Lt,Cn,il='Next we are going to compare the new value and assign it to <code class="inline">previous_key</code> after that.',Ct,Mn,Me,Bi='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">has_change</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">previous_key</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> !== (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">previous_key</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">snippet</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">)&#96;</span></span></code></pre>',Mt,In,rl="And to combine all of these, we have:",It,Pn,Ie,Di=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  if (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">is_dirty</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &amp;&amp; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">has_change</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.d(1);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">(#ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.c();</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.m(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.get_update_mount_node</span><span style="color: var(--shiki-color-text)">(anchor)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">anchor</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125; else &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.p(#ctx, #dirty);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Pt,Sn,pl='We are using the <code class="inline">anchor</code> when we are mounting the new <code class="inline">key_block</code>, you can check out <a href="/compile-svelte-in-your-head-part-4/#the-extra-text-node">Compile Svelte in your head Part 4: the extra text node</a>, explaining why we need the anchor node, and here is how the anchor node being computed:',St,En,Pe,Vi='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">anchor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.get_or_create_anchor</span><span style="color: var(--shiki-color-text)">(block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes);</span></span></code></pre>',Et,jn,cl='It could be the next sibling, or it could be a new <code class="inline">empty()</code> text node created.',jt,qn,kl="Finally, if the content has transition, we need to add code for the transition as well:",qt,Bn,Se,Ai=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">has_transitions</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!!</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.has_intro_method </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.has_outro_method);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transition_out</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @group_outros();</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @transition_out(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, 1, 1, @noop);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @check_outros();</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transition_in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @transition_in(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Bt,Dn,hl="Where to place them? Well, I'll leave that as your exercise to figure that out. 😉",Ee,H,Vn,vl='<a href="#creating-code-for-ssr" id="creating-code-for-ssr">Creating code for SSR</a>',Dt,An,yl='For SSR, it is much simpler than for the <code class="inline">dom</code>. <code class="inline">{#key}</code> block has no special meaning in SSR, because, you will only render once in SSR:',Vt,$n,je,$i=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> KeyBlock </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../../nodes/KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; RenderOptions &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../Renderer&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlock</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> renderer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RenderOptions</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.children</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,At,Nn,dl='☝️ That&#39;s all the code we need for SSR. We are rendering the children, passing down the <code class="inline">options</code>, and add no extra code for the <code class="inline">{#key}</code> block.',qe,q,ul='<h3><a href="#generate-code" id="generate-code">Generate code</a></h3> <p>Well, everything in this step is set up generic enough to handle most use case.</p> <p>So, nothing to change here. 🤷‍♂️</p>',Be,B,xl='<h3><a href="#a-few-other-implementation-consideration" id="a-few-other-implementation-consideration">A few other implementation consideration</a></h3> <ul><li>What if the expression in the <code class="inline">{#key}</code> block is not dynamic, do we give warnings? or optimise the output?</li> <li>How will <a href="https://svelte.dev/docs#svelte_options" rel="nofollow"><code class="inline">&lt;svelte:options immutable={true}&gt;</code></a> affect the code output?</li></ul>',De,I,Wn,fl='<a href="#the-testing" id="the-testing">The testing</a>',$t,Rn,ml='You&#39;ve seen me implementing test cases in the previous &quot;Contributing to Svelte&quot; articles [<a href="/contributing-to-svelte-fixing-issue-5012">1</a>] [<a href="/contributing-to-svelte-fixing-issue-4392">2</a>], here I am going to skip showing the implementation of the test cases, and probably point out some thoughts I had when coming up with tests:',Nt,L,On,gl="<p><strong>Happy path:</strong> changing the key expression should recreate the content</p>",Wt,Kn,wl="<p><strong>Happy path:</strong> Transition when recreating the content should work ✨</p>",Rt,D,zn,_l='<strong>Possible edge case:</strong> Changing variables other than the key expression should <strong>not</strong> recreate the content in <code class="inline">{#key}</code>',Ot,Un,Ve,Ni='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> reactive1<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> reactive2<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> key<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key key<span class="token punctuation">&#125;</span></span></div><div class="line">   <span class="token language-javascript"><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>reactive1<span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>reactive2<span class="token punctuation">&#125;</span></span></div></code></pre>',Kt,V,Jn,bl="<strong>Possible edge case:</strong> Changing the variables within the key expression but the result value of the key expression stay the same",zt,Yn,Ae,Wi='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">   <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line">   <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line">   <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">     a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line">     b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line">   <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span></span></div><div class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></div></code></pre>',$e,A,Tl='<h2><a href="#closing-notes" id="closing-notes">Closing Notes</a></h2> <p>You can read the <a href="https://github.com/sveltejs/svelte/pull/5397" rel="nofollow">Pull Request #5397</a> to read the final implementation.</p> <hr/> <p>If you wish to learn more about Svelte, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>If you have anything unclear about this article, find me on <a href="https://twitter.com/lihautan" rel="nofollow">Twitter</a> too!</p>';return{c(){g=n("section"),g.innerHTML=P,C=a(),h=n("section"),_=n("h2"),_.innerHTML=M,N=a(),W=n("p"),W.innerHTML=Jt,Re=a(),R=n("p"),R.innerHTML=Yt,Oe=a(),O=n("p"),O.innerHTML=Gt,Ke=a(),K=n("div"),Fn=new y(!1),ze=a(),z=n("p"),z.innerHTML=Ft,Ue=a(),U=n("p"),U.innerHTML=Qt,Je=a(),J=n("p"),J.innerHTML=Zt,Ye=a(),Y=n("p"),Y.innerHTML=Xt,Ge=a(),G=n("blockquote"),G.innerHTML=so,Fe=a(),F=n("p"),F.innerHTML=no,Qe=a(),Q=n("div"),Qn=new y(!1),Ze=a(),Z=n("p"),Z.innerHTML=eo,Zn=a(),w=n("section"),X=n("h3"),X.innerHTML=ao,Xe=a(),ss=n("p"),ss.innerHTML=to,sa=a(),ns=n("div"),Xn=new y(!1),na=a(),es=n("p"),es.textContent=oo,ea=a(),as=n("p"),as.innerHTML=lo,aa=a(),ts=n("p"),ts.innerHTML=io,ta=a(),os=n("div"),se=new y(!1),oa=a(),ls=n("p"),ls.innerHTML=ro,la=a(),is=n("div"),ne=new y(!1),ia=a(),rs=n("p"),rs.innerHTML=po,ee=a(),j=n("section"),j.innerHTML=co,ae=a(),v=n("section"),ps=n("h3"),ps.innerHTML=ko,ra=a(),cs=n("p"),cs.innerHTML=ho,pa=a(),ks=n("div"),te=new y(!1),ca=a(),hs=n("p"),hs.textContent=vo,ka=a(),vs=n("ul"),vs.innerHTML=yo,ha=a(),ys=n("p"),ys.innerHTML=uo,va=a(),ds=n("p"),ds.innerHTML=xo,ya=a(),us=n("div"),oe=new y(!1),da=a(),xs=n("p"),xs.innerHTML=fo,ua=a(),fs=n("div"),le=new y(!1),xa=a(),ms=n("p"),ms.innerHTML=mo,fa=a(),gs=n("div"),ie=new y(!1),ma=a(),ws=n("p"),ws.innerHTML=go,ga=a(),_s=n("div"),re=new y(!1),wa=a(),bs=n("p"),bs.textContent=wo,pe=a(),x=n("section"),Ts=n("h3"),Ts.innerHTML=_o,_a=a(),Hs=n("p"),Hs.innerHTML=bo,ba=a(),Ls=n("p"),Ls.innerHTML=To,Ta=a(),Cs=n("div"),ce=new y(!1),Ha=a(),Ms=n("p"),Ms.textContent=Ho,La=a(),Is=n("p"),Is.textContent=Lo,Ca=a(),Ps=n("ul"),Ps.innerHTML=Co,Ma=a(),Ss=n("blockquote"),Ss.innerHTML=Mo,Ia=a(),Es=n("p"),Es.textContent=Io,Pa=a(),js=n("p"),js.innerHTML=Po,Sa=a(),qs=n("div"),ke=new y(!1),Ea=a(),Bs=n("p"),Bs.innerHTML=So,ja=a(),Ds=n("div"),he=new y(!1),qa=a(),Vs=n("p"),Vs.innerHTML=Eo,ve=a(),o=n("section"),As=n("h3"),As.innerHTML=jo,Ba=a(),$s=n("p"),$s.innerHTML=qo,Da=a(),Ns=n("p"),Ns.innerHTML=Bo,Va=a(),Ws=n("p"),Ws.innerHTML=Do,Aa=a(),Rs=n("div"),ye=new y(!1),$a=a(),Os=n("p"),Os.innerHTML=Vo,Na=a(),Ks=n("div"),de=new y(!1),Wa=a(),zs=n("p"),zs.textContent=Ao,Ra=a(),Us=n("div"),ue=new y(!1),Oa=a(),Js=n("p"),Js.innerHTML=$o,Ka=a(),Ys=n("ul"),Ys.innerHTML=No,za=a(),Gs=n("div"),xe=new y(!1),Ua=a(),Fs=n("p"),Fs.innerHTML=Wo,Ja=a(),Qs=n("div"),fe=new y(!1),Ya=a(),Zs=n("p"),Zs.innerHTML=Ro,Ga=a(),Xs=n("p"),Xs.innerHTML=Oo,Fa=a(),sn=n("p"),sn.innerHTML=Ko,Qa=a(),nn=n("div"),me=new y(!1),Za=a(),en=n("p"),en.textContent=zo,Xa=a(),an=n("ul"),an.innerHTML=Uo,st=a(),tn=n("p"),tn.innerHTML=Jo,nt=a(),on=n("p"),on.innerHTML=Yo,et=a(),ln=n("div"),ge=new y(!1),at=a(),rn=n("p"),rn.innerHTML=Go,tt=a(),ot=n("hr"),lt=a(),pn=n("p"),pn.innerHTML=Fo,it=a(),cn=n("div"),we=new y(!1),rt=a(),kn=n("p"),kn.innerHTML=Qo,pt=a(),hn=n("div"),_e=new y(!1),ct=a(),vn=n("p"),vn.innerHTML=Zo,kt=a(),ht=n("hr"),vt=a(),yn=n("p"),yn.textContent=Xo,yt=a(),dn=n("div"),be=new y(!1),dt=a(),un=n("p"),un.textContent=sl,ut=a(),xn=n("ul"),xn.innerHTML=nl,xt=a(),fn=n("p"),fn.innerHTML=el,ft=a(),mn=n("div"),Te=new y(!1),mt=a(),gn=n("p"),gn.innerHTML=al,gt=a(),wn=n("p"),wn.textContent=tl,wt=a(),_n=n("div"),He=new y(!1),_t=a(),bn=n("p"),bn.innerHTML=ol,bt=a(),Tn=n("div"),Le=new y(!1),Tt=a(),Hn=n("p"),Hn.innerHTML=ll,Ht=a(),Ln=n("div"),Ce=new y(!1),Lt=a(),Cn=n("p"),Cn.innerHTML=il,Ct=a(),Mn=n("div"),Me=new y(!1),Mt=a(),In=n("p"),In.textContent=rl,It=a(),Pn=n("div"),Ie=new y(!1),Pt=a(),Sn=n("p"),Sn.innerHTML=pl,St=a(),En=n("div"),Pe=new y(!1),Et=a(),jn=n("p"),jn.innerHTML=cl,jt=a(),qn=n("p"),qn.textContent=kl,qt=a(),Bn=n("div"),Se=new y(!1),Bt=a(),Dn=n("p"),Dn.textContent=hl,Ee=a(),H=n("section"),Vn=n("h3"),Vn.innerHTML=vl,Dt=a(),An=n("p"),An.innerHTML=yl,Vt=a(),$n=n("div"),je=new y(!1),At=a(),Nn=n("p"),Nn.innerHTML=dl,qe=a(),q=n("section"),q.innerHTML=ul,Be=a(),B=n("section"),B.innerHTML=xl,De=a(),I=n("section"),Wn=n("h2"),Wn.innerHTML=fl,$t=a(),Rn=n("p"),Rn.innerHTML=ml,Nt=a(),L=n("ol"),On=n("li"),On.innerHTML=gl,Wt=a(),Kn=n("li"),Kn.innerHTML=wl,Rt=a(),D=n("li"),zn=n("p"),zn.innerHTML=_l,Ot=a(),Un=n("div"),Ve=new y(!1),Kt=a(),V=n("li"),Jn=n("p"),Jn.innerHTML=bl,zt=a(),Yn=n("div"),Ae=new y(!1),$e=a(),A=n("section"),A.innerHTML=Tl,this.h()},l(c){g=e(c,"SECTION",{"data-svelte-h":!0}),i(g)!=="svelte-1y3ejlq"&&(g.innerHTML=P),C=t(c),h=e(c,"SECTION",{});var p=k(h);_=e(p,"H2",{"data-svelte-h":!0}),i(_)!=="svelte-lhxw09"&&(_.innerHTML=M),N=t(p),W=e(p,"P",{"data-svelte-h":!0}),i(W)!=="svelte-mq44gc"&&(W.innerHTML=Jt),Re=t(p),R=e(p,"P",{"data-svelte-h":!0}),i(R)!=="svelte-1syg10g"&&(R.innerHTML=Yt),Oe=t(p),O=e(p,"P",{"data-svelte-h":!0}),i(O)!=="svelte-gtx1f7"&&(O.innerHTML=Gt),Ke=t(p),K=e(p,"DIV",{class:!0});var Hl=k(K);Fn=d(Hl,!1),Hl.forEach(r),ze=t(p),z=e(p,"P",{"data-svelte-h":!0}),i(z)!=="svelte-1e3h688"&&(z.innerHTML=Ft),Ue=t(p),U=e(p,"P",{"data-svelte-h":!0}),i(U)!=="svelte-gn2eyn"&&(U.innerHTML=Qt),Je=t(p),J=e(p,"P",{"data-svelte-h":!0}),i(J)!=="svelte-18fbfww"&&(J.innerHTML=Zt),Ye=t(p),Y=e(p,"P",{"data-svelte-h":!0}),i(Y)!=="svelte-qr65wv"&&(Y.innerHTML=Xt),Ge=t(p),G=e(p,"BLOCKQUOTE",{"data-svelte-h":!0}),i(G)!=="svelte-hmy0j2"&&(G.innerHTML=so),Fe=t(p),F=e(p,"P",{"data-svelte-h":!0}),i(F)!=="svelte-mm2qe9"&&(F.innerHTML=no),Qe=t(p),Q=e(p,"DIV",{class:!0});var Ll=k(Q);Qn=d(Ll,!1),Ll.forEach(r),Ze=t(p),Z=e(p,"P",{"data-svelte-h":!0}),i(Z)!=="svelte-abmja5"&&(Z.innerHTML=eo),p.forEach(r),Zn=t(c),w=e(c,"SECTION",{});var T=k(w);X=e(T,"H3",{"data-svelte-h":!0}),i(X)!=="svelte-1sj2ye0"&&(X.innerHTML=ao),Xe=t(T),ss=e(T,"P",{"data-svelte-h":!0}),i(ss)!=="svelte-yuj35k"&&(ss.innerHTML=to),sa=t(T),ns=e(T,"DIV",{class:!0});var Cl=k(ns);Xn=d(Cl,!1),Cl.forEach(r),na=t(T),es=e(T,"P",{"data-svelte-h":!0}),i(es)!=="svelte-3nbhsl"&&(es.textContent=oo),ea=t(T),as=e(T,"P",{"data-svelte-h":!0}),i(as)!=="svelte-1b4c9j5"&&(as.innerHTML=lo),aa=t(T),ts=e(T,"P",{"data-svelte-h":!0}),i(ts)!=="svelte-q5wtm9"&&(ts.innerHTML=io),ta=t(T),os=e(T,"DIV",{class:!0});var Ml=k(os);se=d(Ml,!1),Ml.forEach(r),oa=t(T),ls=e(T,"P",{"data-svelte-h":!0}),i(ls)!=="svelte-8eqh37"&&(ls.innerHTML=ro),la=t(T),is=e(T,"DIV",{class:!0});var Il=k(is);ne=d(Il,!1),Il.forEach(r),ia=t(T),rs=e(T,"P",{"data-svelte-h":!0}),i(rs)!=="svelte-umxxmu"&&(rs.innerHTML=po),T.forEach(r),ee=t(c),j=e(c,"SECTION",{"data-svelte-h":!0}),i(j)!=="svelte-j5b5ef"&&(j.innerHTML=co),ae=t(c),v=e(c,"SECTION",{});var f=k(v);ps=e(f,"H3",{"data-svelte-h":!0}),i(ps)!=="svelte-1gj91mw"&&(ps.innerHTML=ko),ra=t(f),cs=e(f,"P",{"data-svelte-h":!0}),i(cs)!=="svelte-k1y4md"&&(cs.innerHTML=ho),pa=t(f),ks=e(f,"DIV",{class:!0});var Pl=k(ks);te=d(Pl,!1),Pl.forEach(r),ca=t(f),hs=e(f,"P",{"data-svelte-h":!0}),i(hs)!=="svelte-yiw3l9"&&(hs.textContent=vo),ka=t(f),vs=e(f,"UL",{"data-svelte-h":!0}),i(vs)!=="svelte-5zvjtl"&&(vs.innerHTML=yo),ha=t(f),ys=e(f,"P",{"data-svelte-h":!0}),i(ys)!=="svelte-wbzvqp"&&(ys.innerHTML=uo),va=t(f),ds=e(f,"P",{"data-svelte-h":!0}),i(ds)!=="svelte-8e8hgm"&&(ds.innerHTML=xo),ya=t(f),us=e(f,"DIV",{class:!0});var Sl=k(us);oe=d(Sl,!1),Sl.forEach(r),da=t(f),xs=e(f,"P",{"data-svelte-h":!0}),i(xs)!=="svelte-182gnnf"&&(xs.innerHTML=fo),ua=t(f),fs=e(f,"DIV",{class:!0});var El=k(fs);le=d(El,!1),El.forEach(r),xa=t(f),ms=e(f,"P",{"data-svelte-h":!0}),i(ms)!=="svelte-1oqbtr"&&(ms.innerHTML=mo),fa=t(f),gs=e(f,"DIV",{class:!0});var jl=k(gs);ie=d(jl,!1),jl.forEach(r),ma=t(f),ws=e(f,"P",{"data-svelte-h":!0}),i(ws)!=="svelte-h3dtia"&&(ws.innerHTML=go),ga=t(f),_s=e(f,"DIV",{class:!0});var ql=k(_s);re=d(ql,!1),ql.forEach(r),wa=t(f),bs=e(f,"P",{"data-svelte-h":!0}),i(bs)!=="svelte-fkq4tt"&&(bs.textContent=wo),f.forEach(r),pe=t(c),x=e(c,"SECTION",{});var m=k(x);Ts=e(m,"H3",{"data-svelte-h":!0}),i(Ts)!=="svelte-reg4hz"&&(Ts.innerHTML=_o),_a=t(m),Hs=e(m,"P",{"data-svelte-h":!0}),i(Hs)!=="svelte-vwpqrq"&&(Hs.innerHTML=bo),ba=t(m),Ls=e(m,"P",{"data-svelte-h":!0}),i(Ls)!=="svelte-36ehsx"&&(Ls.innerHTML=To),Ta=t(m),Cs=e(m,"DIV",{class:!0});var Bl=k(Cs);ce=d(Bl,!1),Bl.forEach(r),Ha=t(m),Ms=e(m,"P",{"data-svelte-h":!0}),i(Ms)!=="svelte-11ntoqe"&&(Ms.textContent=Ho),La=t(m),Is=e(m,"P",{"data-svelte-h":!0}),i(Is)!=="svelte-1wosu5z"&&(Is.textContent=Lo),Ca=t(m),Ps=e(m,"UL",{"data-svelte-h":!0}),i(Ps)!=="svelte-1cs5zc7"&&(Ps.innerHTML=Co),Ma=t(m),Ss=e(m,"BLOCKQUOTE",{"data-svelte-h":!0}),i(Ss)!=="svelte-mq96i0"&&(Ss.innerHTML=Mo),Ia=t(m),Es=e(m,"P",{"data-svelte-h":!0}),i(Es)!=="svelte-1mwj5gz"&&(Es.textContent=Io),Pa=t(m),js=e(m,"P",{"data-svelte-h":!0}),i(js)!=="svelte-1uw2if6"&&(js.innerHTML=Po),Sa=t(m),qs=e(m,"DIV",{class:!0});var Dl=k(qs);ke=d(Dl,!1),Dl.forEach(r),Ea=t(m),Bs=e(m,"P",{"data-svelte-h":!0}),i(Bs)!=="svelte-ao8sn2"&&(Bs.innerHTML=So),ja=t(m),Ds=e(m,"DIV",{class:!0});var Vl=k(Ds);he=d(Vl,!1),Vl.forEach(r),qa=t(m),Vs=e(m,"P",{"data-svelte-h":!0}),i(Vs)!=="svelte-56ioey"&&(Vs.innerHTML=Eo),m.forEach(r),ve=t(c),o=e(c,"SECTION",{});var l=k(o);As=e(l,"H3",{"data-svelte-h":!0}),i(As)!=="svelte-v7amfb"&&(As.innerHTML=jo),Ba=t(l),$s=e(l,"P",{"data-svelte-h":!0}),i($s)!=="svelte-1gm8xuh"&&($s.innerHTML=qo),Da=t(l),Ns=e(l,"P",{"data-svelte-h":!0}),i(Ns)!=="svelte-x9uxyc"&&(Ns.innerHTML=Bo),Va=t(l),Ws=e(l,"P",{"data-svelte-h":!0}),i(Ws)!=="svelte-121ox0f"&&(Ws.innerHTML=Do),Aa=t(l),Rs=e(l,"DIV",{class:!0});var Al=k(Rs);ye=d(Al,!1),Al.forEach(r),$a=t(l),Os=e(l,"P",{"data-svelte-h":!0}),i(Os)!=="svelte-6o5bc0"&&(Os.innerHTML=Vo),Na=t(l),Ks=e(l,"DIV",{class:!0});var $l=k(Ks);de=d($l,!1),$l.forEach(r),Wa=t(l),zs=e(l,"P",{"data-svelte-h":!0}),i(zs)!=="svelte-tbzgfw"&&(zs.textContent=Ao),Ra=t(l),Us=e(l,"DIV",{class:!0});var Nl=k(Us);ue=d(Nl,!1),Nl.forEach(r),Oa=t(l),Js=e(l,"P",{"data-svelte-h":!0}),i(Js)!=="svelte-tdy34m"&&(Js.innerHTML=$o),Ka=t(l),Ys=e(l,"UL",{"data-svelte-h":!0}),i(Ys)!=="svelte-m8hq1x"&&(Ys.innerHTML=No),za=t(l),Gs=e(l,"DIV",{class:!0});var Wl=k(Gs);xe=d(Wl,!1),Wl.forEach(r),Ua=t(l),Fs=e(l,"P",{"data-svelte-h":!0}),i(Fs)!=="svelte-wge6rr"&&(Fs.innerHTML=Wo),Ja=t(l),Qs=e(l,"DIV",{class:!0});var Rl=k(Qs);fe=d(Rl,!1),Rl.forEach(r),Ya=t(l),Zs=e(l,"P",{"data-svelte-h":!0}),i(Zs)!=="svelte-i8jvdo"&&(Zs.innerHTML=Ro),Ga=t(l),Xs=e(l,"P",{"data-svelte-h":!0}),i(Xs)!=="svelte-endjd4"&&(Xs.innerHTML=Oo),Fa=t(l),sn=e(l,"P",{"data-svelte-h":!0}),i(sn)!=="svelte-1wxkcum"&&(sn.innerHTML=Ko),Qa=t(l),nn=e(l,"DIV",{class:!0});var Ol=k(nn);me=d(Ol,!1),Ol.forEach(r),Za=t(l),en=e(l,"P",{"data-svelte-h":!0}),i(en)!=="svelte-1wosu5z"&&(en.textContent=zo),Xa=t(l),an=e(l,"UL",{"data-svelte-h":!0}),i(an)!=="svelte-w72svt"&&(an.innerHTML=Uo),st=t(l),tn=e(l,"P",{"data-svelte-h":!0}),i(tn)!=="svelte-zcm4g9"&&(tn.innerHTML=Jo),nt=t(l),on=e(l,"P",{"data-svelte-h":!0}),i(on)!=="svelte-1totel9"&&(on.innerHTML=Yo),et=t(l),ln=e(l,"DIV",{class:!0});var Kl=k(ln);ge=d(Kl,!1),Kl.forEach(r),at=t(l),rn=e(l,"P",{"data-svelte-h":!0}),i(rn)!=="svelte-1mjeduw"&&(rn.innerHTML=Go),tt=t(l),ot=e(l,"HR",{}),lt=t(l),pn=e(l,"P",{"data-svelte-h":!0}),i(pn)!=="svelte-nj91qk"&&(pn.innerHTML=Fo),it=t(l),cn=e(l,"DIV",{class:!0});var zl=k(cn);we=d(zl,!1),zl.forEach(r),rt=t(l),kn=e(l,"P",{"data-svelte-h":!0}),i(kn)!=="svelte-vkswtg"&&(kn.innerHTML=Qo),pt=t(l),hn=e(l,"DIV",{class:!0});var Ul=k(hn);_e=d(Ul,!1),Ul.forEach(r),ct=t(l),vn=e(l,"P",{"data-svelte-h":!0}),i(vn)!=="svelte-1g9m0ct"&&(vn.innerHTML=Zo),kt=t(l),ht=e(l,"HR",{}),vt=t(l),yn=e(l,"P",{"data-svelte-h":!0}),i(yn)!=="svelte-1w9wg06"&&(yn.textContent=Xo),yt=t(l),dn=e(l,"DIV",{class:!0});var Jl=k(dn);be=d(Jl,!1),Jl.forEach(r),dt=t(l),un=e(l,"P",{"data-svelte-h":!0}),i(un)!=="svelte-1wosu5z"&&(un.textContent=sl),ut=t(l),xn=e(l,"UL",{"data-svelte-h":!0}),i(xn)!=="svelte-1dactz4"&&(xn.innerHTML=nl),xt=t(l),fn=e(l,"P",{"data-svelte-h":!0}),i(fn)!=="svelte-axnm6c"&&(fn.innerHTML=el),ft=t(l),mn=e(l,"DIV",{class:!0});var Yl=k(mn);Te=d(Yl,!1),Yl.forEach(r),mt=t(l),gn=e(l,"P",{"data-svelte-h":!0}),i(gn)!=="svelte-a82gse"&&(gn.innerHTML=al),gt=t(l),wn=e(l,"P",{"data-svelte-h":!0}),i(wn)!=="svelte-1kqoyh6"&&(wn.textContent=tl),wt=t(l),_n=e(l,"DIV",{class:!0});var Gl=k(_n);He=d(Gl,!1),Gl.forEach(r),_t=t(l),bn=e(l,"P",{"data-svelte-h":!0}),i(bn)!=="svelte-lru3e0"&&(bn.innerHTML=ol),bt=t(l),Tn=e(l,"DIV",{class:!0});var Fl=k(Tn);Le=d(Fl,!1),Fl.forEach(r),Tt=t(l),Hn=e(l,"P",{"data-svelte-h":!0}),i(Hn)!=="svelte-9ikqht"&&(Hn.innerHTML=ll),Ht=t(l),Ln=e(l,"DIV",{class:!0});var Ql=k(Ln);Ce=d(Ql,!1),Ql.forEach(r),Lt=t(l),Cn=e(l,"P",{"data-svelte-h":!0}),i(Cn)!=="svelte-1xpyy9c"&&(Cn.innerHTML=il),Ct=t(l),Mn=e(l,"DIV",{class:!0});var Zl=k(Mn);Me=d(Zl,!1),Zl.forEach(r),Mt=t(l),In=e(l,"P",{"data-svelte-h":!0}),i(In)!=="svelte-1bjjaay"&&(In.textContent=rl),It=t(l),Pn=e(l,"DIV",{class:!0});var Xl=k(Pn);Ie=d(Xl,!1),Xl.forEach(r),Pt=t(l),Sn=e(l,"P",{"data-svelte-h":!0}),i(Sn)!=="svelte-1m7kbpf"&&(Sn.innerHTML=pl),St=t(l),En=e(l,"DIV",{class:!0});var si=k(En);Pe=d(si,!1),si.forEach(r),Et=t(l),jn=e(l,"P",{"data-svelte-h":!0}),i(jn)!=="svelte-yntp1w"&&(jn.innerHTML=cl),jt=t(l),qn=e(l,"P",{"data-svelte-h":!0}),i(qn)!=="svelte-17ojmqz"&&(qn.textContent=kl),qt=t(l),Bn=e(l,"DIV",{class:!0});var ni=k(Bn);Se=d(ni,!1),ni.forEach(r),Bt=t(l),Dn=e(l,"P",{"data-svelte-h":!0}),i(Dn)!=="svelte-1nhmsbz"&&(Dn.textContent=hl),l.forEach(r),Ee=t(c),H=e(c,"SECTION",{});var S=k(H);Vn=e(S,"H3",{"data-svelte-h":!0}),i(Vn)!=="svelte-k2lf1h"&&(Vn.innerHTML=vl),Dt=t(S),An=e(S,"P",{"data-svelte-h":!0}),i(An)!=="svelte-6650y8"&&(An.innerHTML=yl),Vt=t(S),$n=e(S,"DIV",{class:!0});var ei=k($n);je=d(ei,!1),ei.forEach(r),At=t(S),Nn=e(S,"P",{"data-svelte-h":!0}),i(Nn)!=="svelte-f4fe3s"&&(Nn.innerHTML=dl),S.forEach(r),qe=t(c),q=e(c,"SECTION",{"data-svelte-h":!0}),i(q)!=="svelte-9sbh81"&&(q.innerHTML=ul),Be=t(c),B=e(c,"SECTION",{"data-svelte-h":!0}),i(B)!=="svelte-140znc9"&&(B.innerHTML=xl),De=t(c),I=e(c,"SECTION",{});var Gn=k(I);Wn=e(Gn,"H2",{"data-svelte-h":!0}),i(Wn)!=="svelte-18doo65"&&(Wn.innerHTML=fl),$t=t(Gn),Rn=e(Gn,"P",{"data-svelte-h":!0}),i(Rn)!=="svelte-micnsq"&&(Rn.innerHTML=ml),Nt=t(Gn),L=e(Gn,"OL",{});var E=k(L);On=e(E,"LI",{"data-svelte-h":!0}),i(On)!=="svelte-14ceemi"&&(On.innerHTML=gl),Wt=t(E),Kn=e(E,"LI",{"data-svelte-h":!0}),i(Kn)!=="svelte-1kyw606"&&(Kn.innerHTML=wl),Rt=t(E),D=e(E,"LI",{});var Ne=k(D);zn=e(Ne,"P",{"data-svelte-h":!0}),i(zn)!=="svelte-105kmeo"&&(zn.innerHTML=_l),Ot=t(Ne),Un=e(Ne,"DIV",{class:!0});var ai=k(Un);Ve=d(ai,!1),ai.forEach(r),Ne.forEach(r),Kt=t(E),V=e(E,"LI",{});var We=k(V);Jn=e(We,"P",{"data-svelte-h":!0}),i(Jn)!=="svelte-14fac6i"&&(Jn.innerHTML=bl),zt=t(We),Yn=e(We,"DIV",{class:!0});var ti=k(Yn);Ae=d(ti,!1),ti.forEach(r),We.forEach(r),E.forEach(r),Gn.forEach(r),$e=t(c),A=e(c,"SECTION",{"data-svelte-h":!0}),i(A)!=="svelte-5pgbuu"&&(A.innerHTML=Tl),this.h()},h(){Fn.a=null,u(K,"class","code-section"),Qn.a=null,u(Q,"class","code-section"),Xn.a=null,u(ns,"class","code-section"),se.a=null,u(os,"class","code-section"),ne.a=null,u(is,"class","code-section"),te.a=null,u(ks,"class","code-section"),oe.a=null,u(us,"class","code-section"),le.a=null,u(fs,"class","code-section"),ie.a=null,u(gs,"class","code-section"),re.a=null,u(_s,"class","code-section"),ce.a=null,u(Cs,"class","code-section"),ke.a=null,u(qs,"class","code-section"),he.a=null,u(Ds,"class","code-section"),ye.a=null,u(Rs,"class","code-section"),de.a=null,u(Ks,"class","code-section"),ue.a=null,u(Us,"class","code-section"),xe.a=null,u(Gs,"class","code-section"),fe.a=null,u(Qs,"class","code-section"),me.a=null,u(nn,"class","code-section"),ge.a=null,u(ln,"class","code-section"),we.a=null,u(cn,"class","code-section"),_e.a=null,u(hn,"class","code-section"),be.a=null,u(dn,"class","code-section"),Te.a=null,u(mn,"class","code-section"),He.a=null,u(_n,"class","code-section"),Le.a=null,u(Tn,"class","code-section"),Ce.a=null,u(Ln,"class","code-section"),Me.a=null,u(Mn,"class","code-section"),Ie.a=null,u(Pn,"class","code-section"),Pe.a=null,u(En,"class","code-section"),Se.a=null,u(Bn,"class","code-section"),je.a=null,u($n,"class","code-section"),Ve.a=null,u(Un,"class","code-section"),Ae.a=null,u(Yn,"class","code-section")},m(c,p){b(c,g,p),b(c,C,p),b(c,h,p),s(h,_),s(h,N),s(h,W),s(h,Re),s(h,R),s(h,Oe),s(h,O),s(h,Ke),s(h,K),Fn.m(ri,K),s(h,ze),s(h,z),s(h,Ue),s(h,U),s(h,Je),s(h,J),s(h,Ye),s(h,Y),s(h,Ge),s(h,G),s(h,Fe),s(h,F),s(h,Qe),s(h,Q),Qn.m(pi,Q),s(h,Ze),s(h,Z),b(c,Zn,p),b(c,w,p),s(w,X),s(w,Xe),s(w,ss),s(w,sa),s(w,ns),Xn.m(ci,ns),s(w,na),s(w,es),s(w,ea),s(w,as),s(w,aa),s(w,ts),s(w,ta),s(w,os),se.m(ki,os),s(w,oa),s(w,ls),s(w,la),s(w,is),ne.m(hi,is),s(w,ia),s(w,rs),b(c,ee,p),b(c,j,p),b(c,ae,p),b(c,v,p),s(v,ps),s(v,ra),s(v,cs),s(v,pa),s(v,ks),te.m(vi,ks),s(v,ca),s(v,hs),s(v,ka),s(v,vs),s(v,ha),s(v,ys),s(v,va),s(v,ds),s(v,ya),s(v,us),oe.m(yi,us),s(v,da),s(v,xs),s(v,ua),s(v,fs),le.m(di,fs),s(v,xa),s(v,ms),s(v,fa),s(v,gs),ie.m(ui,gs),s(v,ma),s(v,ws),s(v,ga),s(v,_s),re.m(xi,_s),s(v,wa),s(v,bs),b(c,pe,p),b(c,x,p),s(x,Ts),s(x,_a),s(x,Hs),s(x,ba),s(x,Ls),s(x,Ta),s(x,Cs),ce.m(fi,Cs),s(x,Ha),s(x,Ms),s(x,La),s(x,Is),s(x,Ca),s(x,Ps),s(x,Ma),s(x,Ss),s(x,Ia),s(x,Es),s(x,Pa),s(x,js),s(x,Sa),s(x,qs),ke.m(mi,qs),s(x,Ea),s(x,Bs),s(x,ja),s(x,Ds),he.m(gi,Ds),s(x,qa),s(x,Vs),b(c,ve,p),b(c,o,p),s(o,As),s(o,Ba),s(o,$s),s(o,Da),s(o,Ns),s(o,Va),s(o,Ws),s(o,Aa),s(o,Rs),ye.m(wi,Rs),s(o,$a),s(o,Os),s(o,Na),s(o,Ks),de.m(_i,Ks),s(o,Wa),s(o,zs),s(o,Ra),s(o,Us),ue.m(bi,Us),s(o,Oa),s(o,Js),s(o,Ka),s(o,Ys),s(o,za),s(o,Gs),xe.m(Ti,Gs),s(o,Ua),s(o,Fs),s(o,Ja),s(o,Qs),fe.m(Hi,Qs),s(o,Ya),s(o,Zs),s(o,Ga),s(o,Xs),s(o,Fa),s(o,sn),s(o,Qa),s(o,nn),me.m(Li,nn),s(o,Za),s(o,en),s(o,Xa),s(o,an),s(o,st),s(o,tn),s(o,nt),s(o,on),s(o,et),s(o,ln),ge.m(Ci,ln),s(o,at),s(o,rn),s(o,tt),s(o,ot),s(o,lt),s(o,pn),s(o,it),s(o,cn),we.m(Mi,cn),s(o,rt),s(o,kn),s(o,pt),s(o,hn),_e.m(Ii,hn),s(o,ct),s(o,vn),s(o,kt),s(o,ht),s(o,vt),s(o,yn),s(o,yt),s(o,dn),be.m(Pi,dn),s(o,dt),s(o,un),s(o,ut),s(o,xn),s(o,xt),s(o,fn),s(o,ft),s(o,mn),Te.m(Si,mn),s(o,mt),s(o,gn),s(o,gt),s(o,wn),s(o,wt),s(o,_n),He.m(Ei,_n),s(o,_t),s(o,bn),s(o,bt),s(o,Tn),Le.m(ji,Tn),s(o,Tt),s(o,Hn),s(o,Ht),s(o,Ln),Ce.m(qi,Ln),s(o,Lt),s(o,Cn),s(o,Ct),s(o,Mn),Me.m(Bi,Mn),s(o,Mt),s(o,In),s(o,It),s(o,Pn),Ie.m(Di,Pn),s(o,Pt),s(o,Sn),s(o,St),s(o,En),Pe.m(Vi,En),s(o,Et),s(o,jn),s(o,jt),s(o,qn),s(o,qt),s(o,Bn),Se.m(Ai,Bn),s(o,Bt),s(o,Dn),b(c,Ee,p),b(c,H,p),s(H,Vn),s(H,Dt),s(H,An),s(H,Vt),s(H,$n),je.m($i,$n),s(H,At),s(H,Nn),b(c,qe,p),b(c,q,p),b(c,Be,p),b(c,B,p),b(c,De,p),b(c,I,p),s(I,Wn),s(I,$t),s(I,Rn),s(I,Nt),s(I,L),s(L,On),s(L,Wt),s(L,Kn),s(L,Rt),s(L,D),s(D,zn),s(D,Ot),s(D,Un),Ve.m(Ni,Un),s(L,Kt),s(L,V),s(V,Jn),s(V,zt),s(V,Yn),Ae.m(Wi,Yn),b(c,$e,p),b(c,A,p)},p:Ki,d(c){c&&(r(g),r(C),r(h),r(Zn),r(w),r(ee),r(j),r(ae),r(v),r(pe),r(x),r(ve),r(o),r(Ee),r(H),r(qe),r(q),r(Be),r(B),r(De),r(I),r($e),r(A))}}}function ar($){let g,P;const C=[$[0],ii];let h={$$slots:{default:[er]},$$scope:{ctx:$}};for(let _=0;_<C.length;_+=1)h=Ut(h,C[_]);return g=new sr({props:h}),{c(){Ji(g.$$.fragment)},l(_){Yi(g.$$.fragment,_)},m(_,M){Gi(g,_,M),P=!0},p(_,[M]){const N=M&1?Xi(C,[M&1&&li(_[0]),M&0&&li(ii)]):{};M&2&&(N.$$scope={dirty:M,ctx:_}),g.$set(N)},i(_){P||(Fi(g.$$.fragment,_),P=!0)},o(_){Qi(g.$$.fragment,_),P=!1},d(_){Zi(g,_)}}}const ii={title:"Contributing to Svelte - Implement {#key}",date:"2020-09-27T08:00:00Z",tags:["Svelte","JavaScript","Open Source"],series:"Contributing to Svelte",description:"I am going to share an anecdote on how I implemented {#key} logic block in Svelte",label:"blog",tableOfContents:[{link:"background",title:"Background"},{link:"the-motivation",title:"The motivation",nested:[{link:"transitions-for-reactive-data-change",title:"Transitions for reactive data change"}]},{link:"the-implementation",title:"The implementation",nested:[{link:"parsing",title:"Parsing"},{link:"tracking-references-and-dependencies",title:"Tracking references and dependencies"},{link:"creating-code-blocks-fragments",title:"Creating code blocks & fragments"},{link:"creating-code-for-ssr",title:"Creating code for SSR"},{link:"generate-code",title:"Generate code"},{link:"a-few-other-implementation-consideration",title:"A few other implementation consideration"}]},{link:"the-testing",title:"The testing"},{link:"closing-notes",title:"Closing Notes"}]};function tr($,g,P){return Oi("blog",{image:nr}),$.$$set=C=>{P(0,g=Ut(Ut({},g),oi(C)))},g=oi(g),[g]}class pr extends zi{constructor(g){super(),Ui(this,g,tr,ar,Ri,{})}}export{pr as component};
