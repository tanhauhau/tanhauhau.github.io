import{s as qe,d as oe,e as Se,f as Te,n as Ge}from"../chunks/scheduler.85ImRbsk.js";import{S as Ae,i as Oe,m as Ue,n as Ee,o as Be,t as De,a as We,p as ze,e as n,s as i,H as Ie,c as l,q as c,h as r,d as ae,r as Le,g as h,u as Me,j as d,k as a}from"../chunks/index.JMRAb4ib.js";import{g as Ne,a as He}from"../chunks/code-snippet.p32Anx_S.js";import{B as Fe}from"../chunks/BlogLayout.n3Egsk1p.js";import{t as Ve}from"../chunks/twitter-card-image.6izpPI6I.js";const Xe=""+new URL("../assets/inverted_emojis.HpVYRMP5.webp",import.meta.url).href,Ke=""+new URL("../assets/inverted_emojis.XXI1uUdI.webp",import.meta.url).href,Qe=""+new URL("../assets/inverted_emojis.hI6MrPcr.png",import.meta.url).href,Ce=""+new URL("../assets/inverted_emojis.pMhfKK62.png",import.meta.url).href,Ye=""+new URL("../assets/github-pages.VYcayPiO.webp",import.meta.url).href,Ze=""+new URL("../assets/github-pages.k5AfxaWF.webp",import.meta.url).href,Je=""+new URL("../assets/github-pages.li2QpoOa.png",import.meta.url).href,je=""+new URL("../assets/github-pages.WX9FM0-z.png",import.meta.url).href;function et(_){let o,m='After reading Dan&#39;s <a href="https://overreacted.io" rel="nofollow">Overreacted</a> &amp; Wei&#39;s <a href="https://dev.wgao19.cc/" rel="nofollow">A Work in Progress</a> a while ago, I decided to have my <a href="/blogs/">own blog</a> as well! <em>(In case you still don&#39;t know, it&#39;s the very one you are reading right now!)</em>',v,u,p='I took it as an opportunity to learn <a href="https://www.gatsbyjs.org/" rel="nofollow">Gatsby</a>, I&#39;ve heard about it for a while, so I guess it&#39;s to know how it works.',k,y,ne="This article is <strong>NOT about how to build a Gatsby site</strong>, there a lot resources about that you can go for. But I am here to share some of my customisations that I&#39;ve added to my Gatsby site, and hopefully you would share yours too.",A,g,le='<h2><a href="#the-boilerplate" id="the-boilerplate">The boilerplate</a></h2> <p>I used the exact same Gatsby starter pack as Dan&#39;s <a href="https://overreacted.io" rel="nofollow">Overreacted</a>, because why not ¬Ø_(„ÉÑ)_/¬Ø. It looks sleek and simple and I like it.</p>',O,f,ie=`<h2><a href="#the-deployment" id="the-deployment">The deployment</a></h2> <p>I use <a href="https://pages.github.com/" rel="nofollow">Github Pages</a> to host this blog.</p> <p><span style="display: block; position: relative; padding-top: 80.214%; width: 100%;"><picture><source type="image/webp" srcset="${Ze}, ${Ye} 2x"/><img src="${je}" srcset="${je}, ${Je} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="github pages settings" title="Github Pages Settings"/></picture></span></p> <p>According to the settings, I am required to use <code class="inline">master</code> branch to serve the content, that&#39;s why I am writing and developing in <code class="inline">dev</code> branch instead.</p> <p>To deploy, I added a <a href="https://github.com/tanhauhau/tanhauhau.github.io/blob/dev/scripts/publish.js" rel="nofollow">publish.js</a> script. The script will clone the repo in a temporary folder, copy all the built files into the folder, make a commit and push it to the master branch.</p> <p>Lastly, I added the script to the <code class="inline">pre-push</code> git hook, so that every time when I am pushing changes to the <code class="inline">dev</code> branch, it will also build and &quot;deploy&quot; changes to the <code class="inline">master</code> branch.</p>`,U,t,w,re='<a href="#the-light-dark-mode" id="the-light-dark-mode">The light &amp; dark mode</a>',W,b,pe='<a href="https://twitter.com/wgao19" rel="nofollow">Wei</a> did a sharing on how mix blend mode works and how she <a href="https://dev.wgao19.cc/2019-05-04__sun-moon-blending-mode/" rel="nofollow">added night mode using mix-blend-mode</a> on her site.',z,T,ce='So I decided to add my own <a href="https://github.com/tanhauhau/tanhauhau.github.io/commit/291663d10cc7838d67392acb6a28a04a655603a6#diff-4e34e842430a5e2977417f28e477e14d" rel="nofollow">Dark Mode Switch</a> as well.',N,I,he='The Dark Mode Switch was relatively easy. I added a pseudo-element <code class="inline">div#___gatsby::after</code> to cover over my entire Gatsby blog, so I don&#39;t have to create another div element.',F,L,E,$e=`<div class="filename">theme-mode.css</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">div#___gatsby</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)">:after &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  content</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  position</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> fixed;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  top</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  bottom</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  left</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  right</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  pointer</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">events</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> none;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> white;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  mix</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">blend</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">mode</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> difference;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,V,M,de="It's easy and it looks great, except, all my images and emojis are inverted. üò¢",X,H,ke=`<span style="display: block; position: relative; padding-top: 55.677%; width: 100%;"><picture><source type="image/webp" srcset="${Ke}, ${Xe} 2x"/><img src="${Ce}" srcset="${Ce}, ${Qe} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="inverted emojis" title="It looked like emojis going through X-Rays.. üò¢"/></picture></span>`,K,C,ue='I need to wrap all my emojis around a <code class="inline">&lt;span&gt;</code> so I can apply some css like <code class="inline">isolation: isolate</code> to exclude them from being blended. <a href="https://www.chenhuijing.com/blog/friends-dont-let-friends-implement-dark-mode-alone/#%F0%9F%92%BB" rel="nofollow">Inspiration credits to huijing üëèüëè</a>. But I am lazy to wrap all my emojis with <code class="inline">&lt;span&gt;</code>, I want to use them anytime I want, without bothering much of the <code class="inline">&lt;span&gt;</code>, so I decided to write a gatsby remark plugin to do that for me. üòé',Q,j,ve="Well, it turns out it's not that hard.",Y,P,ye='<a href="https://github.com/remarkjs/remark" rel="nofollow">Remark</a> provides a friendly api to tap into the AST and <a href="https://github.com/tanhauhau/tanhauhau.github.io/commit/291663d10cc7838d67392acb6a28a04a655603a6#diff-1be49bbded0fd920136646bdb37f5b91" rel="nofollow">does transformation</a>.',Z,$,B,Re=`<div class="filename">remark-emoji.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">visit</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;unist-util-visit&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">emojiRegex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;emoji-regex&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; markdownAST &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(markdownAST</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;text&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;html&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">emojiRegex</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      val </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&lt;span class=&quot;emoji&quot;&gt;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">val</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&lt;/span&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,J,R,me="<em>using emoji-regex find emojis and wrap them with a <span></span></em>",ee,q,ge="...and it works!",te,S,fe="Although somewhere when I started writing the gatsby plugin, a weird error popped up, and after some digging, I noticed that",se,G,xe='I had to include <code class="inline">package.json</code> into the plugin folder, or else it will yell at me.',D,x,_e='<h2><a href="#the-restructure" id="the-restructure">The Restructure</a></h2> <p>A while ago, I decided to add more categories to my blog, ie, <a href="/blogs/">my blogs</a>, <a href="/talks/">my talks</a> and <a href="/notes">my notes</a>. So I created different folders for them and <a href="https://github.com/tanhauhau/tanhauhau.github.io/commit/50c82259749f7608d1c81062eac1f357b9437485" rel="nofollow">rewrote the GraphQL query</a></p> <p>The Graphql Editor in <code class="inline">http://localhost:8000/___graphql</code> is really helpful for me to understand how Gatsby and Gatsby plugins are creating all the objects.</p>';return{c(){o=n("p"),o.innerHTML=m,v=i(),u=n("p"),u.innerHTML=p,k=i(),y=n("p"),y.innerHTML=ne,A=i(),g=n("section"),g.innerHTML=le,O=i(),f=n("section"),f.innerHTML=ie,U=i(),t=n("section"),w=n("h2"),w.innerHTML=re,W=i(),b=n("p"),b.innerHTML=pe,z=i(),T=n("p"),T.innerHTML=ce,N=i(),I=n("p"),I.innerHTML=he,F=i(),L=n("div"),E=new Ie(!1),V=i(),M=n("p"),M.textContent=de,X=i(),H=n("p"),H.innerHTML=ke,K=i(),C=n("p"),C.innerHTML=ue,Q=i(),j=n("p"),j.textContent=ve,Y=i(),P=n("p"),P.innerHTML=ye,Z=i(),$=n("div"),B=new Ie(!1),J=i(),R=n("p"),R.innerHTML=me,ee=i(),q=n("p"),q.textContent=ge,te=i(),S=n("p"),S.textContent=fe,se=i(),G=n("p"),G.innerHTML=xe,D=i(),x=n("section"),x.innerHTML=_e,this.h()},l(s){o=l(s,"P",{"data-svelte-h":!0}),c(o)!=="svelte-ib8htd"&&(o.innerHTML=m),v=r(s),u=l(s,"P",{"data-svelte-h":!0}),c(u)!=="svelte-1tiw8lr"&&(u.innerHTML=p),k=r(s),y=l(s,"P",{"data-svelte-h":!0}),c(y)!=="svelte-1w43k6p"&&(y.innerHTML=ne),A=r(s),g=l(s,"SECTION",{"data-svelte-h":!0}),c(g)!=="svelte-7i4010"&&(g.innerHTML=le),O=r(s),f=l(s,"SECTION",{"data-svelte-h":!0}),c(f)!=="svelte-1arquc7"&&(f.innerHTML=ie),U=r(s),t=l(s,"SECTION",{});var e=ae(t);w=l(e,"H2",{"data-svelte-h":!0}),c(w)!=="svelte-1ib4af4"&&(w.innerHTML=re),W=r(e),b=l(e,"P",{"data-svelte-h":!0}),c(b)!=="svelte-bm2hg8"&&(b.innerHTML=pe),z=r(e),T=l(e,"P",{"data-svelte-h":!0}),c(T)!=="svelte-1fv84pk"&&(T.innerHTML=ce),N=r(e),I=l(e,"P",{"data-svelte-h":!0}),c(I)!=="svelte-1pa1np0"&&(I.innerHTML=he),F=r(e),L=l(e,"DIV",{class:!0});var we=ae(L);E=Le(we,!1),we.forEach(h),V=r(e),M=l(e,"P",{"data-svelte-h":!0}),c(M)!=="svelte-1gpfpkg"&&(M.textContent=de),X=r(e),H=l(e,"P",{"data-svelte-h":!0}),c(H)!=="svelte-180uuvp"&&(H.innerHTML=ke),K=r(e),C=l(e,"P",{"data-svelte-h":!0}),c(C)!=="svelte-p14gpp"&&(C.innerHTML=ue),Q=r(e),j=l(e,"P",{"data-svelte-h":!0}),c(j)!=="svelte-1tubyyl"&&(j.textContent=ve),Y=r(e),P=l(e,"P",{"data-svelte-h":!0}),c(P)!=="svelte-1bm8nxa"&&(P.innerHTML=ye),Z=r(e),$=l(e,"DIV",{class:!0});var be=ae($);B=Le(be,!1),be.forEach(h),J=r(e),R=l(e,"P",{"data-svelte-h":!0}),c(R)!=="svelte-1dl0jrb"&&(R.innerHTML=me),ee=r(e),q=l(e,"P",{"data-svelte-h":!0}),c(q)!=="svelte-1ufqplr"&&(q.textContent=ge),te=r(e),S=l(e,"P",{"data-svelte-h":!0}),c(S)!=="svelte-1e6wdz4"&&(S.textContent=fe),se=r(e),G=l(e,"P",{"data-svelte-h":!0}),c(G)!=="svelte-yye16w"&&(G.innerHTML=xe),e.forEach(h),D=r(s),x=l(s,"SECTION",{"data-svelte-h":!0}),c(x)!=="svelte-6bsct9"&&(x.innerHTML=_e),this.h()},h(){E.a=null,Me(L,"class","code-section"),B.a=null,Me($,"class","code-section")},m(s,e){d(s,o,e),d(s,v,e),d(s,u,e),d(s,k,e),d(s,y,e),d(s,A,e),d(s,g,e),d(s,O,e),d(s,f,e),d(s,U,e),d(s,t,e),a(t,w),a(t,W),a(t,b),a(t,z),a(t,T),a(t,N),a(t,I),a(t,F),a(t,L),E.m($e,L),a(t,V),a(t,M),a(t,X),a(t,H),a(t,K),a(t,C),a(t,Q),a(t,j),a(t,Y),a(t,P),a(t,Z),a(t,$),B.m(Re,$),a(t,J),a(t,R),a(t,ee),a(t,q),a(t,te),a(t,S),a(t,se),a(t,G),d(s,D,e),d(s,x,e)},p:Ge,d(s){s&&(h(o),h(v),h(u),h(k),h(y),h(A),h(g),h(O),h(f),h(U),h(t),h(D),h(x))}}}function tt(_){let o,m;const v=[_[0],Pe];let u={$$slots:{default:[et]},$$scope:{ctx:_}};for(let p=0;p<v.length;p+=1)u=oe(u,v[p]);return o=new Fe({props:u}),{c(){Ue(o.$$.fragment)},l(p){Ee(o.$$.fragment,p)},m(p,k){Be(o,p,k),m=!0},p(p,[k]){const y=k&1?Ne(v,[k&1&&He(p[0]),k&0&&He(Pe)]):{};k&2&&(y.$$scope={dirty:k,ctx:p}),o.$set(y)},i(p){m||(De(o.$$.fragment,p),m=!0)},o(p){We(o.$$.fragment,p),m=!1},d(p){ze(o,p)}}}const Pe={title:"Building my Gatsby site",date:"2019-07-02T08:00:00Z",description:"A work in progress",wip:!0,label:"blog",tableOfContents:[{link:"the-boilerplate",title:"The boilerplate"},{link:"the-deployment",title:"The deployment"},{link:"the-light-dark-mode",title:"The light & dark mode"},{link:"the-restructure",title:"The Restructure"}]};function st(_,o,m){return Se("blog",{image:Ve}),_.$$set=v=>{m(0,o=oe(oe({},o),Te(v)))},o=Te(o),[o]}class rt extends Ae{constructor(o){super(),Oe(this,o,st,tt,qe,{})}}export{rt as component};
