import{s as pl,d as Vn,e as cl,f as Ce,n as kl}from"../chunks/scheduler.85ImRbsk.js";import{S as hl,i as yl,m as vl,n as dl,o as xl,t as ul,a as fl,p as ml,e as t,s as n,H as f,c as o,q as r,h as a,d as h,r as m,g as l,u,j as c,k as s}from"../chunks/index.JMRAb4ib.js";import{g as wl,a as He}from"../chunks/code-snippet.p32Anx_S.js";import{B as gl}from"../chunks/BlogLayout.TadBQAnB.js";import{t as _l}from"../chunks/twitter-card-image.6izpPI6I.js";const bl=""+new URL("../assets/refresh.c1CV6PLF.webp",import.meta.url).href,Ll=""+new URL("../assets/refresh.cshPMcBq.webp",import.meta.url).href,Tl=""+new URL("../assets/refresh.ZCIGPWqP.png",import.meta.url).href,Me=""+new URL("../assets/refresh.D3_S4se5.png",import.meta.url).href,Cl=""+new URL("../assets/hate.Khvir5uI.webp",import.meta.url).href,Hl=""+new URL("../assets/hate.S_B4m87s.webp",import.meta.url).href,Ml=""+new URL("../assets/hate.yY330fMZ.png",import.meta.url).href,Ie=""+new URL("../assets/hate.vtODAeqT.png",import.meta.url).href,Il=""+new URL("../assets/eat-sprite.rn1f7viS.webp",import.meta.url).href,Sl=""+new URL("../assets/eat-sprite.Vq2iTtJY.webp",import.meta.url).href,ql=""+new URL("../assets/eat-sprite.GcdgkpAq.png",import.meta.url).href,Se=""+new URL("../assets/eat-sprite.pbYEVbfr.png",import.meta.url).href,El=""+new URL("../assets/shift-left.OWbYdrIX.gif",import.meta.url).href,qe=""+new URL("../assets/shift-left.7qPvkLVO.gif",import.meta.url).href,Pl=""+new URL("../assets/rest-sprite.EjKqWn2C.webp",import.meta.url).href,$l=""+new URL("../assets/rest-sprite.urv2MvGK.webp",import.meta.url).href,Dl=""+new URL("../assets/rest-sprite.xjNqgLIV.png",import.meta.url).href,Ee=""+new URL("../assets/rest-sprite.3IQdMkck.png",import.meta.url).href,Rl=""+new URL("../assets/annihilate.lyn19MYT.gif",import.meta.url).href,Pe=""+new URL("../assets/annihilate.tj8xtvZF.gif",import.meta.url).href,Ul=""+new URL("../assets/eat.4daDkzdc.gif",import.meta.url).href,$e=""+new URL("../assets/eat.fMRT2m5g.gif",import.meta.url).href,Vl=""+new URL("../assets/evade.QJmABb4m.gif",import.meta.url).href,De=""+new URL("../assets/evade.FUkeca9I.gif",import.meta.url).href,Ol=""+new URL("../assets/rest.BoN6Du9O.gif",import.meta.url).href,Re=""+new URL("../assets/rest.G9NqBZeE.gif",import.meta.url).href;function jl(F){let w,P='I just came back from the <a href="https://supersillyhackathon.sg/" rel="nofollow">Super Silly Hackathon 2019</a>. It was my second time to participate in this Super Silly Hackathon.',S,M,L='<p lang="en" dir="ltr">Hello everybody we are ready for this year, are you?? <a href="https://t.co/lem52qHO6Q">pic.twitter.com/lem52qHO6Q</a></p>— Super Silly Hackathon — 14 Dec 2019 (@supersillyhack) <a href="https://twitter.com/supersillyhack/status/1205671402432450563?ref_src=twsrc%5Etfw">December 14, 2019</a>',I,q,On='This year, my silly hackathon idea is to build <a href="https://github.com/tanhauhau/browser-pet" rel="nofollow">a little pet in the browser</a>!',bt,R,jn=`<span style="display: block; position: relative; padding-top: 58.357%; width: 100%;"><img src="${Re}" srcset="${Re}, ${Ol} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="rest"/></span>`,Lt,U,zn='<h2><a href="#inspiration" id="inspiration">Inspiration?</a></h2> <p>I saw the <a href="https://github.com/graceavery/tamagotchiTemp" rel="nofollow">tamagotchi</a> on touchbar a while ago, I don&#39;t have a touchbar, but I have a browser. So why not create a pet in the browser through Chrome Extension?</p>',Tt,V,An='<h2><a href="#what-can-it-do" id="what-can-it-do">What can it do?</a></h2>',Ct,O,Nn=`<h3><a href="#1-it-runs-away-from-mouse-cursor" id="1-it-runs-away-from-mouse-cursor">1. It runs away from mouse cursor</a></h3> <p><span style="display: block; position: relative; padding-top: 56.857%; width: 100%;"><img src="${De}" srcset="${De}, ${Vl} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="evade"/></span></p>`,Ht,j,Bn=`<h3><a href="#2-it-eats-whatever-you-try-to-type-into-an-input" id="2-it-eats-whatever-you-try-to-type-into-an-input">2. It eats whatever you try to type into an input</a></h3> <p><span style="display: block; position: relative; padding-top: 44.929%; width: 100%;"><img src="${$e}" srcset="${$e}, ${Ul} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="eat"/></span></p>`,Mt,z,Gn=`<h3><a href="#3-it-annihilates-the-buttons-you-hover-onto" id="3-it-annihilates-the-buttons-you-hover-onto">3. It annihilates the buttons you hover onto</a></h3> <p><span style="display: block; position: relative; padding-top: 57.000%; width: 100%;"><img src="${Pe}" srcset="${Pe}, ${Rl} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="annihilate"/></span></p>`,It,A,Xn='<h2><a href="#implementation" id="implementation">Implementation</a></h2>',St,b,W,Fn='<a href="#chrome-extension" id="chrome-extension">Chrome Extension</a>',uo,Q,Wn='Firstly, it is a Chrome Extension. I used <a href="https://developer.chrome.com/extensions/content_scripts" rel="nofollow">Content Scripts</a>, so that I have access to the DOM of the pages I am visiting.',fo,Y,Qn='Here is my <code class="inline">manifest.json</code> for my extension:',mo,Z,qt,Ve=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;manifest_version&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;name&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Super Silly Hackathon&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;description&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Super Silly Hackathon&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;version&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;1.0.0&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;content_scripts&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;matches&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;&lt;all_urls&gt;&quot;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;js&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;content.js&quot;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;css&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;content-ext.css&quot;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;run_at&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;document_start&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">&quot;all_frames&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wo,J,Yn='To start, I added an <code class="inline">onload</code> event, to add my pet into the browser:',go,K,Et,Oe=`<div class="filename">content.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onload</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">updatePosition</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">classList</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;ssh-pet&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(pet);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;load&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> onload);</span></span></code></pre>`,_o,ss,Pt,je=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: content.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.ssh-pet</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">height</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">30</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">width</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">30</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fixed</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">z-index</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-image</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">url</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/images/rest.png&#39;</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-size</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">30</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)"> 30</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-position</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0 0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bo,ts,Zn='The first problem I encountered, is that I couldn&#39;t access the <code class="inline">/images/rest.png</code>. After some googling, I need to:',$t,$,os,Jn='<a href="#1-add-web-accessible-resources-into-the-manifest-json" id="1-add-web-accessible-resources-into-the-manifest-json">1. Add <code class="inline">web_accessible_resources</code> into the <code class="inline">manifest.json</code></a>',Lo,ns,Dt,ze=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;web_accessible_resources&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;images/*&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Rt,D,as,Kn='<a href="#2-prepend-chrome-extension-msg-extension-id-for-the-url" id="2-prepend-chrome-extension-msg-extension-id-for-the-url">2. Prepend <code class="inline">chrome-extension://__MSG_@@extension_id__/</code> for the URL</a>',To,es,Ut,Ae=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.ssh-pet</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-image</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">url</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;chrome-extension://__MSG_@@extension_id__/images/rest.png&#39;</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vt,v,ls,sa='<a href="#make-it-look-alive" id="make-it-look-alive">Make it look alive</a>',Co,rs,ta="A static image will look fake.",Ho,is,oa="As the quote says, <strong>&quot;eyes is the window to the soul&quot;</strong>, to make the pet look real, we need to make the eye blink.",Mo,ps,na="<em>(That&#39;s how you judge a person is dead or alive in movies right? Dead body will just stare blankly to nowhere)</em>",Io,cs,aa='To make the pet blink, I found some <a href="https://blog.teamtreehouse.com/css-sprite-sheet-animations-steps" rel="nofollow">useful tutorials</a> on how to create CSS sprite sheet animations.',So,ks,ea=`<span style="display: block; position: relative; padding-top: 33.333%; width: 100%;"><picture><source type="image/webp" srcset="${$l}, ${Pl} 2x"/><img src="${Ee}" srcset="${Ee}, ${Dl} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="spritesheet for resting" title="Sprite Sheet for Resting"/></picture></span>`,qo,hs,Ot,Ne=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@keyframes</span><span style="color: var(--shiki-color-text)"> ssh-pet-rest &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  0% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">background-position-x</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  100% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">background-position-x</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">-90</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">.ssh-pet.rest</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-image</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">url</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;chrome-extension://__MSG_@@extension_id__/images/rest-sprite.png&#39;</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-repeat</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">repeat-x</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-size</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">90</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)"> 30</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-position</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0 0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">animation</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ssh-pet-rest 0.2</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-function)">steps</span><span style="color: var(--shiki-token-constant)">(3)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Eo,ys,la='To animate it, I added the <code class="inline">rest</code> class to the pet, and removed it when it&#39;s done animating.',Po,vs,jt,Be=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">classList</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;rest&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// when the animation finished, remove the class</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onanimationend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;animationend&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> onanimationend);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">classList</span><span style="color: var(--shiki-token-function)">.remove</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;rest&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;animationend&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> onanimationend);</span></span></code></pre>`,$o,ds,ra="At the beginning, I thought I would add more other micro expressions to the pet, so I wrote a scheduler, to schedule expressions randomly:",Do,xs,zt,Ge=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(random) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (random) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateRest</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">scheduleSomething</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">choices</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// cheat to do Math.floor</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~~</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.random</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> choices);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(random);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">scheduleSomething</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">800</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.random</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// make animation promise based</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateRest</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateClass</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;rest&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateClass</span><span style="color: var(--shiki-color-text)">(cls) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-color-text)">(resolve </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">classList</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(cls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onanimationend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;animationend&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> onanimationend);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">classList</span><span style="color: var(--shiki-token-function)">.remove</span><span style="color: var(--shiki-color-text)">(cls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;animationend&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> onanimationend);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ro,us,ia='I used <code class="inline">await</code> to wait for animation to finish, before schedule the next action again, so that it will not have 2 actions running in parallel.',At,y,fs,pa='<a href="#avoid-the-cursor" id="avoid-the-cursor">Avoid the cursor</a>',Uo,ms,ca="I drew a sprite sheet that make the pet looks like it is squiggling away,",Vo,ws,ka=`<span style="display: block; position: relative; padding-top: 84.643%; width: 100%;"><img src="${qe}" srcset="${qe}, ${El} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="shift"/></span>`,Oo,gs,ha='while at the same time set the <code class="inline">transform: translateX()</code> to actually move it:',jo,_s,Nt,Xe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">@keyframes</span><span style="color: var(--shiki-color-text)"> ssh-pet-shift-left &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  0% &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">background-position-x</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">translateX</span><span style="color: var(--shiki-token-constant)">(0)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  100% &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">background-position-x</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">-240</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">translateX</span><span style="color: var(--shiki-token-constant)">(-30</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-function)">.ssh-pet.shift-left</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-image</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">url</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/images/shift-left-sprite.png&#39;</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-repeat</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">repeat-x</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-size</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">240</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)"> 30</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">background-position</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0 0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">animation</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ssh-pet-shift-left 0.8</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-token-constant)"> </span><span style="color: var(--shiki-token-function)">steps</span><span style="color: var(--shiki-token-constant)">(8)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zo,bs,ya="In JavaScript, I tried to keep the position state inside an object:",Ao,Ls,Bt,Fe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; x</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> y; </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">offsetPosition</span><span style="color: var(--shiki-color-text)">(x</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> y) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">updatePosition</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.x </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> x</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.y </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> y);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updatePosition</span><span style="color: var(--shiki-color-text)">(x</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> y) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.left </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.x </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> x) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;px&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.top </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.y </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> y) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;px&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,No,Ts,va="So, to shift away from the cursor would be:",Bo,Cs,Gt,We=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateShiftLeft</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateClass</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;shift-left&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">offsetPosition</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">30</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Go,Hs,da='So, when the animation ends, the <code class="inline">transform: translateX()</code> will go from <code class="inline">-30px</code> back to <code class="inline">0</code>, and at the same time, I moved the position of the pet <code class="inline">-30px</code> in x-axis.',Xo,Ms,xa='To know when the cursor is on top of the pet, I used <code class="inline">mousemove</code> event:',Fo,Is,Xt,Qe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;mousemove&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">animating) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    animating </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">shiftAway</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    animating </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// edge avoidance shifting</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">shiftAway</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.x </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">40</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateShiftRight</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.x </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.innerWidth </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">40</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateShiftLeft</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.random</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0.5</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateShiftLeft</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateShiftRight</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wo,Ss,ua='To avoid reanimate while still animate, I added a <code class="inline">animating</code> flag, as an mutex.',Qo,qs,fa="Besides, it would be weird to see the pet shifting pass through the browser window, because that way, you would never be able to interact with it anymore 😢",Ft,p,Es,ma='<a href="#eating-the-characters" id="eating-the-characters">Eating the characters</a>',Yo,Ps,wa='To know when someone is typing into any of the input box, I attach an <code class="inline">input</code> event listener on to the <code class="inline">document.body</code>:',Zo,$s,Wt,Ye=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;input&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">debounceByElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-color-text)">.target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eatInputValue</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Jo,Ds,ga='There maybe multiple <code class="inline">&lt;input /&gt;</code> on the page, so I created a debounce function for each <code class="inline">&lt;input /&gt;</code>.',Ko,Rs,_a="To make the eating simple, I will always eat from the left, consuming characters from left to right:",sn,Us,Qt,Ze=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatInputValue</span><span style="color: var(--shiki-color-text)">(elem) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">debounceByElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-color-text)">.target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eatInputValue</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tn,Vs,ba=`However naively eating the characters this way, will screw up your cursor position / selection.
So I googled and pasted the code snippet to improve it:`,on,Os,Yt,Je=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatInputValue</span><span style="color: var(--shiki-color-text)">(elem) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// remember selection position</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">start</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-color-text)">.selectionStart</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">end</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-color-text)">.selectionEnd;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// restore selection position</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-token-function)">.setSelectionRange</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.max</span><span style="color: var(--shiki-color-text)">(start </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.max</span><span style="color: var(--shiki-color-text)">(end </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">debounceByElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-color-text)">.target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eatInputValue</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,nn,js,La='After able to "eat" the characters, I need to animate the pet eating the characters',an,zs,Ta=`<span style="display: block; position: relative; padding-top: 12.500%; width: 100%;"><picture><source type="image/webp" srcset="${Sl}, ${Il} 2x"/><img src="${Se}" srcset="${Se}, ${ql} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="spritesheet for eating" title="Sprite Sheet for Eating"/></picture></span>`,en,As,Ca="To align the eating with the removing of a character, I split the animation into 2 parts, <strong>the eating</strong> and <strong>the chewing</strong> <em>(I named it digesting during the hackathon)</em>.",ln,Ns,Zt,Ke=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatInputValue</span><span style="color: var(--shiki-color-text)">(elem) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateClass</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;eat&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">start</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-color-text)">.selectionStart</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">end</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-color-text)">.selectionEnd;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-token-function)">.setSelectionRange</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.max</span><span style="color: var(--shiki-color-text)">(start </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.max</span><span style="color: var(--shiki-color-text)">(end </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateClass</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;digest&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">debounceByElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-color-text)">.target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eatInputValue</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rn,Bs,Ha="To make it more realistic, I tried to make the pet tilt forward, while consuming the character:",pn,Gs,Jt,sl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@keyframes</span><span style="color: var(--shiki-color-text)"> ssh-pet-eat-move &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  0%,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  30% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">translateX</span><span style="color: var(--shiki-token-constant)">(0)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  50% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">translateX</span><span style="color: var(--shiki-token-constant)">(4</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  100% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">translateX</span><span style="color: var(--shiki-token-constant)">(0)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,cn,Xs,Ma="The pixel values had been tuned to make the movement subtle, yet natural.",kn,Fs,Ia="Now, how do I place my pet to the left of the input?",hn,Ws,Sa="Instead of squiggle to the right position, I made the pet <strong>teleport</strong>!",yn,Qs,Kt,tl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateTeleport</span><span style="color: var(--shiki-color-text)">(x</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> y) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateClass</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;disappear&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.opacity </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">updatePosition</span><span style="color: var(--shiki-color-text)">(x</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> y);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.opacity </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateClass</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;reappear&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vn,Ys,qa='To calculate the teleport destination, I used <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect" rel="nofollow">getBoundingClientRect()</a>:',dn,Zs,so,ol=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">leftSideOf</span><span style="color: var(--shiki-color-text)">(elem) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">x</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">y</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">height</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-token-function)">.getBoundingClientRect</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">to_x</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> x </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">size</span><span style="color: var(--shiki-color-text)">.width </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paddingLeft</span><span style="color: var(--shiki-color-text)">(elem);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">to_y</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> y </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> height </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">size</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [to_x</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> to_y];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paddingLeft</span><span style="color: var(--shiki-color-text)">(elem) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">Number</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      window</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.getComputedStyle</span><span style="color: var(--shiki-color-text)">(elem)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.getPropertyValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;padding-left&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">/px</span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-token-string-expression)">r</span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-string-expression)">em/</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ) </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xn,Js,Ea="The padding of the input is important. It brings the pet closer to the character it is going to eat. 🤤",to,d,Ks,Pa='<a href="#annihilate-the-buttons" id="annihilate-the-buttons">Annihilate the buttons</a>',un,st,$a="Pet don't like buttons because buttons take away your concentration from your pet.",fn,tt,Da=`<span style="display: block; position: relative; padding-top: 100.000%; width: 100%;"><picture><source type="image/webp" srcset="${Hl}, ${Cl} 2x"/><img src="${Ie}" srcset="${Ie}, ${Ml} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Eys full of hatred"/></picture></span>`,mn,ot,Ra='To get a list of buttons, I use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll" rel="nofollow">document.querySelectorAll()</a>:',wn,nt,oo,nl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">buttons</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelectorAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button, input[type=&quot;submit&quot;], [role=&quot;button&quot;]&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">buttons</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(button </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">button</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;mousemove&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> mouseMove)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,gn,at,Ua="To annihilate the buttons, I animated the pet with a pair of dead red eyes, and shake it for 400 milli-seconds, before annihilating the elements into vapor:",_n,et,no,al=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">removeTheElement</span><span style="color: var(--shiki-color-text)">(elem) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (animating) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  animating </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">classList</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;hate&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">timeout</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">400</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;mousemove&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> mouseMove);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">animateClass</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;item-disappearing&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> elem);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">elem</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.visibility </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hidden&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">pet</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">classList</span><span style="color: var(--shiki-token-function)">.remove</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;hate&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  animating </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bn,lt,Va='I used <code class="inline">visibility: hidden</code>, so that I dont disrupt the DOM structure, yet making it disappear and unclickable, unlike <code class="inline">opacity: none</code>.',Ln,rt,Oa="The pet with hatred is slightly bigger and agitated than the normal pet:",Tn,it,ao,el=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@keyframes</span><span style="color: var(--shiki-color-text)"> hating &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  0% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">scale</span><span style="color: var(--shiki-token-constant)">(1.1) </span><span style="color: var(--shiki-token-function)">translateX</span><span style="color: var(--shiki-token-constant)">(-2</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  50% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">scale</span><span style="color: var(--shiki-token-constant)">(1.1) </span><span style="color: var(--shiki-token-function)">translateX</span><span style="color: var(--shiki-token-constant)">(2</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  100% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">scale</span><span style="color: var(--shiki-token-constant)">(1.1) </span><span style="color: var(--shiki-token-function)">translateX</span><span style="color: var(--shiki-token-constant)">(-2</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cn,pt,ja='To turn the button annihilated into vapor, I used <code class="inline">filter: blur()</code>:',Hn,ct,eo,ll=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">@keyframes</span><span style="color: var(--shiki-color-text)"> item-disappearing &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  0% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">filter</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">blur</span><span style="color: var(--shiki-token-constant)">(0</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  80% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">opacity</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  100% &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">filter</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">blur</span><span style="color: var(--shiki-token-constant)">(8</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">scale</span><span style="color: var(--shiki-token-constant)">(1.5)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">opacity</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,lo,N,za='<h2><a href="#difficulties" id="difficulties">Difficulties</a></h2>',ro,B,Aa=`<h3><a href="#synchronising-interactions" id="synchronising-interactions">Synchronising interactions</a></h3> <p>A lot edge cases has been found and fixed by using the <code class="inline">animating</code>, or <code class="inline">eating</code> flag:</p> <ul><li>where to avoid cursor, while eating the characters</li> <li>to annihilate or to eat?
There&#39;s an heuristic to choose which one to do, when both get scheduled at the same time.</li></ul>`,io,C,kt,Na='<a href="#developing-locally" id="developing-locally">Developing locally</a>',Mn,ht,Ba='Everytime when the content script is updated, I need to click refresh in the <code class="inline">chrome://extensions</code> page:',In,yt,Ga=`<span style="display: block; position: relative; padding-top: 53.571%; width: 100%;"><picture><source type="image/webp" srcset="${Ll}, ${bl} 2x"/><img src="${Me}" srcset="${Me}, ${Tl} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="click refresh"/></picture></span>`,Sn,vt,Xa="In order to developed faster, I created a simple HTML, and test it locally.",qn,dt,po,rl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">link</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">rel</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;stylesheet&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;text/css&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">href</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;content.css&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;content.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,co,T,xt,Fa='<a href="#postcss-script" id="postcss-script">PostCSS script</a>',En,ut,Wa='Remember I mentioned that, for resource to be accessible from the Chrome Extension, I would have to prepend the url with <code class="inline">chrome-extension://__MSG_@@extension_id__/</code>?',Pn,ft,Qa='But that does not work if I developed in standalone HTML, because I can&#39;t access the assets from <code class="inline">chrome-extension://</code> protocol in my localhost.',$n,mt,Ya='I would have to write <code class="inline">/images/rest.png</code>, and replaced it to <code class="inline">chrome-extension://__MSG_@@extension_id__/images/rest.png</code> when I test it on my extension.',Dn,wt,Za='So, I wrote a simple script with <a href="https://postcss.org/" rel="nofollow">PostCSS</a> to automatically do it:',Rn,gt,ko,il=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;fs&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;path&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">postcss</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;postcss&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(__dirname</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../content.css&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(__dirname</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../content-ext.css&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// watch when file change</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.watchFile</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;from: undefined&#96; to stop PostCSS complain about sourcemap</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">postcss</span><span style="color: var(--shiki-color-text)">([replaceUrl])</span><span style="color: var(--shiki-token-function)">.process</span><span style="color: var(--shiki-color-text)">(css</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; from</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)"> &#125;)</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">((result) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(output</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)">.css</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">replaceUrl</span><span style="color: var(--shiki-color-text)">(root) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-token-function)">.walkDecls</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background-image&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> decl </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">decl</span><span style="color: var(--shiki-color-text)">.value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">decl</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">/url(&#39;(.</span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-token-string-expression)">)&#39;)/</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;url(&#39;chrome-extension://__MSG_@@extension_id__$1&#39;)&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Un,_t,Ja='I used <code class="inline">content.css</code> for my local development, and automatically built <code class="inline">content-ext.css</code> for the extension with all the URL replaced.',ho,G,Ka='<h2><a href="#demo" id="demo">Demo</a></h2> <p>I did a super quick demo, which went quite well, <em>I think.</em> 🤔</p> <p>For those who are curious, and want to try out, you can visit <a href="https://lihautan.com/browser-pet/" rel="nofollow">here for the demo</a>.</p> <p>For those who are curious about the source code, can visit <a href="https://github.com/tanhauhau/browser-pet" rel="nofollow">the Github repo</a>.</p>',yo,X,se='<h2><a href="#summary" id="summary">Summary</a></h2> <p>It has been a fruitful event.</p> <blockquote class="twitter-tweet"><p lang="en" dir="ltr">And <a href="https://twitter.com/lihautan?ref_src=twsrc%5Etfw">@lihautan</a> wins a bag of tropical fruits <a href="https://t.co/CtQUBGOI7h">pic.twitter.com/CtQUBGOI7h</a></p>— Yishu See (@yishusee) <a href="https://twitter.com/yishusee/status/1205828141194727430?ref_src=twsrc%5Etfw">December 14, 2019</a></blockquote> <p>Appreciate the organisers time and effort to make the Hackathon goes as smoothly as possible.</p> <p>I managed to do something that I never really done before:</p> <ul><li>CSS sprite sheet animation</li> <li>Chrome Extension that interacts with the user and manipulates the DOM</li></ul> <p>Hopefully I will partcipate the <a href="https://twitter.com/supersillyhack" rel="nofollow">Super Silly Hackathon</a> again next year.</p>';return{c(){w=t("p"),w.innerHTML=P,S=n(),M=t("blockquote"),M.innerHTML=L,I=n(),q=t("p"),q.innerHTML=On,bt=n(),R=t("p"),R.innerHTML=jn,Lt=n(),U=t("section"),U.innerHTML=zn,Tt=n(),V=t("section"),V.innerHTML=An,Ct=n(),O=t("section"),O.innerHTML=Nn,Ht=n(),j=t("section"),j.innerHTML=Bn,Mt=n(),z=t("section"),z.innerHTML=Gn,It=n(),A=t("section"),A.innerHTML=Xn,St=n(),b=t("section"),W=t("h3"),W.innerHTML=Fn,uo=n(),Q=t("p"),Q.innerHTML=Wn,fo=n(),Y=t("p"),Y.innerHTML=Qn,mo=n(),Z=t("div"),qt=new f(!1),wo=n(),J=t("p"),J.innerHTML=Yn,go=n(),K=t("div"),Et=new f(!1),_o=n(),ss=t("div"),Pt=new f(!1),bo=n(),ts=t("p"),ts.innerHTML=Zn,$t=n(),$=t("section"),os=t("h4"),os.innerHTML=Jn,Lo=n(),ns=t("div"),Dt=new f(!1),Rt=n(),D=t("section"),as=t("h4"),as.innerHTML=Kn,To=n(),es=t("div"),Ut=new f(!1),Vt=n(),v=t("section"),ls=t("h3"),ls.innerHTML=sa,Co=n(),rs=t("p"),rs.textContent=ta,Ho=n(),is=t("p"),is.innerHTML=oa,Mo=n(),ps=t("p"),ps.innerHTML=na,Io=n(),cs=t("p"),cs.innerHTML=aa,So=n(),ks=t("p"),ks.innerHTML=ea,qo=n(),hs=t("div"),Ot=new f(!1),Eo=n(),ys=t("p"),ys.innerHTML=la,Po=n(),vs=t("div"),jt=new f(!1),$o=n(),ds=t("p"),ds.textContent=ra,Do=n(),xs=t("div"),zt=new f(!1),Ro=n(),us=t("p"),us.innerHTML=ia,At=n(),y=t("section"),fs=t("h3"),fs.innerHTML=pa,Uo=n(),ms=t("p"),ms.textContent=ca,Vo=n(),ws=t("p"),ws.innerHTML=ka,Oo=n(),gs=t("p"),gs.innerHTML=ha,jo=n(),_s=t("div"),Nt=new f(!1),zo=n(),bs=t("p"),bs.textContent=ya,Ao=n(),Ls=t("div"),Bt=new f(!1),No=n(),Ts=t("p"),Ts.textContent=va,Bo=n(),Cs=t("div"),Gt=new f(!1),Go=n(),Hs=t("p"),Hs.innerHTML=da,Xo=n(),Ms=t("p"),Ms.innerHTML=xa,Fo=n(),Is=t("div"),Xt=new f(!1),Wo=n(),Ss=t("p"),Ss.innerHTML=ua,Qo=n(),qs=t("p"),qs.textContent=fa,Ft=n(),p=t("section"),Es=t("h3"),Es.innerHTML=ma,Yo=n(),Ps=t("p"),Ps.innerHTML=wa,Zo=n(),$s=t("div"),Wt=new f(!1),Jo=n(),Ds=t("p"),Ds.innerHTML=ga,Ko=n(),Rs=t("p"),Rs.textContent=_a,sn=n(),Us=t("div"),Qt=new f(!1),tn=n(),Vs=t("p"),Vs.textContent=ba,on=n(),Os=t("div"),Yt=new f(!1),nn=n(),js=t("p"),js.textContent=La,an=n(),zs=t("p"),zs.innerHTML=Ta,en=n(),As=t("p"),As.innerHTML=Ca,ln=n(),Ns=t("div"),Zt=new f(!1),rn=n(),Bs=t("p"),Bs.textContent=Ha,pn=n(),Gs=t("div"),Jt=new f(!1),cn=n(),Xs=t("p"),Xs.textContent=Ma,kn=n(),Fs=t("p"),Fs.textContent=Ia,hn=n(),Ws=t("p"),Ws.innerHTML=Sa,yn=n(),Qs=t("div"),Kt=new f(!1),vn=n(),Ys=t("p"),Ys.innerHTML=qa,dn=n(),Zs=t("div"),so=new f(!1),xn=n(),Js=t("p"),Js.textContent=Ea,to=n(),d=t("section"),Ks=t("h3"),Ks.innerHTML=Pa,un=n(),st=t("p"),st.textContent=$a,fn=n(),tt=t("p"),tt.innerHTML=Da,mn=n(),ot=t("p"),ot.innerHTML=Ra,wn=n(),nt=t("div"),oo=new f(!1),gn=n(),at=t("p"),at.textContent=Ua,_n=n(),et=t("div"),no=new f(!1),bn=n(),lt=t("p"),lt.innerHTML=Va,Ln=n(),rt=t("p"),rt.textContent=Oa,Tn=n(),it=t("div"),ao=new f(!1),Cn=n(),pt=t("p"),pt.innerHTML=ja,Hn=n(),ct=t("div"),eo=new f(!1),lo=n(),N=t("section"),N.innerHTML=za,ro=n(),B=t("section"),B.innerHTML=Aa,io=n(),C=t("section"),kt=t("h3"),kt.innerHTML=Na,Mn=n(),ht=t("p"),ht.innerHTML=Ba,In=n(),yt=t("p"),yt.innerHTML=Ga,Sn=n(),vt=t("p"),vt.textContent=Xa,qn=n(),dt=t("div"),po=new f(!1),co=n(),T=t("section"),xt=t("h4"),xt.innerHTML=Fa,En=n(),ut=t("p"),ut.innerHTML=Wa,Pn=n(),ft=t("p"),ft.innerHTML=Qa,$n=n(),mt=t("p"),mt.innerHTML=Ya,Dn=n(),wt=t("p"),wt.innerHTML=Za,Rn=n(),gt=t("div"),ko=new f(!1),Un=n(),_t=t("p"),_t.innerHTML=Ja,ho=n(),G=t("section"),G.innerHTML=Ka,yo=n(),X=t("section"),X.innerHTML=se,this.h()},l(e){w=o(e,"P",{"data-svelte-h":!0}),r(w)!=="svelte-924p32"&&(w.innerHTML=P),S=a(e),M=o(e,"BLOCKQUOTE",{class:!0,"data-svelte-h":!0}),r(M)!=="svelte-1rfb3st"&&(M.innerHTML=L),I=a(e),q=o(e,"P",{"data-svelte-h":!0}),r(q)!=="svelte-tt1f8v"&&(q.innerHTML=On),bt=a(e),R=o(e,"P",{"data-svelte-h":!0}),r(R)!=="svelte-151w6ce"&&(R.innerHTML=jn),Lt=a(e),U=o(e,"SECTION",{"data-svelte-h":!0}),r(U)!=="svelte-7h7230"&&(U.innerHTML=zn),Tt=a(e),V=o(e,"SECTION",{"data-svelte-h":!0}),r(V)!=="svelte-1ssvp6s"&&(V.innerHTML=An),Ct=a(e),O=o(e,"SECTION",{"data-svelte-h":!0}),r(O)!=="svelte-ra8zwq"&&(O.innerHTML=Nn),Ht=a(e),j=o(e,"SECTION",{"data-svelte-h":!0}),r(j)!=="svelte-la5iri"&&(j.innerHTML=Bn),Mt=a(e),z=o(e,"SECTION",{"data-svelte-h":!0}),r(z)!=="svelte-81b8gd"&&(z.innerHTML=Gn),It=a(e),A=o(e,"SECTION",{"data-svelte-h":!0}),r(A)!=="svelte-1c8rknn"&&(A.innerHTML=Xn),St=a(e),b=o(e,"SECTION",{});var i=h(b);W=o(i,"H3",{"data-svelte-h":!0}),r(W)!=="svelte-10k1ng9"&&(W.innerHTML=Fn),uo=a(i),Q=o(i,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-agk8xk"&&(Q.innerHTML=Wn),fo=a(i),Y=o(i,"P",{"data-svelte-h":!0}),r(Y)!=="svelte-ny979c"&&(Y.innerHTML=Qn),mo=a(i),Z=o(i,"DIV",{class:!0});var te=h(Z);qt=m(te,!1),te.forEach(l),wo=a(i),J=o(i,"P",{"data-svelte-h":!0}),r(J)!=="svelte-1pzuvdn"&&(J.innerHTML=Yn),go=a(i),K=o(i,"DIV",{class:!0});var oe=h(K);Et=m(oe,!1),oe.forEach(l),_o=a(i),ss=o(i,"DIV",{class:!0});var ne=h(ss);Pt=m(ne,!1),ne.forEach(l),bo=a(i),ts=o(i,"P",{"data-svelte-h":!0}),r(ts)!=="svelte-ez0xy2"&&(ts.innerHTML=Zn),i.forEach(l),$t=a(e),$=o(e,"SECTION",{});var vo=h($);os=o(vo,"H4",{"data-svelte-h":!0}),r(os)!=="svelte-tk4atl"&&(os.innerHTML=Jn),Lo=a(vo),ns=o(vo,"DIV",{class:!0});var ae=h(ns);Dt=m(ae,!1),ae.forEach(l),vo.forEach(l),Rt=a(e),D=o(e,"SECTION",{});var xo=h(D);as=o(xo,"H4",{"data-svelte-h":!0}),r(as)!=="svelte-1afqa9a"&&(as.innerHTML=Kn),To=a(xo),es=o(xo,"DIV",{class:!0});var ee=h(es);Ut=m(ee,!1),ee.forEach(l),xo.forEach(l),Vt=a(e),v=o(e,"SECTION",{});var g=h(v);ls=o(g,"H3",{"data-svelte-h":!0}),r(ls)!=="svelte-e2dljt"&&(ls.innerHTML=sa),Co=a(g),rs=o(g,"P",{"data-svelte-h":!0}),r(rs)!=="svelte-qilg0g"&&(rs.textContent=ta),Ho=a(g),is=o(g,"P",{"data-svelte-h":!0}),r(is)!=="svelte-1fkty7z"&&(is.innerHTML=oa),Mo=a(g),ps=o(g,"P",{"data-svelte-h":!0}),r(ps)!=="svelte-1516jut"&&(ps.innerHTML=na),Io=a(g),cs=o(g,"P",{"data-svelte-h":!0}),r(cs)!=="svelte-acohh"&&(cs.innerHTML=aa),So=a(g),ks=o(g,"P",{"data-svelte-h":!0}),r(ks)!=="svelte-14ul0ue"&&(ks.innerHTML=ea),qo=a(g),hs=o(g,"DIV",{class:!0});var le=h(hs);Ot=m(le,!1),le.forEach(l),Eo=a(g),ys=o(g,"P",{"data-svelte-h":!0}),r(ys)!=="svelte-11e0jqc"&&(ys.innerHTML=la),Po=a(g),vs=o(g,"DIV",{class:!0});var re=h(vs);jt=m(re,!1),re.forEach(l),$o=a(g),ds=o(g,"P",{"data-svelte-h":!0}),r(ds)!=="svelte-1ysbvas"&&(ds.textContent=ra),Do=a(g),xs=o(g,"DIV",{class:!0});var ie=h(xs);zt=m(ie,!1),ie.forEach(l),Ro=a(g),us=o(g,"P",{"data-svelte-h":!0}),r(us)!=="svelte-ebleox"&&(us.innerHTML=ia),g.forEach(l),At=a(e),y=o(e,"SECTION",{});var x=h(y);fs=o(x,"H3",{"data-svelte-h":!0}),r(fs)!=="svelte-21cd82"&&(fs.innerHTML=pa),Uo=a(x),ms=o(x,"P",{"data-svelte-h":!0}),r(ms)!=="svelte-5nxcfv"&&(ms.textContent=ca),Vo=a(x),ws=o(x,"P",{"data-svelte-h":!0}),r(ws)!=="svelte-1qpladc"&&(ws.innerHTML=ka),Oo=a(x),gs=o(x,"P",{"data-svelte-h":!0}),r(gs)!=="svelte-17uyj95"&&(gs.innerHTML=ha),jo=a(x),_s=o(x,"DIV",{class:!0});var pe=h(_s);Nt=m(pe,!1),pe.forEach(l),zo=a(x),bs=o(x,"P",{"data-svelte-h":!0}),r(bs)!=="svelte-xt4632"&&(bs.textContent=ya),Ao=a(x),Ls=o(x,"DIV",{class:!0});var ce=h(Ls);Bt=m(ce,!1),ce.forEach(l),No=a(x),Ts=o(x,"P",{"data-svelte-h":!0}),r(Ts)!=="svelte-114vew4"&&(Ts.textContent=va),Bo=a(x),Cs=o(x,"DIV",{class:!0});var ke=h(Cs);Gt=m(ke,!1),ke.forEach(l),Go=a(x),Hs=o(x,"P",{"data-svelte-h":!0}),r(Hs)!=="svelte-1w28qob"&&(Hs.innerHTML=da),Xo=a(x),Ms=o(x,"P",{"data-svelte-h":!0}),r(Ms)!=="svelte-palduf"&&(Ms.innerHTML=xa),Fo=a(x),Is=o(x,"DIV",{class:!0});var he=h(Is);Xt=m(he,!1),he.forEach(l),Wo=a(x),Ss=o(x,"P",{"data-svelte-h":!0}),r(Ss)!=="svelte-12u4krf"&&(Ss.innerHTML=ua),Qo=a(x),qs=o(x,"P",{"data-svelte-h":!0}),r(qs)!=="svelte-1gl2rfj"&&(qs.textContent=fa),x.forEach(l),Ft=a(e),p=o(e,"SECTION",{});var k=h(p);Es=o(k,"H3",{"data-svelte-h":!0}),r(Es)!=="svelte-1abduaz"&&(Es.innerHTML=ma),Yo=a(k),Ps=o(k,"P",{"data-svelte-h":!0}),r(Ps)!=="svelte-h8wutn"&&(Ps.innerHTML=wa),Zo=a(k),$s=o(k,"DIV",{class:!0});var ye=h($s);Wt=m(ye,!1),ye.forEach(l),Jo=a(k),Ds=o(k,"P",{"data-svelte-h":!0}),r(Ds)!=="svelte-17siw44"&&(Ds.innerHTML=ga),Ko=a(k),Rs=o(k,"P",{"data-svelte-h":!0}),r(Rs)!=="svelte-12x49r9"&&(Rs.textContent=_a),sn=a(k),Us=o(k,"DIV",{class:!0});var ve=h(Us);Qt=m(ve,!1),ve.forEach(l),tn=a(k),Vs=o(k,"P",{"data-svelte-h":!0}),r(Vs)!=="svelte-krg90d"&&(Vs.textContent=ba),on=a(k),Os=o(k,"DIV",{class:!0});var de=h(Os);Yt=m(de,!1),de.forEach(l),nn=a(k),js=o(k,"P",{"data-svelte-h":!0}),r(js)!=="svelte-1tz4k0u"&&(js.textContent=La),an=a(k),zs=o(k,"P",{"data-svelte-h":!0}),r(zs)!=="svelte-rv9brz"&&(zs.innerHTML=Ta),en=a(k),As=o(k,"P",{"data-svelte-h":!0}),r(As)!=="svelte-1k2ijlq"&&(As.innerHTML=Ca),ln=a(k),Ns=o(k,"DIV",{class:!0});var xe=h(Ns);Zt=m(xe,!1),xe.forEach(l),rn=a(k),Bs=o(k,"P",{"data-svelte-h":!0}),r(Bs)!=="svelte-pwijrb"&&(Bs.textContent=Ha),pn=a(k),Gs=o(k,"DIV",{class:!0});var ue=h(Gs);Jt=m(ue,!1),ue.forEach(l),cn=a(k),Xs=o(k,"P",{"data-svelte-h":!0}),r(Xs)!=="svelte-5q29f1"&&(Xs.textContent=Ma),kn=a(k),Fs=o(k,"P",{"data-svelte-h":!0}),r(Fs)!=="svelte-17adrhy"&&(Fs.textContent=Ia),hn=a(k),Ws=o(k,"P",{"data-svelte-h":!0}),r(Ws)!=="svelte-6z5r66"&&(Ws.innerHTML=Sa),yn=a(k),Qs=o(k,"DIV",{class:!0});var fe=h(Qs);Kt=m(fe,!1),fe.forEach(l),vn=a(k),Ys=o(k,"P",{"data-svelte-h":!0}),r(Ys)!=="svelte-14fkv4f"&&(Ys.innerHTML=qa),dn=a(k),Zs=o(k,"DIV",{class:!0});var me=h(Zs);so=m(me,!1),me.forEach(l),xn=a(k),Js=o(k,"P",{"data-svelte-h":!0}),r(Js)!=="svelte-oqch0t"&&(Js.textContent=Ea),k.forEach(l),to=a(e),d=o(e,"SECTION",{});var _=h(d);Ks=o(_,"H3",{"data-svelte-h":!0}),r(Ks)!=="svelte-12g2d5d"&&(Ks.innerHTML=Pa),un=a(_),st=o(_,"P",{"data-svelte-h":!0}),r(st)!=="svelte-1p3wu9t"&&(st.textContent=$a),fn=a(_),tt=o(_,"P",{"data-svelte-h":!0}),r(tt)!=="svelte-1dqdosv"&&(tt.innerHTML=Da),mn=a(_),ot=o(_,"P",{"data-svelte-h":!0}),r(ot)!=="svelte-1dlrxjc"&&(ot.innerHTML=Ra),wn=a(_),nt=o(_,"DIV",{class:!0});var we=h(nt);oo=m(we,!1),we.forEach(l),gn=a(_),at=o(_,"P",{"data-svelte-h":!0}),r(at)!=="svelte-1w1afzo"&&(at.textContent=Ua),_n=a(_),et=o(_,"DIV",{class:!0});var ge=h(et);no=m(ge,!1),ge.forEach(l),bn=a(_),lt=o(_,"P",{"data-svelte-h":!0}),r(lt)!=="svelte-viun1c"&&(lt.innerHTML=Va),Ln=a(_),rt=o(_,"P",{"data-svelte-h":!0}),r(rt)!=="svelte-l4nu70"&&(rt.textContent=Oa),Tn=a(_),it=o(_,"DIV",{class:!0});var _e=h(it);ao=m(_e,!1),_e.forEach(l),Cn=a(_),pt=o(_,"P",{"data-svelte-h":!0}),r(pt)!=="svelte-57qcfr"&&(pt.innerHTML=ja),Hn=a(_),ct=o(_,"DIV",{class:!0});var be=h(ct);eo=m(be,!1),be.forEach(l),_.forEach(l),lo=a(e),N=o(e,"SECTION",{"data-svelte-h":!0}),r(N)!=="svelte-1951tuw"&&(N.innerHTML=za),ro=a(e),B=o(e,"SECTION",{"data-svelte-h":!0}),r(B)!=="svelte-10374md"&&(B.innerHTML=Aa),io=a(e),C=o(e,"SECTION",{});var E=h(C);kt=o(E,"H3",{"data-svelte-h":!0}),r(kt)!=="svelte-115wrix"&&(kt.innerHTML=Na),Mn=a(E),ht=o(E,"P",{"data-svelte-h":!0}),r(ht)!=="svelte-zyn3of"&&(ht.innerHTML=Ba),In=a(E),yt=o(E,"P",{"data-svelte-h":!0}),r(yt)!=="svelte-1o32elg"&&(yt.innerHTML=Ga),Sn=a(E),vt=o(E,"P",{"data-svelte-h":!0}),r(vt)!=="svelte-wy7czm"&&(vt.textContent=Xa),qn=a(E),dt=o(E,"DIV",{class:!0});var Le=h(dt);po=m(Le,!1),Le.forEach(l),E.forEach(l),co=a(e),T=o(e,"SECTION",{});var H=h(T);xt=o(H,"H4",{"data-svelte-h":!0}),r(xt)!=="svelte-79hcqw"&&(xt.innerHTML=Fa),En=a(H),ut=o(H,"P",{"data-svelte-h":!0}),r(ut)!=="svelte-py160i"&&(ut.innerHTML=Wa),Pn=a(H),ft=o(H,"P",{"data-svelte-h":!0}),r(ft)!=="svelte-zercpb"&&(ft.innerHTML=Qa),$n=a(H),mt=o(H,"P",{"data-svelte-h":!0}),r(mt)!=="svelte-1e7o1ck"&&(mt.innerHTML=Ya),Dn=a(H),wt=o(H,"P",{"data-svelte-h":!0}),r(wt)!=="svelte-mve6ot"&&(wt.innerHTML=Za),Rn=a(H),gt=o(H,"DIV",{class:!0});var Te=h(gt);ko=m(Te,!1),Te.forEach(l),Un=a(H),_t=o(H,"P",{"data-svelte-h":!0}),r(_t)!=="svelte-nug7tv"&&(_t.innerHTML=Ja),H.forEach(l),ho=a(e),G=o(e,"SECTION",{"data-svelte-h":!0}),r(G)!=="svelte-1kylpbr"&&(G.innerHTML=Ka),yo=a(e),X=o(e,"SECTION",{"data-svelte-h":!0}),r(X)!=="svelte-96jxi5"&&(X.innerHTML=se),this.h()},h(){u(M,"class","twitter-tweet"),qt.a=null,u(Z,"class","code-section"),Et.a=null,u(K,"class","code-section"),Pt.a=null,u(ss,"class","code-section"),Dt.a=null,u(ns,"class","code-section"),Ut.a=null,u(es,"class","code-section"),Ot.a=null,u(hs,"class","code-section"),jt.a=null,u(vs,"class","code-section"),zt.a=null,u(xs,"class","code-section"),Nt.a=null,u(_s,"class","code-section"),Bt.a=null,u(Ls,"class","code-section"),Gt.a=null,u(Cs,"class","code-section"),Xt.a=null,u(Is,"class","code-section"),Wt.a=null,u($s,"class","code-section"),Qt.a=null,u(Us,"class","code-section"),Yt.a=null,u(Os,"class","code-section"),Zt.a=null,u(Ns,"class","code-section"),Jt.a=null,u(Gs,"class","code-section"),Kt.a=null,u(Qs,"class","code-section"),so.a=null,u(Zs,"class","code-section"),oo.a=null,u(nt,"class","code-section"),no.a=null,u(et,"class","code-section"),ao.a=null,u(it,"class","code-section"),eo.a=null,u(ct,"class","code-section"),po.a=null,u(dt,"class","code-section"),ko.a=null,u(gt,"class","code-section")},m(e,i){c(e,w,i),c(e,S,i),c(e,M,i),c(e,I,i),c(e,q,i),c(e,bt,i),c(e,R,i),c(e,Lt,i),c(e,U,i),c(e,Tt,i),c(e,V,i),c(e,Ct,i),c(e,O,i),c(e,Ht,i),c(e,j,i),c(e,Mt,i),c(e,z,i),c(e,It,i),c(e,A,i),c(e,St,i),c(e,b,i),s(b,W),s(b,uo),s(b,Q),s(b,fo),s(b,Y),s(b,mo),s(b,Z),qt.m(Ve,Z),s(b,wo),s(b,J),s(b,go),s(b,K),Et.m(Oe,K),s(b,_o),s(b,ss),Pt.m(je,ss),s(b,bo),s(b,ts),c(e,$t,i),c(e,$,i),s($,os),s($,Lo),s($,ns),Dt.m(ze,ns),c(e,Rt,i),c(e,D,i),s(D,as),s(D,To),s(D,es),Ut.m(Ae,es),c(e,Vt,i),c(e,v,i),s(v,ls),s(v,Co),s(v,rs),s(v,Ho),s(v,is),s(v,Mo),s(v,ps),s(v,Io),s(v,cs),s(v,So),s(v,ks),s(v,qo),s(v,hs),Ot.m(Ne,hs),s(v,Eo),s(v,ys),s(v,Po),s(v,vs),jt.m(Be,vs),s(v,$o),s(v,ds),s(v,Do),s(v,xs),zt.m(Ge,xs),s(v,Ro),s(v,us),c(e,At,i),c(e,y,i),s(y,fs),s(y,Uo),s(y,ms),s(y,Vo),s(y,ws),s(y,Oo),s(y,gs),s(y,jo),s(y,_s),Nt.m(Xe,_s),s(y,zo),s(y,bs),s(y,Ao),s(y,Ls),Bt.m(Fe,Ls),s(y,No),s(y,Ts),s(y,Bo),s(y,Cs),Gt.m(We,Cs),s(y,Go),s(y,Hs),s(y,Xo),s(y,Ms),s(y,Fo),s(y,Is),Xt.m(Qe,Is),s(y,Wo),s(y,Ss),s(y,Qo),s(y,qs),c(e,Ft,i),c(e,p,i),s(p,Es),s(p,Yo),s(p,Ps),s(p,Zo),s(p,$s),Wt.m(Ye,$s),s(p,Jo),s(p,Ds),s(p,Ko),s(p,Rs),s(p,sn),s(p,Us),Qt.m(Ze,Us),s(p,tn),s(p,Vs),s(p,on),s(p,Os),Yt.m(Je,Os),s(p,nn),s(p,js),s(p,an),s(p,zs),s(p,en),s(p,As),s(p,ln),s(p,Ns),Zt.m(Ke,Ns),s(p,rn),s(p,Bs),s(p,pn),s(p,Gs),Jt.m(sl,Gs),s(p,cn),s(p,Xs),s(p,kn),s(p,Fs),s(p,hn),s(p,Ws),s(p,yn),s(p,Qs),Kt.m(tl,Qs),s(p,vn),s(p,Ys),s(p,dn),s(p,Zs),so.m(ol,Zs),s(p,xn),s(p,Js),c(e,to,i),c(e,d,i),s(d,Ks),s(d,un),s(d,st),s(d,fn),s(d,tt),s(d,mn),s(d,ot),s(d,wn),s(d,nt),oo.m(nl,nt),s(d,gn),s(d,at),s(d,_n),s(d,et),no.m(al,et),s(d,bn),s(d,lt),s(d,Ln),s(d,rt),s(d,Tn),s(d,it),ao.m(el,it),s(d,Cn),s(d,pt),s(d,Hn),s(d,ct),eo.m(ll,ct),c(e,lo,i),c(e,N,i),c(e,ro,i),c(e,B,i),c(e,io,i),c(e,C,i),s(C,kt),s(C,Mn),s(C,ht),s(C,In),s(C,yt),s(C,Sn),s(C,vt),s(C,qn),s(C,dt),po.m(rl,dt),c(e,co,i),c(e,T,i),s(T,xt),s(T,En),s(T,ut),s(T,Pn),s(T,ft),s(T,$n),s(T,mt),s(T,Dn),s(T,wt),s(T,Rn),s(T,gt),ko.m(il,gt),s(T,Un),s(T,_t),c(e,ho,i),c(e,G,i),c(e,yo,i),c(e,X,i)},p:kl,d(e){e&&(l(w),l(S),l(M),l(I),l(q),l(bt),l(R),l(Lt),l(U),l(Tt),l(V),l(Ct),l(O),l(Ht),l(j),l(Mt),l(z),l(It),l(A),l(St),l(b),l($t),l($),l(Rt),l(D),l(Vt),l(v),l(At),l(y),l(Ft),l(p),l(to),l(d),l(lo),l(N),l(ro),l(B),l(io),l(C),l(co),l(T),l(ho),l(G),l(yo),l(X))}}}function zl(F){let w,P;const S=[F[0],Ue];let M={$$slots:{default:[jl]},$$scope:{ctx:F}};for(let L=0;L<S.length;L+=1)M=Vn(M,S[L]);return w=new gl({props:M}),{c(){vl(w.$$.fragment)},l(L){dl(w.$$.fragment,L)},m(L,I){xl(w,L,I),P=!0},p(L,[I]){const q=I&1?wl(S,[I&1&&He(L[0]),I&0&&He(Ue)]):{};I&2&&(q.$$scope={dirty:I,ctx:L}),w.$set(q)},i(L){P||(ul(w.$$.fragment,L),P=!0)},o(L){fl(w.$$.fragment,L),P=!1},d(L){ml(w,L)}}}const Ue={title:"Super Silly Hackathon 2019",date:"2019-12-14T08:00:00Z",lastUpdated:"2019-12-15T15:19:00Z",description:"A quick walkthrough on how I created my pet in the browser for the Super Silly Hackathon 2019.",tags:["JavaScript","hackathon"],series:"Hackathon Projects",label:"blog",tableOfContents:[{link:"inspiration",title:"Inspiration?"},{link:"what-can-it-do",title:"What can it do?",nested:[{link:"1-it-runs-away-from-mouse-cursor",title:"1. It runs away from mouse cursor"},{link:"2-it-eats-whatever-you-try-to-type-into-an-input",title:"2. It eats whatever you try to type into an input"},{link:"3-it-annihilates-the-buttons-you-hover-onto",title:"3. It annihilates the buttons you hover onto"}]},{link:"implementation",title:"Implementation",nested:[{link:"chrome-extension",title:"Chrome Extension",nested:[{link:"1-add-web-accessible-resources-into-the-manifest-json",title:"1. Add  `web_accessible_resources`  into the  `manifest.json`"},{link:"2-prepend-chrome-extension-msg-extension-id-for-the-url",title:"2. Prepend  `chrome-extension://__MSG_@@extension_id__/`  for the URL"}]},{link:"make-it-look-alive",title:"Make it look alive"},{link:"avoid-the-cursor",title:"Avoid the cursor"},{link:"eating-the-characters",title:"Eating the characters"},{link:"annihilate-the-buttons",title:"Annihilate the buttons"}]},{link:"difficulties",title:"Difficulties",nested:[{link:"synchronising-interactions",title:"Synchronising interactions"},{link:"developing-locally",title:"Developing locally",nested:[{link:"postcss-script",title:"PostCSS script"}]}]},{link:"demo",title:"Demo"},{link:"summary",title:"Summary"}]};function Al(F,w,P){return cl("blog",{image:_l}),F.$$set=S=>{P(0,w=Vn(Vn({},w),Ce(S)))},w=Ce(w),[w]}class Wl extends hl{constructor(w){super(),yl(this,w,Al,zl,pl,{})}}export{Wl as component};
