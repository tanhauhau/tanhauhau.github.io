import{s as Ma,d as yn,e as Pa,f as oa,n as Ia}from"../chunks/scheduler.85ImRbsk.js";import{S as Ra,i as qa,m as $a,n as ja,o as Ea,t as Ua,a as Da,p as Oa,e as s,s as a,H as x,c as n,q as i,h as l,d as u,r as g,g as h,u as m,j as f,k as t}from"../chunks/index.JMRAb4ib.js";import{g as Aa,a as aa}from"../chunks/code-snippet.p32Anx_S.js";import{T as Va}from"../chunks/TalkLayout.ZMCHEOAX.js";const za=""+new URL("../assets/jira-layout-2.hGpK1YjT.webp",import.meta.url).href,Wa=""+new URL("../assets/jira-layout-2.EvvHgvmD.webp",import.meta.url).href,Ga=""+new URL("../assets/jira-layout-2.GnJFfVX7.png",import.meta.url).href,la=""+new URL("../assets/jira-layout-2.-K0PbU6v.png",import.meta.url).href,Ba=""+new URL("../assets/jira-layout-1.dtof1G1k.webp",import.meta.url).href,Ja=""+new URL("../assets/jira-layout-1.ncf9DmiC.webp",import.meta.url).href,Ka=""+new URL("../assets/jira-layout-1.yX6SEb2J.png",import.meta.url).href,ia=""+new URL("../assets/jira-layout-1.GeSfntIz.png",import.meta.url).href,Fa=""+new URL("../assets/scrum_active.njfGHE-T.webp",import.meta.url).href,Xa=""+new URL("../assets/scrum_active.hJxuDKAr.webp",import.meta.url).href,Na=""+new URL("../assets/scrum_active.CoWzMAai.png",import.meta.url).href,ra=""+new URL("../assets/scrum_active.fJLDt0Cu.png",import.meta.url).href,Ya=""+new URL("../assets/discord-chat1.ie95peUB.webp",import.meta.url).href,Qa=""+new URL("../assets/discord-chat1.tF9GKWz_.webp",import.meta.url).href,Za=""+new URL("../assets/discord-chat1._gK71yR-.png",import.meta.url).href,pa=""+new URL("../assets/discord-chat1.JFSIiFhD.png",import.meta.url).href,tl=""+new URL("../assets/owasp.mzq6wCUg.webp",import.meta.url).href,el=""+new URL("../assets/owasp.bOcx0Wby.webp",import.meta.url).href,sl=""+new URL("../assets/owasp.AwTw9o45.png",import.meta.url).href,ca=""+new URL("../assets/owasp.RGvhZEhg.png",import.meta.url).href,nl=""+new URL("../assets/hacktober-swags.XmZIT2Cr.webp",import.meta.url).href,ol=""+new URL("../assets/hacktober-swags.wAAe6gR-.webp",import.meta.url).href,al=""+new URL("../assets/hacktober-swags.J_OvaEpe.jpeg",import.meta.url).href,ha=""+new URL("../assets/hacktober-swags.VsxVHElV.jpeg",import.meta.url).href,ll=""+new URL("../assets/hacktoberfest.olt4moTa.webp",import.meta.url).href,il=""+new URL("../assets/hacktoberfest.Mcr4B_BA.webp",import.meta.url).href,rl=""+new URL("../assets/hacktoberfest.mTpX_p-I.png",import.meta.url).href,ka=""+new URL("../assets/hacktoberfest.tCGrxsGM.png",import.meta.url).href,pl=""+new URL("../assets/hero-twitter.-vSwGHGv.jpg",import.meta.url).href;function cl(H){let d,b="It's Friday evening, so I've decided to go light and easy, and share with y'all 2 interesting anecdote while I was working on Svelte.",w,o,y,_='<a href="#first-story" id="first-story">First Story</a>',T,S,un='The first story started with <a href="https://hacktoberfest.digitalocean.com/" rel="nofollow">Hacktoberfest</a>.',Re,M,xn=`<span style="display: block; position: relative; padding-top: 35.100%; width: 100%;"><picture><source type="image/webp" srcset="${il}, ${ll} 2x"/><img src="${ka}" srcset="${ka}, ${rl} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="hacktoberfest"/></picture></span>`,qe,P,gn="Anyone knows about Hacktoberfest? Anyone finished Hacktoberfest?",$e,I,mn='So for to benefit of those who don&#39;t know about Hacktoberfest, Hacktoberfest is an annual event organised by <a href="https://www.digitalocean.com/" rel="nofollow">DigitalOcean</a>, and this year they partnered with <a href="http://dev.to/" rel="nofollow">dev.to</a>.',je,R,fn='So during the month of October, if you managed to make 4 PRs to any public <a href="http://github.com/" rel="nofollow">Github</a> repository, you will get a free T-shirts and swags.',Ee,q,wn=`<span style="display: block; position: relative; padding-top: 100.083%; width: 100%;"><picture><source type="image/webp" srcset="${ol}, ${nl} 2x"/><img src="${ha}" srcset="${ha}, ${al} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="hacktoberfest swags" title="Hacktoberfest T-shirt and swags"/></picture></span>`,Ue,$,_n='So this year Hacktoberfest, I was working on this frontend framework called <a href="https://svelte.dev/" rel="nofollow">Svelte</a>.',De,j,bn='If you never heard about Svelte, I recommend you to watch Rich Harris talk on <a href="https://www.youtube.com/watch?v=AdNJ3fydeao" rel="nofollow">&quot;Rethinking Reactivity&quot;</a>.',Oe,E,Cn="So what so special about this new frontend framework?",Ae,U,Ln="Well, firstly, a svelte component is a single file component, just like Vue. You have your script, styles and HTML elements all in one place:",Ve,D,ve,da=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> greeting </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello world!&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;&#123;greeting&#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ze,O,Hn="Secondly, Svelte is a compiler. It compiles the single file component into simple JavaScript statements like these:",We,A,de,ya=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> greeting </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello world!&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">text</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createTextNode</span><span style="color: var(--shiki-color-text)">(greeting);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(div);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(text);</span></span></code></pre>`,Ge,V,Tn="It is the simplest way of creating DOM nodes, not much overhead code, no work loop like React, nothing.",Be,z,Sn="The benefit of doing this is that the bundle size can be very small, and it can run without much runtime overheads.",Je,W,Mn="However, if you look at a slightly more complex component like the one below:",Ke,G,ye,ua=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> greeting </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello world!&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Header&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Lorem ipsum&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;&#123;greeting&#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Fe,B,Pn="it gets compiled into more code:",Xe,J,ue,xa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> greeting </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div2</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Header&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div4</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div4</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Lorem ipsum&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div5</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">text</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createTextNode</span><span style="color: var(--shiki-color-text)">(greeting);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(div1);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div1</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(div2);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div3</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(div4);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div4</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(div5);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div1</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(div3);</span></span></code></pre>`,Ne,K,In="Which is natural right?",Ye,F,Rn='But, when I was fiddling the <a href="http://svelte.dev/repl" rel="nofollow">Svelte REPL</a>, I was looking at the code, thinking to myself, in this component, greeting has never changed, so there&#39;s no need for any reactivity, so why should we still build element one by one, why not just use <code class="inline">innerHTML</code>?',Qe,X,xe,ga=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> greeting </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-color-text)">.innerHTML </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)"> &lt;div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">   &lt;div&gt;Header&lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">   &lt;div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">     &lt;div&gt;Lorem ipsum&lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">     &lt;div&gt;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">greeting</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">   &lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)"> &lt;/div&gt;&#96;</span></span></code></pre>`,Ze,N,qn='So, that was what I did, and I <a href="https://github.com/sveltejs/svelte/pull/3808" rel="nofollow">submitted an PR</a>.',ts,Y,$n='I was ecstatic when it got merged, and <a href="https://github.com/sveltejs/svelte/pull/3808#issuecomment-546704569" rel="nofollow">Rich commented &quot;Damn, this is nice!&quot;</a>.',es,Q,jn='But little did I know a few days later, someone commented on the PR <a href="https://github.com/sveltejs/svelte/pull/3808#issuecomment-546723297" rel="nofollow">about opening up to XSS risk</a>.',ss,Z,En="XSS (Cross-Site Scripting)? What?!",ns,tt,Un="So imagine instead of a friendly greeting, someone with a malicious intent changed it to something else:",os,et,ge,ma=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> greeting </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;div onclick=&quot;alert(&amp;quot;oh no&amp;quot;);&quot;&gt;click me&lt;/div&gt;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-color-text)">.innerHTML </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)"> &lt;div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">   &lt;div&gt;Header&lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">   &lt;div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">     &lt;div&gt;Lorem ipsum&lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">     &lt;div&gt;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">greeting</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">   &lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)"> &lt;/div&gt;&#96;</span></span></code></pre>`,as,st,Dn="Then you would have a malicious click me button on the screen! 😱",ls,nt,On='So I googled, and I found this <a href="https://github.com/OWASP/CheatSheetSeries" rel="nofollow">Open Web Application Security Project (OWASP)</a>, which they have a long list of <a href="https://github.com/OWASP/CheatSheetSeries/tree/master/cheatsheets" rel="nofollow">cheatsheets about and how to prevent web vulnerability</a>.',is,ot,An=`<span style="display: block; position: relative; padding-top: 77.125%; width: 100%;"><picture><source type="image/webp" srcset="${el}, ${tl} 2x"/><img src="${ca}" srcset="${ca}, ${sl} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="OWASP"/></picture></span>`,rs,at,Vn='I read up on them and got to learn more about methods to prevent XSS, and so I <a href="https://github.com/sveltejs/svelte/pull/3816" rel="nofollow">made another PR</a>.',ps,lt,zn="And it got fixed! Finally!",cs,it,Wn="Or is it? 🤔",hs,rt,Gn='Well in my new PR, I did not revert all the changes I made previously, I still attempt to have some optimisation with static content. So instead of using <code class="inline">innerHTML</code>, I used <code class="inline">textContent</code>, which is safe for XSS attacks.',ks,pt,me,fa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of this,</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$0</span><span style="color: var(--shiki-color-text)">.innerHTML </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&amp;amp;&amp;gt;&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// it is now this:</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$0</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&amp;amp;&amp;gt;&#39;</span></span></code></pre>`,vs,ct,Bn="So, although they looked similar, but when it got executed, they are different:",ds,ht,fe,wa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- with innerHTML --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;&amp;&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- with textContent --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;&amp;amp;&amp;gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ys,kt,Jn='<code class="inline">textContent</code> will not unescape the string content.',us,vt,Kn='Someone found it and raised an issue, so I <a href="https://github.com/sveltejs/svelte/pull/3916" rel="nofollow">made another PR</a>.',xs,dt,Fn="So, that's my first story, of how I innocently trying to optimise the bundle, ending up creating a XSS risk, and how I made multiple PRs to fixed them.",gs,yt,Xn="Before I moved on to the 2nd story, I have a few takeaways I would like to share:",ms,ut,Nn='<li><p>As a React developer, I have been so used to have React taking care of the XSS vulnerability for me. As long as i dont use <code class="inline">dangeourslySetInnerHtml</code>, I&#39;m all good. Therefore, it has never occur to me that it is still a potential threat.</p></li> <li><p>I find it interesting to work on technologies/stack that we don&#39;t use it at work during free time. Having to work on 1 tech stack full time during the day, I felt like I&#39;ve been trapped inside my own bubble, with no idea what is happening outside. So while working on Svelte, I learned a lot of things that I could never got it from work.</p></li>',we,c,xt,Yn='<a href="#second-story" id="second-story">Second Story</a>',fs,gt,Qn="The second story, is about connecting the dots.",ws,mt,Zn="In Svelte, CSS is scoped in the component that you are writing. In this example:",_s,ft,_e,_a=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">Component</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,bs,wt,to='the <code class="inline">padding: 5px</code> will only apply to the all the <code class="inline">&lt;div&gt;</code>s written in this component file. Any <code class="inline">&lt;div&gt;</code> inside <code class="inline">&lt;Component /&gt;</code> will not be affected.',Cs,_t,eo="This is great, but it has its shortcoming too.",Ls,bt,so='The problem with this is that, there’s no idiomatic way to override styles in the <code class="inline">&lt;Component /&gt;</code>.',Hs,Ct,no='To achieve scoped CSS, when Svelte compiles the style tags, it converts all the CSS selectors into a hashed version, and replacted it on the element. And there&#39;s no way you can access the hashed CSS selector, let alone passing it into <code class="inline">&lt;Component /&gt;</code> as class name.',Ts,Lt,oo='To override the styles inside <code class="inline">&lt;Component /&gt;</code>, a common solution would be to use the <code class="inline">:global</code> selector:',Ss,Ht,be,ba=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  :global(</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">Component</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Ms,Tt,ao="Which basically forego the benefit of scoped css, and applied it to all inner divs in this component.",Ps,St,lo='One thing I wanted to point out is that, the <code class="inline">&lt;Component /&gt;</code> should have control on what styles can be modified and what cannot be changed.',Is,Mt,io='In React, when we passing in a <code class="inline">className</code>, we kind of have to understand the DOM structure of the <code class="inline">&lt;Component /&gt;</code>, which should be well encapsulated and private to the user.',Rs,Pt,ro='And secondly, any styles you pass in through the <code class="inline">className</code>, could potentially break things unwantedly. The <code class="inline">&lt;Component /&gt;</code> has no control of what could be changed by the user.',Ce,r,It,po='<a href="#css-custom-properties-aka-css-variables" id="css-custom-properties-aka-css-variables">CSS Custom Properties aka CSS Variables</a>',qs,Rt,co="So a better solution that has been proposed, is to use CSS Variables:",$s,qt,Le,Ca=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: Component.svelte --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.header</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--header-padding</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> 5</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-token-constant)">)</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;header&quot;</span><span style="color: var(--shiki-color-text)">&gt;Lorem ipsum&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Lorem ipsum&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,js,$t,ho="You can expose the CSS custom properties you allow to modify, without having to leak out the DOM structure of your component.",Es,jt,ko="You can expose the CSS custom properties as meaningful css variable names, and when you are using it, you can have a fallback if the CSS custom property is not presentavailable, you can have a fallback.",Us,Et,vo='So the user of the <code class="inline">Component</code> can set the custom properties like this:',Ds,Ut,He,La=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.svelte --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">styles</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;--header-padding: 5px;&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   &lt;</span><span style="color: var(--shiki-token-string-expression)">Component</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Os,Dt,yo='So there is a <a href="https://github.com/sveltejs/rfcs/blob/52e20b91ef5b301bd4b3f2a9461b929ac05aca0c/text/0000-style-properties.md" rel="nofollow">RFC proposed</a> along with a sugar syntax to have custom attributes for Svelte components:',As,Ot,Te,Ha=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">Slider</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">bind:value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">min</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string)">&#123;0&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">max</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string)">&#123;100&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">--rail-color</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;black&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">--track-color</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;red&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">/&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- desugars into --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  --rail-color: black;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  --track-color: red;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">Slider</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">bind:value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">min</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string)">&#123;0&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">max</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string)">&#123;100&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Vs,At,uo='But the very problem of this is to have another <code class="inline">&lt;div&gt;</code> element that wasn&#39;t there in the first place, which could break the layout.',zs,Vt,xo='So Rich was asking in the <a href="https://svelte.dev/chat" rel="nofollow">Svelte Discord chat</a> whether is there anyway to have the divs disappear in terms of layout:',Ws,zt,go=`<span style="display: block; position: relative; padding-top: 23.117%; width: 100%;"><picture><source type="image/webp" srcset="${Qa}, ${Ya} 2x"/><img src="${pa}" srcset="${pa}, ${Za} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="discord chat 1"/></picture></span>`,Gs,Wt,mo="That brings me to another dot of my story... which was more than 1 year ago in Shopee, long before RK, where we had weekly sharings in a small meeting room.",Bs,Gt,fo='It was when <a href="https://twitter.com/wgao19" rel="nofollow">Gao Wei</a> did her sharing.',Js,Bt,wo="So this is a normal Jira board:",Ks,Jt,_o=`<span style="display: block; position: relative; padding-top: 60.395%; width: 100%;"><picture><source type="image/webp" srcset="${Xa}, ${Fa} 2x"/><img src="${ra}" srcset="${ra}, ${Na} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Jira board" title="Image from https://confluence.atlassian.com/jirasoftwareserver081/using-active-sprints-970611214.html&quot;"/></picture></span>`,Fs,Kt,bo="But it is not cool enough for cool kids for Wei, so she tried to customise it with CSS.",Xs,Ft,Co="One of the issue with the Jira board is that the columns are fixed width, it doesn't stretch/resize when the ticket title is long.",Ns,Xt,Lo="But it is not an easy feat to resize the width with CSS, where she explained how the complexity of the DOM structure aggravate the problem.",Ys,Nt,Ho='In the Jira board, the header and the swimlane sections are made up of different <code class="inline">div</code> container.',Qs,Yt,To=`<span style="display: block; position: relative; padding-top: 59.395%; width: 100%;"><picture><source type="image/webp" srcset="${Ja}, ${Ba} 2x"/><img src="${ia}" srcset="${ia}, ${Ka} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="jira layout 1"/></picture></span>`,Zs,Qt,So='And after a few nested <code class="inline">div</code>s, you get <code class="inline">div</code> for each column:',tn,Zt,Mo=`<span style="display: block; position: relative; padding-top: 59.442%; width: 100%;"><picture><source type="image/webp" srcset="${Wa}, ${za} 2x"/><img src="${la}" srcset="${la}, ${Ga} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="jira layout 2"/></picture></span>`,en,te,Po="So, in the end, it looks something like this in the DOM tree structure:",sn,ee,Se,Ta=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;header-group&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;headers&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;Header 1&lt;/</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;Header 2&lt;/</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;Header 3&lt;/</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;swimlane&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;swimlane header&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;columns&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;Content 1&lt;/</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;Content 2&lt;/</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;Content 3&lt;/</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,nn,se,Io='So how are you going to automatically resize both <code class="inline">Content 1</code> and <code class="inline">Header 1</code> based on their content, and maintain the same width for both of them?',on,ne,Ro='You can do it with <a href="https://css-tricks.com/complete-guide-table-element/" rel="nofollow"><code class="inline">display: table-column</code></a>, but there&#39;s too many intermediate DOM elements between the cells and the whole container.',an,oe,qo="What she needs is a magical CSS values to make the intermediate DOM elements disappear in terms of layout.",ln,ae,$o="And she revealed her magic secret:",rn,le,Me,Sa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">display</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">contents</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pn,ie,jo='In the same example, say if you apply a <code class="inline">display: flex</code> to the <code class="inline">.header-group</code>, the <code class="inline">.header-group</code> only got 1 flex item right? If you put <code class="inline">display: contents</code> to the <code class="inline">.headers</code>, it will disappear in terms of layout, and now, to <code class="inline">.header-group</code>, it has 3 flex items, the 3 header <code class="inline">li</code>s.',cn,re,Eo='The <code class="inline">display: contents</code> was so magical, that somehow it etched into me since.',hn,pe,Uo='So I proposed it to Rich in the chat, and now it is part of the proposed solution in the <a href="https://github.com/sveltejs/rfcs/blob/52e20b91ef5b301bd4b3f2a9461b929ac05aca0c/text/0000-style-properties.md" rel="nofollow">RFC</a>.',kn,ce,Do="So I would like to end my stories with one of my favourite quote, from Steve Jobs,",vn,he,Oo="<p>You can&#39;t connect the dots looking forward, you can only connect them looking backwards.</p> <p>So you have to trust that the dots will somehow connect in your future.</p>",dn,ke,Ao="So I would like to end the sharing with 2 shoutouts:",Pe,C,Vo='<h3><a href="#please-do-sharing-more-often" id="please-do-sharing-more-often">Please do sharing more often.</a></h3> <p>What you have learned or tried, ever small or simple, it maybe useful for someone in the audience in ways you can never imagine.</p> <p><em>You can&#39;t connect the dots looking forward.</em></p>',Ie,L,zo='<h3><a href="#please-do-participate-in-rk-more-often" id="please-do-participate-in-rk-more-often">Please do participate in RK more often</a></h3> <p>Our weekly internal RK is not mandatory. But still, make an effort to join us every week. You never know what you&#39;ve just learned may be useful to you some day in the future.</p> <p><em>You got to trust the dots will somehow connect in your future</em>.</p>';return{c(){d=s("p"),d.textContent=b,w=a(),o=s("section"),y=s("h2"),y.innerHTML=_,T=a(),S=s("p"),S.innerHTML=un,Re=a(),M=s("p"),M.innerHTML=xn,qe=a(),P=s("p"),P.textContent=gn,$e=a(),I=s("p"),I.innerHTML=mn,je=a(),R=s("p"),R.innerHTML=fn,Ee=a(),q=s("p"),q.innerHTML=wn,Ue=a(),$=s("p"),$.innerHTML=_n,De=a(),j=s("p"),j.innerHTML=bn,Oe=a(),E=s("p"),E.textContent=Cn,Ae=a(),U=s("p"),U.textContent=Ln,Ve=a(),D=s("div"),ve=new x(!1),ze=a(),O=s("p"),O.textContent=Hn,We=a(),A=s("div"),de=new x(!1),Ge=a(),V=s("p"),V.textContent=Tn,Be=a(),z=s("p"),z.textContent=Sn,Je=a(),W=s("p"),W.textContent=Mn,Ke=a(),G=s("div"),ye=new x(!1),Fe=a(),B=s("p"),B.textContent=Pn,Xe=a(),J=s("div"),ue=new x(!1),Ne=a(),K=s("p"),K.textContent=In,Ye=a(),F=s("p"),F.innerHTML=Rn,Qe=a(),X=s("div"),xe=new x(!1),Ze=a(),N=s("p"),N.innerHTML=qn,ts=a(),Y=s("p"),Y.innerHTML=$n,es=a(),Q=s("p"),Q.innerHTML=jn,ss=a(),Z=s("p"),Z.textContent=En,ns=a(),tt=s("p"),tt.textContent=Un,os=a(),et=s("div"),ge=new x(!1),as=a(),st=s("p"),st.textContent=Dn,ls=a(),nt=s("p"),nt.innerHTML=On,is=a(),ot=s("p"),ot.innerHTML=An,rs=a(),at=s("p"),at.innerHTML=Vn,ps=a(),lt=s("p"),lt.textContent=zn,cs=a(),it=s("p"),it.textContent=Wn,hs=a(),rt=s("p"),rt.innerHTML=Gn,ks=a(),pt=s("div"),me=new x(!1),vs=a(),ct=s("p"),ct.textContent=Bn,ds=a(),ht=s("div"),fe=new x(!1),ys=a(),kt=s("p"),kt.innerHTML=Jn,us=a(),vt=s("p"),vt.innerHTML=Kn,xs=a(),dt=s("p"),dt.textContent=Fn,gs=a(),yt=s("p"),yt.textContent=Xn,ms=a(),ut=s("ul"),ut.innerHTML=Nn,we=a(),c=s("section"),xt=s("h2"),xt.innerHTML=Yn,fs=a(),gt=s("p"),gt.textContent=Qn,ws=a(),mt=s("p"),mt.textContent=Zn,_s=a(),ft=s("div"),_e=new x(!1),bs=a(),wt=s("p"),wt.innerHTML=to,Cs=a(),_t=s("p"),_t.textContent=eo,Ls=a(),bt=s("p"),bt.innerHTML=so,Hs=a(),Ct=s("p"),Ct.innerHTML=no,Ts=a(),Lt=s("p"),Lt.innerHTML=oo,Ss=a(),Ht=s("div"),be=new x(!1),Ms=a(),Tt=s("p"),Tt.textContent=ao,Ps=a(),St=s("p"),St.innerHTML=lo,Is=a(),Mt=s("p"),Mt.innerHTML=io,Rs=a(),Pt=s("p"),Pt.innerHTML=ro,Ce=a(),r=s("section"),It=s("h3"),It.innerHTML=po,qs=a(),Rt=s("p"),Rt.textContent=co,$s=a(),qt=s("div"),Le=new x(!1),js=a(),$t=s("p"),$t.textContent=ho,Es=a(),jt=s("p"),jt.textContent=ko,Us=a(),Et=s("p"),Et.innerHTML=vo,Ds=a(),Ut=s("div"),He=new x(!1),Os=a(),Dt=s("p"),Dt.innerHTML=yo,As=a(),Ot=s("div"),Te=new x(!1),Vs=a(),At=s("p"),At.innerHTML=uo,zs=a(),Vt=s("p"),Vt.innerHTML=xo,Ws=a(),zt=s("p"),zt.innerHTML=go,Gs=a(),Wt=s("p"),Wt.textContent=mo,Bs=a(),Gt=s("p"),Gt.innerHTML=fo,Js=a(),Bt=s("p"),Bt.textContent=wo,Ks=a(),Jt=s("p"),Jt.innerHTML=_o,Fs=a(),Kt=s("p"),Kt.textContent=bo,Xs=a(),Ft=s("p"),Ft.textContent=Co,Ns=a(),Xt=s("p"),Xt.textContent=Lo,Ys=a(),Nt=s("p"),Nt.innerHTML=Ho,Qs=a(),Yt=s("p"),Yt.innerHTML=To,Zs=a(),Qt=s("p"),Qt.innerHTML=So,tn=a(),Zt=s("p"),Zt.innerHTML=Mo,en=a(),te=s("p"),te.textContent=Po,sn=a(),ee=s("div"),Se=new x(!1),nn=a(),se=s("p"),se.innerHTML=Io,on=a(),ne=s("p"),ne.innerHTML=Ro,an=a(),oe=s("p"),oe.textContent=qo,ln=a(),ae=s("p"),ae.textContent=$o,rn=a(),le=s("div"),Me=new x(!1),pn=a(),ie=s("p"),ie.innerHTML=jo,cn=a(),re=s("p"),re.innerHTML=Eo,hn=a(),pe=s("p"),pe.innerHTML=Uo,kn=a(),ce=s("p"),ce.textContent=Do,vn=a(),he=s("blockquote"),he.innerHTML=Oo,dn=a(),ke=s("p"),ke.textContent=Ao,Pe=a(),C=s("section"),C.innerHTML=Vo,Ie=a(),L=s("section"),L.innerHTML=zo,this.h()},l(v){d=n(v,"P",{"data-svelte-h":!0}),i(d)!=="svelte-vvnglp"&&(d.textContent=b),w=l(v),o=n(v,"SECTION",{});var e=u(o);y=n(e,"H2",{"data-svelte-h":!0}),i(y)!=="svelte-12617wx"&&(y.innerHTML=_),T=l(e),S=n(e,"P",{"data-svelte-h":!0}),i(S)!=="svelte-zdmlx9"&&(S.innerHTML=un),Re=l(e),M=n(e,"P",{"data-svelte-h":!0}),i(M)!=="svelte-4nj8eg"&&(M.innerHTML=xn),qe=l(e),P=n(e,"P",{"data-svelte-h":!0}),i(P)!=="svelte-k829a5"&&(P.textContent=gn),$e=l(e),I=n(e,"P",{"data-svelte-h":!0}),i(I)!=="svelte-1at10em"&&(I.innerHTML=mn),je=l(e),R=n(e,"P",{"data-svelte-h":!0}),i(R)!=="svelte-14abbst"&&(R.innerHTML=fn),Ee=l(e),q=n(e,"P",{"data-svelte-h":!0}),i(q)!=="svelte-1fb0i6y"&&(q.innerHTML=wn),Ue=l(e),$=n(e,"P",{"data-svelte-h":!0}),i($)!=="svelte-7ptv6t"&&($.innerHTML=_n),De=l(e),j=n(e,"P",{"data-svelte-h":!0}),i(j)!=="svelte-1prpapm"&&(j.innerHTML=bn),Oe=l(e),E=n(e,"P",{"data-svelte-h":!0}),i(E)!=="svelte-hjstjv"&&(E.textContent=Cn),Ae=l(e),U=n(e,"P",{"data-svelte-h":!0}),i(U)!=="svelte-tqmd58"&&(U.textContent=Ln),Ve=l(e),D=n(e,"DIV",{class:!0});var Wo=u(D);ve=g(Wo,!1),Wo.forEach(h),ze=l(e),O=n(e,"P",{"data-svelte-h":!0}),i(O)!=="svelte-r5fsr0"&&(O.textContent=Hn),We=l(e),A=n(e,"DIV",{class:!0});var Go=u(A);de=g(Go,!1),Go.forEach(h),Ge=l(e),V=n(e,"P",{"data-svelte-h":!0}),i(V)!=="svelte-10g2v3j"&&(V.textContent=Tn),Be=l(e),z=n(e,"P",{"data-svelte-h":!0}),i(z)!=="svelte-3btfh4"&&(z.textContent=Sn),Je=l(e),W=n(e,"P",{"data-svelte-h":!0}),i(W)!=="svelte-1vjmwu"&&(W.textContent=Mn),Ke=l(e),G=n(e,"DIV",{class:!0});var Bo=u(G);ye=g(Bo,!1),Bo.forEach(h),Fe=l(e),B=n(e,"P",{"data-svelte-h":!0}),i(B)!=="svelte-qfcnp5"&&(B.textContent=Pn),Xe=l(e),J=n(e,"DIV",{class:!0});var Jo=u(J);ue=g(Jo,!1),Jo.forEach(h),Ne=l(e),K=n(e,"P",{"data-svelte-h":!0}),i(K)!=="svelte-nwtbid"&&(K.textContent=In),Ye=l(e),F=n(e,"P",{"data-svelte-h":!0}),i(F)!=="svelte-11rf42d"&&(F.innerHTML=Rn),Qe=l(e),X=n(e,"DIV",{class:!0});var Ko=u(X);xe=g(Ko,!1),Ko.forEach(h),Ze=l(e),N=n(e,"P",{"data-svelte-h":!0}),i(N)!=="svelte-1o0f3ab"&&(N.innerHTML=qn),ts=l(e),Y=n(e,"P",{"data-svelte-h":!0}),i(Y)!=="svelte-k7fqy9"&&(Y.innerHTML=$n),es=l(e),Q=n(e,"P",{"data-svelte-h":!0}),i(Q)!=="svelte-1kgiz2g"&&(Q.innerHTML=jn),ss=l(e),Z=n(e,"P",{"data-svelte-h":!0}),i(Z)!=="svelte-ey9tfh"&&(Z.textContent=En),ns=l(e),tt=n(e,"P",{"data-svelte-h":!0}),i(tt)!=="svelte-1g8nbi6"&&(tt.textContent=Un),os=l(e),et=n(e,"DIV",{class:!0});var Fo=u(et);ge=g(Fo,!1),Fo.forEach(h),as=l(e),st=n(e,"P",{"data-svelte-h":!0}),i(st)!=="svelte-445d03"&&(st.textContent=Dn),ls=l(e),nt=n(e,"P",{"data-svelte-h":!0}),i(nt)!=="svelte-13zrdq5"&&(nt.innerHTML=On),is=l(e),ot=n(e,"P",{"data-svelte-h":!0}),i(ot)!=="svelte-i8m81q"&&(ot.innerHTML=An),rs=l(e),at=n(e,"P",{"data-svelte-h":!0}),i(at)!=="svelte-phrq"&&(at.innerHTML=Vn),ps=l(e),lt=n(e,"P",{"data-svelte-h":!0}),i(lt)!=="svelte-1jo0xpj"&&(lt.textContent=zn),cs=l(e),it=n(e,"P",{"data-svelte-h":!0}),i(it)!=="svelte-185qain"&&(it.textContent=Wn),hs=l(e),rt=n(e,"P",{"data-svelte-h":!0}),i(rt)!=="svelte-1un5dth"&&(rt.innerHTML=Gn),ks=l(e),pt=n(e,"DIV",{class:!0});var Xo=u(pt);me=g(Xo,!1),Xo.forEach(h),vs=l(e),ct=n(e,"P",{"data-svelte-h":!0}),i(ct)!=="svelte-1uaq92h"&&(ct.textContent=Bn),ds=l(e),ht=n(e,"DIV",{class:!0});var No=u(ht);fe=g(No,!1),No.forEach(h),ys=l(e),kt=n(e,"P",{"data-svelte-h":!0}),i(kt)!=="svelte-664o0r"&&(kt.innerHTML=Jn),us=l(e),vt=n(e,"P",{"data-svelte-h":!0}),i(vt)!=="svelte-1ib47i2"&&(vt.innerHTML=Kn),xs=l(e),dt=n(e,"P",{"data-svelte-h":!0}),i(dt)!=="svelte-1mhah26"&&(dt.textContent=Fn),gs=l(e),yt=n(e,"P",{"data-svelte-h":!0}),i(yt)!=="svelte-we4q08"&&(yt.textContent=Xn),ms=l(e),ut=n(e,"UL",{"data-svelte-h":!0}),i(ut)!=="svelte-1an2njl"&&(ut.innerHTML=Nn),e.forEach(h),we=l(v),c=n(v,"SECTION",{});var k=u(c);xt=n(k,"H2",{"data-svelte-h":!0}),i(xt)!=="svelte-1xbis8p"&&(xt.innerHTML=Yn),fs=l(k),gt=n(k,"P",{"data-svelte-h":!0}),i(gt)!=="svelte-8dipfk"&&(gt.textContent=Qn),ws=l(k),mt=n(k,"P",{"data-svelte-h":!0}),i(mt)!=="svelte-1va23o7"&&(mt.textContent=Zn),_s=l(k),ft=n(k,"DIV",{class:!0});var Yo=u(ft);_e=g(Yo,!1),Yo.forEach(h),bs=l(k),wt=n(k,"P",{"data-svelte-h":!0}),i(wt)!=="svelte-45kht2"&&(wt.innerHTML=to),Cs=l(k),_t=n(k,"P",{"data-svelte-h":!0}),i(_t)!=="svelte-ywef3a"&&(_t.textContent=eo),Ls=l(k),bt=n(k,"P",{"data-svelte-h":!0}),i(bt)!=="svelte-7p51ml"&&(bt.innerHTML=so),Hs=l(k),Ct=n(k,"P",{"data-svelte-h":!0}),i(Ct)!=="svelte-17er50i"&&(Ct.innerHTML=no),Ts=l(k),Lt=n(k,"P",{"data-svelte-h":!0}),i(Lt)!=="svelte-lcgub9"&&(Lt.innerHTML=oo),Ss=l(k),Ht=n(k,"DIV",{class:!0});var Qo=u(Ht);be=g(Qo,!1),Qo.forEach(h),Ms=l(k),Tt=n(k,"P",{"data-svelte-h":!0}),i(Tt)!=="svelte-i2b5w4"&&(Tt.textContent=ao),Ps=l(k),St=n(k,"P",{"data-svelte-h":!0}),i(St)!=="svelte-1dvdno1"&&(St.innerHTML=lo),Is=l(k),Mt=n(k,"P",{"data-svelte-h":!0}),i(Mt)!=="svelte-14o3gig"&&(Mt.innerHTML=io),Rs=l(k),Pt=n(k,"P",{"data-svelte-h":!0}),i(Pt)!=="svelte-e87yhf"&&(Pt.innerHTML=ro),k.forEach(h),Ce=l(v),r=n(v,"SECTION",{});var p=u(r);It=n(p,"H3",{"data-svelte-h":!0}),i(It)!=="svelte-vvl5dc"&&(It.innerHTML=po),qs=l(p),Rt=n(p,"P",{"data-svelte-h":!0}),i(Rt)!=="svelte-mqludr"&&(Rt.textContent=co),$s=l(p),qt=n(p,"DIV",{class:!0});var Zo=u(qt);Le=g(Zo,!1),Zo.forEach(h),js=l(p),$t=n(p,"P",{"data-svelte-h":!0}),i($t)!=="svelte-h3b5e2"&&($t.textContent=ho),Es=l(p),jt=n(p,"P",{"data-svelte-h":!0}),i(jt)!=="svelte-1yptmtr"&&(jt.textContent=ko),Us=l(p),Et=n(p,"P",{"data-svelte-h":!0}),i(Et)!=="svelte-naq1cc"&&(Et.innerHTML=vo),Ds=l(p),Ut=n(p,"DIV",{class:!0});var ta=u(Ut);He=g(ta,!1),ta.forEach(h),Os=l(p),Dt=n(p,"P",{"data-svelte-h":!0}),i(Dt)!=="svelte-1rlueli"&&(Dt.innerHTML=yo),As=l(p),Ot=n(p,"DIV",{class:!0});var ea=u(Ot);Te=g(ea,!1),ea.forEach(h),Vs=l(p),At=n(p,"P",{"data-svelte-h":!0}),i(At)!=="svelte-bfcfef"&&(At.innerHTML=uo),zs=l(p),Vt=n(p,"P",{"data-svelte-h":!0}),i(Vt)!=="svelte-orlicc"&&(Vt.innerHTML=xo),Ws=l(p),zt=n(p,"P",{"data-svelte-h":!0}),i(zt)!=="svelte-4a4yx8"&&(zt.innerHTML=go),Gs=l(p),Wt=n(p,"P",{"data-svelte-h":!0}),i(Wt)!=="svelte-qkwxha"&&(Wt.textContent=mo),Bs=l(p),Gt=n(p,"P",{"data-svelte-h":!0}),i(Gt)!=="svelte-yill8d"&&(Gt.innerHTML=fo),Js=l(p),Bt=n(p,"P",{"data-svelte-h":!0}),i(Bt)!=="svelte-1nzjd9q"&&(Bt.textContent=wo),Ks=l(p),Jt=n(p,"P",{"data-svelte-h":!0}),i(Jt)!=="svelte-xbc9pd"&&(Jt.innerHTML=_o),Fs=l(p),Kt=n(p,"P",{"data-svelte-h":!0}),i(Kt)!=="svelte-7lwrw8"&&(Kt.textContent=bo),Xs=l(p),Ft=n(p,"P",{"data-svelte-h":!0}),i(Ft)!=="svelte-8grrqj"&&(Ft.textContent=Co),Ns=l(p),Xt=n(p,"P",{"data-svelte-h":!0}),i(Xt)!=="svelte-83qzei"&&(Xt.textContent=Lo),Ys=l(p),Nt=n(p,"P",{"data-svelte-h":!0}),i(Nt)!=="svelte-120v3mj"&&(Nt.innerHTML=Ho),Qs=l(p),Yt=n(p,"P",{"data-svelte-h":!0}),i(Yt)!=="svelte-1kumy9t"&&(Yt.innerHTML=To),Zs=l(p),Qt=n(p,"P",{"data-svelte-h":!0}),i(Qt)!=="svelte-1td8gdf"&&(Qt.innerHTML=So),tn=l(p),Zt=n(p,"P",{"data-svelte-h":!0}),i(Zt)!=="svelte-10kep98"&&(Zt.innerHTML=Mo),en=l(p),te=n(p,"P",{"data-svelte-h":!0}),i(te)!=="svelte-dllkuk"&&(te.textContent=Po),sn=l(p),ee=n(p,"DIV",{class:!0});var sa=u(ee);Se=g(sa,!1),sa.forEach(h),nn=l(p),se=n(p,"P",{"data-svelte-h":!0}),i(se)!=="svelte-nujnal"&&(se.innerHTML=Io),on=l(p),ne=n(p,"P",{"data-svelte-h":!0}),i(ne)!=="svelte-13m09he"&&(ne.innerHTML=Ro),an=l(p),oe=n(p,"P",{"data-svelte-h":!0}),i(oe)!=="svelte-1fbijy3"&&(oe.textContent=qo),ln=l(p),ae=n(p,"P",{"data-svelte-h":!0}),i(ae)!=="svelte-xj2xh9"&&(ae.textContent=$o),rn=l(p),le=n(p,"DIV",{class:!0});var na=u(le);Me=g(na,!1),na.forEach(h),pn=l(p),ie=n(p,"P",{"data-svelte-h":!0}),i(ie)!=="svelte-34n3ru"&&(ie.innerHTML=jo),cn=l(p),re=n(p,"P",{"data-svelte-h":!0}),i(re)!=="svelte-g1r8dc"&&(re.innerHTML=Eo),hn=l(p),pe=n(p,"P",{"data-svelte-h":!0}),i(pe)!=="svelte-n07skq"&&(pe.innerHTML=Uo),kn=l(p),ce=n(p,"P",{"data-svelte-h":!0}),i(ce)!=="svelte-15m5myr"&&(ce.textContent=Do),vn=l(p),he=n(p,"BLOCKQUOTE",{"data-svelte-h":!0}),i(he)!=="svelte-18iny32"&&(he.innerHTML=Oo),dn=l(p),ke=n(p,"P",{"data-svelte-h":!0}),i(ke)!=="svelte-100hy8u"&&(ke.textContent=Ao),p.forEach(h),Pe=l(v),C=n(v,"SECTION",{"data-svelte-h":!0}),i(C)!=="svelte-tgf6lm"&&(C.innerHTML=Vo),Ie=l(v),L=n(v,"SECTION",{"data-svelte-h":!0}),i(L)!=="svelte-rd567k"&&(L.innerHTML=zo),this.h()},h(){ve.a=null,m(D,"class","code-section"),de.a=null,m(A,"class","code-section"),ye.a=null,m(G,"class","code-section"),ue.a=null,m(J,"class","code-section"),xe.a=null,m(X,"class","code-section"),ge.a=null,m(et,"class","code-section"),me.a=null,m(pt,"class","code-section"),fe.a=null,m(ht,"class","code-section"),_e.a=null,m(ft,"class","code-section"),be.a=null,m(Ht,"class","code-section"),Le.a=null,m(qt,"class","code-section"),He.a=null,m(Ut,"class","code-section"),Te.a=null,m(Ot,"class","code-section"),Se.a=null,m(ee,"class","code-section"),Me.a=null,m(le,"class","code-section")},m(v,e){f(v,d,e),f(v,w,e),f(v,o,e),t(o,y),t(o,T),t(o,S),t(o,Re),t(o,M),t(o,qe),t(o,P),t(o,$e),t(o,I),t(o,je),t(o,R),t(o,Ee),t(o,q),t(o,Ue),t(o,$),t(o,De),t(o,j),t(o,Oe),t(o,E),t(o,Ae),t(o,U),t(o,Ve),t(o,D),ve.m(da,D),t(o,ze),t(o,O),t(o,We),t(o,A),de.m(ya,A),t(o,Ge),t(o,V),t(o,Be),t(o,z),t(o,Je),t(o,W),t(o,Ke),t(o,G),ye.m(ua,G),t(o,Fe),t(o,B),t(o,Xe),t(o,J),ue.m(xa,J),t(o,Ne),t(o,K),t(o,Ye),t(o,F),t(o,Qe),t(o,X),xe.m(ga,X),t(o,Ze),t(o,N),t(o,ts),t(o,Y),t(o,es),t(o,Q),t(o,ss),t(o,Z),t(o,ns),t(o,tt),t(o,os),t(o,et),ge.m(ma,et),t(o,as),t(o,st),t(o,ls),t(o,nt),t(o,is),t(o,ot),t(o,rs),t(o,at),t(o,ps),t(o,lt),t(o,cs),t(o,it),t(o,hs),t(o,rt),t(o,ks),t(o,pt),me.m(fa,pt),t(o,vs),t(o,ct),t(o,ds),t(o,ht),fe.m(wa,ht),t(o,ys),t(o,kt),t(o,us),t(o,vt),t(o,xs),t(o,dt),t(o,gs),t(o,yt),t(o,ms),t(o,ut),f(v,we,e),f(v,c,e),t(c,xt),t(c,fs),t(c,gt),t(c,ws),t(c,mt),t(c,_s),t(c,ft),_e.m(_a,ft),t(c,bs),t(c,wt),t(c,Cs),t(c,_t),t(c,Ls),t(c,bt),t(c,Hs),t(c,Ct),t(c,Ts),t(c,Lt),t(c,Ss),t(c,Ht),be.m(ba,Ht),t(c,Ms),t(c,Tt),t(c,Ps),t(c,St),t(c,Is),t(c,Mt),t(c,Rs),t(c,Pt),f(v,Ce,e),f(v,r,e),t(r,It),t(r,qs),t(r,Rt),t(r,$s),t(r,qt),Le.m(Ca,qt),t(r,js),t(r,$t),t(r,Es),t(r,jt),t(r,Us),t(r,Et),t(r,Ds),t(r,Ut),He.m(La,Ut),t(r,Os),t(r,Dt),t(r,As),t(r,Ot),Te.m(Ha,Ot),t(r,Vs),t(r,At),t(r,zs),t(r,Vt),t(r,Ws),t(r,zt),t(r,Gs),t(r,Wt),t(r,Bs),t(r,Gt),t(r,Js),t(r,Bt),t(r,Ks),t(r,Jt),t(r,Fs),t(r,Kt),t(r,Xs),t(r,Ft),t(r,Ns),t(r,Xt),t(r,Ys),t(r,Nt),t(r,Qs),t(r,Yt),t(r,Zs),t(r,Qt),t(r,tn),t(r,Zt),t(r,en),t(r,te),t(r,sn),t(r,ee),Se.m(Ta,ee),t(r,nn),t(r,se),t(r,on),t(r,ne),t(r,an),t(r,oe),t(r,ln),t(r,ae),t(r,rn),t(r,le),Me.m(Sa,le),t(r,pn),t(r,ie),t(r,cn),t(r,re),t(r,hn),t(r,pe),t(r,kn),t(r,ce),t(r,vn),t(r,he),t(r,dn),t(r,ke),f(v,Pe,e),f(v,C,e),f(v,Ie,e),f(v,L,e)},p:Ia,d(v){v&&(h(d),h(w),h(o),h(we),h(c),h(Ce),h(r),h(Pe),h(C),h(Ie),h(L))}}}function hl(H){let d,b;const w=[H[0],va];let o={$$slots:{default:[cl]},$$scope:{ctx:H}};for(let y=0;y<w.length;y+=1)o=yn(o,w[y]);return d=new Va({props:o}),{c(){$a(d.$$.fragment)},l(y){ja(d.$$.fragment,y)},m(y,_){Ea(d,y,_),b=!0},p(y,[_]){const T=_&1?Aa(w,[_&1&&aa(y[0]),_&0&&aa(va)]):{};_&2&&(T.$$scope={dirty:_,ctx:y}),d.$set(T)},i(y){b||(Ua(d.$$.fragment,y),b=!0)},o(y){Da(d.$$.fragment,y),b=!1},d(y){Oa(d,y)}}}const va={title:"Short Stories working on Svelte",occasion:"Shopee React Knowledgeable",occasionLink:"https://github.com/Shopee/shopee-react-knowledgeable/issues/162",venue:"Shopee SG",venueLink:"https://www.google.com/maps/place/Shopee+SG/@1.291278,103.7846628,15z/data=!4m2!3m1!1s0x0:0x7ddf2e854cf6e4e4?ved=2ahUKEwi5jbz6z_vgAhVBP48KHWSEAmMQ_BIwFXoECAEQCA",date:"2019-12-06",description:"Short stories while working on Svelte, and some personal takeaway.",label:"talk",layout:"talk",tableOfContents:[{link:"first-story",title:"First Story"},{link:"second-story",title:"Second Story",nested:[{link:"css-custom-properties-aka-css-variables",title:"CSS Custom Properties aka CSS Variables"},{link:"please-do-sharing-more-often",title:"Please do sharing more often."},{link:"please-do-participate-in-rk-more-often",title:"Please do participate in RK more often"}]}]};function kl(H,d,b){return Pa("blog",{image:pl}),H.$$set=w=>{b(0,d=yn(yn({},d),oa(w)))},d=oa(d),[d]}class xl extends Ra{constructor(d){super(),qa(this,d,kl,hl,Ma,{})}}export{xl as component};
