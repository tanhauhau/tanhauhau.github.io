import{s as Gc,d as Xn,e as Wc,f as Op,n as Jc}from"../chunks/scheduler.D6VJxl8L.js";import{S as Uc,i as Qc,m as Yc,n as Zc,o as sk,t as ak,a as tk,p as ek,e as a,s as e,H as k,c as t,d as i,q as n,h as o,r as y,g as r,u as c,j as g,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as ok,a as zp}from"../chunks/code-snippet.Gym6WUAG.js";import{B as rk}from"../chunks/BlogLayout.BLHkC4CD.js";import{t as nk}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function lk(ts){let v,L,z='<a href="#the-challenge" id="the-challenge">The Challenge</a>',X,C,D="First of all, here's a TypeScript challenge for you:",es,os,Gn='Can you figure how to define the TypeScript type for the <code class="inline">app.get</code> method below?',yo,rs,Wt,Xp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const app: &#123;&#10;    get&lt;Path extends string>(path: Path, fn: (req: &#123;&#10;        params: &#123; [Key in PathSegments&lt;Path> as Strip&lt;Key>]: Value&lt;Key>; &#125;;&#10;    &#125;) => void): void;&#10;&#125;' >app</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) get&lt;"/purchase/[shopid]/[itemid]/args/[...args]">(path: "/purchase/[shopid]/[itemid]/args/[...args]", fn: (req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;) => void): void' >get</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;' >req</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    args: string[];&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>params</data-lsp></span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;' >req</data-lsp>;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>const params: &#123;
    shopid: number;
    itemid: number;
    args: string[];
&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;);</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const app: &#123;&#10;    get&lt;Path extends string>(path: Path, fn: (req: &#123;&#10;        params: &#123; [Key in PathSegments&lt;Path> as Strip&lt;Key>]: Value&lt;Key>; &#125;;&#10;    &#125;) => void): void;&#10;&#125;' >app</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) get&lt;"/docs/[chapter]/[section]">(path: "/docs/[chapter]/[section]", fn: (req: &#123;&#10;    params: &#123;&#10;        chapter: number;&#10;        section: number;&#10;    &#125;;&#10;&#125;) => void): void' >get</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;/docs/[chapter]/[section]&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        chapter: number;&#10;        section: number;&#10;    &#125;;&#10;&#125;' >req</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: &#123;&#10;    chapter: number;&#10;    section: number;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>params</data-lsp></span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        chapter: number;&#10;        section: number;&#10;    &#125;;&#10;&#125;' >req</data-lsp>;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>const params: &#123;
    chapter: number;
    section: number;
&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;);</span></div></code></div></pre>`,vo,ns,Wn="<em>Try and hover the variables to look at their types.</em>",ho,ls,Jn='<em>Notice that <code class="inline">...args</code> is a string array instead of number</em> ðŸ¤¯',xo,is,Un='The <code class="inline">req.params</code> is derived from the string passed in as the 1st parameter.',mo,ps,Qn='This is useful when you want to define types for a routing-like function, where you can pass in a route with path pattern that you can define dynamic segments with custom syntax (eg: <code class="inline">[shopid]</code> or <code class="inline">:shopid</code>), and a callback function, where the argument type is derived from the route that you just passed in.',uo,cs,Yn="So if you try to access parameter that is not defined, you get an error!",go,ks,Jt,Gp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const app: &#123;&#10;    get&lt;Path extends string>(path: Path, fn: (req: &#123;&#10;        params: &#123; [Key in PathSegments&lt;Path> as Strip&lt;Key>]: Value&lt;Key>; &#125;;&#10;    &#125;) => void): void;&#10;&#125;' >app</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) get&lt;"/purchase/[shopid]/[itemid]/args/[...args]">(path: "/purchase/[shopid]/[itemid]/args/[...args]", fn: (req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;) => void): void' >get</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;' >req</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)"><data-err><data-lsp lsp='const foo: any' >foo</data-lsp></data-err></span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;' >req</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) params: &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    args: string[];&#10;&#125;' >params</data-lsp>;</span></div><span class="error"><span>Property 'foo' does not exist on type '&#123; shopid: number; itemid: number; args: string[]; &#125;'.</span><span class="code">2339</span></span><span class="error-behind">Property 'foo' does not exist on type '&#123; shopid: number; itemid: number; args: string[]; &#125;'.</span><div class='line'><span style="color: var(--shiki-color-text)">&#125;);</span></div></code></div></pre>`,fo,ys,Zn='A real-world use-case for this, if you are more familiar with <a href="https://v5.reactrouter.com/" rel="nofollow">React Router</a>, is to derive the type for <code class="inline">routeProps</code> in the <a href="https://v5.reactrouter.com/web/api/Route/render-func" rel="nofollow">render</a> function from the <code class="inline">path</code> props:',Po,vs,Ut,Wp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="tsx" cutLines="10"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function Route&lt;"/user/:username">(&#123;&#125;: &#123;&#10;    path: "/user/:username";&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: &#123;&#10;                username: string;&#10;            &#125;;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): React.JSX.Element' >Route</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) path: "/user/:username"' >path</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">"/user/:username"</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) render: (routeProps: &#123;&#10;    match: &#123;&#10;        params: &#123;&#10;            username: string;&#10;        &#125;;&#10;    &#125;;&#10;&#125;) => void' >render</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;(<data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: &#123;&#10;            username: string;&#10;        &#125;;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: &#123;&#10;    username: string;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: &#123;&#10;            username: string;&#10;        &#125;;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) match: &#123;&#10;    params: &#123;&#10;        username: string;&#10;    &#125;;&#10;&#125;' >match</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) params: &#123;&#10;    username: string;&#10;&#125;' >params</data-lsp>;</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>const params: &#123;
    username: string;
&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	&#125;&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">/&gt;;</span></div></code></div></pre>`,wo,ds,sl="In this article, we are going to explore how to define such a type, through various TypeScript techniques, extracting types from a string literal type.",Qt,G,al='<h2><a href="#things-you-need-to-know" id="things-you-need-to-know">Things you need to know</a></h2> <p>First thing first, let&#39;s talk through some basic knowledges required before we go on and tackle the problem.</p>',Yt,m,hs,tl='<a href="#string-literal-type" id="string-literal-type">String Literal Type</a>',bo,xs,el='Type <code class="inline">string</code> in TypeScript is a string that can have any value:',_o,ms,Zt,Jp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let str: string' >str</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let str: string' >str</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;def&apos;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// no errors, string type can have any value</span></div></code></div></pre>`,Ao,us,ol='However, a <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types" rel="nofollow">string literal type</a>, is a string type with a specific value:',Io,gs,se,Up=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let str: "abc"' >str</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)"><data-err><data-lsp lsp='let str: "abc"' >str</data-lsp></data-err> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;def&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><span class="error"><span>Type '"def"' is not assignable to type '"abc"'.</span><span class="code">2322</span></span><span class="error-behind">Type '"def"' is not assignable to type '"abc"'.</span></code></div></pre>`,To,fs,rl='Most of the time, we use this alongside with <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types" rel="nofollow">Union Types</a> to determine a list of string values you can pass to a function / array / object:',Co,Ps,ae,Qp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function eatSomething(food: &apos;sushi&apos; | &apos;ramen&apos;): void' >eatSomething</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) food: "sushi" | "ramen"' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;ramen&apos;</span><span style="color: var(--shiki-color-text)">) &#123;&#125;</span></div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function eatSomething(food: &apos;sushi&apos; | &apos;ramen&apos;): void' >eatSomething</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function eatSomething(food: &apos;sushi&apos; | &apos;ramen&apos;): void' >eatSomething</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;ramen&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function eatSomething(food: &apos;sushi&apos; | &apos;ramen&apos;): void' >eatSomething</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)"><data-err>&apos;pencil&apos;</data-err></span><span style="color: var(--shiki-color-text)">);</span></div><span class="error"><span>Argument of type '"pencil"' is not assignable to parameter of type '"sushi" | "ramen"'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type '"pencil"' is not assignable to parameter of type '"sushi" | "ramen"'.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let food: ("sushi" | "ramen")[]' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;ramen&apos;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let food: ("sushi" | "ramen")[]' >food</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Array&lt;"sushi" | "ramen">.push(...items: ("sushi" | "ramen")[]): number' >push</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)"><data-err>&apos;pencil&apos;</data-err></span><span style="color: var(--shiki-color-text)">);</span></div><span class="error"><span>Argument of type '"pencil"' is not assignable to parameter of type '"sushi" | "ramen"'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type '"pencil"' is not assignable to parameter of type '"sushi" | "ramen"'.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let object: &#123;&#10;    food: &apos;sushi&apos; | &apos;ramen&apos;;&#10;&#125;' >object</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) food: "sushi" | "ramen"' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;ramen&apos;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let object: &#123;&#10;    food: &apos;sushi&apos; | &apos;ramen&apos;;&#10;&#125;' >object</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) food: "sushi" | "ramen"' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let object: &#123;&#10;    food: &apos;sushi&apos; | &apos;ramen&apos;;&#10;&#125;' >object</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-err><data-lsp lsp='(property) food: "sushi" | "ramen"' >food</data-lsp></data-err></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;pencil&apos;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div><span class="error"><span>Type '"pencil"' is not assignable to type '"sushi" | "ramen"'.</span><span class="code">2322</span></span><span class="error-behind">Type '"pencil"' is not assignable to type '"sushi" | "ramen"'.</span></code></div></pre>`,Ho,ws,nl="So how do you create a string literal type?",Mo,bs,ll='When you define a string variable with <code class="inline">const</code>, it is of type string literal. However if you defined it with <code class="inline">let</code>, TypeScript sees that the value of the variable could change, so it assigns the variable to a more generic type:',Ko,_s,te,Yp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const food: "sushi"' style='border-bottom: solid 2px lightgrey;'>food</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const food: "sushi"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let drinks: string' style='border-bottom: solid 2px lightgrey;'>drinks</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;beer&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let drinks: string</span></div></code></div></pre>`,So,As,il="The same reasoning applies to objects and arrays, as you can mutate the object / array value afterwards, so TypeScript assigns a more generic type:",Bo,Is,ee,Zp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const object: &#123;&#10;    food: string;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>object</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) food: string' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const object: &#123;
    food: string;
&#125;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const array: string[]' style='border-bottom: solid 2px lightgrey;'>array</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">];</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const array: string[]</span></div></code></div></pre>`,Lo,Ts,pl='However, you can hint TypeScript that you would only read the value from the object / array and not mutate it, by using the <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions" rel="nofollow"><code class="inline">const</code> assertions</a>',Vo,Cs,oe,sc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const object: &#123;&#10;    readonly food: "sushi";&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>object</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) food: "sushi"' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)"><data-lsp lsp='type const = &#123;&#10;    readonly food: "sushi";&#10;&#125;' >const</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const object: &#123;
    readonly food: "sushi";
&#125;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const array: readonly ["sushi"]' style='border-bottom: solid 2px lightgrey;'>array</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)"><data-lsp lsp='type const = readonly ["sushi"]' >const</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const array: readonly ["sushi"]</span></div></code></div></pre>`,$o,Hs,cl='Hover over to the <code class="inline">object.food</code> property and you&#39;ll see that now the type is a string literal <code class="inline">&#39;sushi&#39;</code> rather than <code class="inline">string</code>!',Eo,Ms,kl="Differentiating a string literal type vs a string type allows TypeScript to know not just the type, as well the value of a string.",re,R,Ks,yl='<a href="#template-literal-and-string-literal-types" id="template-literal-and-string-literal-types">Template Literal and String Literal Types</a>',Fo,Ss,vl='Since <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#template-literal-types" rel="nofollow">TypeScript 4.1</a>, TypeScript supports a new way to define a new string literal types, which is to use the familiar syntax of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow">Template literals</a>:',Do,Bs,ne,ac=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const a: "a"' >a</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const b: "b"' >b</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// In JavaScript, you can build a new string</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// with template literals</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const c: "a b"' >c</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)"><data-lsp lsp='const a: "a"' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)"><data-lsp lsp='const b: "b"' >b</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &apos;a b&apos;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = "a"' >A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type B = "b"' >B</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// In TypeScript, you can build a new string literal type</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// with template literals too!</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type C = "a b"' style='border-bottom: solid 2px lightgrey;'>C</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = "a"' >A</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type B = "b"' >B</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type C = "a b"</span></div></code></div></pre>`,le,M,Ls,dl='<a href="#conditional-type" id="conditional-type">Conditional Type</a>',Ro,Vs,hl='<a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html" rel="nofollow">Conditional Types</a> allow you to define a type based on another type. In this example, <code class="inline">Collection&lt;X&gt;</code> can be either <code class="inline">number[]</code> or <code class="inline">Set&lt;number&gt;</code> depending on the type of <code class="inline">X</code>:',No,$s,ie,tc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Collection&lt;X> = X extends "arr" ? number[] : Set&lt;number>' >Collection</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) X in type Collection&lt;X>' >X</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) X in type Collection&lt;X>' >X</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;arr&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='interface Set&lt;T>' >Set</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = number[]' style='border-bottom: solid 2px lightgrey;'>A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Collection&lt;X> = X extends "arr" ? number[] : Set&lt;number>' >Collection</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;arr&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type A = number[]</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// If you pass in something other than &apos;arr&apos;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type B = Set&lt;number>' style='border-bottom: solid 2px lightgrey;'>B</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Collection&lt;X> = X extends "arr" ? number[] : Set&lt;number>' >Collection</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;foo&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type B = Set&lt;number&gt;</span></div></code></div></pre>`,jo,Es,xl='You use the <code class="inline">extends</code> keyword to test if the type <code class="inline">X</code> can be assigned to the type <code class="inline">&#39;arr&#39;</code>, and conditional operator (<code class="inline">condition ? a : b</code>) to determine the type if it test holds true or otherwise.',Oo,Fs,ml='If you try to test a more complex type, you can infer parts of the type using the <code class="inline">infer</code> keyword, and define a new type based on the inferred part:',zo,Ds,pe,ec=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// Here you are testing whether X extends &#96;() =&gt; ???&#96;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// and let TypeScript to infer the &#96;???&#96; part</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// TypeScript will define a new type called</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// &#96;Value&#96; for the inferred type</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type GetReturnValue&lt;X> = X extends () => infer Value ? Value : never' >GetReturnValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) X in type GetReturnValue&lt;X>' >X</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) X in type GetReturnValue&lt;X>' >X</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Value' >Value</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Value' >Value</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// Here we inferred that &#96;Value&#96; is type &#96;string&#96;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = string' style='border-bottom: solid 2px lightgrey;'>A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type GetReturnValue&lt;X> = X extends () => infer Value ? Value : never' >GetReturnValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type A = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// Here we inferred that &#96;Value&#96; is type &#96;number&#96;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type B = number' style='border-bottom: solid 2px lightgrey;'>B</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type GetReturnValue&lt;X> = X extends () => infer Value ? Value : never' >GetReturnValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type B = number</span></div></code></div></pre>`,ce,d,Rs,ul='<a href="#function-overloads-and-generic-functions" id="function-overloads-and-generic-functions">Function Overloads and Generic Functions</a>',qo,Ns,gl='Whenever you want to define the type of a function in TypeScript, where the argument types and the return type depends on each other, you&#39;ll probably will reach out for either <a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads" rel="nofollow">Function Overloads</a> or <a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#generic-functions" rel="nofollow">Generic Functions</a>.',Xo,js,fl="What do I meant by having the argument types and return types depending on each other?",Go,Os,Pl="Here's an example where the return type is based on the argument type:",Wo,zs,ke,oc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;Type>(arr: Type[]): Type | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: any' >arr</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: any' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const string: string | undefined' >string</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;string>(arr: string[]): string | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;c&apos;</span><span style="color: var(--shiki-color-text)">]);</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const number: number | undefined' >number</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;number>(arr: number[]): number | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">]);</span></div></code></div></pre>`,Jo,qs,wl="... and here's another example where the 2nd argument type is based on the 1st argument type (argument types depending on each other):",Uo,Xs,ye,rc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function calculate&lt;Op extends string>(operation: Op, data: Data&lt;Op>): number | undefined' >calculate</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) operation: any' >operation</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) data: any' >data</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) operation: any' >operation</data-lsp> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;add&apos;</span><span style="color: var(--shiki-color-text)">) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='any' >addend_1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='any' >addend_2</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) operation: any' >operation</data-lsp> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;divide&apos;</span><span style="color: var(--shiki-color-text)">) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='any' >dividend</data-lsp> </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='any' >divisor</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function calculate&lt;"add">(operation: "add", data: &#123;&#10;    addend_1: number;&#10;    addend_2: number;&#10;&#125;): number | undefined' >calculate</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;add&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) addend_1: number' >addend_1</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) addend_2: number' >addend_2</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)"> &#125;);</span></div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function calculate&lt;"divide">(operation: "divide", data: &#123;&#10;    dividend: number;&#10;    divisor: number;&#10;&#125;): number | undefined' >calculate</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;divide&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) dividend: number' >dividend</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">42</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) divisor: number' >divisor</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">7</span><span style="color: var(--shiki-color-text)"> &#125;);</span></div></code></div></pre>`,Qo,Gs,bl="So, how do you define a function like this?",Yo,Ws,_l="If you define",Zo,Js,ve,nc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: string[] | number[]): string | number' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: string[] | number[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: string[] | number[]' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,sr,Us,Al='then whatever returned is type <code class="inline">string | number</code>. This doesnt capture the essence of the function, which should return <code class="inline">string</code> if called the function with <code class="inline">string[]</code> and return <code class="inline">number</code> if you called with <code class="inline">number[]</code>.',ar,Qs,Il='Instead, you can define the function via <a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads" rel="nofollow">function overloads</a>, which is to define multiple function signatures, followed by the implementation:',tr,Ys,de,lc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// return string when passed string[]</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: string[]): string (+1 overload)' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// return number when passed number[]</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: number[]): number (+1 overload)' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: number[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// then the actual implementation</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: string[]): string (+1 overload)' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: any' >arr</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: any' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const string: string' style='border-bottom: solid 2px lightgrey;'>string</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: string[]): string (+1 overload)' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;c&apos;</span><span style="color: var(--shiki-color-text)">]);</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const string: string</span></div></code></div></pre>`,er,Zs,Tl='Alternatively, you can define a <a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#generic-functions" rel="nofollow">generic function</a>, which declares a <em>type parameter</em>, and describe the argument type and return type in terms of the <em>type parameter</em>:',or,sa,he,ic=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// Define type parameter &#96;Item&#96; and describe argument and return type in terms of &#96;Item&#96;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;Item>(arr: Item[]): Item | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)">>(<data-lsp lsp='(parameter) arr: Item[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: Item[]' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,rr,aa,Cl='A plus point for generics is that the <code class="inline">Item</code> type can be any types, and TypeScript can infer what the <code class="inline">Item</code> type represents from the arguments you called the function with, and dictates what the return type should be based on the <code class="inline">Item</code> type',nr,ta,xe,pc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="4"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const obj: &#123;&#10;    a: number;&#10;&#125; | undefined' style='border-bottom: solid 2px lightgrey;'>obj</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;&#123;&#10;    a: number;&#10;&#125;>(arr: &#123;&#10;    a: number;&#10;&#125;[]): &#123;&#10;    a: number;&#10;&#125; | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([&#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)"> &#125;]);</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const obj: &#123;
    a: number;
&#125; | undefined</span></div></code></div></pre>`,lr,ea,Hl="If you do it with function overload, on the other hand, you'll probably have to define each and every possible function signatures.",ir,oa,Ml='But maybe you just want to pass in <code class="inline">string[]</code> or <code class="inline">number[]</code> to <code class="inline">firstElement(...)</code> only, so it&#39;s not a problem for function overloads.',pr,ra,Kl='Also, you can provide a constraint for the generic function, limiting that the <code class="inline">Item</code> type parameter can only be a certain type, by using the <code class="inline">extends</code> keyword:',cr,na,me,cc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// &#96;Item&#96; can only be of &#96;string&#96; or &#96;number&#96;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;Item extends string | number>(arr: Item[]): Item | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item extends string | number>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">>(<data-lsp lsp='(parameter) arr: Item[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item extends string | number>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item extends string | number>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: Item[]' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const number: 1 | 3 | 5 | undefined' >number</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;1 | 3 | 5>(arr: (1 | 3 | 5)[]): 1 | 3 | 5 | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">]);</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const obj: string | number | undefined' >obj</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;string | number>(arr: (string | number)[]): string | number | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([&#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)"><data-err>:</data-err></span><span style="color: var(--shiki-color-text)"><data-err> </data-err></span><span style="color: var(--shiki-token-constant)"><data-err>1</data-err></span><span style="color: var(--shiki-color-text)"><data-err> &#125;</data-err></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)"><data-err>:</data-err></span><span style="color: var(--shiki-color-text)"><data-err> </data-err></span><span style="color: var(--shiki-token-constant)"><data-err>3</data-err></span><span style="color: var(--shiki-color-text)"><data-err> &#125;</data-err></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)"><data-err>:</data-err></span><span style="color: var(--shiki-color-text)"><data-err> </data-err></span><span style="color: var(--shiki-token-constant)"><data-err>5</data-err></span><span style="color: var(--shiki-color-text)"> &#125;]);</span></div><span class="error"><span>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.</br>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.</br>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.</span><span class="code">2322<br/>2322<br/>2322</span></span><span class="error-behind">Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.</br>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.</br>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.</span></code></div></pre>`,ue,V,la,Sl='<a href="#working-on-the-problem" id="working-on-the-problem">Working on the problem</a>',kr,ia,Bl='Knowing <a href="#function-overloads-and-generic-functions">generic functions</a>, our solution to the problem will probably take the form:',yr,pa,ge,kc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt;(path</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CallbackFn</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt;)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// impplementation</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/docs/[chapter]/[section]/args/[...args]&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> req;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,vr,ca,Ll='We use a type parameter <code class="inline">Path</code>, which has to be a <code class="inline">string</code>. The <code class="inline">path</code> argument is of type <code class="inline">Path</code> and the callback will be <code class="inline">CallbackFn&lt;Path&gt;</code>, and the crux of the challenge is to figure out <code class="inline">CallbackFn&lt;Path&gt;</code>.',fe,x,ka,Vl='<a href="#the-game-plan" id="the-game-plan">The Game Plan</a>',dr,ya,$l="So here's the plan:",hr,W,El='<li>Given the type of the path as <code class="inline">Path</code>, which is a <a href="#string-literal-type">string literal type</a>,</li>',xr,va,Pe,yc='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',mr,da,Fl='<li>We derive a new type which has the string break into it&#39;s parts <em>[<a href="#splitting-a-string-literal-type">jump here</a>]</em></li>',ur,ha,we,vc='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;purchase&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;args&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',gr,J,Dl='<li>Filter out the parts to contain only the params <em>[<a href="#filter-out-only-the-parts-containing-the-param-syntax">jump here</a>]</em></li>',fr,xa,be,dc='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FilteredParts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Pr,U,Rl='<li>Remove the brackets <em>[<a href="#removing-the-brackets">jump here</a>]</em></li>',wr,ma,_e,hc='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FilteredParts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;shopid&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;itemid&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;...args&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',br,Q,Nl='<li>Map the parts into an <a href="https://www.typescriptlang.org/docs/handbook/2/objects.html" rel="nofollow">object type</a> <em>[<a href="#map-the-parts-into-an-object-type">jump here</a>]</em></li>',_r,ua,Ae,xc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Params</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	shopid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	itemid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-string-expression)">&#39;...args&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Ar,Y,jl='<li>Using <a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html" rel="nofollow">Conditional Types</a> to define the map value <em>[<a href="#defining-the-map-value">jump here</a>]</em></li>',Ir,ga,Ie,mc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Params</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	shopid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	itemid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-string-expression)">&#39;...args&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Tr,Z,Ol='<li>Remap keys to remove <code class="inline">&#39;...&#39;</code> in <code class="inline">...args</code> <em>[<a href="#remap-keys-to-remove">jump here</a>]</em></li>',Cr,fa,Te,uc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Params</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	shopid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	itemid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	args</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Hr,ss,zl="<li>Finally</li>",Mr,Pa,Ce,gc='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CallbackFn</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; params</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Params</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',He,f,wa,ql='<a href="#splitting-a-string-literal-type" id="splitting-a-string-literal-type">Splitting a String Literal Type</a>',Kr,ba,Xl='To split a string literal type, we can use a <a href="#conditional-type">conditional type</a> to check the value of the string literal:',Sr,_a,Me,fc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends "a/b" ? "a" | "b" : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;a/b&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type AB = "a" | "b"' style='border-bottom: solid 2px lightgrey;'>AB</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends "a/b" ? "a" | "b" : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a/b&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type AB = "a" | "b"</span></div></code></div></pre>`,Br,Aa,Gl="but to take in any string literal, that we have no idea of the value ahead of time,",Lr,Ia,Ke,Pc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CD</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">EF</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;e/f&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span></code></pre>`,Vr,Ta,Wl='we will have to <code class="inline">infer</code> the value in the conditional tests, and use the inferred value type:',$r,Ca,Se,wc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type AB = "a" | "b"' style='border-bottom: solid 2px lightgrey;'>AB</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a/b&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type AB = "a" | "b"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type CD = "c" | "d"' style='border-bottom: solid 2px lightgrey;'>CD</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;c/d&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type CD = "c" | "d"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type EFGH = "ef" | "gh"' style='border-bottom: solid 2px lightgrey;'>EFGH</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;ef/gh&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type EFGH = "ef" | "gh"</span></div></code></div></pre>`,Er,Ha,Jl=`And if you pass in a string literal that does not match the pattern, we want to return the same string literal type passed in.
So, we return the <code class="inline">Path</code> type in the <code class="inline">false</code> condition branch:`,Fr,Ma,Be,bc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = "a"' style='border-bottom: solid 2px lightgrey;'>A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type A = "a"</span></div></code></div></pre>`,Dr,Ka,Ul='At this point, you noticed that <code class="inline">PartA</code> will infer &quot;non-greedily&quot;, ie: it will try to infer as much as possible, but do not contain a <code class="inline">&quot;/&quot;</code> character:',Rr,Sa,Le,_c=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ABCD = "a" | "b/c/d"' style='border-bottom: solid 2px lightgrey;'>ABCD</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a/b/c/d&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type ABCD = "a" | "b/c/d"</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// type PartA = &apos;a&apos;;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// type PartB = &apos;b/c/d&apos;;</span></div></code></div></pre>`,Nr,Ba,Ql='So, to split the <code class="inline">Path</code> string literal recursively, we can return the type <code class="inline">Parts&lt;PathB&gt;</code> instead of <code class="inline">PathB</code>:',jr,La,Ve,Ac=`<div class="filename">Step 1: Parts&lt;Path&gt;</div><div class="copy" data-copy="type Parts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? PartA | Parts&lt;PartB&gt;
  : Path;

type ABCD = Parts&lt;&#39;a/b/c/d&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 1: Parts<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | Parts&lt;PartB> : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | Parts&lt;PartB> : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ABCD = "a" | "b" | "c" | "d"' style='border-bottom: solid 2px lightgrey;'>ABCD</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | Parts&lt;PartB> : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a/b/c/d&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type ABCD = "a" | "b" | "c" | "d"</span></div></code></div></pre>`,Or,Va,Yl="Here's the breakdown of what happened:",zr,$a,$e,Ic=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Ee,P,Ea,Zl='<a href="#filter-out-only-the-parts-containing-the-param-syntax" id="filter-out-only-the-parts-containing-the-param-syntax">Filter out only the parts containing the param syntax</a>',qr,Fa,si='The key to this step is the observation that <strong>any type <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types" rel="nofollow">unions</a> with <code class="inline">never</code> yields the type itself</strong>.',Xr,Da,Fe,Tc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = "a"' style='border-bottom: solid 2px lightgrey;'>A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type A = "a"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Obj = &#123;&#10;    a: 1;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>Obj</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: 1' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Obj = &#123;
    a: 1;
&#125;</span></div></code></div></pre>`,Gr,Ra,ai="If we can transform",Wr,Na,De,Cc='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&#39;purchase&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;args&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span></span></code></pre>',Jr,ja,ti="into",Ur,Oa,Re,Hc='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">never </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> never </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span></span></code></pre>',Qr,za,ei="then we will have",Yr,qa,Ne,Mc='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span></span></code></pre>',Zr,Xa,oi="So, how, you asked?",sn,Ga,ri='Well, we&#39;ll have to reach out to <a href="#conditional-type">conditional types</a> again for help, we can have a conditional type that returns the string literal itself if it starts with <code class="inline">[</code> and ends with <code class="inline">]</code>, and <code class="inline">never</code> if otherwise:',an,Wa,je,Kc=`<div class="filename">IsParameter&lt;Part&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never;
type Purchase = IsParameter&lt;&#39;purchase&#39;&gt;;
type ShopId = IsParameter&lt;&#39;[shopid]&#39;&gt;;
type ItemId = IsParameter&lt;&#39;[itemid]&#39;&gt;;
type Args = IsParameter&lt;&#39;args&#39;&gt;;
type Args2 = IsParameter&lt;&#39;[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" copy="true" filename="IsParameter<Part>"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Purchase = never' style='border-bottom: solid 2px lightgrey;'>Purchase</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;purchase&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Purchase = never</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ShopId = "[shopid]"' style='border-bottom: solid 2px lightgrey;'>ShopId</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;[shopid]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type ShopId = "[shopid]"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ItemId = "[itemid]"' style='border-bottom: solid 2px lightgrey;'>ItemId</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;[itemid]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type ItemId = "[itemid]"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Args = never' style='border-bottom: solid 2px lightgrey;'>Args</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Args = never</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Args2 = "[...args]"' style='border-bottom: solid 2px lightgrey;'>Args2</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Args2 = "[...args]"</span></div></code></div></pre>`,tn,Ja,ni='Although we have no idea what the string content is in between <code class="inline">[]</code>, but we can infer it in the conditional type, and we do not have to use the inferred type.',en,Ua,li="Combining this with the previous step, we have:",on,Qa,Oe,Sc=`<div class="filename">Step 2: FilteredParts&lt;Path&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;

type Params = FilteredParts&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 2: FilteredParts<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line highlight'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = "[shopid]" | "[itemid]" | "[...args]"' style='border-bottom: solid 2px lightgrey;'>Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type Params = "[shopid]" | "[itemid]" | "[...args]"</span></div></code></div></pre>`,ze,B,Ya,ii='<a href="#removing-the-brackets" id="removing-the-brackets">Removing the brackets</a>',rn,Za,pi="If you've been following along until this point, you probably have a clearer idea on how we can achieve this step.",nn,st,ci='So, why not take a pause and <a href="https://www.typescriptlang.org/play?#code/C4TwDgpgBAkgzgBQIYCckFsLAigPMlYAPigF4oDgoIAPbAOwBM4oADAbQBIBvAS3oBmOKAEF6IYAAt+AcwC+AXVZQA-BVRUAXFHoQAbjgDcAWABQoSFABivADbYUERpTj4kUkuWRTqdCExZWHn4hFHVCETkAemDBYUoAITlWMyhVWERUDCwcNwiSAB9rOwcnFzzgBKJUqG14AmyHNw8TUzMLaAb0OAB1XikAewBXSrQAYwBrLDJi+xwyjVcAciiwIZQxySQ4CCj2OEkBsF5GBT3+iHQTs9QZOD2AOifbuAUlokMgA" rel="nofollow">try it out in the TypeScript Playground</a>? <em>(I&#39;ve added the boilerplate code in the link)</em>',ln,at,ki='To remove the bracket, we can modify the conditional type in the last step, and instead of returning the <code class="inline">Part</code>, we return the inferred type between the <code class="inline">[]</code>',pn,tt,qe,Bc=`<div class="filename">Step 3: ParamsWithoutBracket</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;

type ParamsWithoutBracket = FilteredParts&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 3: ParamsWithoutBracket" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line highlight'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamsWithoutBracket = "shopid" | "itemid" | "...args"' >ParamsWithoutBracket</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div></code></div></pre>`,Xe,T,et,yi='<a href="#map-the-parts-into-an-object-type" id="map-the-parts-into-an-object-type">Map the parts into an Object Type</a>',cn,ot,vi='In this step, we are going to create an <a href="https://www.typescriptlang.org/docs/handbook/2/objects.html" rel="nofollow">Object Types</a> using the result of the previous step as the key.',kn,rt,di="If you know the key type beforehand, you can create an object type via a type alias:",yn,nt,Ge,Lc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = &#123;&#10;    shopid: any;&#10;    itemid: any;&#10;    &apos;...args&apos;: any;&#10;&#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) shopid: any' >shopid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) itemid: any' >itemid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div></code></div></pre>`,vn,lt,hi='If the key type is totally unknown, you can use the <a href="https://dmitripavlutin.com/typescript-index-signatures/" rel="nofollow">Index Signature</a>:',dn,it,We,Vc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = &#123;&#10;    [key: string]: any;&#10;&#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  [<data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: Params' >params</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = &#123;&#10;    [key: string]: any;&#10;&#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) b: number' >b</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) shopid: number' >shopid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div></code></div></pre>`,hn,pt,xi='However, in our case, the key type is not totally unknown, but it is dynamic. We use <a href="https://www.typescriptlang.org/docs/handbook/2/mapped-types.html" rel="nofollow">Mapped Types</a> which has a similar syntax as the index signature:',xn,ct,Je,$c=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Keys extends string> = &#123; [Key in Keys]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Keys in type Params&lt;Keys extends string>' >Keys</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Keys in type Params&lt;Keys extends string>' >Keys</data-lsp></span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: Params&lt;"shopid" | "itemid" | "...args">' >params</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Keys extends string> = &#123; [Key in Keys]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) shopid: any' >shopid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) itemid: any' >itemid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const incorrect_keys: Params&lt;"shopid" | "itemid" | "...args">' >incorrect_keys</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Keys extends string> = &#123; [Key in Keys]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-err><data-lsp lsp='(property) a: number' >a</data-lsp></data-err></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span></div><span class="error"><span>Object literal may only specify known properties, and 'a' does not exist in type 'Params&lt;"shopid" | "itemid" | "...args"&gt;'.</span><span class="code">2353</span></span><span class="error-behind">Object literal may only specify known properties, and 'a' does not exist in type 'Params&lt;"shopid" | "itemid" | "...args"&gt;'.</span><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) b: number' >b</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) shopid: any' >shopid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div></code></div></pre>`,mn,kt,mi="Building this on top of the previous step, we have:",un,yt,Ue,Ec=`<div class="filename">Step 4: Params&lt;Path&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;
type Params&lt;Path&gt; = &#123;
  [Key in FilteredParts&lt;Path&gt;]: any;
&#125;;

type ParamObject = Params&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 4: Params<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path>]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamObject = &#123;&#10;    shopid: any;&#10;    itemid: any;&#10;    "...args": any;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>ParamObject</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path>]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type ParamObject = &#123;
    shopid: any;
    itemid: any;
    "...args": any;
&#125;</span></div></code></div></pre>`,Qe,w,vt,ui='<a href="#defining-the-map-value" id="defining-the-map-value">Defining the map value</a>',gn,dt,gi="Now if I ask you to come up with a type that is depending on the key value:",fn,ht,fi='<li>if it is a string literal type that starts with <code class="inline">...</code>, <strong>return a type <code class="inline">string[]</code></strong></li> <li>else, <strong>return a type <code class="inline">number</code></strong></li>',Pn,xt,Pi='I hope that your inner voice is shouting <a href="#conditional-type">Conditional Types</a>!',wn,mt,wi="And yes, we are going to use a Conditional Type:",bn,ut,Ye,Fc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ShopIdValue = number' style='border-bottom: solid 2px lightgrey;'>ShopIdValue</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type ShopIdValue = number</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ArgValue = string[]' style='border-bottom: solid 2px lightgrey;'>ArgValue</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type ArgValue = string[]</span></div></code></div></pre>`,_n,gt,bi='But how do we get the <code class="inline">Key</code> type?',An,ft,_i='Well, in Mapped Types, when you write <code class="inline">{ [Key in ???]: any }</code>, the <code class="inline">Key</code> is the type alias of the key, which you can map it in the value type.',In,Pt,Ai="So writing this:",Tn,wt,Ze,Dc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Parts extends string> = &#123; [Key in Parts]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Parts in type Params&lt;Parts extends string>' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Parts in type Params&lt;Parts extends string>' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamObject = &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    "...args": string[];&#10;&#125;' >ParamObject</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Parts extends string> = &#123; [Key in Parts]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div></code></div></pre>`,Cn,bt,Ii="is the same as doing",Hn,_t,so,Rc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = &#123;&#10;    shopid: ParamValue&lt;&apos;shopid&apos;>;&#10;    itemid: ParamValue&lt;&apos;itemid&apos;>;&#10;    &apos;...args&apos;: ParamValue&lt;&apos;...args&apos;>;&#10;&#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div></code></div></pre>`,Mn,At,Ti="So, adding this on top of the previous step:",Kn,It,ao,Nc=`<div class="filename">Step 5: Params&lt;Path&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;
type ParamValue&lt;Key&gt; = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number;
type Params&lt;Path&gt; = &#123;
  [Key in FilteredParts&lt;Path&gt;]: ParamValue&lt;Key&gt;;
&#125;;

type ParamObject = Params&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 5: Params<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamObject = &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    "...args": string[];&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>ParamObject</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type ParamObject = &#123;
    shopid: number;
    itemid: number;
    "...args": string[];
&#125;</span></div></code></div></pre>`,to,K,Tt,Ci='<a href="#remap-keys-to-remove" id="remap-keys-to-remove">Remap keys to remove <code class="inline">&#39;...&#39;</code></a>',Sn,Ct,Hi='Now the final step. We are going to remove <code class="inline">&#39;...&#39;</code> from the <code class="inline">&#39;...args&#39;</code> key, and I hope you can now proudly come up with the <a href="#conditional-type">Conditional Types</a> for it:',Bn,Ht,eo,jc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Args = "args"' style='border-bottom: solid 2px lightgrey;'>Args</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Args = "args"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ShopId = "shopid"' style='border-bottom: solid 2px lightgrey;'>ShopId</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type ShopId = "shopid"</span></div></code></div></pre>`,Ln,Mt,Mi='But to apply this onto our Mapped Type, you can do a <a href="https://www.typescriptlang.org/docs/handbook/2/mapped-types.html#key-remapping-via-as" rel="nofollow">Key Remapping via <code class="inline">as</code></a>, which is available from TypeScript 4.1',Vn,Kt,oo,Oc=`<div class="filename">Step 7: Params&lt;Path&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;
type ParamValue&lt;Key&gt; = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number;
type RemovePrefixDots&lt;Key&gt; = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key;
type Params&lt;Path&gt; = &#123;
  [Key in FilteredParts&lt;Path&gt; as RemovePrefixDots&lt;Key&gt;]: ParamValue&lt;Key&gt;;
&#125;;

type ParamObject = Params&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 7: Params<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path> as RemovePrefixDots&lt;Key>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamObject = &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    args: string[];&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>ParamObject</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path> as RemovePrefixDots&lt;Key>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type ParamObject = &#123;
    shopid: number;
    itemid: number;
    args: string[];
&#125;</span></div></code></div></pre>`,$n,St,Ki="And there you go!",ro,N,Bt,Si='<a href="#the-solution" id="the-solution">The Solution</a>',En,Lt,Bi='Here&#39;s the final solution to <a href="#the-challenge">the challenge</a>:',Fn,Vt,no,zc=`<div class="filename">Solution</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;
type ParamValue&lt;Key&gt; = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number;
type RemovePrefixDots&lt;Key&gt; = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key;
type Params&lt;Path&gt; = &#123;
  [Key in FilteredParts&lt;Path&gt; as RemovePrefixDots&lt;Key&gt;]: ParamValue&lt;Key&gt;;
&#125;;
type CallbackFn&lt;Path&gt; = (req: &#123; params: Params&lt;Path&gt; &#125;) =&gt; void;

function get&lt;Path extends string&gt;(path: Path, callback: CallbackFn&lt;Path&gt;) &#123;
	// TODO: implement
&#125;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Solution" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path> as RemovePrefixDots&lt;Key>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type CallbackFn&lt;Path> = (req: &#123;&#10;    params: Params&lt;Path>;&#10;&#125;) => void' >CallbackFn</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type CallbackFn&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) req: &#123;&#10;    params: Params&lt;Path>;&#10;&#125;' >req</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) params: Params&lt;Path>' >params</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path> as RemovePrefixDots&lt;Key>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type CallbackFn&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function get&lt;Path extends string>(path: Path, callback: CallbackFn&lt;Path>): void' >get</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in get&lt;Path extends string>(path: Path, callback: CallbackFn&lt;Path>): void' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">>(<data-lsp lsp='(parameter) path: Path extends string' >path</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in get&lt;Path extends string>(path: Path, callback: CallbackFn&lt;Path>): void' >Path</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) callback: CallbackFn&lt;Path>' >callback</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type CallbackFn&lt;Path> = (req: &#123;&#10;    params: Params&lt;Path>;&#10;&#125;) => void' >CallbackFn</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in get&lt;Path extends string>(path: Path, callback: CallbackFn&lt;Path>): void' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;) &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// TODO: implement</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,lo,S,$t,Li='<a href="#conclusion" id="conclusion">Conclusion</a>',Dn,Et,Vi="I hope this is a fun challenge for you.",Rn,Ft,$i='As you can see, there&#39;s endless possibilities with <a href="#conditional-type">Conditional Types</a> and <a href="#template-literal-and-string-literal-types">Template Literal Types</a>, allowing you to parse and derive types from a string literal type.',Nn,Dt,Ei='Before you go, here&#39;s another challenge, see if you can come up with the type for <code class="inline">Parse&lt;Str&gt;</code>:',jn,Rt,io,qc=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="38"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// &#96;Parse&#96; parses string into a nested string array of infinite level deep</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// type Parse&lt;Str extends string&gt; = ?;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type EmptyArray = []' style='border-bottom: solid 2px lightgrey;'>EmptyArray</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parse&lt;Str extends string> = ParseStringArray&lt;Str, []> extends [infer Remaining, infer Result] ? Remaining extends "" ? Result : never : never' >Parse</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;[]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type EmptyArray = []</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type StringArray = ["hello", "world"]' style='border-bottom: solid 2px lightgrey;'>StringArray</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parse&lt;Str extends string> = ParseStringArray&lt;Str, []> extends [infer Remaining, infer Result] ? Remaining extends "" ? Result : never : never' >Parse</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;["hello", "world"]&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type StringArray = ["hello", "world"]</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type NestedArray = ["hello", ["world", "ts", ["!"]], ["try this"]]' style='border-bottom: solid 2px lightgrey;'>NestedArray</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parse&lt;Str extends string> = ParseStringArray&lt;Str, []> extends [infer Remaining, infer Result] ? Remaining extends "" ? Result : never : never' >Parse</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;["hello", ["world", "ts", ["!"]], ["try this"]]&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type NestedArray = ["hello", ["world", "ts", ["!"]], ["try this"]]</span></div></code></div></pre>`,On,Nt,Fi='And you just wanna see the answer, <a href="https://www.typescriptlang.org/play?#code/C4TwDgpgBAchDOwIBMDKwBOBLAdgcwEEMMBDEKAXiiNJAB5Ft8oAfWBJNTXQ4sgPgDcAWABQoSFFQBrLGFRgSAYwh10GKBAAeSHMnhRGPfpSmZNOiHoMADKABIA3rgBmEDeoC+dgPxTZ8ooqapgmAFxmGCKiYhLQAAokGPAQ6iEa2rr6htz4JlRiUJEWWbYARE6u7lAAaiQANgCuEJ4VzjhuGgBKEAC2JLg83oVFUH4A2jJyCsqqPf2DeQA0tQ3NALojRRGTmCuNehAuuCjr0bHgCUkpAJJIveklVtlGeZQjicmpmOkmmc8GcZVbp9AY4HgrYGrJoQTaiUZjaHNJ7WHJMPBbUYTeZgiFI2GY7ZQT4pdQ8GhkX4o7JAjrVHGLPCQukaOowuEIhF+NnI-6ouCIFBk-AUkCEznY0GMlY8gnwzkInYM8H4faHY44U7ionjZV4g7II4nZAc0Y7dRqw0a07ncSXYnXCB3PrwR58l65JlQHrwRr1YDUgwCzjC3i0fIfR3Oh7qP6WVG0zreqUqr1Q2WmorctbQd1BjhCz2i8YABkzWOTC1TgagNiWlRZldx+GG8oVfhJTvurqmgVmdD1yyg4wAdGOfX7gDKc+t+NqoEqU3jR+OEJPp+zyzrB16J-7y+a9lADUbNSaxBdJJ3Q6K3fGPeiVnuA3n2IKuOjRaZxrPTCN1DWNjjA2SZeDYmIdlG3ZqAEMzBLGT5rv6calMOUI7sySbPluiI7oB6wgfSS4tuBbYSsOGHJr6+7zouVb6uqxo4YeGCWqeWpkSxbHWia0RxA6Xx3qhrx4PkUCRl8N58PQsY1omRH0aqUDoUhwDln4eGvgA5Fp4oaap4oRJqABu7iYkZECmVEF52pIACivRgKAX5UJ2dBaT+WlCGIAD0PmjAAej4l7QFJtCmG5HllAAFhA9T1AA9mUKxlAA7glGD1MgZTrF5vn+UUQUhW+nAuQJKTueMMVxYlyXDmlGVZXVZTAPAdVVQAhDl6wrFVmDkMA0VYG16y5XOoh+YFPhAA" rel="nofollow">here&#39;s the link to it</a>',po,j,jt,Di='<a href="#extra" id="extra">Extra</a>',zn,Ot,Ri='Here&#39;s the type I defined for the <code class="inline">Route</code> component in the example above',qn,zt,co,Xc=`<div class="filename">Route component</div><div class="copy" data-copy="import React from &#39;react&#39;;

type PathSegments&lt;Path extends string&gt; = Path extends &#96;$&#123;infer SegmentA&#125;/$&#123;infer SegmentB&#125;&#96;
  ? ParamOnly&lt;SegmentA&gt; | PathSegments&lt;SegmentB&gt;
  : ParamOnly&lt;Path&gt;;
type ParamOnly&lt;Segment extends string&gt; = Segment extends &#96;:$&#123;infer Param&#125;&#96;
  ? Param
  : never;
type RouteParams&lt;Path extends string&gt; = &#123;
  [Key in PathSegments&lt;Path&gt;]: string;
&#125;;

function Route&lt;Path extends string&gt;(&#123;&#125;: &#123;
  path: Path;
  render: (routeProps: &#123;
    match: &#123; params: RouteParams&lt;Path&gt; &#125;;
  &#125;) =&gt; void;
&#125;) &#123;
  return &lt;div /&gt;;
&#125;

&lt;Route
  path=&quot;/user/:username&quot;
  render=&#123;(routeProps) =&gt; &#123;
    const params = routeProps.match.params;
  &#125;&#125;
/&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="tsx" filename="Route component" copy="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp> </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;react&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type PathSegments&lt;Path extends string> = Path extends &#96;$&#123;infer SegmentA&#125;/$&#123;infer SegmentB&#125;&#96; ? ParamOnly&lt;SegmentA> | PathSegments&lt;SegmentB> : ParamOnly&lt;Path>' >PathSegments</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type PathSegments&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type PathSegments&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) SegmentA' >SegmentA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) SegmentB' >SegmentB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamOnly&lt;Segment extends string> = Segment extends &#96;:$&#123;infer Param&#125;&#96; ? Param : never' >ParamOnly</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) SegmentA' >SegmentA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type PathSegments&lt;Path extends string> = Path extends &#96;$&#123;infer SegmentA&#125;/$&#123;infer SegmentB&#125;&#96; ? ParamOnly&lt;SegmentA> | PathSegments&lt;SegmentB> : ParamOnly&lt;Path>' >PathSegments</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) SegmentB' >SegmentB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamOnly&lt;Segment extends string> = Segment extends &#96;:$&#123;infer Param&#125;&#96; ? Param : never' >ParamOnly</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type PathSegments&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamOnly&lt;Segment extends string> = Segment extends &#96;:$&#123;infer Param&#125;&#96; ? Param : never' >ParamOnly</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Segment in type ParamOnly&lt;Segment extends string>' >Segment</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Segment in type ParamOnly&lt;Segment extends string>' >Segment</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;:</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Param' >Param</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Param' >Param</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RouteParams&lt;Path extends string> = &#123; [Key in PathSegments&lt;Path>]: string; &#125;' >RouteParams</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type RouteParams&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type PathSegments&lt;Path extends string> = Path extends &#96;$&#123;infer SegmentA&#125;/$&#123;infer SegmentB&#125;&#96; ? ParamOnly&lt;SegmentA> | PathSegments&lt;SegmentB> : ParamOnly&lt;Path>' >PathSegments</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type RouteParams&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function Route&lt;Path extends string>(&#123;&#125;: &#123;&#10;    path: Path;&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;Path>;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): React.JSX.Element' >Route</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in Route&lt;Path extends string>(&#123;&#125;: &#123;&#10;    path: Path;&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;Path>;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): React.JSX.Element' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt;(&#123;&#125;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) path: Path extends string' >path</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in Route&lt;Path extends string>(&#123;&#125;: &#123;&#10;    path: Path;&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;Path>;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): React.JSX.Element' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) render: (routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;Path>;&#10;    &#125;;&#10;&#125;) => void' >render</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;Path>;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    <data-lsp lsp='(property) match: &#123;&#10;    params: RouteParams&lt;Path>;&#10;&#125;' >match</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) params: RouteParams&lt;Path>' >params</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RouteParams&lt;Path extends string> = &#123; [Key in PathSegments&lt;Path>]: string; &#125;' >RouteParams</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in Route&lt;Path extends string>(&#123;&#125;: &#123;&#10;    path: Path;&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;Path>;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): React.JSX.Element' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; &#125;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> /&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function Route&lt;"/user/:username">(&#123;&#125;: &#123;&#10;    path: "/user/:username";&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;"/user/:username">;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): React.JSX.Element' >Route</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) path: "/user/:username"' >path</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">"/user/:username"</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) render: (routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;"/user/:username">;&#10;    &#125;;&#10;&#125;) => void' >render</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;(<data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;"/user/:username">;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: RouteParams&lt;"/user/:username">' >params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;"/user/:username">;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) match: &#123;&#10;    params: RouteParams&lt;"/user/:username">;&#10;&#125;' >match</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) params: RouteParams&lt;"/user/:username">' >params</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &#125;&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">/&gt;;</span></div></code></div></pre>`,ko,as,Ni='<h2><a href="#references" id="references">References</a></h2> <ul><li>TypeScript Docs<ul><li><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types" rel="nofollow">Literal Types</a></li> <li><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types" rel="nofollow">Union Types</a></li> <li><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html" rel="nofollow">Conditional Types</a></li> <li><a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads" rel="nofollow">Function Overloads</a></li> <li><a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#generic-functions" rel="nofollow">Generic Functions</a></li> <li><a href="https://www.typescriptlang.org/docs/handbook/2/objects.html" rel="nofollow">Objects</a></li> <li><a href="https://www.typescriptlang.org/docs/handbook/2/mapped-types.html" rel="nofollow">Mapped Types</a></li> <li><a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html" rel="nofollow">Template Literal Types</a></li></ul></li> <li><a href="https://mariusschulz.com/blog/string-literal-types-in-typescript" rel="nofollow">String Literal Types in TypeScript</a></li> <li><a href="https://dmitripavlutin.com/typescript-index-signatures/" rel="nofollow">Index Signatures in TypeScript</a></li> <li><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/pull/51262" rel="nofollow">PR in DefinitelyTyped: infering route parameters using template literal types</a></li></ul>';return{c(){v=a("section"),L=a("h2"),L.innerHTML=z,X=e(),C=a("p"),C.textContent=D,es=e(),os=a("p"),os.innerHTML=Gn,yo=e(),rs=a("div"),Wt=new k(!1),vo=e(),ns=a("p"),ns.innerHTML=Wn,ho=e(),ls=a("p"),ls.innerHTML=Jn,xo=e(),is=a("p"),is.innerHTML=Un,mo=e(),ps=a("p"),ps.innerHTML=Qn,uo=e(),cs=a("p"),cs.textContent=Yn,go=e(),ks=a("div"),Jt=new k(!1),fo=e(),ys=a("p"),ys.innerHTML=Zn,Po=e(),vs=a("div"),Ut=new k(!1),wo=e(),ds=a("p"),ds.textContent=sl,Qt=e(),G=a("section"),G.innerHTML=al,Yt=e(),m=a("section"),hs=a("h3"),hs.innerHTML=tl,bo=e(),xs=a("p"),xs.innerHTML=el,_o=e(),ms=a("div"),Zt=new k(!1),Ao=e(),us=a("p"),us.innerHTML=ol,Io=e(),gs=a("div"),se=new k(!1),To=e(),fs=a("p"),fs.innerHTML=rl,Co=e(),Ps=a("div"),ae=new k(!1),Ho=e(),ws=a("p"),ws.textContent=nl,Mo=e(),bs=a("p"),bs.innerHTML=ll,Ko=e(),_s=a("div"),te=new k(!1),So=e(),As=a("p"),As.textContent=il,Bo=e(),Is=a("div"),ee=new k(!1),Lo=e(),Ts=a("p"),Ts.innerHTML=pl,Vo=e(),Cs=a("div"),oe=new k(!1),$o=e(),Hs=a("p"),Hs.innerHTML=cl,Eo=e(),Ms=a("p"),Ms.textContent=kl,re=e(),R=a("section"),Ks=a("h4"),Ks.innerHTML=yl,Fo=e(),Ss=a("p"),Ss.innerHTML=vl,Do=e(),Bs=a("div"),ne=new k(!1),le=e(),M=a("section"),Ls=a("h3"),Ls.innerHTML=dl,Ro=e(),Vs=a("p"),Vs.innerHTML=hl,No=e(),$s=a("div"),ie=new k(!1),jo=e(),Es=a("p"),Es.innerHTML=xl,Oo=e(),Fs=a("p"),Fs.innerHTML=ml,zo=e(),Ds=a("div"),pe=new k(!1),ce=e(),d=a("section"),Rs=a("h3"),Rs.innerHTML=ul,qo=e(),Ns=a("p"),Ns.innerHTML=gl,Xo=e(),js=a("p"),js.textContent=fl,Go=e(),Os=a("p"),Os.textContent=Pl,Wo=e(),zs=a("div"),ke=new k(!1),Jo=e(),qs=a("p"),qs.textContent=wl,Uo=e(),Xs=a("div"),ye=new k(!1),Qo=e(),Gs=a("p"),Gs.textContent=bl,Yo=e(),Ws=a("p"),Ws.textContent=_l,Zo=e(),Js=a("div"),ve=new k(!1),sr=e(),Us=a("p"),Us.innerHTML=Al,ar=e(),Qs=a("p"),Qs.innerHTML=Il,tr=e(),Ys=a("div"),de=new k(!1),er=e(),Zs=a("p"),Zs.innerHTML=Tl,or=e(),sa=a("div"),he=new k(!1),rr=e(),aa=a("p"),aa.innerHTML=Cl,nr=e(),ta=a("div"),xe=new k(!1),lr=e(),ea=a("p"),ea.textContent=Hl,ir=e(),oa=a("p"),oa.innerHTML=Ml,pr=e(),ra=a("p"),ra.innerHTML=Kl,cr=e(),na=a("div"),me=new k(!1),ue=e(),V=a("section"),la=a("h2"),la.innerHTML=Sl,kr=e(),ia=a("p"),ia.innerHTML=Bl,yr=e(),pa=a("div"),ge=new k(!1),vr=e(),ca=a("p"),ca.innerHTML=Ll,fe=e(),x=a("section"),ka=a("h3"),ka.innerHTML=Vl,dr=e(),ya=a("p"),ya.textContent=$l,hr=e(),W=a("ol"),W.innerHTML=El,xr=e(),va=a("div"),Pe=new k(!1),mr=e(),da=a("ol"),da.innerHTML=Fl,ur=e(),ha=a("div"),we=new k(!1),gr=e(),J=a("ol"),J.innerHTML=Dl,fr=e(),xa=a("div"),be=new k(!1),Pr=e(),U=a("ol"),U.innerHTML=Rl,wr=e(),ma=a("div"),_e=new k(!1),br=e(),Q=a("ol"),Q.innerHTML=Nl,_r=e(),ua=a("div"),Ae=new k(!1),Ar=e(),Y=a("ol"),Y.innerHTML=jl,Ir=e(),ga=a("div"),Ie=new k(!1),Tr=e(),Z=a("ol"),Z.innerHTML=Ol,Cr=e(),fa=a("div"),Te=new k(!1),Hr=e(),ss=a("ol"),ss.innerHTML=zl,Mr=e(),Pa=a("div"),Ce=new k(!1),He=e(),f=a("section"),wa=a("h3"),wa.innerHTML=ql,Kr=e(),ba=a("p"),ba.innerHTML=Xl,Sr=e(),_a=a("div"),Me=new k(!1),Br=e(),Aa=a("p"),Aa.textContent=Gl,Lr=e(),Ia=a("div"),Ke=new k(!1),Vr=e(),Ta=a("p"),Ta.innerHTML=Wl,$r=e(),Ca=a("div"),Se=new k(!1),Er=e(),Ha=a("p"),Ha.innerHTML=Jl,Fr=e(),Ma=a("div"),Be=new k(!1),Dr=e(),Ka=a("p"),Ka.innerHTML=Ul,Rr=e(),Sa=a("div"),Le=new k(!1),Nr=e(),Ba=a("p"),Ba.innerHTML=Ql,jr=e(),La=a("div"),Ve=new k(!1),Or=e(),Va=a("p"),Va.textContent=Yl,zr=e(),$a=a("div"),$e=new k(!1),Ee=e(),P=a("section"),Ea=a("h3"),Ea.innerHTML=Zl,qr=e(),Fa=a("p"),Fa.innerHTML=si,Xr=e(),Da=a("div"),Fe=new k(!1),Gr=e(),Ra=a("p"),Ra.textContent=ai,Wr=e(),Na=a("div"),De=new k(!1),Jr=e(),ja=a("p"),ja.textContent=ti,Ur=e(),Oa=a("div"),Re=new k(!1),Qr=e(),za=a("p"),za.textContent=ei,Yr=e(),qa=a("div"),Ne=new k(!1),Zr=e(),Xa=a("p"),Xa.textContent=oi,sn=e(),Ga=a("p"),Ga.innerHTML=ri,an=e(),Wa=a("div"),je=new k(!1),tn=e(),Ja=a("p"),Ja.innerHTML=ni,en=e(),Ua=a("p"),Ua.textContent=li,on=e(),Qa=a("div"),Oe=new k(!1),ze=e(),B=a("section"),Ya=a("h3"),Ya.innerHTML=ii,rn=e(),Za=a("p"),Za.textContent=pi,nn=e(),st=a("p"),st.innerHTML=ci,ln=e(),at=a("p"),at.innerHTML=ki,pn=e(),tt=a("div"),qe=new k(!1),Xe=e(),T=a("section"),et=a("h3"),et.innerHTML=yi,cn=e(),ot=a("p"),ot.innerHTML=vi,kn=e(),rt=a("p"),rt.textContent=di,yn=e(),nt=a("div"),Ge=new k(!1),vn=e(),lt=a("p"),lt.innerHTML=hi,dn=e(),it=a("div"),We=new k(!1),hn=e(),pt=a("p"),pt.innerHTML=xi,xn=e(),ct=a("div"),Je=new k(!1),mn=e(),kt=a("p"),kt.textContent=mi,un=e(),yt=a("div"),Ue=new k(!1),Qe=e(),w=a("section"),vt=a("h3"),vt.innerHTML=ui,gn=e(),dt=a("p"),dt.textContent=gi,fn=e(),ht=a("ul"),ht.innerHTML=fi,Pn=e(),xt=a("p"),xt.innerHTML=Pi,wn=e(),mt=a("p"),mt.textContent=wi,bn=e(),ut=a("div"),Ye=new k(!1),_n=e(),gt=a("p"),gt.innerHTML=bi,An=e(),ft=a("p"),ft.innerHTML=_i,In=e(),Pt=a("p"),Pt.textContent=Ai,Tn=e(),wt=a("div"),Ze=new k(!1),Cn=e(),bt=a("p"),bt.textContent=Ii,Hn=e(),_t=a("div"),so=new k(!1),Mn=e(),At=a("p"),At.textContent=Ti,Kn=e(),It=a("div"),ao=new k(!1),to=e(),K=a("section"),Tt=a("h3"),Tt.innerHTML=Ci,Sn=e(),Ct=a("p"),Ct.innerHTML=Hi,Bn=e(),Ht=a("div"),eo=new k(!1),Ln=e(),Mt=a("p"),Mt.innerHTML=Mi,Vn=e(),Kt=a("div"),oo=new k(!1),$n=e(),St=a("p"),St.textContent=Ki,ro=e(),N=a("section"),Bt=a("h3"),Bt.innerHTML=Si,En=e(),Lt=a("p"),Lt.innerHTML=Bi,Fn=e(),Vt=a("div"),no=new k(!1),lo=e(),S=a("section"),$t=a("h2"),$t.innerHTML=Li,Dn=e(),Et=a("p"),Et.textContent=Vi,Rn=e(),Ft=a("p"),Ft.innerHTML=$i,Nn=e(),Dt=a("p"),Dt.innerHTML=Ei,jn=e(),Rt=a("div"),io=new k(!1),On=e(),Nt=a("p"),Nt.innerHTML=Fi,po=e(),j=a("section"),jt=a("h2"),jt.innerHTML=Di,zn=e(),Ot=a("p"),Ot.innerHTML=Ri,qn=e(),zt=a("div"),co=new k(!1),ko=e(),as=a("section"),as.innerHTML=Ni,this.h()},l(l){v=t(l,"SECTION",{});var p=i(v);L=t(p,"H2",{"data-svelte-h":!0}),n(L)!=="svelte-6a2dqg"&&(L.innerHTML=z),X=o(p),C=t(p,"P",{"data-svelte-h":!0}),n(C)!=="svelte-zcvfnl"&&(C.textContent=D),es=o(p),os=t(p,"P",{"data-svelte-h":!0}),n(os)!=="svelte-1p19j90"&&(os.innerHTML=Gn),yo=o(p),rs=t(p,"DIV",{class:!0});var ji=i(rs);Wt=y(ji,!1),ji.forEach(r),vo=o(p),ns=t(p,"P",{"data-svelte-h":!0}),n(ns)!=="svelte-cxsjyn"&&(ns.innerHTML=Wn),ho=o(p),ls=t(p,"P",{"data-svelte-h":!0}),n(ls)!=="svelte-rr7iy6"&&(ls.innerHTML=Jn),xo=o(p),is=t(p,"P",{"data-svelte-h":!0}),n(is)!=="svelte-s618ce"&&(is.innerHTML=Un),mo=o(p),ps=t(p,"P",{"data-svelte-h":!0}),n(ps)!=="svelte-yx15en"&&(ps.innerHTML=Qn),uo=o(p),cs=t(p,"P",{"data-svelte-h":!0}),n(cs)!=="svelte-i5xt3"&&(cs.textContent=Yn),go=o(p),ks=t(p,"DIV",{class:!0});var Oi=i(ks);Jt=y(Oi,!1),Oi.forEach(r),fo=o(p),ys=t(p,"P",{"data-svelte-h":!0}),n(ys)!=="svelte-16juk4h"&&(ys.innerHTML=Zn),Po=o(p),vs=t(p,"DIV",{class:!0});var zi=i(vs);Ut=y(zi,!1),zi.forEach(r),wo=o(p),ds=t(p,"P",{"data-svelte-h":!0}),n(ds)!=="svelte-tsd7ie"&&(ds.textContent=sl),p.forEach(r),Qt=o(l),G=t(l,"SECTION",{"data-svelte-h":!0}),n(G)!=="svelte-xxsded"&&(G.innerHTML=al),Yt=o(l),m=t(l,"SECTION",{});var b=i(m);hs=t(b,"H3",{"data-svelte-h":!0}),n(hs)!=="svelte-1sheq9m"&&(hs.innerHTML=tl),bo=o(b),xs=t(b,"P",{"data-svelte-h":!0}),n(xs)!=="svelte-ry5i1k"&&(xs.innerHTML=el),_o=o(b),ms=t(b,"DIV",{class:!0});var qi=i(ms);Zt=y(qi,!1),qi.forEach(r),Ao=o(b),us=t(b,"P",{"data-svelte-h":!0}),n(us)!=="svelte-1d7d3q2"&&(us.innerHTML=ol),Io=o(b),gs=t(b,"DIV",{class:!0});var Xi=i(gs);se=y(Xi,!1),Xi.forEach(r),To=o(b),fs=t(b,"P",{"data-svelte-h":!0}),n(fs)!=="svelte-snk827"&&(fs.innerHTML=rl),Co=o(b),Ps=t(b,"DIV",{class:!0});var Gi=i(Ps);ae=y(Gi,!1),Gi.forEach(r),Ho=o(b),ws=t(b,"P",{"data-svelte-h":!0}),n(ws)!=="svelte-1e00a1k"&&(ws.textContent=nl),Mo=o(b),bs=t(b,"P",{"data-svelte-h":!0}),n(bs)!=="svelte-ovrdlf"&&(bs.innerHTML=ll),Ko=o(b),_s=t(b,"DIV",{class:!0});var Wi=i(_s);te=y(Wi,!1),Wi.forEach(r),So=o(b),As=t(b,"P",{"data-svelte-h":!0}),n(As)!=="svelte-tzvszc"&&(As.textContent=il),Bo=o(b),Is=t(b,"DIV",{class:!0});var Ji=i(Is);ee=y(Ji,!1),Ji.forEach(r),Lo=o(b),Ts=t(b,"P",{"data-svelte-h":!0}),n(Ts)!=="svelte-r5ew57"&&(Ts.innerHTML=pl),Vo=o(b),Cs=t(b,"DIV",{class:!0});var Ui=i(Cs);oe=y(Ui,!1),Ui.forEach(r),$o=o(b),Hs=t(b,"P",{"data-svelte-h":!0}),n(Hs)!=="svelte-1x5ij5t"&&(Hs.innerHTML=cl),Eo=o(b),Ms=t(b,"P",{"data-svelte-h":!0}),n(Ms)!=="svelte-7i4pr9"&&(Ms.textContent=kl),b.forEach(r),re=o(l),R=t(l,"SECTION",{});var qt=i(R);Ks=t(qt,"H4",{"data-svelte-h":!0}),n(Ks)!=="svelte-1k2bfct"&&(Ks.innerHTML=yl),Fo=o(qt),Ss=t(qt,"P",{"data-svelte-h":!0}),n(Ss)!=="svelte-ulv4tg"&&(Ss.innerHTML=vl),Do=o(qt),Bs=t(qt,"DIV",{class:!0});var Qi=i(Bs);ne=y(Qi,!1),Qi.forEach(r),qt.forEach(r),le=o(l),M=t(l,"SECTION",{});var $=i(M);Ls=t($,"H3",{"data-svelte-h":!0}),n(Ls)!=="svelte-17y48zy"&&(Ls.innerHTML=dl),Ro=o($),Vs=t($,"P",{"data-svelte-h":!0}),n(Vs)!=="svelte-16owmv6"&&(Vs.innerHTML=hl),No=o($),$s=t($,"DIV",{class:!0});var Yi=i($s);ie=y(Yi,!1),Yi.forEach(r),jo=o($),Es=t($,"P",{"data-svelte-h":!0}),n(Es)!=="svelte-18pb55d"&&(Es.innerHTML=xl),Oo=o($),Fs=t($,"P",{"data-svelte-h":!0}),n(Fs)!=="svelte-11kspgo"&&(Fs.innerHTML=ml),zo=o($),Ds=t($,"DIV",{class:!0});var Zi=i(Ds);pe=y(Zi,!1),Zi.forEach(r),$.forEach(r),ce=o(l),d=t(l,"SECTION",{});var h=i(d);Rs=t(h,"H3",{"data-svelte-h":!0}),n(Rs)!=="svelte-b03j5s"&&(Rs.innerHTML=ul),qo=o(h),Ns=t(h,"P",{"data-svelte-h":!0}),n(Ns)!=="svelte-10ghi3o"&&(Ns.innerHTML=gl),Xo=o(h),js=t(h,"P",{"data-svelte-h":!0}),n(js)!=="svelte-su002d"&&(js.textContent=fl),Go=o(h),Os=t(h,"P",{"data-svelte-h":!0}),n(Os)!=="svelte-1jbbapn"&&(Os.textContent=Pl),Wo=o(h),zs=t(h,"DIV",{class:!0});var sp=i(zs);ke=y(sp,!1),sp.forEach(r),Jo=o(h),qs=t(h,"P",{"data-svelte-h":!0}),n(qs)!=="svelte-18a5l00"&&(qs.textContent=wl),Uo=o(h),Xs=t(h,"DIV",{class:!0});var ap=i(Xs);ye=y(ap,!1),ap.forEach(r),Qo=o(h),Gs=t(h,"P",{"data-svelte-h":!0}),n(Gs)!=="svelte-b6ntg4"&&(Gs.textContent=bl),Yo=o(h),Ws=t(h,"P",{"data-svelte-h":!0}),n(Ws)!=="svelte-1j7fj4z"&&(Ws.textContent=_l),Zo=o(h),Js=t(h,"DIV",{class:!0});var tp=i(Js);ve=y(tp,!1),tp.forEach(r),sr=o(h),Us=t(h,"P",{"data-svelte-h":!0}),n(Us)!=="svelte-xf8d7u"&&(Us.innerHTML=Al),ar=o(h),Qs=t(h,"P",{"data-svelte-h":!0}),n(Qs)!=="svelte-1ap0q"&&(Qs.innerHTML=Il),tr=o(h),Ys=t(h,"DIV",{class:!0});var ep=i(Ys);de=y(ep,!1),ep.forEach(r),er=o(h),Zs=t(h,"P",{"data-svelte-h":!0}),n(Zs)!=="svelte-1y5yytl"&&(Zs.innerHTML=Tl),or=o(h),sa=t(h,"DIV",{class:!0});var op=i(sa);he=y(op,!1),op.forEach(r),rr=o(h),aa=t(h,"P",{"data-svelte-h":!0}),n(aa)!=="svelte-1g64qbi"&&(aa.innerHTML=Cl),nr=o(h),ta=t(h,"DIV",{class:!0});var rp=i(ta);xe=y(rp,!1),rp.forEach(r),lr=o(h),ea=t(h,"P",{"data-svelte-h":!0}),n(ea)!=="svelte-11p8op3"&&(ea.textContent=Hl),ir=o(h),oa=t(h,"P",{"data-svelte-h":!0}),n(oa)!=="svelte-say071"&&(oa.innerHTML=Ml),pr=o(h),ra=t(h,"P",{"data-svelte-h":!0}),n(ra)!=="svelte-1ud7b5b"&&(ra.innerHTML=Kl),cr=o(h),na=t(h,"DIV",{class:!0});var np=i(na);me=y(np,!1),np.forEach(r),h.forEach(r),ue=o(l),V=t(l,"SECTION",{});var q=i(V);la=t(q,"H2",{"data-svelte-h":!0}),n(la)!=="svelte-17q8ch8"&&(la.innerHTML=Sl),kr=o(q),ia=t(q,"P",{"data-svelte-h":!0}),n(ia)!=="svelte-1kvk8wm"&&(ia.innerHTML=Bl),yr=o(q),pa=t(q,"DIV",{class:!0});var lp=i(pa);ge=y(lp,!1),lp.forEach(r),vr=o(q),ca=t(q,"P",{"data-svelte-h":!0}),n(ca)!=="svelte-vwf2lm"&&(ca.innerHTML=Ll),q.forEach(r),fe=o(l),x=t(l,"SECTION",{});var u=i(x);ka=t(u,"H3",{"data-svelte-h":!0}),n(ka)!=="svelte-q8k9py"&&(ka.innerHTML=Vl),dr=o(u),ya=t(u,"P",{"data-svelte-h":!0}),n(ya)!=="svelte-134kh52"&&(ya.textContent=$l),hr=o(u),W=t(u,"OL",{start:!0,"data-svelte-h":!0}),n(W)!=="svelte-lgldbp"&&(W.innerHTML=El),xr=o(u),va=t(u,"DIV",{class:!0});var ip=i(va);Pe=y(ip,!1),ip.forEach(r),mr=o(u),da=t(u,"OL",{"data-svelte-h":!0}),n(da)!=="svelte-1nie59k"&&(da.innerHTML=Fl),ur=o(u),ha=t(u,"DIV",{class:!0});var pp=i(ha);we=y(pp,!1),pp.forEach(r),gr=o(u),J=t(u,"OL",{start:!0,"data-svelte-h":!0}),n(J)!=="svelte-rmadaw"&&(J.innerHTML=Dl),fr=o(u),xa=t(u,"DIV",{class:!0});var cp=i(xa);be=y(cp,!1),cp.forEach(r),Pr=o(u),U=t(u,"OL",{start:!0,"data-svelte-h":!0}),n(U)!=="svelte-2jjjlr"&&(U.innerHTML=Rl),wr=o(u),ma=t(u,"DIV",{class:!0});var kp=i(ma);_e=y(kp,!1),kp.forEach(r),br=o(u),Q=t(u,"OL",{start:!0,"data-svelte-h":!0}),n(Q)!=="svelte-12u3ktn"&&(Q.innerHTML=Nl),_r=o(u),ua=t(u,"DIV",{class:!0});var yp=i(ua);Ae=y(yp,!1),yp.forEach(r),Ar=o(u),Y=t(u,"OL",{start:!0,"data-svelte-h":!0}),n(Y)!=="svelte-jxmx4g"&&(Y.innerHTML=jl),Ir=o(u),ga=t(u,"DIV",{class:!0});var vp=i(ga);Ie=y(vp,!1),vp.forEach(r),Tr=o(u),Z=t(u,"OL",{start:!0,"data-svelte-h":!0}),n(Z)!=="svelte-3y8tfy"&&(Z.innerHTML=Ol),Cr=o(u),fa=t(u,"DIV",{class:!0});var dp=i(fa);Te=y(dp,!1),dp.forEach(r),Hr=o(u),ss=t(u,"OL",{start:!0,"data-svelte-h":!0}),n(ss)!=="svelte-1xg0i20"&&(ss.innerHTML=zl),Mr=o(u),Pa=t(u,"DIV",{class:!0});var hp=i(Pa);Ce=y(hp,!1),hp.forEach(r),u.forEach(r),He=o(l),f=t(l,"SECTION",{});var _=i(f);wa=t(_,"H3",{"data-svelte-h":!0}),n(wa)!=="svelte-1bj9vfl"&&(wa.innerHTML=ql),Kr=o(_),ba=t(_,"P",{"data-svelte-h":!0}),n(ba)!=="svelte-1sxdvkq"&&(ba.innerHTML=Xl),Sr=o(_),_a=t(_,"DIV",{class:!0});var xp=i(_a);Me=y(xp,!1),xp.forEach(r),Br=o(_),Aa=t(_,"P",{"data-svelte-h":!0}),n(Aa)!=="svelte-1gt7mub"&&(Aa.textContent=Gl),Lr=o(_),Ia=t(_,"DIV",{class:!0});var mp=i(Ia);Ke=y(mp,!1),mp.forEach(r),Vr=o(_),Ta=t(_,"P",{"data-svelte-h":!0}),n(Ta)!=="svelte-h2an2"&&(Ta.innerHTML=Wl),$r=o(_),Ca=t(_,"DIV",{class:!0});var up=i(Ca);Se=y(up,!1),up.forEach(r),Er=o(_),Ha=t(_,"P",{"data-svelte-h":!0}),n(Ha)!=="svelte-r3ppd2"&&(Ha.innerHTML=Jl),Fr=o(_),Ma=t(_,"DIV",{class:!0});var gp=i(Ma);Be=y(gp,!1),gp.forEach(r),Dr=o(_),Ka=t(_,"P",{"data-svelte-h":!0}),n(Ka)!=="svelte-ewvfbx"&&(Ka.innerHTML=Ul),Rr=o(_),Sa=t(_,"DIV",{class:!0});var fp=i(Sa);Le=y(fp,!1),fp.forEach(r),Nr=o(_),Ba=t(_,"P",{"data-svelte-h":!0}),n(Ba)!=="svelte-1wthcga"&&(Ba.innerHTML=Ql),jr=o(_),La=t(_,"DIV",{class:!0});var Pp=i(La);Ve=y(Pp,!1),Pp.forEach(r),Or=o(_),Va=t(_,"P",{"data-svelte-h":!0}),n(Va)!=="svelte-1cnvstg"&&(Va.textContent=Yl),zr=o(_),$a=t(_,"DIV",{class:!0});var wp=i($a);$e=y(wp,!1),wp.forEach(r),_.forEach(r),Ee=o(l),P=t(l,"SECTION",{});var A=i(P);Ea=t(A,"H3",{"data-svelte-h":!0}),n(Ea)!=="svelte-1w67lw8"&&(Ea.innerHTML=Zl),qr=o(A),Fa=t(A,"P",{"data-svelte-h":!0}),n(Fa)!=="svelte-1b863lc"&&(Fa.innerHTML=si),Xr=o(A),Da=t(A,"DIV",{class:!0});var bp=i(Da);Fe=y(bp,!1),bp.forEach(r),Gr=o(A),Ra=t(A,"P",{"data-svelte-h":!0}),n(Ra)!=="svelte-ni68sb"&&(Ra.textContent=ai),Wr=o(A),Na=t(A,"DIV",{class:!0});var _p=i(Na);De=y(_p,!1),_p.forEach(r),Jr=o(A),ja=t(A,"P",{"data-svelte-h":!0}),n(ja)!=="svelte-1m75ftm"&&(ja.textContent=ti),Ur=o(A),Oa=t(A,"DIV",{class:!0});var Ap=i(Oa);Re=y(Ap,!1),Ap.forEach(r),Qr=o(A),za=t(A,"P",{"data-svelte-h":!0}),n(za)!=="svelte-rht103"&&(za.textContent=ei),Yr=o(A),qa=t(A,"DIV",{class:!0});var Ip=i(qa);Ne=y(Ip,!1),Ip.forEach(r),Zr=o(A),Xa=t(A,"P",{"data-svelte-h":!0}),n(Xa)!=="svelte-xr7ybo"&&(Xa.textContent=oi),sn=o(A),Ga=t(A,"P",{"data-svelte-h":!0}),n(Ga)!=="svelte-zfg0wo"&&(Ga.innerHTML=ri),an=o(A),Wa=t(A,"DIV",{class:!0});var Tp=i(Wa);je=y(Tp,!1),Tp.forEach(r),tn=o(A),Ja=t(A,"P",{"data-svelte-h":!0}),n(Ja)!=="svelte-1lj8x42"&&(Ja.innerHTML=ni),en=o(A),Ua=t(A,"P",{"data-svelte-h":!0}),n(Ua)!=="svelte-ck5cyg"&&(Ua.textContent=li),on=o(A),Qa=t(A,"DIV",{class:!0});var Cp=i(Qa);Oe=y(Cp,!1),Cp.forEach(r),A.forEach(r),ze=o(l),B=t(l,"SECTION",{});var O=i(B);Ya=t(O,"H3",{"data-svelte-h":!0}),n(Ya)!=="svelte-1p2zkxh"&&(Ya.innerHTML=ii),rn=o(O),Za=t(O,"P",{"data-svelte-h":!0}),n(Za)!=="svelte-vfvsvi"&&(Za.textContent=pi),nn=o(O),st=t(O,"P",{"data-svelte-h":!0}),n(st)!=="svelte-zzm4yx"&&(st.innerHTML=ci),ln=o(O),at=t(O,"P",{"data-svelte-h":!0}),n(at)!=="svelte-efctd0"&&(at.innerHTML=ki),pn=o(O),tt=t(O,"DIV",{class:!0});var Hp=i(tt);qe=y(Hp,!1),Hp.forEach(r),O.forEach(r),Xe=o(l),T=t(l,"SECTION",{});var H=i(T);et=t(H,"H3",{"data-svelte-h":!0}),n(et)!=="svelte-ubd5b"&&(et.innerHTML=yi),cn=o(H),ot=t(H,"P",{"data-svelte-h":!0}),n(ot)!=="svelte-g93010"&&(ot.innerHTML=vi),kn=o(H),rt=t(H,"P",{"data-svelte-h":!0}),n(rt)!=="svelte-4azvun"&&(rt.textContent=di),yn=o(H),nt=t(H,"DIV",{class:!0});var Mp=i(nt);Ge=y(Mp,!1),Mp.forEach(r),vn=o(H),lt=t(H,"P",{"data-svelte-h":!0}),n(lt)!=="svelte-326hl0"&&(lt.innerHTML=hi),dn=o(H),it=t(H,"DIV",{class:!0});var Kp=i(it);We=y(Kp,!1),Kp.forEach(r),hn=o(H),pt=t(H,"P",{"data-svelte-h":!0}),n(pt)!=="svelte-1b2uold"&&(pt.innerHTML=xi),xn=o(H),ct=t(H,"DIV",{class:!0});var Sp=i(ct);Je=y(Sp,!1),Sp.forEach(r),mn=o(H),kt=t(H,"P",{"data-svelte-h":!0}),n(kt)!=="svelte-1qlqe4t"&&(kt.textContent=mi),un=o(H),yt=t(H,"DIV",{class:!0});var Bp=i(yt);Ue=y(Bp,!1),Bp.forEach(r),H.forEach(r),Qe=o(l),w=t(l,"SECTION",{});var I=i(w);vt=t(I,"H3",{"data-svelte-h":!0}),n(vt)!=="svelte-147i53u"&&(vt.innerHTML=ui),gn=o(I),dt=t(I,"P",{"data-svelte-h":!0}),n(dt)!=="svelte-19u9rok"&&(dt.textContent=gi),fn=o(I),ht=t(I,"UL",{"data-svelte-h":!0}),n(ht)!=="svelte-1pb69k3"&&(ht.innerHTML=fi),Pn=o(I),xt=t(I,"P",{"data-svelte-h":!0}),n(xt)!=="svelte-1j1gtg7"&&(xt.innerHTML=Pi),wn=o(I),mt=t(I,"P",{"data-svelte-h":!0}),n(mt)!=="svelte-vn4113"&&(mt.textContent=wi),bn=o(I),ut=t(I,"DIV",{class:!0});var Lp=i(ut);Ye=y(Lp,!1),Lp.forEach(r),_n=o(I),gt=t(I,"P",{"data-svelte-h":!0}),n(gt)!=="svelte-1gt96lc"&&(gt.innerHTML=bi),An=o(I),ft=t(I,"P",{"data-svelte-h":!0}),n(ft)!=="svelte-15cr1gs"&&(ft.innerHTML=_i),In=o(I),Pt=t(I,"P",{"data-svelte-h":!0}),n(Pt)!=="svelte-4776yo"&&(Pt.textContent=Ai),Tn=o(I),wt=t(I,"DIV",{class:!0});var Vp=i(wt);Ze=y(Vp,!1),Vp.forEach(r),Cn=o(I),bt=t(I,"P",{"data-svelte-h":!0}),n(bt)!=="svelte-1ttz5s2"&&(bt.textContent=Ii),Hn=o(I),_t=t(I,"DIV",{class:!0});var $p=i(_t);so=y($p,!1),$p.forEach(r),Mn=o(I),At=t(I,"P",{"data-svelte-h":!0}),n(At)!=="svelte-17tf5ya"&&(At.textContent=Ti),Kn=o(I),It=t(I,"DIV",{class:!0});var Ep=i(It);ao=y(Ep,!1),Ep.forEach(r),I.forEach(r),to=o(l),K=t(l,"SECTION",{});var E=i(K);Tt=t(E,"H3",{"data-svelte-h":!0}),n(Tt)!=="svelte-1ttbrb5"&&(Tt.innerHTML=Ci),Sn=o(E),Ct=t(E,"P",{"data-svelte-h":!0}),n(Ct)!=="svelte-1blzgmr"&&(Ct.innerHTML=Hi),Bn=o(E),Ht=t(E,"DIV",{class:!0});var Fp=i(Ht);eo=y(Fp,!1),Fp.forEach(r),Ln=o(E),Mt=t(E,"P",{"data-svelte-h":!0}),n(Mt)!=="svelte-529cpk"&&(Mt.innerHTML=Mi),Vn=o(E),Kt=t(E,"DIV",{class:!0});var Dp=i(Kt);oo=y(Dp,!1),Dp.forEach(r),$n=o(E),St=t(E,"P",{"data-svelte-h":!0}),n(St)!=="svelte-dzm6g5"&&(St.textContent=Ki),E.forEach(r),ro=o(l),N=t(l,"SECTION",{});var Xt=i(N);Bt=t(Xt,"H3",{"data-svelte-h":!0}),n(Bt)!=="svelte-8ldlew"&&(Bt.innerHTML=Si),En=o(Xt),Lt=t(Xt,"P",{"data-svelte-h":!0}),n(Lt)!=="svelte-g06vuq"&&(Lt.innerHTML=Bi),Fn=o(Xt),Vt=t(Xt,"DIV",{class:!0});var Rp=i(Vt);no=y(Rp,!1),Rp.forEach(r),Xt.forEach(r),lo=o(l),S=t(l,"SECTION",{});var F=i(S);$t=t(F,"H2",{"data-svelte-h":!0}),n($t)!=="svelte-gw977z"&&($t.innerHTML=Li),Dn=o(F),Et=t(F,"P",{"data-svelte-h":!0}),n(Et)!=="svelte-1w6bbhu"&&(Et.textContent=Vi),Rn=o(F),Ft=t(F,"P",{"data-svelte-h":!0}),n(Ft)!=="svelte-3xnirk"&&(Ft.innerHTML=$i),Nn=o(F),Dt=t(F,"P",{"data-svelte-h":!0}),n(Dt)!=="svelte-17wwt6o"&&(Dt.innerHTML=Ei),jn=o(F),Rt=t(F,"DIV",{class:!0});var Np=i(Rt);io=y(Np,!1),Np.forEach(r),On=o(F),Nt=t(F,"P",{"data-svelte-h":!0}),n(Nt)!=="svelte-g4rrfa"&&(Nt.innerHTML=Fi),F.forEach(r),po=o(l),j=t(l,"SECTION",{});var Gt=i(j);jt=t(Gt,"H2",{"data-svelte-h":!0}),n(jt)!=="svelte-1nswa2i"&&(jt.innerHTML=Di),zn=o(Gt),Ot=t(Gt,"P",{"data-svelte-h":!0}),n(Ot)!=="svelte-ddzehb"&&(Ot.innerHTML=Ri),qn=o(Gt),zt=t(Gt,"DIV",{class:!0});var jp=i(zt);co=y(jp,!1),jp.forEach(r),Gt.forEach(r),ko=o(l),as=t(l,"SECTION",{"data-svelte-h":!0}),n(as)!=="svelte-4kq9py"&&(as.innerHTML=Ni),this.h()},h(){Wt.a=null,c(rs,"class","code-section"),Jt.a=null,c(ks,"class","code-section"),Ut.a=null,c(vs,"class","code-section"),Zt.a=null,c(ms,"class","code-section"),se.a=null,c(gs,"class","code-section"),ae.a=null,c(Ps,"class","code-section"),te.a=null,c(_s,"class","code-section"),ee.a=null,c(Is,"class","code-section"),oe.a=null,c(Cs,"class","code-section"),ne.a=null,c(Bs,"class","code-section"),ie.a=null,c($s,"class","code-section"),pe.a=null,c(Ds,"class","code-section"),ke.a=null,c(zs,"class","code-section"),ye.a=null,c(Xs,"class","code-section"),ve.a=null,c(Js,"class","code-section"),de.a=null,c(Ys,"class","code-section"),he.a=null,c(sa,"class","code-section"),xe.a=null,c(ta,"class","code-section"),me.a=null,c(na,"class","code-section"),ge.a=null,c(pa,"class","code-section"),c(W,"start","0"),Pe.a=null,c(va,"class","code-section"),we.a=null,c(ha,"class","code-section"),c(J,"start","2"),be.a=null,c(xa,"class","code-section"),c(U,"start","3"),_e.a=null,c(ma,"class","code-section"),c(Q,"start","4"),Ae.a=null,c(ua,"class","code-section"),c(Y,"start","5"),Ie.a=null,c(ga,"class","code-section"),c(Z,"start","6"),Te.a=null,c(fa,"class","code-section"),c(ss,"start","7"),Ce.a=null,c(Pa,"class","code-section"),Me.a=null,c(_a,"class","code-section"),Ke.a=null,c(Ia,"class","code-section"),Se.a=null,c(Ca,"class","code-section"),Be.a=null,c(Ma,"class","code-section"),Le.a=null,c(Sa,"class","code-section"),Ve.a=null,c(La,"class","code-section"),$e.a=null,c($a,"class","code-section"),Fe.a=null,c(Da,"class","code-section"),De.a=null,c(Na,"class","code-section"),Re.a=null,c(Oa,"class","code-section"),Ne.a=null,c(qa,"class","code-section"),je.a=null,c(Wa,"class","code-section"),Oe.a=null,c(Qa,"class","code-section"),qe.a=null,c(tt,"class","code-section"),Ge.a=null,c(nt,"class","code-section"),We.a=null,c(it,"class","code-section"),Je.a=null,c(ct,"class","code-section"),Ue.a=null,c(yt,"class","code-section"),Ye.a=null,c(ut,"class","code-section"),Ze.a=null,c(wt,"class","code-section"),so.a=null,c(_t,"class","code-section"),ao.a=null,c(It,"class","code-section"),eo.a=null,c(Ht,"class","code-section"),oo.a=null,c(Kt,"class","code-section"),no.a=null,c(Vt,"class","code-section"),io.a=null,c(Rt,"class","code-section"),co.a=null,c(zt,"class","code-section")},m(l,p){g(l,v,p),s(v,L),s(v,X),s(v,C),s(v,es),s(v,os),s(v,yo),s(v,rs),Wt.m(Xp,rs),s(v,vo),s(v,ns),s(v,ho),s(v,ls),s(v,xo),s(v,is),s(v,mo),s(v,ps),s(v,uo),s(v,cs),s(v,go),s(v,ks),Jt.m(Gp,ks),s(v,fo),s(v,ys),s(v,Po),s(v,vs),Ut.m(Wp,vs),s(v,wo),s(v,ds),g(l,Qt,p),g(l,G,p),g(l,Yt,p),g(l,m,p),s(m,hs),s(m,bo),s(m,xs),s(m,_o),s(m,ms),Zt.m(Jp,ms),s(m,Ao),s(m,us),s(m,Io),s(m,gs),se.m(Up,gs),s(m,To),s(m,fs),s(m,Co),s(m,Ps),ae.m(Qp,Ps),s(m,Ho),s(m,ws),s(m,Mo),s(m,bs),s(m,Ko),s(m,_s),te.m(Yp,_s),s(m,So),s(m,As),s(m,Bo),s(m,Is),ee.m(Zp,Is),s(m,Lo),s(m,Ts),s(m,Vo),s(m,Cs),oe.m(sc,Cs),s(m,$o),s(m,Hs),s(m,Eo),s(m,Ms),g(l,re,p),g(l,R,p),s(R,Ks),s(R,Fo),s(R,Ss),s(R,Do),s(R,Bs),ne.m(ac,Bs),g(l,le,p),g(l,M,p),s(M,Ls),s(M,Ro),s(M,Vs),s(M,No),s(M,$s),ie.m(tc,$s),s(M,jo),s(M,Es),s(M,Oo),s(M,Fs),s(M,zo),s(M,Ds),pe.m(ec,Ds),g(l,ce,p),g(l,d,p),s(d,Rs),s(d,qo),s(d,Ns),s(d,Xo),s(d,js),s(d,Go),s(d,Os),s(d,Wo),s(d,zs),ke.m(oc,zs),s(d,Jo),s(d,qs),s(d,Uo),s(d,Xs),ye.m(rc,Xs),s(d,Qo),s(d,Gs),s(d,Yo),s(d,Ws),s(d,Zo),s(d,Js),ve.m(nc,Js),s(d,sr),s(d,Us),s(d,ar),s(d,Qs),s(d,tr),s(d,Ys),de.m(lc,Ys),s(d,er),s(d,Zs),s(d,or),s(d,sa),he.m(ic,sa),s(d,rr),s(d,aa),s(d,nr),s(d,ta),xe.m(pc,ta),s(d,lr),s(d,ea),s(d,ir),s(d,oa),s(d,pr),s(d,ra),s(d,cr),s(d,na),me.m(cc,na),g(l,ue,p),g(l,V,p),s(V,la),s(V,kr),s(V,ia),s(V,yr),s(V,pa),ge.m(kc,pa),s(V,vr),s(V,ca),g(l,fe,p),g(l,x,p),s(x,ka),s(x,dr),s(x,ya),s(x,hr),s(x,W),s(x,xr),s(x,va),Pe.m(yc,va),s(x,mr),s(x,da),s(x,ur),s(x,ha),we.m(vc,ha),s(x,gr),s(x,J),s(x,fr),s(x,xa),be.m(dc,xa),s(x,Pr),s(x,U),s(x,wr),s(x,ma),_e.m(hc,ma),s(x,br),s(x,Q),s(x,_r),s(x,ua),Ae.m(xc,ua),s(x,Ar),s(x,Y),s(x,Ir),s(x,ga),Ie.m(mc,ga),s(x,Tr),s(x,Z),s(x,Cr),s(x,fa),Te.m(uc,fa),s(x,Hr),s(x,ss),s(x,Mr),s(x,Pa),Ce.m(gc,Pa),g(l,He,p),g(l,f,p),s(f,wa),s(f,Kr),s(f,ba),s(f,Sr),s(f,_a),Me.m(fc,_a),s(f,Br),s(f,Aa),s(f,Lr),s(f,Ia),Ke.m(Pc,Ia),s(f,Vr),s(f,Ta),s(f,$r),s(f,Ca),Se.m(wc,Ca),s(f,Er),s(f,Ha),s(f,Fr),s(f,Ma),Be.m(bc,Ma),s(f,Dr),s(f,Ka),s(f,Rr),s(f,Sa),Le.m(_c,Sa),s(f,Nr),s(f,Ba),s(f,jr),s(f,La),Ve.m(Ac,La),s(f,Or),s(f,Va),s(f,zr),s(f,$a),$e.m(Ic,$a),g(l,Ee,p),g(l,P,p),s(P,Ea),s(P,qr),s(P,Fa),s(P,Xr),s(P,Da),Fe.m(Tc,Da),s(P,Gr),s(P,Ra),s(P,Wr),s(P,Na),De.m(Cc,Na),s(P,Jr),s(P,ja),s(P,Ur),s(P,Oa),Re.m(Hc,Oa),s(P,Qr),s(P,za),s(P,Yr),s(P,qa),Ne.m(Mc,qa),s(P,Zr),s(P,Xa),s(P,sn),s(P,Ga),s(P,an),s(P,Wa),je.m(Kc,Wa),s(P,tn),s(P,Ja),s(P,en),s(P,Ua),s(P,on),s(P,Qa),Oe.m(Sc,Qa),g(l,ze,p),g(l,B,p),s(B,Ya),s(B,rn),s(B,Za),s(B,nn),s(B,st),s(B,ln),s(B,at),s(B,pn),s(B,tt),qe.m(Bc,tt),g(l,Xe,p),g(l,T,p),s(T,et),s(T,cn),s(T,ot),s(T,kn),s(T,rt),s(T,yn),s(T,nt),Ge.m(Lc,nt),s(T,vn),s(T,lt),s(T,dn),s(T,it),We.m(Vc,it),s(T,hn),s(T,pt),s(T,xn),s(T,ct),Je.m($c,ct),s(T,mn),s(T,kt),s(T,un),s(T,yt),Ue.m(Ec,yt),g(l,Qe,p),g(l,w,p),s(w,vt),s(w,gn),s(w,dt),s(w,fn),s(w,ht),s(w,Pn),s(w,xt),s(w,wn),s(w,mt),s(w,bn),s(w,ut),Ye.m(Fc,ut),s(w,_n),s(w,gt),s(w,An),s(w,ft),s(w,In),s(w,Pt),s(w,Tn),s(w,wt),Ze.m(Dc,wt),s(w,Cn),s(w,bt),s(w,Hn),s(w,_t),so.m(Rc,_t),s(w,Mn),s(w,At),s(w,Kn),s(w,It),ao.m(Nc,It),g(l,to,p),g(l,K,p),s(K,Tt),s(K,Sn),s(K,Ct),s(K,Bn),s(K,Ht),eo.m(jc,Ht),s(K,Ln),s(K,Mt),s(K,Vn),s(K,Kt),oo.m(Oc,Kt),s(K,$n),s(K,St),g(l,ro,p),g(l,N,p),s(N,Bt),s(N,En),s(N,Lt),s(N,Fn),s(N,Vt),no.m(zc,Vt),g(l,lo,p),g(l,S,p),s(S,$t),s(S,Dn),s(S,Et),s(S,Rn),s(S,Ft),s(S,Nn),s(S,Dt),s(S,jn),s(S,Rt),io.m(qc,Rt),s(S,On),s(S,Nt),g(l,po,p),g(l,j,p),s(j,jt),s(j,zn),s(j,Ot),s(j,qn),s(j,zt),co.m(Xc,zt),g(l,ko,p),g(l,as,p)},p:Jc,d(l){l&&(r(v),r(Qt),r(G),r(Yt),r(m),r(re),r(R),r(le),r(M),r(ce),r(d),r(ue),r(V),r(fe),r(x),r(He),r(f),r(Ee),r(P),r(ze),r(B),r(Xe),r(T),r(Qe),r(w),r(to),r(K),r(ro),r(N),r(lo),r(S),r(po),r(j),r(ko),r(as))}}}function ik(ts){let v,L;const z=[ts[0],qp];let X={$$slots:{default:[lk]},$$scope:{ctx:ts}};for(let C=0;C<z.length;C+=1)X=Xn(X,z[C]);return v=new rk({props:X}),{c(){Yc(v.$$.fragment)},l(C){Zc(v.$$.fragment,C)},m(C,D){sk(v,C,D),L=!0},p(C,[D]){const es=D&1?ok(z,[D&1&&zp(C[0]),D&0&&zp(qp)]):{};D&2&&(es.$$scope={dirty:D,ctx:C}),v.$set(es)},i(C){L||(ak(v.$$.fragment,C),L=!0)},o(C){tk(v.$$.fragment,C),L=!1},d(C){ek(v,C)}}}const qp={title:"Extract parameter types from string literal types with TypeScript",description:"Parse and derive types from string literal types in TypeScript using the Template Literal Types, turning `'/purchase/[shopid]/[itemid]/args/[...args]'` into `{ shopid: number, itemid: number, args: string[] }`",date:"2022-03-27T08:00:00Z",tags:["typescript","template literal type","conditional type"],label:"blog",tableOfContents:[{link:"the-challenge",title:"The Challenge"},{link:"things-you-need-to-know",title:"Things you need to know",nested:[{link:"string-literal-type",title:"String Literal Type",nested:[{link:"template-literal-and-string-literal-types",title:"Template Literal and String Literal Types"}]},{link:"conditional-type",title:"Conditional Type"},{link:"function-overloads-and-generic-functions",title:"Function Overloads and Generic Functions"}]},{link:"working-on-the-problem",title:"Working on the problem",nested:[{link:"the-game-plan",title:"The Game Plan"},{link:"splitting-a-string-literal-type",title:"Splitting a String Literal Type"},{link:"filter-out-only-the-parts-containing-the-param-syntax",title:"Filter out only the parts containing the param syntax"},{link:"removing-the-brackets",title:"Removing the brackets"},{link:"map-the-parts-into-an-object-type",title:"Map the parts into an Object Type"},{link:"defining-the-map-value",title:"Defining the map value"},{link:"remap-keys-to-remove",title:"Remap keys to remove  `'...'`"},{link:"the-solution",title:"The Solution"}]},{link:"conclusion",title:"Conclusion"},{link:"extra",title:"Extra"},{link:"references",title:"References"}]};function pk(ts,v,L){return Wc("blog",{image:nk}),ts.$$set=z=>{L(0,v=Xn(Xn({},v),Op(z)))},v=Op(v),[v]}class hk extends Uc{constructor(v){super(),Qc(this,v,pk,ik,Gc,{})}}export{hk as component};
