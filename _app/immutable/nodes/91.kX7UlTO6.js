import{s as Y,d as N,e as Z,f as G,n as ss}from"../chunks/scheduler.D6VJxl8L.js";import{S as es,i as ts,m as ns,n as as,o as os,t as ls,a as rs,p as is,e as l,s as p,H as j,c as r,d as M,q as b,h as k,r as R,g as y,u as S,j as D,k as n}from"../chunks/index.CLAVN-Y5.js";import{g as cs,a as J}from"../chunks/code-snippet.Gym6WUAG.js";import{B as ps}from"../chunks/BlogLayout.BMJM32nZ.js";import{t as ks}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function hs(d){let s,a,c='<a href="#test-and-exec-with-g" id="test-and-exec-with-g">test and exec with <code class="inline">g</code></a>',h,e,o='When having a Regex with <code class="inline">g</code> (global) flag, the regex instance will store some internal state about the last match.',x,g,O='This happens with <code class="inline">regex.test()</code> and <code class="inline">regex.exec()</code>',$,u,T,Q=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;car boats car&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 10, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// null</span></span></code></pre>`,E,m,V="This is useful for the following match + while loop pattern:",I,f,H,U=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> match;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> ((match </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence))) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">match</span><span style="color: var(--shiki-color-text)">.index);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,q,_,B="<strong>Note the state is stored in the regex instance</strong>, using a different regex instance will not have this behavior:",P,w,C,X=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;car boats car&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,L,v,W='<h2><a href="#related-links" id="related-links">Related Links</a></h2> <ul><li><a href="https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex" rel="nofollow">https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex</a></li></ul>';return{c(){s=l("section"),a=l("h2"),a.innerHTML=c,h=p(),e=l("p"),e.innerHTML=o,x=p(),g=l("p"),g.innerHTML=O,$=p(),u=l("div"),T=new j(!1),E=p(),m=l("p"),m.textContent=V,I=p(),f=l("div"),H=new j(!1),q=p(),_=l("p"),_.innerHTML=B,P=p(),w=l("div"),C=new j(!1),L=p(),v=l("section"),v.innerHTML=W,this.h()},l(i){s=r(i,"SECTION",{});var t=M(s);a=r(t,"H2",{"data-svelte-h":!0}),b(a)!=="svelte-hq9ybg"&&(a.innerHTML=c),h=k(t),e=r(t,"P",{"data-svelte-h":!0}),b(e)!=="svelte-1lvn1g0"&&(e.innerHTML=o),x=k(t),g=r(t,"P",{"data-svelte-h":!0}),b(g)!=="svelte-3mlea9"&&(g.innerHTML=O),$=k(t),u=r(t,"DIV",{class:!0});var z=M(u);T=R(z,!1),z.forEach(y),E=k(t),m=r(t,"P",{"data-svelte-h":!0}),b(m)!=="svelte-7r1eya"&&(m.textContent=V),I=k(t),f=r(t,"DIV",{class:!0});var A=M(f);H=R(A,!1),A.forEach(y),q=k(t),_=r(t,"P",{"data-svelte-h":!0}),b(_)!=="svelte-9awxyd"&&(_.innerHTML=B),P=k(t),w=r(t,"DIV",{class:!0});var F=M(w);C=R(F,!1),F.forEach(y),t.forEach(y),L=k(i),v=r(i,"SECTION",{"data-svelte-h":!0}),b(v)!=="svelte-ox0x1m"&&(v.innerHTML=W),this.h()},h(){T.a=null,S(u,"class","code-section"),H.a=null,S(f,"class","code-section"),C.a=null,S(w,"class","code-section")},m(i,t){D(i,s,t),n(s,a),n(s,h),n(s,e),n(s,x),n(s,g),n(s,$),n(s,u),T.m(Q,u),n(s,E),n(s,m),n(s,I),n(s,f),H.m(U,f),n(s,q),n(s,_),n(s,P),n(s,w),C.m(X,w),D(i,L,t),D(i,v,t)},p:ss,d(i){i&&(y(s),y(L),y(v))}}}function vs(d){let s,a;const c=[d[0],K];let h={$$slots:{default:[hs]},$$scope:{ctx:d}};for(let e=0;e<c.length;e+=1)h=N(h,c[e]);return s=new ps({props:h}),{c(){ns(s.$$.fragment)},l(e){as(s.$$.fragment,e)},m(e,o){os(s,e,o),a=!0},p(e,[o]){const x=o&1?cs(c,[o&1&&J(e[0]),o&0&&J(K)]):{};o&2&&(x.$$scope={dirty:o,ctx:e}),s.$set(x)},i(e){a||(ls(s.$$.fragment,e),a=!0)},o(e){rs(s.$$.fragment,e),a=!1},d(e){is(s,e)}}}const K={title:"'g' flag in regex",tags:["regex"],description:"test and exec with `g`When having a Regex with `g` (global) flag, the regex instance will store some internal state about the last match.This happens with `regex.test()` and `regex.exec()`This is useful for the following match + while loop pattern:...",tableOfContents:[{link:"test-and-exec-with-g",title:"test and exec with  `g`"},{link:"related-links",title:"Related Links"}]};function ys(d,s,a){return Z("blog",{image:ks}),d.$$set=c=>{a(0,s=N(N({},s),G(c)))},s=G(s),[s]}class fs extends es{constructor(s){super(),ts(this,s,ys,vs,Y,{})}}export{fs as component};
