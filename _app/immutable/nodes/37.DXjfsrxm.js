import{s as Es,d as Ft,e as qs,f as Ji,n as Ns}from"../chunks/scheduler.D6VJxl8L.js";import{S as Ss,i as Os,m as zs,n as Gs,o as Ds,t as Ps,a as Bs,p as Ws,e as s,s as o,H,c as a,q as c,h as r,d as u,r as $,g as t,u as T,j as l,k as n}from"../chunks/index.CLAVN-Y5.js";import{g as Ys,a as Qi}from"../chunks/code-snippet.Gym6WUAG.js";import{T as js}from"../chunks/TalkLayout.DcPEIaDm.js";import{t as Vs}from"../chunks/twitter-card-image.C3bQ3Oc7.js";const Fs=""+new URL("../assets/git-rebase-w-5.BYeUyF0s.webp",import.meta.url).href,As=""+new URL("../assets/git-rebase-w-5.Cx6OTPH0.webp",import.meta.url).href,Ks=""+new URL("../assets/git-rebase-w-5.DJh6umsg.png",import.meta.url).href,Xi=""+new URL("../assets/git-rebase-w-5.W3DhL8Od.png",import.meta.url).href,Js=""+new URL("../assets/git-rebase-w-4.yDxCWJIM.webp",import.meta.url).href,Qs=""+new URL("../assets/git-rebase-w-4.CLVlU8QT.webp",import.meta.url).href,Xs=""+new URL("../assets/git-rebase-w-4.2JCO-KO7.png",import.meta.url).href,Zi=""+new URL("../assets/git-rebase-w-4.CiBlwRk4.png",import.meta.url).href,Zs=""+new URL("../assets/git-rebase-w-3.D41JCzJO.webp",import.meta.url).href,ea=""+new URL("../assets/git-rebase-w-3.BGoSyFRK.webp",import.meta.url).href,ta=""+new URL("../assets/git-rebase-w-3.BAeYBZFU.png",import.meta.url).href,es=""+new URL("../assets/git-rebase-w-3.Crl0Hd4Q.png",import.meta.url).href,ia=""+new URL("../assets/git-rebase-w-2.BNLWT9ns.webp",import.meta.url).href,sa=""+new URL("../assets/git-rebase-w-2.2y8p-EIP.webp",import.meta.url).href,aa=""+new URL("../assets/git-rebase-w-2.D84myCby.png",import.meta.url).href,ts=""+new URL("../assets/git-rebase-w-2.DMYPfDiG.png",import.meta.url).href,na=""+new URL("../assets/git-rebase-w.WymeH6az.webp",import.meta.url).href,la=""+new URL("../assets/git-rebase-w.B5ep3orj.webp",import.meta.url).href,oa=""+new URL("../assets/git-rebase-w.CT9rKc6n.png",import.meta.url).href,is=""+new URL("../assets/git-rebase-w.Wecw6TyK.png",import.meta.url).href,ra=""+new URL("../assets/git-pull-rebase.9Wzv1ssM.gif",import.meta.url).href,ss=""+new URL("../assets/git-pull-rebase.Cn6pY75f.gif",import.meta.url).href,ca=""+new URL("../assets/git-rebase-i-edit.C5uKtH2B.webp",import.meta.url).href,pa=""+new URL("../assets/git-rebase-i-edit.YkTvrWXb.webp",import.meta.url).href,da=""+new URL("../assets/git-rebase-i-edit.B6jMu9n_.png",import.meta.url).href,as=""+new URL("../assets/git-rebase-i-edit.CyUVP9a3.png",import.meta.url).href,ma=""+new URL("../assets/git-rebase-i-edit.C5uKtH2B.webp",import.meta.url).href,ha=""+new URL("../assets/git-rebase-i-edit.YkTvrWXb.webp",import.meta.url).href,ga=""+new URL("../assets/git-rebase-i-edit.B6jMu9n_.png",import.meta.url).href,ns=""+new URL("../assets/git-rebase-i-edit.CyUVP9a3.png",import.meta.url).href,ua=""+new URL("../assets/git-rebase-i-squash.CbwHgWE4.webp",import.meta.url).href,_a=""+new URL("../assets/git-rebase-i-squash.Cd7xU3I6.webp",import.meta.url).href,ba=""+new URL("../assets/git-rebase-i-squash.DzSyzNRo.png",import.meta.url).href,ls=""+new URL("../assets/git-rebase-i-squash.C1iwUT0c.png",import.meta.url).href,fa=""+new URL("../assets/git-rebase-i-drop.NUv1imTY.webp",import.meta.url).href,wa=""+new URL("../assets/git-rebase-i-drop.OSls4pTk.webp",import.meta.url).href,va=""+new URL("../assets/git-rebase-i-drop.CUGmml1b.png",import.meta.url).href,os=""+new URL("../assets/git-rebase-i-drop.Ck9sXjrE.png",import.meta.url).href,rs=""+new URL("../assets/git-rebase-i-pick.5x4gF8oU.webp",import.meta.url).href,cs=""+new URL("../assets/git-rebase-i-pick.DtWorWlC.webp",import.meta.url).href,ps=""+new URL("../assets/git-rebase-i-pick.BPq6LWo-.png",import.meta.url).href,ft=""+new URL("../assets/git-rebase-i-pick.j-vSY0V3.png",import.meta.url).href,ya=""+new URL("../assets/git-rebase.hnOl_DTT.webp",import.meta.url).href,ka=""+new URL("../assets/git-rebase.BNYH9doT.webp",import.meta.url).href,xa=""+new URL("../assets/git-rebase.BADEw-Ew.jpeg",import.meta.url).href,ds=""+new URL("../assets/git-rebase.Dn20dTJ9.jpeg",import.meta.url).href,La=""+new URL("../assets/git-rebase-2._AJBGc05.gif",import.meta.url).href,ms=""+new URL("../assets/git-rebase-2.msmd38sC.gif",import.meta.url).href,Ta=""+new URL("../assets/git-rebase.CH6j8BeH.gif",import.meta.url).href,hs=""+new URL("../assets/git-rebase.BLo760aG.gif",import.meta.url).href,Ca=""+new URL("../assets/git-revert-4.DdNiwJv6.gif",import.meta.url).href,gs=""+new URL("../assets/git-revert-4.BpwctyIP.gif",import.meta.url).href,Ha=""+new URL("../assets/git-revert-3.Cj5Qcpzs.gif",import.meta.url).href,us=""+new URL("../assets/git-revert-3.D6NtNzs1.gif",import.meta.url).href,$a=""+new URL("../assets/git-revert-2.CR63I1_i.gif",import.meta.url).href,_s=""+new URL("../assets/git-revert-2.ClCRmHN6.gif",import.meta.url).href,Ma=""+new URL("../assets/git-revert.thkqMaYl.gif",import.meta.url).href,bs=""+new URL("../assets/git-revert.BLt_xuax.gif",import.meta.url).href,Ra=""+new URL("../assets/git-cherry-pick.BZ6odKHZ.gif",import.meta.url).href,fs=""+new URL("../assets/git-cherry-pick.ptCsotlP.gif",import.meta.url).href,Ua=""+new URL("../assets/git-reset.DKdcDWrf.gif",import.meta.url).href,ws=""+new URL("../assets/git-reset.M67XO2OP.gif",import.meta.url).href,Ia=""+new URL("../assets/git-pull.usTeVkY0.gif",import.meta.url).href,vs=""+new URL("../assets/git-pull.CN5vpaAW.gif",import.meta.url).href,Ea=""+new URL("../assets/git-merge-non-ff.DL4B-QFo.gif",import.meta.url).href,ys=""+new URL("../assets/git-merge-non-ff.CMz8Ntqu.gif",import.meta.url).href,qa=""+new URL("../assets/git-merge-ff.CyvTsgTA.gif",import.meta.url).href,ks=""+new URL("../assets/git-merge-ff.DJq9ABRb.gif",import.meta.url).href;function Na(te){let p,C="This week in React Knowledgeable, I did a sharing on Git commands.",x,k,m="The title of the talk was called <strong>&quot;Git Gudder&quot;</strong>, because almost a year ago I did a lightning sharing on &quot;Git Gud&quot;, <em>(Get Good)</em>, this follow up sharing used the comparative of &quot;Git Gud&quot;, therefore, &quot;Git Gudder&quot;.",_,L,At="<p>Will there be a &quot;Git Guddest&quot;? ðŸ¤”</p>",Se,q,Kt='<h2><a href="#disclaimer" id="disclaimer">Disclaimer</a></h2> <p>I am by no means a Git master or anywhere near mastering Git. I do google or <a href="https://git-scm.com" rel="nofollow">refer to the docs</a> whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it.</p>',Oe,N,Jt='<h2><a href="#git-merge" id="git-merge">git merge</a></h2> <p>There&#39;s 2 kind of <code class="inline">git merge</code>, the <strong>fast-forward</strong> and <strong>non fast-forward</strong>.</p>',ze,S,Qt=`<h3><a href="#fast-forward-merge" id="fast-forward-merge">Fast-forward merge</a></h3> <p>Merging <code class="inline">master</code> into <code class="inline">branch A</code>:</p> <p><span style="display: block; position: relative; padding-top: 56.566%; width: 100%;"><img src="${ks}" srcset="${ks}, ${qa} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-merge-ff"/></span></p> <div class="caption svelte-koydfe">Fast-forward merge</div>`,Ge,O,Xt=`<h3><a href="#non-fast-forward-merge" id="non-fast-forward-merge">Non Fast-forward merge</a></h3> <p>Merging <code class="inline">master</code> into <code class="inline">branch A</code>:</p> <p><span style="display: block; position: relative; padding-top: 58.779%; width: 100%;"><img src="${ys}" srcset="${ys}, ${Ea} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-merge-non-ff"/></span></p> <div class="caption svelte-koydfe">Non fast-forward merge</div> <p>Non fast-forward merge will create an extra commit that merges 2 branches.</p>`,De,z,Zt=`<h3><a href="#git-pull" id="git-pull">git pull</a></h3> <p>By default, <code class="inline">git pull</code> is <code class="inline">git fetch origin branch</code> + <code class="inline">git merge origin/branch</code>.</p> <p><span style="display: block; position: relative; padding-top: 59.695%; width: 100%;"><img src="${vs}" srcset="${vs}, ${Ia} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-pull"/></span></p> <div class="caption svelte-koydfe">git pull</div>`,Pe,G,ei=`<h2><a href="#git-reset" id="git-reset">git reset</a></h2> <p><code class="inline">git reset --hard</code> allows you to change the reference of where your branch is pointing at.</p> <p><code class="inline">git checkout branch-b</code>, <code class="inline">git reset --hard branch-a</code>, <code class="inline">git reset --hard #d</code>:</p> <p><span style="display: block; position: relative; padding-top: 89.167%; width: 100%;"><img src="${ws}" srcset="${ws}, ${Ua} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-reset"/></span></p> <div class="caption svelte-koydfe">git reset</div>`,Be,D,ti=`<h2><a href="#git-cherry-pick" id="git-cherry-pick">git cherry-pick</a></h2> <p>cherry-pick allows you to pick commits from some other branches, tags, or refs.</p> <p><code class="inline">git checkout branch-b</code>, <code class="inline">git cherry-pick branch-a</code>:</p> <p><span style="display: block; position: relative; padding-top: 87.500%; width: 100%;"><img src="${fs}" srcset="${fs}, ${Ra} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-cherry-pick"/></span></p> <div class="caption svelte-koydfe">git cherry-pick</div>`,We,P,ii=`<h2><a href="#git-revert" id="git-revert">git revert</a></h2> <p><code class="inline">git revert</code> creates a new commit that reverses the change of the commit that you are reverting.</p> <p>For example, if you accidentally merged <code class="inline">feat/a</code> into <code class="inline">master</code> branch, you can <code class="inline">git checkout master</code>, <code class="inline">git revert #1</code>:</p> <p><span style="display: block; position: relative; padding-top: 69.231%; width: 100%;"><img src="${bs}" srcset="${bs}, ${Ma} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-revert"/></span></p> <div class="caption svelte-koydfe">git revert</div> <p>If you know merge master into your <code class="inline">feat/a</code> branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:</p> <p><span style="display: block; position: relative; padding-top: 69.231%; width: 100%;"><img src="${_s}" srcset="${_s}, ${$a} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-revert-2"/></span></p> <div class="caption svelte-koydfe">Merging \`master\` into \`feat/a\`</div> <p>If you want to recover the changes made in <code class="inline">feat/a</code>, you can <code class="inline">revert</code> the <code class="inline">revert</code>:</p> <p><code class="inline">git revert ~#1</code>:</p> <p><span style="display: block; position: relative; padding-top: 54.783%; width: 100%;"><img src="${us}" srcset="${us}, ${Ha} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-revert-3"/></span></p> <div class="caption svelte-koydfe">git revert the revert</div> <p>Now, when you are ready to merge your <code class="inline">feat/a</code> branch into <code class="inline">master</code>, you get the all the changes in <code class="inline">feat/a</code>, a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in <code class="inline">feat/a</code> in <code class="inline">master</code>:</p> <p><span style="display: block; position: relative; padding-top: 54.783%; width: 100%;"><img src="${gs}" srcset="${gs}, ${Ca} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-revert-4"/></span></p> <div class="caption svelte-koydfe">Merging changes back to master</div>`,Ye,B,si=`<h2><a href="#git-rebase" id="git-rebase">git rebase</a></h2> <p><code class="inline">git rebase</code> allows you to &quot;move&quot; commits to a different &quot;base&quot;.</p> <p>For example, you branched out <code class="inline">branch-a</code> from <code class="inline">master</code> a while ago, and <code class="inline">master</code> has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a <code class="inline">rebase</code>, replaying commits that you have made in <code class="inline">branch-a</code> on top of the latest <code class="inline">master</code>.</p> <p><code class="inline">git checkout branch-a</code>, <code class="inline">git rebase master</code>:</p> <p><span style="display: block; position: relative; padding-top: 49.613%; width: 100%;"><img src="${hs}" srcset="${hs}, ${Ta} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase"/></span></p> <div class="caption svelte-koydfe">git rebase</div> <p><code class="inline">git rebase</code> does not have to be on top of the branch that you branched out, you can rebase to anywhere:</p> <p><code class="inline">git checkout branch-a</code>, <code class="inline">git rebase --onto branch-b master branch-a</code>:</p> <p><span style="display: block; position: relative; padding-top: 77.510%; width: 100%;"><img src="${ms}" srcset="${ms}, ${La} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-2"/></span></p> <div class="caption svelte-koydfe">git rebase</div> <p>There&#39;s 3 reference point you should know when doing a git rebase:</p> <ul><li><code class="inline">&lt;new base&gt;</code></li> <li><code class="inline">&lt;upstream&gt;</code></li> <li><code class="inline">&lt;branch&gt;</code></li></ul> <p><span style="display: block; position: relative; padding-top: 77.510%; width: 100%;"><picture><source type="image/webp" srcset="${ka}, ${ya} 2x"/><img src="${ds}" srcset="${ds}, ${xa} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase"/></picture></span></p> <div class="caption svelte-koydfe">git rebase</div> <p>Here are a few things you should know:</p> <ul><li><code class="inline">git rebase</code> will replay the commits from <code class="inline">&lt;upstream&gt;</code> to <code class="inline">&lt;branch&gt;</code> onto <code class="inline">&lt;new base&gt;</code>.</li> <li>If you specify <code class="inline">&lt;upstream&gt;</code> as a branch name, <code class="inline">git rebase</code> will replay commits from the common ancestor of <code class="inline">&lt;upstream&gt;</code> and <code class="inline">&lt;branch&gt;</code> to <code class="inline">&lt;branch&gt;</code>.</li> <li>If you do not specify <code class="inline">&lt;branch&gt;</code>, the default is the <code class="inline">HEAD</code>, current commit you are at now.</li> <li>If you do not specify <code class="inline">--onto &lt;new base&gt;</code>, the new base will be default to <code class="inline">&lt;upsttream&gt;</code>, that&#39;s why <code class="inline">git rebase master</code> is equivalent to <code class="inline">git rebase --onto master master</code>.</li> <li>If you do not specify <code class="inline">&lt;upstream&gt;</code>, it will be the upstream of the current branch. So <code class="inline">git rebase</code> is equivalent to <code class="inline">git rebase &lt;origin/current-branch&gt;</code>.</li></ul>`,je,g,ie,ai='<a href="#git-rebase-interactive" id="git-rebase-interactive">git rebase --interactive</a>',wt,se,ni='<code class="inline">git rebase</code> has an interactive mode, which allows you to specify instructions while replaying commits during a rebase.',vt,ae,li=`<span style="display: block; position: relative; padding-top: 24.476%; width: 100%;"><picture><source type="image/webp" srcset="${cs}, ${rs} 2x"/><img src="${ft}" srcset="${ft}, ${ps} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-pick"/></picture></span>`,yt,W,oi="git rebase interactive",kt,ne,ri='When you run <code class="inline">git rebase --interactive</code>, git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:',xt,le,Ve,Ls=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span>
<span class="line"></span>
<span class="line"># Rebase #1..#6 onto #1 (5 commands)</span>
<span class="line">#</span>
<span class="line"># Commands:</span>
<span class="line"># p, pick = use commit</span>
<span class="line"># r, reword = use commit, but edit the commit message</span>
<span class="line"># e, edit = use commit, but stop for amending</span>
<span class="line">...</span></code></pre>`,Fe,b,oe,ci='<a href="#pick" id="pick">pick</a>',Lt,re,pi="The default instruction. Will just use the commit while replaying:",Tt,ce,di=`<span style="display: block; position: relative; padding-top: 24.476%; width: 100%;"><picture><source type="image/webp" srcset="${cs}, ${rs} 2x"/><img src="${ft}" srcset="${ft}, ${ps} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-pick"/></picture></span>`,Ct,pe,Ae,Ts=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,Ke,f,de,mi='<a href="#drop" id="drop">drop</a>',Ht,me,hi="Drop will omit the commit:",$t,he,gi=`<span style="display: block; position: relative; padding-top: 24.476%; width: 100%;"><picture><source type="image/webp" srcset="${wa}, ${fa} 2x"/><img src="${os}" srcset="${os}, ${va} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-drop"/></picture></span>`,Mt,ge,Je,Cs=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">drop #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,Qe,w,ue,ui='<a href="#squash-fixup" id="squash-fixup">squash &amp; fixup</a>',Rt,_e,_i='Squash &amp; Fixup will combine your commit with the previous commit, the only difference is that with <code class="inline">squash</code>, git will prompt you to edit the commit message of the combined commit, while <code class="inline">fixup</code> will drop the commit of the <code class="inline">fixup</code>ed commit.',Ut,be,bi=`<span style="display: block; position: relative; padding-top: 24.615%; width: 100%;"><picture><source type="image/webp" srcset="${_a}, ${ua} 2x"/><img src="${ls}" srcset="${ls}, ${ba} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-squash"/></picture></span>`,It,fe,Xe,Hs=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">squash #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">fixup  #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,Ze,v,we,fi='<a href="#break" id="break">break</a>',Et,ve,wi='Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run <code class="inline">git rebase --continue</code> to continue.',qt,ye,vi=`<span style="display: block; position: relative; padding-top: 26.434%; width: 100%;"><picture><source type="image/webp" srcset="${ha}, ${ma} 2x"/><img src="${ns}" srcset="${ns}, ${ga} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-break"/></picture></span>`,Nt,ke,et,$s=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">pick   #3 commit msg 3</span>
<span class="line">break</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,tt,y,xe,yi='<a href="#edit" id="edit">edit</a>',St,Le,ki="Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process.",Ot,Te,xi=`<span style="display: block; position: relative; padding-top: 26.434%; width: 100%;"><picture><source type="image/webp" srcset="${pa}, ${ca} 2x"/><img src="${as}" srcset="${as}, ${da} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-i-edit"/></picture></span>`,zt,Ce,it,Ms=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">edit   #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,st,Y,Li=`<h3><a href="#git-pull-rebase" id="git-pull-rebase">git pull --rebase</a></h3> <p>There&#39;s a rebase mode for git pull, where it will be <code class="inline">git fetch origin branch</code> + <code class="inline">git rebase origin/branch</code>.</p> <p><span style="display: block; position: relative; padding-top: 66.066%; width: 100%;"><img src="${ss}" srcset="${ss}, ${ra} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-pull-rebase"/></span></p> <div class="caption svelte-koydfe">git pull --rebase</div>`,at,j,Ti=`<h3><a href="#git-rebase-a-shared-branch" id="git-rebase-a-shared-branch">git rebase a shared branch</a></h3> <p>Say <code class="inline">x</code> and <code class="inline">y</code> are working on the <code class="inline">feat/a</code> branch.</p> <p><span style="display: block; position: relative; padding-top: 34.266%; width: 100%;"><picture><source type="image/webp" srcset="${la}, ${na} 2x"/><img src="${is}" srcset="${is}, ${oa} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w"/></picture></span></p> <p><code class="inline">x</code> decided to rebase the <code class="inline">feat/a</code> branch to squash and drop some commits:</p> <p><span style="display: block; position: relative; padding-top: 52.448%; width: 100%;"><picture><source type="image/webp" srcset="${sa}, ${ia} 2x"/><img src="${ts}" srcset="${ts}, ${aa} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w-2"/></picture></span></p> <p>While <code class="inline">x</code> had done that, that was just a part of the whole picture. Because the <code class="inline">rebase</code> on his local machine changed the git history on his local copy only.</p> <p><span style="display: block; position: relative; padding-top: 52.448%; width: 100%;"><picture><source type="image/webp" srcset="${ea}, ${Zs} 2x"/><img src="${es}" srcset="${es}, ${ta} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w-3"/></picture></span></p> <p>To make the change on the remote server as well, <code class="inline">x</code> forced push his branch to the remote server. (<strong>Note:</strong> You can push without <code class="inline">--force</code> if the origin branch cannot fast-forward merge your local branch)</p> <p>While <code class="inline">y</code> on the other hand, did not know about the <code class="inline">rebase</code>, so when <code class="inline">y</code> pulled the code, it ended up with a messed up merged of a messed up git history:</p> <p><span style="display: block; position: relative; padding-top: 44.643%; width: 100%;"><picture><source type="image/webp" srcset="${Qs}, ${Js} 2x"/><img src="${Zi}" srcset="${Zi}, ${Xs} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w-4"/></picture></span></p> <p>In most cases, there would be a merge conflict, because <code class="inline">x</code> and <code class="inline">y</code>&#39;s branch would have made changes on the same file.</p> <p>So, the correct way, if the rebase is necessary, is to notify <code class="inline">y</code> about the rebase, so that <code class="inline">y</code> can <code class="inline">git reset --hard</code> his branch to the remote branch.</p> <p><span style="display: block; position: relative; padding-top: 48.319%; width: 100%;"><picture><source type="image/webp" srcset="${As}, ${Fs} 2x"/><img src="${Xi}" srcset="${Xi}, ${Ks} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="git-rebase-w-5"/></picture></span></p> <p>If unfortunately, at the same time, <code class="inline">y</code> has made more commits to his local branch, he would have to <code class="inline">git rebase</code> the new changes onto the remote branch, or <code class="inline">git cherry-pick</code> the new changes after the <code class="inline">git reset --hard</code>.</p> <p>In the companies that I have worked with, forbidden a <code class="inline">rebase</code> on a common branch, especially the <code class="inline">master</code> branch.</p>`,nt,V,Ci='<h2><a href="#git-log" id="git-log">git log</a></h2> <p>The go-to command to look at your git history. There&#39;s a few options that is worth mentioning, that allow us to search through the sea of commits:</p>',lt,F,Hi='<h3><a href="#since-after-until-before" id="since-after-until-before">--since, --after, --until, --before</a></h3> <p>You can filter out commits within a specific timeframe</p>',ot,A,$i='<h3><a href="#grep" id="grep">--grep</a></h3> <p>You can filter out commits based on commit message</p>',rt,K,Mi='<h3><a href="#invert-grep" id="invert-grep">--invert-grep</a></h3> <p>You can filter out commits that does not match the <code class="inline">--grep</code></p>',ct,J,Ri='<h3><a href="#all-match" id="all-match">--all-match</a></h3> <p><code class="inline">--grep</code> is a <code class="inline">OR</code> filter, <code class="inline">--all-match</code> make it a <code class="inline">AND</code> filter</p>',pt,Q,Ui='<h3><a href="#min-parents-max-parents-merges-no-merges" id="min-parents-max-parents-merges-no-merges">--min-parents, --max-parents, --merges, --no-merges</a></h3> <p>You can specify commits with the number of parents. A simple merge commit has 2 parent, so <code class="inline">--merge</code> is equivalent to <code class="inline">--min-parents=2</code>.</p>',dt,X,Ii='<h3><a href="#first-parent" id="first-parent">--first-parent</a></h3> <p>You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, <code class="inline">--first-parent</code> allow you to filter out only the merge commit and the commit you have made on the current branch.</p>',mt,Z,Ei='<h2><a href="#git-reflog" id="git-reflog">git reflog</a></h2> <p>The reference log shows you all the <code class="inline">HEAD</code> position you have been to. This is especially useful when you have <code class="inline">reset --hard</code> or <code class="inline">rebase</code>, you can still find back the commit reference that you were at previously, so you can recover them.</p>',ht,d,He,qi='<a href="#git-bisect" id="git-bisect">git bisect</a>',Gt,$e,Ni="This is a useful command that I am looking forward to use it.",Dt,Me,Si='Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. <code class="inline">git bisect</code> allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced.',Pt,Re,gt,Rs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git bisect start </span><span style="color: var(--shiki-token-comment)"># starts the bisect session</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad v2.5.1 </span><span style="color: var(--shiki-token-comment)"># specify the commit you know is bad</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good v2.6.13 </span><span style="color: var(--shiki-token-comment)"># specify the commit you knew were good</span></span></code></pre>`,Bt,Ue,Oi='Once you&#39;ve specified at least one <code class="inline">bad</code> and one <code class="inline">good</code> commit, <code class="inline">git bisect</code> will find and checkout to a commit in the middle of that range between <code class="inline">bad</code> and <code class="inline">good</code> and greets you with:',Wt,Ie,ut,Us='<pre class="prism language-"><code><span class="line">Bisecting: 675 revisions left to test after this (roughly 10 steps)</span></code></pre>',Yt,Ee,zi='You can know test / verify / profile your code, and specify whether the current commit is a <code class="inline">good</code> commit or a <code class="inline">bad</code> commit:',jt,qe,_t,Is=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)"># if it is a good commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># if it is a bad commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad</span></span></code></pre>`,Vt,Ne,Gi='Continue doing it until eventually there&#39;s no more commit to inspect. <code class="inline">git bisect</code> will print out the description of the first bad commit.',bt,ee,Di='<h2><a href="#summary" id="summary">Summary</a></h2> <p>We&#39;ve gone through the following git commands:</p> <ul><li>git merge</li> <li>git reset</li> <li>git cherry-pick</li> <li>git revert</li> <li>git rebase</li> <li>git log</li> <li>git reflog</li> <li>git bisect</li></ul> <p>Hopefully we are now <code class="inline">git gudder</code> than before!</p> <hr/> <p>Related topic: <a href="/commit-went-missing-after-rebase/">Git commits went missing after a rebase</a></p>';return{c(){p=s("p"),p.textContent=C,x=o(),k=s("p"),k.innerHTML=m,_=o(),L=s("blockquote"),L.innerHTML=At,Se=o(),q=s("section"),q.innerHTML=Kt,Oe=o(),N=s("section"),N.innerHTML=Jt,ze=o(),S=s("section"),S.innerHTML=Qt,Ge=o(),O=s("section"),O.innerHTML=Xt,De=o(),z=s("section"),z.innerHTML=Zt,Pe=o(),G=s("section"),G.innerHTML=ei,Be=o(),D=s("section"),D.innerHTML=ti,We=o(),P=s("section"),P.innerHTML=ii,Ye=o(),B=s("section"),B.innerHTML=si,je=o(),g=s("section"),ie=s("h3"),ie.innerHTML=ai,wt=o(),se=s("p"),se.innerHTML=ni,vt=o(),ae=s("p"),ae.innerHTML=li,yt=o(),W=s("div"),W.textContent=oi,kt=o(),ne=s("p"),ne.innerHTML=ri,xt=o(),le=s("div"),Ve=new H(!1),Fe=o(),b=s("section"),oe=s("h4"),oe.innerHTML=ci,Lt=o(),re=s("p"),re.textContent=pi,Tt=o(),ce=s("p"),ce.innerHTML=di,Ct=o(),pe=s("div"),Ae=new H(!1),Ke=o(),f=s("section"),de=s("h4"),de.innerHTML=mi,Ht=o(),me=s("p"),me.textContent=hi,$t=o(),he=s("p"),he.innerHTML=gi,Mt=o(),ge=s("div"),Je=new H(!1),Qe=o(),w=s("section"),ue=s("h4"),ue.innerHTML=ui,Rt=o(),_e=s("p"),_e.innerHTML=_i,Ut=o(),be=s("p"),be.innerHTML=bi,It=o(),fe=s("div"),Xe=new H(!1),Ze=o(),v=s("section"),we=s("h4"),we.innerHTML=fi,Et=o(),ve=s("p"),ve.innerHTML=wi,qt=o(),ye=s("p"),ye.innerHTML=vi,Nt=o(),ke=s("div"),et=new H(!1),tt=o(),y=s("section"),xe=s("h4"),xe.innerHTML=yi,St=o(),Le=s("p"),Le.textContent=ki,Ot=o(),Te=s("p"),Te.innerHTML=xi,zt=o(),Ce=s("div"),it=new H(!1),st=o(),Y=s("section"),Y.innerHTML=Li,at=o(),j=s("section"),j.innerHTML=Ti,nt=o(),V=s("section"),V.innerHTML=Ci,lt=o(),F=s("section"),F.innerHTML=Hi,ot=o(),A=s("section"),A.innerHTML=$i,rt=o(),K=s("section"),K.innerHTML=Mi,ct=o(),J=s("section"),J.innerHTML=Ri,pt=o(),Q=s("section"),Q.innerHTML=Ui,dt=o(),X=s("section"),X.innerHTML=Ii,mt=o(),Z=s("section"),Z.innerHTML=Ei,ht=o(),d=s("section"),He=s("h2"),He.innerHTML=qi,Gt=o(),$e=s("p"),$e.textContent=Ni,Dt=o(),Me=s("p"),Me.innerHTML=Si,Pt=o(),Re=s("div"),gt=new H(!1),Bt=o(),Ue=s("p"),Ue.innerHTML=Oi,Wt=o(),Ie=s("div"),ut=new H(!1),Yt=o(),Ee=s("p"),Ee.innerHTML=zi,jt=o(),qe=s("div"),_t=new H(!1),Vt=o(),Ne=s("p"),Ne.innerHTML=Gi,bt=o(),ee=s("section"),ee.innerHTML=Di,this.h()},l(e){p=a(e,"P",{"data-svelte-h":!0}),c(p)!=="svelte-1lcf43y"&&(p.textContent=C),x=r(e),k=a(e,"P",{"data-svelte-h":!0}),c(k)!=="svelte-atvowm"&&(k.innerHTML=m),_=r(e),L=a(e,"BLOCKQUOTE",{"data-svelte-h":!0}),c(L)!=="svelte-1ue3smw"&&(L.innerHTML=At),Se=r(e),q=a(e,"SECTION",{"data-svelte-h":!0}),c(q)!=="svelte-f5kea2"&&(q.innerHTML=Kt),Oe=r(e),N=a(e,"SECTION",{"data-svelte-h":!0}),c(N)!=="svelte-1z112cn"&&(N.innerHTML=Jt),ze=r(e),S=a(e,"SECTION",{"data-svelte-h":!0}),c(S)!=="svelte-7vo6jh"&&(S.innerHTML=Qt),Ge=r(e),O=a(e,"SECTION",{"data-svelte-h":!0}),c(O)!=="svelte-p87bw4"&&(O.innerHTML=Xt),De=r(e),z=a(e,"SECTION",{"data-svelte-h":!0}),c(z)!=="svelte-gvycr1"&&(z.innerHTML=Zt),Pe=r(e),G=a(e,"SECTION",{"data-svelte-h":!0}),c(G)!=="svelte-qmtmx0"&&(G.innerHTML=ei),Be=r(e),D=a(e,"SECTION",{"data-svelte-h":!0}),c(D)!=="svelte-1yeq7ua"&&(D.innerHTML=ti),We=r(e),P=a(e,"SECTION",{"data-svelte-h":!0}),c(P)!=="svelte-4789v5"&&(P.innerHTML=ii),Ye=r(e),B=a(e,"SECTION",{"data-svelte-h":!0}),c(B)!=="svelte-1c6ixck"&&(B.innerHTML=si),je=r(e),g=a(e,"SECTION",{});var i=u(g);ie=a(i,"H3",{"data-svelte-h":!0}),c(ie)!=="svelte-ri2gv4"&&(ie.innerHTML=ai),wt=r(i),se=a(i,"P",{"data-svelte-h":!0}),c(se)!=="svelte-1igcf2m"&&(se.innerHTML=ni),vt=r(i),ae=a(i,"P",{"data-svelte-h":!0}),c(ae)!=="svelte-f4q7fx"&&(ae.innerHTML=li),yt=r(i),W=a(i,"DIV",{class:!0,"data-svelte-h":!0}),c(W)!=="svelte-1nhhadn"&&(W.textContent=oi),kt=r(i),ne=a(i,"P",{"data-svelte-h":!0}),c(ne)!=="svelte-1yu8e4v"&&(ne.innerHTML=ri),xt=r(i),le=a(i,"DIV",{class:!0});var Pi=u(le);Ve=$(Pi,!1),Pi.forEach(t),i.forEach(t),Fe=r(e),b=a(e,"SECTION",{});var M=u(b);oe=a(M,"H4",{"data-svelte-h":!0}),c(oe)!=="svelte-1gdt11d"&&(oe.innerHTML=ci),Lt=r(M),re=a(M,"P",{"data-svelte-h":!0}),c(re)!=="svelte-rvfm5p"&&(re.textContent=pi),Tt=r(M),ce=a(M,"P",{"data-svelte-h":!0}),c(ce)!=="svelte-19ivsl6"&&(ce.innerHTML=di),Ct=r(M),pe=a(M,"DIV",{class:!0});var Bi=u(pe);Ae=$(Bi,!1),Bi.forEach(t),M.forEach(t),Ke=r(e),f=a(e,"SECTION",{});var R=u(f);de=a(R,"H4",{"data-svelte-h":!0}),c(de)!=="svelte-unldc5"&&(de.innerHTML=mi),Ht=r(R),me=a(R,"P",{"data-svelte-h":!0}),c(me)!=="svelte-65fhzy"&&(me.textContent=hi),$t=r(R),he=a(R,"P",{"data-svelte-h":!0}),c(he)!=="svelte-fmu5lr"&&(he.innerHTML=gi),Mt=r(R),ge=a(R,"DIV",{class:!0});var Wi=u(ge);Je=$(Wi,!1),Wi.forEach(t),R.forEach(t),Qe=r(e),w=a(e,"SECTION",{});var U=u(w);ue=a(U,"H4",{"data-svelte-h":!0}),c(ue)!=="svelte-35p9z5"&&(ue.innerHTML=ui),Rt=r(U),_e=a(U,"P",{"data-svelte-h":!0}),c(_e)!=="svelte-6jj9jz"&&(_e.innerHTML=_i),Ut=r(U),be=a(U,"P",{"data-svelte-h":!0}),c(be)!=="svelte-mafjg7"&&(be.innerHTML=bi),It=r(U),fe=a(U,"DIV",{class:!0});var Yi=u(fe);Xe=$(Yi,!1),Yi.forEach(t),U.forEach(t),Ze=r(e),v=a(e,"SECTION",{});var I=u(v);we=a(I,"H4",{"data-svelte-h":!0}),c(we)!=="svelte-1mt15cn"&&(we.innerHTML=fi),Et=r(I),ve=a(I,"P",{"data-svelte-h":!0}),c(ve)!=="svelte-17cksip"&&(ve.innerHTML=wi),qt=r(I),ye=a(I,"P",{"data-svelte-h":!0}),c(ye)!=="svelte-13amb4b"&&(ye.innerHTML=vi),Nt=r(I),ke=a(I,"DIV",{class:!0});var ji=u(ke);et=$(ji,!1),ji.forEach(t),I.forEach(t),tt=r(e),y=a(e,"SECTION",{});var E=u(y);xe=a(E,"H4",{"data-svelte-h":!0}),c(xe)!=="svelte-1cugl34"&&(xe.innerHTML=yi),St=r(E),Le=a(E,"P",{"data-svelte-h":!0}),c(Le)!=="svelte-vg746i"&&(Le.textContent=ki),Ot=r(E),Te=a(E,"P",{"data-svelte-h":!0}),c(Te)!=="svelte-8wt1md"&&(Te.innerHTML=xi),zt=r(E),Ce=a(E,"DIV",{class:!0});var Vi=u(Ce);it=$(Vi,!1),Vi.forEach(t),E.forEach(t),st=r(e),Y=a(e,"SECTION",{"data-svelte-h":!0}),c(Y)!=="svelte-16ursum"&&(Y.innerHTML=Li),at=r(e),j=a(e,"SECTION",{"data-svelte-h":!0}),c(j)!=="svelte-qry791"&&(j.innerHTML=Ti),nt=r(e),V=a(e,"SECTION",{"data-svelte-h":!0}),c(V)!=="svelte-1dlb579"&&(V.innerHTML=Ci),lt=r(e),F=a(e,"SECTION",{"data-svelte-h":!0}),c(F)!=="svelte-zcvehq"&&(F.innerHTML=Hi),ot=r(e),A=a(e,"SECTION",{"data-svelte-h":!0}),c(A)!=="svelte-r3hown"&&(A.innerHTML=$i),rt=r(e),K=a(e,"SECTION",{"data-svelte-h":!0}),c(K)!=="svelte-177pkka"&&(K.innerHTML=Mi),ct=r(e),J=a(e,"SECTION",{"data-svelte-h":!0}),c(J)!=="svelte-lfai2r"&&(J.innerHTML=Ri),pt=r(e),Q=a(e,"SECTION",{"data-svelte-h":!0}),c(Q)!=="svelte-mbpz8k"&&(Q.innerHTML=Ui),dt=r(e),X=a(e,"SECTION",{"data-svelte-h":!0}),c(X)!=="svelte-x0l98h"&&(X.innerHTML=Ii),mt=r(e),Z=a(e,"SECTION",{"data-svelte-h":!0}),c(Z)!=="svelte-1t5t2dc"&&(Z.innerHTML=Ei),ht=r(e),d=a(e,"SECTION",{});var h=u(d);He=a(h,"H2",{"data-svelte-h":!0}),c(He)!=="svelte-n86joi"&&(He.innerHTML=qi),Gt=r(h),$e=a(h,"P",{"data-svelte-h":!0}),c($e)!=="svelte-nglryd"&&($e.textContent=Ni),Dt=r(h),Me=a(h,"P",{"data-svelte-h":!0}),c(Me)!=="svelte-1cunnti"&&(Me.innerHTML=Si),Pt=r(h),Re=a(h,"DIV",{class:!0});var Fi=u(Re);gt=$(Fi,!1),Fi.forEach(t),Bt=r(h),Ue=a(h,"P",{"data-svelte-h":!0}),c(Ue)!=="svelte-l8y3ux"&&(Ue.innerHTML=Oi),Wt=r(h),Ie=a(h,"DIV",{class:!0});var Ai=u(Ie);ut=$(Ai,!1),Ai.forEach(t),Yt=r(h),Ee=a(h,"P",{"data-svelte-h":!0}),c(Ee)!=="svelte-112zwpd"&&(Ee.innerHTML=zi),jt=r(h),qe=a(h,"DIV",{class:!0});var Ki=u(qe);_t=$(Ki,!1),Ki.forEach(t),Vt=r(h),Ne=a(h,"P",{"data-svelte-h":!0}),c(Ne)!=="svelte-xhwbgv"&&(Ne.innerHTML=Gi),h.forEach(t),bt=r(e),ee=a(e,"SECTION",{"data-svelte-h":!0}),c(ee)!=="svelte-1dgxsz8"&&(ee.innerHTML=Di),this.h()},h(){T(W,"class","caption svelte-koydfe"),Ve.a=null,T(le,"class","code-section"),Ae.a=null,T(pe,"class","code-section"),Je.a=null,T(ge,"class","code-section"),Xe.a=null,T(fe,"class","code-section"),et.a=null,T(ke,"class","code-section"),it.a=null,T(Ce,"class","code-section"),gt.a=null,T(Re,"class","code-section"),ut.a=null,T(Ie,"class","code-section"),_t.a=null,T(qe,"class","code-section")},m(e,i){l(e,p,i),l(e,x,i),l(e,k,i),l(e,_,i),l(e,L,i),l(e,Se,i),l(e,q,i),l(e,Oe,i),l(e,N,i),l(e,ze,i),l(e,S,i),l(e,Ge,i),l(e,O,i),l(e,De,i),l(e,z,i),l(e,Pe,i),l(e,G,i),l(e,Be,i),l(e,D,i),l(e,We,i),l(e,P,i),l(e,Ye,i),l(e,B,i),l(e,je,i),l(e,g,i),n(g,ie),n(g,wt),n(g,se),n(g,vt),n(g,ae),n(g,yt),n(g,W),n(g,kt),n(g,ne),n(g,xt),n(g,le),Ve.m(Ls,le),l(e,Fe,i),l(e,b,i),n(b,oe),n(b,Lt),n(b,re),n(b,Tt),n(b,ce),n(b,Ct),n(b,pe),Ae.m(Ts,pe),l(e,Ke,i),l(e,f,i),n(f,de),n(f,Ht),n(f,me),n(f,$t),n(f,he),n(f,Mt),n(f,ge),Je.m(Cs,ge),l(e,Qe,i),l(e,w,i),n(w,ue),n(w,Rt),n(w,_e),n(w,Ut),n(w,be),n(w,It),n(w,fe),Xe.m(Hs,fe),l(e,Ze,i),l(e,v,i),n(v,we),n(v,Et),n(v,ve),n(v,qt),n(v,ye),n(v,Nt),n(v,ke),et.m($s,ke),l(e,tt,i),l(e,y,i),n(y,xe),n(y,St),n(y,Le),n(y,Ot),n(y,Te),n(y,zt),n(y,Ce),it.m(Ms,Ce),l(e,st,i),l(e,Y,i),l(e,at,i),l(e,j,i),l(e,nt,i),l(e,V,i),l(e,lt,i),l(e,F,i),l(e,ot,i),l(e,A,i),l(e,rt,i),l(e,K,i),l(e,ct,i),l(e,J,i),l(e,pt,i),l(e,Q,i),l(e,dt,i),l(e,X,i),l(e,mt,i),l(e,Z,i),l(e,ht,i),l(e,d,i),n(d,He),n(d,Gt),n(d,$e),n(d,Dt),n(d,Me),n(d,Pt),n(d,Re),gt.m(Rs,Re),n(d,Bt),n(d,Ue),n(d,Wt),n(d,Ie),ut.m(Us,Ie),n(d,Yt),n(d,Ee),n(d,jt),n(d,qe),_t.m(Is,qe),n(d,Vt),n(d,Ne),l(e,bt,i),l(e,ee,i)},p:Ns,d(e){e&&(t(p),t(x),t(k),t(_),t(L),t(Se),t(q),t(Oe),t(N),t(ze),t(S),t(Ge),t(O),t(De),t(z),t(Pe),t(G),t(Be),t(D),t(We),t(P),t(Ye),t(B),t(je),t(g),t(Fe),t(b),t(Ke),t(f),t(Qe),t(w),t(Ze),t(v),t(tt),t(y),t(st),t(Y),t(at),t(j),t(nt),t(V),t(lt),t(F),t(ot),t(A),t(rt),t(K),t(ct),t(J),t(pt),t(Q),t(dt),t(X),t(mt),t(Z),t(ht),t(d),t(bt),t(ee))}}}function Sa(te){let p,C;const x=[te[0],xs];let k={$$slots:{default:[Na]},$$scope:{ctx:te}};for(let m=0;m<x.length;m+=1)k=Ft(k,x[m]);return p=new js({props:k}),{c(){zs(p.$$.fragment)},l(m){Gs(p.$$.fragment,m)},m(m,_){Ds(p,m,_),C=!0},p(m,[_]){const L=_&1?Ys(x,[_&1&&Qi(m[0]),_&0&&Qi(xs)]):{};_&2&&(L.$$scope={dirty:_,ctx:m}),p.$set(L)},i(m){C||(Ps(p.$$.fragment,m),C=!0)},o(m){Bs(p.$$.fragment,m),C=!1},d(m){Ws(p,m)}}}const xs={title:"Git Gudder",venue:"Shopee SG",venueLink:"https://www.google.com.sg/maps/place/Shopee+Building/@1.2923933,103.7860786,19z/data=!3m1!4b1!4m5!3m4!1s0x31da1b803e3bae77:0x154e17d66760912b!8m2!3d1.2923933!4d103.7866258",occasion:"React Knowledgeable Week 41",occasionLink:"https://github.com/Shopee/shopee-react-knowledgeable/issues/129",slides:"https://slides.com/tanhauhau/git-gudder",date:"2019-08-30",label:"talk",layout:"talk",description:'This week in React Knowledgeable, I did a sharing on Git commands.The title of the talk was called "Git Gudder", because almost a year ago I did a lightning sharing on "Git Gud", (Get Good), this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder"....',tableOfContents:[{link:"disclaimer",title:"Disclaimer"},{link:"git-merge",title:"git merge",nested:[{link:"fast-forward-merge",title:"Fast-forward merge"},{link:"non-fast-forward-merge",title:"Non Fast-forward merge"},{link:"git-pull",title:"git pull"}]},{link:"git-reset",title:"git reset"},{link:"git-cherry-pick",title:"git cherry-pick"},{link:"git-revert",title:"git revert"},{link:"git-rebase",title:"git rebase",nested:[{link:"git-rebase-interactive",title:"git rebase --interactive",nested:[{link:"pick",title:"pick"},{link:"drop",title:"drop"},{link:"squash-fixup",title:"squash & fixup"},{link:"break",title:"break"},{link:"edit",title:"edit"}]},{link:"git-pull-rebase",title:"git pull --rebase"},{link:"git-rebase-a-shared-branch",title:"git rebase a shared branch"}]},{link:"git-log",title:"git log",nested:[{link:"since-after-until-before",title:"--since, --after, --until, --before"},{link:"grep",title:"--grep"},{link:"invert-grep",title:"--invert-grep"},{link:"all-match",title:"--all-match"},{link:"min-parents-max-parents-merges-no-merges",title:"--min-parents, --max-parents, --merges, --no-merges"},{link:"first-parent",title:"--first-parent"}]},{link:"git-reflog",title:"git reflog"},{link:"git-bisect",title:"git bisect"},{link:"summary",title:"Summary"}]};function Oa(te,p,C){return qs("blog",{image:Vs}),te.$$set=x=>{C(0,p=Ft(Ft({},p),Ji(x)))},p=Ji(p),[p]}class Wa extends Ss{constructor(p){super(),Os(this,p,Oa,Sa,Es,{})}}export{Wa as component};
