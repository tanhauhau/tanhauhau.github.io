import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as a,g as l,d as r,b as c,a as p,n as d}from"../chunks/C2PHntuy.js";import{i as h}from"../chunks/BQOOHHT8.js";import{l as u,s as m}from"../chunks/gzNpScmH.js";import{B as f}from"../chunks/B1caYEk9.js";import{t as g}from"../chunks/C3bQ3Oc7.js";const t={title:"Thoughts on Micro-frontends",tags:["micro-frontend"],description:"https://martinfowler.com/articles/micro-frontends.htmlProblems:If router is asynchronously injected, what should you do when visit a route that is not yet injected?Define a routing schema, eg, when you are visiting ..."},{title:x,tags:P,description:B}=t;var w=c(`<p><a href="https://martinfowler.com/articles/micro-frontends.html" rel="nofollow">https://martinfowler.com/articles/micro-frontends.html</a></p> <p>Problems:</p> <ul><li><p>If router is asynchronously injected, what should you do when visit a route that is <strong>not yet injected</strong>?</p> <ul><li>Define a routing schema, eg, when you are visiting <code class="inline">/foo/bar</code> and your local routing registry does not contain the path, you should visit a predefine location for the script/manifest, eg: <code class="inline">server.com/sites/foo-bar/manifest.json</code>, and load the script. If there's no such file, it meant there's no such path.</li></ul></li> <li><p>Multiple webpack built runtime</p> <ul><li>async chunks will rely on the <code class="inline">window['webpackJsonp']</code> to <code class="inline">require</code> and <code class="inline">exports</code> module.</li> <li>multiple webpack built may have conflicting <code class="inline">chunkIds</code></li> <li>thankfully this can be solved via <a href="https://github.com/darshanlsagar/webpack-custom-chunk-id-plugin" rel="nofollow">webpack-custom-chunk-id-plugin</a></li></ul></li></ul>`,1);function D(o,e){const i=u(e,["children","$$slots","$$events","$$legacy"]);a(e,!1),l("blog",{image:g}),h(),f(o,m(()=>i,()=>t,{children:(s,y)=>{var n=w();d(4),p(s,n)},$$slots:{default:!0}})),r()}export{D as component};
