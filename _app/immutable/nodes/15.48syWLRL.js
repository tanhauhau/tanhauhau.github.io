import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as _e,g as be,d as ge,b as he,s as t,f as ue,e,t as we,a as fe,r as s,n as ve}from"../chunks/C2PHntuy.js";import{h as i}from"../chunks/C3QlhiH-.js";import{s as a}from"../chunks/CEusTUg_.js";import{i as ye}from"../chunks/BQOOHHT8.js";import{l as $e,s as xe}from"../chunks/gzNpScmH.js";import{B as Re}from"../chunks/B1caYEk9.js";import{t as Le}from"../chunks/C3bQ3Oc7.js";const F=""+new URL("../assets/initial.BjJV-4Vz.png",import.meta.url).href,Ue=""+new URL("../assets/initial.yx4YBziB.png",import.meta.url).href,ke=""+new URL("../assets/initial.2NsuNg8X.webp",import.meta.url).href,Be=""+new URL("../assets/initial.CoZvkj7l.webp",import.meta.url).href,M=""+new URL("../assets/rebase-1.DxlawrcG.png",import.meta.url).href,ze=""+new URL("../assets/rebase-1.6sRo2W9d.png",import.meta.url).href,Se=""+new URL("../assets/rebase-1.DIozlbsu.webp",import.meta.url).href,Ce=""+new URL("../assets/rebase-1.CREkGZIf.webp",import.meta.url).href,P=""+new URL("../assets/rebase-2.CgJm7twb.png",import.meta.url).href,Ie=""+new URL("../assets/rebase-2.Tk5UO3By.png",import.meta.url).href,Te=""+new URL("../assets/rebase-2.CzB8gNrt.webp",import.meta.url).href,De=""+new URL("../assets/rebase-2.C3Nd9vus.webp",import.meta.url).href,ee=""+new URL("../assets/rebase-4.Bl1hx-3Y.png",import.meta.url).href,He=""+new URL("../assets/rebase-4.C_m10zkW.png",import.meta.url).href,Je=""+new URL("../assets/rebase-4.BDUVpKdb.webp",import.meta.url).href,Ne=""+new URL("../assets/rebase-4.ZNUodyYK.webp",import.meta.url).href,se=""+new URL("../assets/rebase-5.DWBN9l5H.png",import.meta.url).href,We=""+new URL("../assets/rebase-5.CeKpWsm6.png",import.meta.url).href,qe=""+new URL("../assets/rebase-5.DnD8TXT2.webp",import.meta.url).href,Ae=""+new URL("../assets/rebase-5.CJQEsNnf.webp",import.meta.url).href,ae=""+new URL("../assets/rebase-6.BBVHSOx7.png",import.meta.url).href,Ge=""+new URL("../assets/rebase-6.BkA1d3ni.png",import.meta.url).href,Ze=""+new URL("../assets/rebase-6.C5LQKZLX.webp",import.meta.url).href,Ke=""+new URL("../assets/rebase-6.EbdhrXRu.webp",import.meta.url).href,te=""+new URL("../assets/rebase-7.BTDQvBFq.png",import.meta.url).href,Ve=""+new URL("../assets/rebase-7.Bvtk1f7H.png",import.meta.url).href,Ye=""+new URL("../assets/rebase-7.CmI9cJx9.webp",import.meta.url).href,Ee=""+new URL("../assets/rebase-7.RSttqJbT.webp",import.meta.url).href,ie=""+new URL("../assets/rebase-8.C3iGJ1cg.png",import.meta.url).href,Oe=""+new URL("../assets/rebase-8.B-ZYjnbM.png",import.meta.url).href,Qe=""+new URL("../assets/rebase-8.D8ce6I62.webp",import.meta.url).href,Xe=""+new URL("../assets/rebase-8.B4VQgnHG.webp",import.meta.url).href,oe={title:"Git commits went missing after a rebase",date:"2019-09-04T08:00:00Z",description:"What happened when you do a rebase",tags:["JavaScript","git","rebase","scm"],label:"blog",tableOfContents:[{link:"summary",title:"Summary"}]},{title:ns,date:cs,description:ls,tags:ps,label:ds,tableOfContents:ms}=oe;var je=he(`<p>Last week, I <a href="/git-gudder/">shared about git commands</a> at <a href="https://github.com/Shopee/shopee-react-knowledgeable" rel="nofollow">Shopee React Knowledgeable</a>. At the end of the talk, one of my colleague approached me and asked me about git rebase. She somehow ended up with a messed up git history with <code class="inline">git rebase</code>, and she couldn't comprehend how she ended up there.</p> <p>I found that her scenario was interesting, and decided to write it out here.</p> <p>This was what she told me:</p> <blockquote><p>I branched out <code class="inline">feat/a</code> branch from <code class="inline">master</code> and made a few commits (<code class="inline">commit #1</code>, <code class="inline">commit #2</code>).</p> <p>I noticed that master branch has new commits, so I pulled <code class="inline">master</code> branch, and rebased my branch <code class="inline">feat/a</code> onto master branch.</p> <p>Then, instead of <code class="inline">git push --force</code> my local <code class="inline">feat/a</code> to remote <code class="inline">origin</code>, I <code class="inline">git pull --rebase origin feat/a</code>.</p> <p>And, my commits on <code class="inline">feat/a</code>, eg <code class="inline">commit #1</code>, <code class="inline">commit #2</code> were gone!</p></blockquote> <p>So, we expected to see <code class="inline">commit #1</code>, <code class="inline">commit #2</code> at <code class="inline">HEAD</code> after rebasing onto <code class="inline">origin/feat/a</code> after the <code class="inline">git pull --rebase</code>, yet, the only commits we saw were a bunch of commits from the <code class="inline">master</code> branch.</p> <p>To understand what happened, I decided to draw diagrams to visualize what had happened:</p> <p><span style="display: block; position: relative; padding-top: 126.667%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="initil" title="Before rebasing"/></picture></span></p> <p>So, the first thing she did was to <code class="inline">git rebase</code> <code class="inline">feat/a</code> on top of <code class="inline">master</code>:</p> <p><span style="display: block; position: relative; padding-top: 69.828%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="first rebase" title="Rebase feat/a on top of master"/></picture></span></p> <p>So far, everything looked normal. The next command was the tricky one.</p> <p>She rebased <code class="inline">feat/a</code> on top of <code class="inline">origin/feat/a</code>, she ran:</p> <div class="code-section"><!></div> <p>The most important thing on <code class="inline">git rebase</code> is the 3 reference points of rebasing:</p> <p><span style="display: block; position: relative; padding-top: 69.828%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="3 reference points" title="The 3 reference points"/></picture></span></p> <p>So, when she typed</p> <div class="code-section"><!></div> <p>, it meant:</p> <div class="code-section"><!></div> <ul><li><code class="inline">new base</code>: <code class="inline">origin/feat/a</code></li> <li><code class="inline">upstream</code>: <code class="inline">origin/feat/a</code></li> <li><code class="inline">branch</code>: <code class="inline">feat/a</code></li></ul> <p>So what happened was all the commits in master after branching out <code class="inline">feat/a</code> all the way to the newly rebased commits in <code class="inline">feat/a</code> were rebased onto <code class="inline">origin/feat/a</code>:</p> <p><span style="display: block; position: relative; padding-top: 50.625%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="rebase again"/></picture></span></p> <p>However, if you look at the history right now, the commit <code class="inline">commit #1</code> and <code class="inline">commit #2</code> was written twice, first the original commit, second the rebased commit. In cases like this, git would not rewrote the commits again, if git could figure out whether it was a duplicate:</p> <p><span style="display: block; position: relative; padding-top: 68.644%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="actual rebase again result"/></picture></span></p> <p>It was as though both commit <code class="inline">commit #1</code> and <code class="inline">commit #2</code> were gone, and left with commits from <code class="inline">master</code> branch, because git did not rewrote them when rebasing <code class="inline">feat/a</code>. And actually the changes made in <code class="inline">commit #1</code> and <code class="inline">commit #2</code> were still available.</p> <blockquote><p>You can read more about this behaviour in <a href="https://git-scm.com/book/en/v2/Git-Branching-Rebasing#_rebase_rebase" rel="nofollow">git's documentation</a></p></blockquote> <p>So, what she should have done if she wanted to actually rebased the local <code class="inline">feat/a</code> on top of <code class="inline">origin/feat/a</code>, especially after she made another commit, <code class="inline">commit #0</code>?</p> <p><span style="display: block; position: relative; padding-top: 58.273%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="adding one more commit"/></picture></span></p> <p>Well, she should specify the <code class="inline">&lt;upstream&gt;</code> reference point:</p> <p><span style="display: block; position: relative; padding-top: 57.042%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="reference points"/></picture></span></p> <div class="code-section"><!></div> <p>And you would get:</p> <p><span style="display: block; position: relative; padding-top: 60.902%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="result"/></picture></span></p> <p>Here again, git is smart enough not to rewrite <code class="inline">commit #1</code> and <code class="inline">commit #2</code>.</p> <section><h2><a href="#summary" id="summary">Summary</a></h2> <p>When using <code class="inline">git rebase</code>, always remember the 3 reference points of rebase, the <code class="inline">new base</code>, <code class="inline">upstream</code> and <code class="inline">branch</code>.</p></section>`,1);function _s(re,h){const ne=$e(h,["children","$$slots","$$events","$$legacy"]);_e(h,!1),be("blog",{image:Le}),ye(),Re(re,xe(()=>ne,()=>oe,{children:(ce,Fe)=>{var u=je(),o=t(ue(u),12),w=e(o),f=e(w),v=e(f),y=t(v);s(f),s(w),s(o);var r=t(o,4),$=e(r),x=e($),R=e(x),L=t(R);s(x),s($),s(r);var n=t(r,6),le=e(n);i(le,()=>`<pre class="prism language-"><code><span class="line">$ git checkout feat/a</span>
<span class="line">$ git rebase origin/feat/a</span></code></pre>`),s(n);var c=t(n,4),U=e(c),k=e(U),B=e(k),z=t(B);s(k),s(U),s(c);var l=t(c,4),pe=e(l);i(pe,()=>'<pre class="prism language-"><code><span class="line">$ git rebase origin/feat/a</span></code></pre>'),s(l);var p=t(l,4),de=e(p);i(de,()=>'<pre class="prism language-"><code><span class="line">$ git rebase --onto origin/feat/a origin/feat/a feat/a</span></code></pre>'),s(p);var d=t(p,6),S=e(d),C=e(S),I=e(C),T=t(I);s(C),s(S),s(d);var m=t(d,4),D=e(m),H=e(D),J=e(H),N=t(J);s(H),s(D),s(m);var _=t(m,8),W=e(_),q=e(W),A=e(q),G=t(A);s(q),s(W),s(_);var b=t(_,4),Z=e(b),K=e(Z),V=e(K),Y=t(V);s(K),s(Z),s(b);var g=t(b,2),me=e(g);i(me,()=>'<pre class="prism language-"><code><span class="line">$ git rebase --onto origin/feat/a master feat/a</span></code></pre>'),s(g);var E=t(g,4),O=e(E),Q=e(O),X=e(Q),j=t(X);s(Q),s(O),s(E),ve(4),we(()=>{a(v,"srcset",`${ke}, ${Be} 2x`),a(y,"src",F),a(y,"srcset",`${F}, ${Ue} 2x`),a(R,"srcset",`${Se}, ${Ce} 2x`),a(L,"src",M),a(L,"srcset",`${M}, ${ze} 2x`),a(B,"srcset",`${Te}, ${De} 2x`),a(z,"src",P),a(z,"srcset",`${P}, ${Ie} 2x`),a(I,"srcset",`${Je}, ${Ne} 2x`),a(T,"src",ee),a(T,"srcset",`${ee}, ${He} 2x`),a(J,"srcset",`${qe}, ${Ae} 2x`),a(N,"src",se),a(N,"srcset",`${se}, ${We} 2x`),a(A,"srcset",`${Ze}, ${Ke} 2x`),a(G,"src",ae),a(G,"srcset",`${ae}, ${Ge} 2x`),a(V,"srcset",`${Ye}, ${Ee} 2x`),a(Y,"src",te),a(Y,"srcset",`${te}, ${Ve} 2x`),a(X,"srcset",`${Qe}, ${Xe} 2x`),a(j,"src",ie),a(j,"srcset",`${ie}, ${Oe} 2x`)}),fe(ce,u)},$$slots:{default:!0}})),ge()}export{_s as component};
