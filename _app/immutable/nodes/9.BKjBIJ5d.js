import{s as Wn,d as Ie,e as $n,f as gn,n as Yn}from"../chunks/scheduler.D6VJxl8L.js";import{S as Jn,i as Qn,m as Xn,n as Zn,o as Gn,t as sl,a as ol,p as tl,e as o,s as e,H as x,c as t,q as i,h as a,d as v,r as f,g as k,u as m,j as d,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as el,a as wn}from"../chunks/code-snippet.Gym6WUAG.js";import{B as al}from"../chunks/BlogLayout.BTH3PMCG.js";const nl=""+new URL("../assets/hero-twitter.CA6z8A8I.jpg",import.meta.url).href;function ll(q){let u,T="In this article, I am going to talk about Babel macros.",_,b,g='<h2><a href="#motivation" id="motivation">Motivation</a></h2> <p>In my previous post, <a href="/creating-custom-javascript-syntax-with-babel">&quot;Creating custom JavaScript syntax with Babel&quot;</a>, I&#39;ve shown you detailed steps on how you can create a custom syntax and write transform plugin or polyfills so that the syntax can be run in browsers today.</p> <p>However, it is purely educational, and I am not recommending you to create your custom JavaScript syntax for production projects for several reasons:</p>',w,C,Pe='<h3><a href="#documentation-and-community-support" id="documentation-and-community-support">Documentation and community support</a></h3> <p>If anything goes wrong, the great JavaScript community out there has no idea what is the <code class="inline">@@</code> (<a href="/creating-custom-javascript-syntax-with-babel#overview">the curry function syntax we created previously</a>) means. Meaning the support that a new developer to the team can get is only as good as your documentation.</p>',uo,M,Ee='<h3><a href="#tooling" id="tooling">Tooling</a></h3> <p>You need to make all the tooling you use to work. I mean eslint, prettier, Flowtype/TypeScript, your editor...</p>',xo,H,Se=`<h3><a href="#maintainability" id="maintainability">Maintainability</a></h3> <p>If the forked version has a bug, do you have enough support to fix it?
If the babel upstream fixed a bug or added a feature, how often do you merge the upstream into your fork?</p>`,fo,L,qe='<h3><a href="#consistency-of-the-syntax" id="consistency-of-the-syntax">Consistency of the syntax</a></h3> <p>This is the hardest part of creating a new syntax. An added syntax is an added mental concept for the language users, so the new mental model should be transferable to every scenario of the language.</p> <p>Take our <code class="inline">@@</code> syntax, for example, if it works for a normal function declaration, it&#39;s expected to work for anonymous functions, arrow functions, class methods. Have you thought about how it would work with generator functions and async functions? If a curried function returns another function, does that make the returned function curried as well?</p>',mo,p,D,De='<a href="#compile-time-vs-runtime" id="compile-time-vs-runtime">Compile-time vs Runtime</a>',Jo,j,je="I think you get my point. But the idea of having a magical syntax that keeps the code elegant and short is enticing.",Qo,B,Be='Take <a href="https://v8.dev/features/optional-chaining" rel="nofollow">optional chaining</a> for example, before having the optional chaining operator <code class="inline">?.</code>, we had a few ways to write <code class="inline">props?.user?.friends?.[0]?.friend</code>, which is:',Xo,F,Fe="<strong>a mundane to write, not easy to read (less intentional), but most efficient possible:</strong>",Zo,A,go,_n=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstFriend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friend</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// or with ternary</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstFriend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> props</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friend</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Go,R,Ae="<strong>easy to write, easy to read, but with slightly more runtime overhead:</strong>",st,O,wo,Cn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstFriend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friend);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> accessor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">accessor</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (e) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ot,z,Re='<b>Note:</b> I&#39;ve tried to search online whether a `try-catch` is more expensive, however the <a href="https://stackoverflow.com/questions/19727905/in-javascript-is-it-expensive-to-use-try-catch-blocks-even-if-an-exception-is-n">search result</a> <a href="https://news.ycombinator.com/item?id=3922963">is not</a> <a href="https://stackoverflow.com/questions/3217294/javascript-try-catch-performance-vs-error-checking-code">conclusive</a>. <a href="https://twitter.com/lihautan">Let me know</a> if you have a conclusive research on this.',tt,V,Oe="Is there a third option that is <strong>easy to read and write, yet without the try-catch runtime overhead?</strong>",et,N,ze='Well, if you look at the <a href="https://github.com/facebookincubator/idx" rel="nofollow"><code class="inline">facebookincubator/idx</code></a> library, it uses a <a href="https://github.com/facebookincubator/idx#babel-plugin" rel="nofollow">Babel plugin</a> to search through require or imports of <code class="inline">idx</code> and replaces all its usages, for example when you write:',at,U,bo,Tn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> idx </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;idx&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,nt,K,Ve="it gets transformed into:",lt,W,_o,Mn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rt,$,Ne="So your code is easy to read, and no runtime overhead. You get the best of both worlds!",it,Y,Ue="Though nothing is perfect. Here, I wanted to point out some of my personal opinions about this approach:",pt,J,Ke="<p>While maintaining a good developer experience (DX), we&#39;ve shifted the runtime overhead to compile time.</p>",ct,Q,We="You can keep the way you wanted to write the code while having the compiler to transform the code to something you are <em>&quot;supposed&quot;</em> to write.",kt,X,$e="A win-win solution.",ht,Z,Ye="<strong>How do we apply this technique to other similar situations?</strong>",yt,G,Je='First, you need to <a href="/step-by-step-guide-for-writing-a-babel-transformation">write a Babel plugin</a>.',vt,ss,Qe="Secondly, you need a <strong>marker</strong> to target the transformation.",dt,os,Xe='In this example, the default import from the <code class="inline">&quot;idx&quot;</code> module is the <strong>marker</strong>, all the usage of the default import would be transformed by the Babel plugin.',ut,ts,Ze="Thirdly, you need to update your babel configuration. For every new plugin, <strong>you need to add them in</strong>; <strong>you need to make sure the order of plugin is correct</strong>.",xt,es,Ge="<strong>What if there&#39;s a bug in the Babel plugin?</strong>",ft,as,sa="This would be the most confusing part for the new developers on the codebase.",mt,ns,oa='In this example, if the <code class="inline">idx</code> function has a bug, it is natural for developers to dig into the source code of <code class="inline">idx</code>. However, <code class="inline">&quot;idx&quot;</code> is nothing but a <strong>marker</strong> for the <code class="inline">babel-plugin-idx</code> to transform away. So if there&#39;s any bug, it should be inside <code class="inline">babel-plugin-idx</code> instead of <code class="inline">idx</code>.',gt,ls,ta='Besides, the bug may be due to the configuration of the Babel plugin instead of the code logic itself. However if you change the configuration, it could affect all the usages of the <code class="inline">idx</code> function, because <strong>babel configuration is global</strong>.',wt,bt,_t,rs,ea="To summarise, I think that this solution is a win-win for DX vs User Experience (UX), however, if we can make the transform plugin more accessible to all developers, eg: without having to update babel configuration for every new transform plugin, easier to debug, and a localized configuration.",Ct,is,aa='Well, you are looking at <a href="https://github.com/kentcdodds/babel-plugin-macros" rel="nofollow">babel macros</a>. 👀',Co,h,ps,na='<a href="#babel-macros" id="babel-macros">Babel macros</a>',Tt,cs,la="So, here's how it would look like with babel macro:",Mt,ks,ra='<strong>You add <code class="inline">babel-plugin-macro</code> to babel config</strong>',Ht,hs,ia="And that's all the change you need for babel configuration.",Lt,ys,To,Hn=`<div class="filename">babel.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,It,vs,pa="<strong>You write your own macro</strong>",Pt,ds,Mo,Ln=`<div class="filename">src/utils/idx.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">createMacro</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">((&#123; state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> references &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">default</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(referencePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">idx_transform</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">referencePath</span><span style="color: var(--shiki-color-text)">.parentPath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Et,us,ca='We&#39;ll talk about the code later, one thing to take away here is that your filename has to end with <code class="inline">.macro</code> or <code class="inline">.macro.js</code>.',St,xs,ka="<strong>Use it</strong>",qt,fs,Ho,In=`<div class="filename">src/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> idx </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./utils/idx.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Dt,ms,ha='As you can see here, if there&#39;s something wrong about <code class="inline">idx</code>, the user would know which file exactly to look at.',jt,gs,ya='You don&#39;t get the disconnection between the module <code class="inline">idx</code> and the plugin <code class="inline">babel-plugin-idx</code>.',Bt,ws,va="Besides, if you want to modify configuration, say for this usage, you can do it easily:",Ft,bs,Lo,Pn=`<div class="filename">src/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> idx </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./utils/idx.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; strict</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,At,_s,da="Simple and explicit. Isn't that great?",Io,I,ua='<h3><a href="#so-what-is-babel-macros-again" id="so-what-is-babel-macros-again">So what is Babel macros again?</a></h3> <p><strong>Babel macros</strong> is a concept from the <a href="https://github.com/kentcdodds/babel-plugin-macros" rel="nofollow"><code class="inline">babel-plugin-macros</code></a>, which defines the standard interface between compile-time code transformation and your runtime code.</p> <p>In compile-time, <code class="inline">babel-plugin-macros</code> will look for all <code class="inline">import</code> or <code class="inline">require</code> from modules ends with <code class="inline">.macro</code>, finds all references of the imported variables, and passes them to the <code class="inline">.macro</code> file to transform them.</p> <p>The imported variables are not restricted to be a function, it can be a variable, a type from type system (Flow / TypeScript).</p> <p>If it is a default export, you can name it any way you like, if it is a named export, you can reassign to another variable name too.</p> <p>Cool, so how can I write my Babel macros?</p>',Po,P,xa='<h2><a href="#how-to-write-babel-macros" id="how-to-write-babel-macros">How to write Babel macros</a></h2> <p><a href="http://kentcdodds.com" rel="nofollow">Kent C Dodds</a> has written <a href="https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md" rel="nofollow">a fantastic guide for macro authors</a>.</p> <p>Please go read it.</p> <p>If you insist to stay, I am going to show you how I wrote my Babel macros, in particular, the <a href="https://www.npmjs.com/package/mock.macro" rel="nofollow">mock.macro</a>. And hopefully, along the way, you learned how to write your Babel macros as well.</p>',Eo,n,Cs,fa='<a href="#mock-macro" id="mock-macro">mock.macro</a>',Rt,Ts,ma="<strong>Motivation</strong>",Ot,Ms,ga="Usually, when working with a backend developer on a frontend application, I would use static type to define the API schema. For example, a user api would look like this:",zt,Hs,So,En=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Response</span><span style="color: var(--shiki-color-text)">&lt;&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;&gt; &#123;&#125;</span></span></code></pre>`,Vt,Ls,wa="However while waiting for the backend developer to develop the API, I would have to use mock data for development:",Nt,Is,qo,Sn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Response</span><span style="color: var(--shiki-color-text)">&lt;&#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;&gt; &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau@foo.bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;123 Bar Street, Foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ut,Ps,ba="And along the way, due to unforeseen circumstances and lack of foresight, the response schema of the API was changed multiple times:",Kt,Es,Do,qn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Response</span><span style="color: var(--shiki-color-text)">&lt;&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;&gt; &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau@foo.bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;123 Bar Street, Foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;0123456789&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wt,Ss,_a='Here you see I need to update both the type definition as well as the mock data. This reminds me of <a href="https://babel-blade.netlify.com/docs/declarationdeclaration" rel="nofollow">the double declaration problem</a> coined by <a href="https://twitter.com/swyx" rel="nofollow">@swyx</a> <a href="https://www.youtube.com/watch?v=1WNT5RCENfo" rel="nofollow">in his talk</a>. Which means that this could potentially be solved with Babel macros.',$t,qs,Ca="So in my head, I imagined with Babel macros, I could write:",Yt,Ds,jo,Dn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> &#123; MockResponse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./mock.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MockResponse</span><span style="color: var(--shiki-color-text)">&lt;&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;&gt; &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jt,js,Ta='and when I call the function <code class="inline">fetchUser</code>, I would get my mock response in return.',Qt,Bs,Ma="<strong>Implementing mock.macro</strong>",Xt,Fs,Ha='Implementing mock.macro requires some basic knowledge about Abstract Syntax Tree (AST) and writing babel transformation, you can check out <a href="/step-by-step-guide-for-writing-a-babel-transformation">the step-by-step guide I&#39;ve written previously</a>.',Zt,As,La='Implementing Babel macros is quite easy, the api from the <code class="inline">babel-plugin-macros</code> is pretty straightforward, all you need is to provide a default export to your macro file:',Gt,Rs,Bo,jn=`<div class="filename">mock.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">createMacro</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,se,Os,Ia='<code class="inline">createMacro</code> takes in a callback function, which is executed when someone imports this macro file. It provides:',oe,zs,Pa="<li><strong>references</strong></li>",te,Vs,Ea="All the reference that was imported from the macro file.",ee,Ns,Sa="For example:",ae,Us,Fo,Bn='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> foo</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; bar &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./foobar.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',ne,Ks,qa='will give you an object, with the import name as the <code class="inline">key</code>, and array of paths as the <code class="inline">value</code>:',le,Ws,Ao,Fn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;default&quot;</span><span style="color: var(--shiki-color-text)">: []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;bar&quot;</span><span style="color: var(--shiki-color-text)">: []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,re,$s,Da="Inside the array, you can get all paths where the imported names are referenced. For example:",ie,Ys,Ro,An=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./foobar.macro.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// &lt;-- referenced &#96;foo&#96;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bar</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &lt;-- referenced &#96;foo&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">baz</span><span style="color: var(--shiki-color-text)">(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &lt;-- not referencing &#96;foo&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &#96;references&#96;:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;default&quot;</span><span style="color: var(--shiki-color-text)">: [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    Path</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// foo in foo(&#39;a&#39;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    Path</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// foo in foo + 1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pe,Js,ja="<li><strong>state</strong></li>",ce,Qs,Ba="It gives you the current state of the file being traversed.",ke,Xs,Fa='So, in this example, I need to transform all the references of <code class="inline">MockResponse</code>:',he,Zs,Oo,Rn=`<div class="filename">mock.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// TODO:</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,ye,Gs,Aa="Next, I need to figure out how the transformed code would look like:",ve,so,zo,On=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> faker </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;faker&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(userId) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.number</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,de,oo,Ra='I decided to use <a href="https://github.com/marak/Faker.js/" rel="nofollow">faker.js</a> as the random data generator.',ue,to,Oa='So I have to import <code class="inline">faker</code> at the top of the file:',xe,eo,Vo,zn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fakerIdentifier</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">scope</span><span style="color: var(--shiki-token-function)">.generateUidIdentifier</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;faker&#39;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">importStatement</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.template</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;import %%FAKER%% from &#39;faker&#39;&quot;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.unshiftContainer</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;body&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> importStatement);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,fe,ao,za='Next, for each references of <code class="inline">MockRespone</code>, I need to find the <code class="inline">FunctionDeclaration</code> that it belongs to, and insert a <code class="inline">ReturnStatement</code> into the top of the function body:',me,no,No,Vn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ... inserting &#96;import faker from &#39;faker&#39;&#96;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(reference </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">functionDeclaration</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.getFunctionParent</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;typeParameters.params.0&#39;</span><span style="color: var(--shiki-color-text)">).node;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      functionDeclaration</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;body&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.unshiftContainer</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&#39;body&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.returnStatement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">generateFakerCode</span><span style="color: var(--shiki-color-text)">(fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> typeDef)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          )</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,ge,lo,Va='In the <code class="inline">generateFakerCode</code>, I&#39;ll generate a AST node based on the node type of the <code class="inline">typeDef</code>:',we,ro,Uo,Nn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generateFakerCode</span><span style="color: var(--shiki-color-text)">(fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> typeDef) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)">.type) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ObjectTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.objectExpression</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">properties</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(property </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.objectProperty</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">property</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)">.name)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">generateFakerCode</span><span style="color: var(--shiki-color-text)">(fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">property</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;NumberTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.expression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;%%FAKER%%.random.number()&#39;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;StringTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.expression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;%%FAKER%%.random.word()&#39;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;BooleanTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.expression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;%%FAKER%%.random.boolean()&#39;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MacroError</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Unknown type definition: </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)">.type</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,be,io,Na="That's it! A generated mock function via type definition using Babel macros.",_e,po,Ua="One last thing, what happens when the API is ready, and you want to disable the mocking behavior?",Ce,co,Ka='We can read the 2nd parameter of the <code class="inline">MockResponse</code>:',Te,ko,Ko,Un='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(...)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MockResponse</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">&gt; &#123;&#125;</span></span></code></pre>',Me,ho,Wa='If the 2nd parameter is <code class="inline">false</code>, we disable the mocking behavior:',He,yo,Wo,Kn=`<div class="filename">mock.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">createMacro</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> config &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(reference </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">functionDeclaration</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.getFunctionParent</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;typeParameters.params.0&#39;</span><span style="color: var(--shiki-color-text)">).node;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if the 2nd argument present and it is &#39;false&#39;, disable mocking</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">secondParam</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;typeParameters.params.1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (secondParam </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">secondParam</span><span style="color: var(--shiki-token-function)">.isBooleanLiteralTypeAnnotation</span><span style="color: var(--shiki-color-text)">(&#123; value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...insert return statement</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Le,vo,$a='<p>You can find the full code from <a href="https://github.com/tanhauhau/mock.macro" rel="nofollow">Github</a>.</p>',$o,E,Ya='<h2><a href="#summary" id="summary">Summary</a></h2> <p>Sometimes, it is more efficient to move runtime abstraction and complexity to compile time. However, developing and maintaining a babel plugin for each of them may be difficult to maintain and debug, as there&#39;s a gap between the code written and build time plugin, eg: <code class="inline">idx</code> and <code class="inline">babel-plugin-idx</code>.</p> <p><code class="inline">babel-plugin-macros</code> solves this by allow users to import <code class="inline">.macro</code> files directly into the codebase. The explicit import bridges the gap between build-time and runtime and allows the user to develop and debug their macro easily.</p>',Yo,S,Ja='<h2><a href="#further-reading" id="further-reading">Further Reading</a></h2> <ul><li><a href="https://github.com/kentcdodds/babel-plugin-macros" rel="nofollow">babel-plugin-macros</a> by <a href="https://twitter.com/kentcdodds/" rel="nofollow">Kent C. Dodds</a></li> <li><a href="https://www.youtube.com/watch?v=1WNT5RCENfo" rel="nofollow">I Can Babel Macros (and So Can You!)</a> by <a href="https://twitter.com/swyx" rel="nofollow">Shawn Wang</a></li> <li><a href="https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md" rel="nofollow"><code class="inline">babel-plugin-macros</code> Usage for macros authors</a></li> <li><a href="https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros" rel="nofollow">Zero-config code transformation with babel-plugin-macros</a> by <a href="https://twitter.com/kentcdodds/" rel="nofollow">Kent C. Dodds</a></li> <li><a href="https://github.com/jgierer12/awesome-babel-macros" rel="nofollow">Awesome list for Babel macros</a></li> <li>The idea of converting type definition to mock generator comes from <a href="https://github.com/Cryrivers/manta-style" rel="nofollow">Manta Style, the futuristic API Mock Server for Frontend</a></li></ul>';return{c(){u=o("p"),u.textContent=T,_=e(),b=o("section"),b.innerHTML=g,w=e(),C=o("section"),C.innerHTML=Pe,uo=e(),M=o("section"),M.innerHTML=Ee,xo=e(),H=o("section"),H.innerHTML=Se,fo=e(),L=o("section"),L.innerHTML=qe,mo=e(),p=o("section"),D=o("h2"),D.innerHTML=De,Jo=e(),j=o("p"),j.textContent=je,Qo=e(),B=o("p"),B.innerHTML=Be,Xo=e(),F=o("p"),F.innerHTML=Fe,Zo=e(),A=o("div"),go=new x(!1),Go=e(),R=o("p"),R.innerHTML=Ae,st=e(),O=o("div"),wo=new x(!1),ot=e(),z=o("blockquote"),z.innerHTML=Re,tt=e(),V=o("p"),V.innerHTML=Oe,et=e(),N=o("p"),N.innerHTML=ze,at=e(),U=o("div"),bo=new x(!1),nt=e(),K=o("p"),K.textContent=Ve,lt=e(),W=o("div"),_o=new x(!1),rt=e(),$=o("p"),$.textContent=Ne,it=e(),Y=o("p"),Y.textContent=Ue,pt=e(),J=o("blockquote"),J.innerHTML=Ke,ct=e(),Q=o("p"),Q.innerHTML=We,kt=e(),X=o("p"),X.textContent=$e,ht=e(),Z=o("p"),Z.innerHTML=Ye,yt=e(),G=o("p"),G.innerHTML=Je,vt=e(),ss=o("p"),ss.innerHTML=Qe,dt=e(),os=o("p"),os.innerHTML=Xe,ut=e(),ts=o("p"),ts.innerHTML=Ze,xt=e(),es=o("p"),es.innerHTML=Ge,ft=e(),as=o("p"),as.textContent=sa,mt=e(),ns=o("p"),ns.innerHTML=oa,gt=e(),ls=o("p"),ls.innerHTML=ta,wt=e(),bt=o("hr"),_t=e(),rs=o("p"),rs.textContent=ea,Ct=e(),is=o("p"),is.innerHTML=aa,Co=e(),h=o("section"),ps=o("h2"),ps.innerHTML=na,Tt=e(),cs=o("p"),cs.textContent=la,Mt=e(),ks=o("p"),ks.innerHTML=ra,Ht=e(),hs=o("p"),hs.textContent=ia,Lt=e(),ys=o("div"),To=new x(!1),It=e(),vs=o("p"),vs.innerHTML=pa,Pt=e(),ds=o("div"),Mo=new x(!1),Et=e(),us=o("p"),us.innerHTML=ca,St=e(),xs=o("p"),xs.innerHTML=ka,qt=e(),fs=o("div"),Ho=new x(!1),Dt=e(),ms=o("p"),ms.innerHTML=ha,jt=e(),gs=o("p"),gs.innerHTML=ya,Bt=e(),ws=o("p"),ws.textContent=va,Ft=e(),bs=o("div"),Lo=new x(!1),At=e(),_s=o("p"),_s.textContent=da,Io=e(),I=o("section"),I.innerHTML=ua,Po=e(),P=o("section"),P.innerHTML=xa,Eo=e(),n=o("section"),Cs=o("h3"),Cs.innerHTML=fa,Rt=e(),Ts=o("p"),Ts.innerHTML=ma,Ot=e(),Ms=o("p"),Ms.textContent=ga,zt=e(),Hs=o("div"),So=new x(!1),Vt=e(),Ls=o("p"),Ls.textContent=wa,Nt=e(),Is=o("div"),qo=new x(!1),Ut=e(),Ps=o("p"),Ps.textContent=ba,Kt=e(),Es=o("div"),Do=new x(!1),Wt=e(),Ss=o("p"),Ss.innerHTML=_a,$t=e(),qs=o("p"),qs.textContent=Ca,Yt=e(),Ds=o("div"),jo=new x(!1),Jt=e(),js=o("p"),js.innerHTML=Ta,Qt=e(),Bs=o("p"),Bs.innerHTML=Ma,Xt=e(),Fs=o("p"),Fs.innerHTML=Ha,Zt=e(),As=o("p"),As.innerHTML=La,Gt=e(),Rs=o("div"),Bo=new x(!1),se=e(),Os=o("p"),Os.innerHTML=Ia,oe=e(),zs=o("ul"),zs.innerHTML=Pa,te=e(),Vs=o("p"),Vs.textContent=Ea,ee=e(),Ns=o("p"),Ns.textContent=Sa,ae=e(),Us=o("div"),Fo=new x(!1),ne=e(),Ks=o("p"),Ks.innerHTML=qa,le=e(),Ws=o("div"),Ao=new x(!1),re=e(),$s=o("p"),$s.textContent=Da,ie=e(),Ys=o("div"),Ro=new x(!1),pe=e(),Js=o("ul"),Js.innerHTML=ja,ce=e(),Qs=o("p"),Qs.textContent=Ba,ke=e(),Xs=o("p"),Xs.innerHTML=Fa,he=e(),Zs=o("div"),Oo=new x(!1),ye=e(),Gs=o("p"),Gs.textContent=Aa,ve=e(),so=o("div"),zo=new x(!1),de=e(),oo=o("p"),oo.innerHTML=Ra,ue=e(),to=o("p"),to.innerHTML=Oa,xe=e(),eo=o("div"),Vo=new x(!1),fe=e(),ao=o("p"),ao.innerHTML=za,me=e(),no=o("div"),No=new x(!1),ge=e(),lo=o("p"),lo.innerHTML=Va,we=e(),ro=o("div"),Uo=new x(!1),be=e(),io=o("p"),io.textContent=Na,_e=e(),po=o("p"),po.textContent=Ua,Ce=e(),co=o("p"),co.innerHTML=Ka,Te=e(),ko=o("div"),Ko=new x(!1),Me=e(),ho=o("p"),ho.innerHTML=Wa,He=e(),yo=o("div"),Wo=new x(!1),Le=e(),vo=o("blockquote"),vo.innerHTML=$a,$o=e(),E=o("section"),E.innerHTML=Ya,Yo=e(),S=o("section"),S.innerHTML=Ja,this.h()},l(c){u=t(c,"P",{"data-svelte-h":!0}),i(u)!=="svelte-1mpvtlb"&&(u.textContent=T),_=a(c),b=t(c,"SECTION",{"data-svelte-h":!0}),i(b)!=="svelte-hrgk3d"&&(b.innerHTML=g),w=a(c),C=t(c,"SECTION",{"data-svelte-h":!0}),i(C)!=="svelte-1a8qq40"&&(C.innerHTML=Pe),uo=a(c),M=t(c,"SECTION",{"data-svelte-h":!0}),i(M)!=="svelte-1df64mw"&&(M.innerHTML=Ee),xo=a(c),H=t(c,"SECTION",{"data-svelte-h":!0}),i(H)!=="svelte-188xz98"&&(H.innerHTML=Se),fo=a(c),L=t(c,"SECTION",{"data-svelte-h":!0}),i(L)!=="svelte-1tt6ztk"&&(L.innerHTML=qe),mo=a(c),p=t(c,"SECTION",{});var r=v(p);D=t(r,"H2",{"data-svelte-h":!0}),i(D)!=="svelte-le77zg"&&(D.innerHTML=De),Jo=a(r),j=t(r,"P",{"data-svelte-h":!0}),i(j)!=="svelte-18wjppg"&&(j.textContent=je),Qo=a(r),B=t(r,"P",{"data-svelte-h":!0}),i(B)!=="svelte-19mlxbz"&&(B.innerHTML=Be),Xo=a(r),F=t(r,"P",{"data-svelte-h":!0}),i(F)!=="svelte-190s4i1"&&(F.innerHTML=Fe),Zo=a(r),A=t(r,"DIV",{class:!0});var Qa=v(A);go=f(Qa,!1),Qa.forEach(k),Go=a(r),R=t(r,"P",{"data-svelte-h":!0}),i(R)!=="svelte-1jsaunm"&&(R.innerHTML=Ae),st=a(r),O=t(r,"DIV",{class:!0});var Xa=v(O);wo=f(Xa,!1),Xa.forEach(k),ot=a(r),z=t(r,"BLOCKQUOTE",{"data-svelte-h":!0}),i(z)!=="svelte-1qf21kc"&&(z.innerHTML=Re),tt=a(r),V=t(r,"P",{"data-svelte-h":!0}),i(V)!=="svelte-184mfzh"&&(V.innerHTML=Oe),et=a(r),N=t(r,"P",{"data-svelte-h":!0}),i(N)!=="svelte-dp8v29"&&(N.innerHTML=ze),at=a(r),U=t(r,"DIV",{class:!0});var Za=v(U);bo=f(Za,!1),Za.forEach(k),nt=a(r),K=t(r,"P",{"data-svelte-h":!0}),i(K)!=="svelte-7evef"&&(K.textContent=Ve),lt=a(r),W=t(r,"DIV",{class:!0});var Ga=v(W);_o=f(Ga,!1),Ga.forEach(k),rt=a(r),$=t(r,"P",{"data-svelte-h":!0}),i($)!=="svelte-cobpm1"&&($.textContent=Ne),it=a(r),Y=t(r,"P",{"data-svelte-h":!0}),i(Y)!=="svelte-vo2bp1"&&(Y.textContent=Ue),pt=a(r),J=t(r,"BLOCKQUOTE",{"data-svelte-h":!0}),i(J)!=="svelte-gjrs99"&&(J.innerHTML=Ke),ct=a(r),Q=t(r,"P",{"data-svelte-h":!0}),i(Q)!=="svelte-1rpdgzr"&&(Q.innerHTML=We),kt=a(r),X=t(r,"P",{"data-svelte-h":!0}),i(X)!=="svelte-75wb7h"&&(X.textContent=$e),ht=a(r),Z=t(r,"P",{"data-svelte-h":!0}),i(Z)!=="svelte-1eoh67e"&&(Z.innerHTML=Ye),yt=a(r),G=t(r,"P",{"data-svelte-h":!0}),i(G)!=="svelte-aocdzh"&&(G.innerHTML=Je),vt=a(r),ss=t(r,"P",{"data-svelte-h":!0}),i(ss)!=="svelte-jjspli"&&(ss.innerHTML=Qe),dt=a(r),os=t(r,"P",{"data-svelte-h":!0}),i(os)!=="svelte-1q39wco"&&(os.innerHTML=Xe),ut=a(r),ts=t(r,"P",{"data-svelte-h":!0}),i(ts)!=="svelte-2o7x8w"&&(ts.innerHTML=Ze),xt=a(r),es=t(r,"P",{"data-svelte-h":!0}),i(es)!=="svelte-10qagn9"&&(es.innerHTML=Ge),ft=a(r),as=t(r,"P",{"data-svelte-h":!0}),i(as)!=="svelte-o6ekug"&&(as.textContent=sa),mt=a(r),ns=t(r,"P",{"data-svelte-h":!0}),i(ns)!=="svelte-1jey1sd"&&(ns.innerHTML=oa),gt=a(r),ls=t(r,"P",{"data-svelte-h":!0}),i(ls)!=="svelte-1irlu5x"&&(ls.innerHTML=ta),wt=a(r),bt=t(r,"HR",{}),_t=a(r),rs=t(r,"P",{"data-svelte-h":!0}),i(rs)!=="svelte-v7vpza"&&(rs.textContent=ea),Ct=a(r),is=t(r,"P",{"data-svelte-h":!0}),i(is)!=="svelte-2umi9m"&&(is.innerHTML=aa),r.forEach(k),Co=a(c),h=t(c,"SECTION",{});var y=v(h);ps=t(y,"H2",{"data-svelte-h":!0}),i(ps)!=="svelte-1u3iu3l"&&(ps.innerHTML=na),Tt=a(y),cs=t(y,"P",{"data-svelte-h":!0}),i(cs)!=="svelte-10m4zmc"&&(cs.textContent=la),Mt=a(y),ks=t(y,"P",{"data-svelte-h":!0}),i(ks)!=="svelte-1qjbw9q"&&(ks.innerHTML=ra),Ht=a(y),hs=t(y,"P",{"data-svelte-h":!0}),i(hs)!=="svelte-1wt03gu"&&(hs.textContent=ia),Lt=a(y),ys=t(y,"DIV",{class:!0});var sn=v(ys);To=f(sn,!1),sn.forEach(k),It=a(y),vs=t(y,"P",{"data-svelte-h":!0}),i(vs)!=="svelte-11mddlc"&&(vs.innerHTML=pa),Pt=a(y),ds=t(y,"DIV",{class:!0});var on=v(ds);Mo=f(on,!1),on.forEach(k),Et=a(y),us=t(y,"P",{"data-svelte-h":!0}),i(us)!=="svelte-1e27ktb"&&(us.innerHTML=ca),St=a(y),xs=t(y,"P",{"data-svelte-h":!0}),i(xs)!=="svelte-15d93eh"&&(xs.innerHTML=ka),qt=a(y),fs=t(y,"DIV",{class:!0});var tn=v(fs);Ho=f(tn,!1),tn.forEach(k),Dt=a(y),ms=t(y,"P",{"data-svelte-h":!0}),i(ms)!=="svelte-mkzk7h"&&(ms.innerHTML=ha),jt=a(y),gs=t(y,"P",{"data-svelte-h":!0}),i(gs)!=="svelte-9ig8y5"&&(gs.innerHTML=ya),Bt=a(y),ws=t(y,"P",{"data-svelte-h":!0}),i(ws)!=="svelte-1skhbrz"&&(ws.textContent=va),Ft=a(y),bs=t(y,"DIV",{class:!0});var en=v(bs);Lo=f(en,!1),en.forEach(k),At=a(y),_s=t(y,"P",{"data-svelte-h":!0}),i(_s)!=="svelte-ml3d5z"&&(_s.textContent=da),y.forEach(k),Io=a(c),I=t(c,"SECTION",{"data-svelte-h":!0}),i(I)!=="svelte-iz8yc3"&&(I.innerHTML=ua),Po=a(c),P=t(c,"SECTION",{"data-svelte-h":!0}),i(P)!=="svelte-e4lgho"&&(P.innerHTML=xa),Eo=a(c),n=t(c,"SECTION",{});var l=v(n);Cs=t(l,"H3",{"data-svelte-h":!0}),i(Cs)!=="svelte-1ua7ima"&&(Cs.innerHTML=fa),Rt=a(l),Ts=t(l,"P",{"data-svelte-h":!0}),i(Ts)!=="svelte-17osket"&&(Ts.innerHTML=ma),Ot=a(l),Ms=t(l,"P",{"data-svelte-h":!0}),i(Ms)!=="svelte-djsj78"&&(Ms.textContent=ga),zt=a(l),Hs=t(l,"DIV",{class:!0});var an=v(Hs);So=f(an,!1),an.forEach(k),Vt=a(l),Ls=t(l,"P",{"data-svelte-h":!0}),i(Ls)!=="svelte-j9hrg7"&&(Ls.textContent=wa),Nt=a(l),Is=t(l,"DIV",{class:!0});var nn=v(Is);qo=f(nn,!1),nn.forEach(k),Ut=a(l),Ps=t(l,"P",{"data-svelte-h":!0}),i(Ps)!=="svelte-oiho6b"&&(Ps.textContent=ba),Kt=a(l),Es=t(l,"DIV",{class:!0});var ln=v(Es);Do=f(ln,!1),ln.forEach(k),Wt=a(l),Ss=t(l,"P",{"data-svelte-h":!0}),i(Ss)!=="svelte-10nmoo8"&&(Ss.innerHTML=_a),$t=a(l),qs=t(l,"P",{"data-svelte-h":!0}),i(qs)!=="svelte-1m8m8xg"&&(qs.textContent=Ca),Yt=a(l),Ds=t(l,"DIV",{class:!0});var rn=v(Ds);jo=f(rn,!1),rn.forEach(k),Jt=a(l),js=t(l,"P",{"data-svelte-h":!0}),i(js)!=="svelte-8g0o23"&&(js.innerHTML=Ta),Qt=a(l),Bs=t(l,"P",{"data-svelte-h":!0}),i(Bs)!=="svelte-cmtkjs"&&(Bs.innerHTML=Ma),Xt=a(l),Fs=t(l,"P",{"data-svelte-h":!0}),i(Fs)!=="svelte-1i3my1"&&(Fs.innerHTML=Ha),Zt=a(l),As=t(l,"P",{"data-svelte-h":!0}),i(As)!=="svelte-6ay75c"&&(As.innerHTML=La),Gt=a(l),Rs=t(l,"DIV",{class:!0});var pn=v(Rs);Bo=f(pn,!1),pn.forEach(k),se=a(l),Os=t(l,"P",{"data-svelte-h":!0}),i(Os)!=="svelte-1oibo9z"&&(Os.innerHTML=Ia),oe=a(l),zs=t(l,"UL",{"data-svelte-h":!0}),i(zs)!=="svelte-1li4l6"&&(zs.innerHTML=Pa),te=a(l),Vs=t(l,"P",{"data-svelte-h":!0}),i(Vs)!=="svelte-n298no"&&(Vs.textContent=Ea),ee=a(l),Ns=t(l,"P",{"data-svelte-h":!0}),i(Ns)!=="svelte-1gkqha7"&&(Ns.textContent=Sa),ae=a(l),Us=t(l,"DIV",{class:!0});var cn=v(Us);Fo=f(cn,!1),cn.forEach(k),ne=a(l),Ks=t(l,"P",{"data-svelte-h":!0}),i(Ks)!=="svelte-1cjktrq"&&(Ks.innerHTML=qa),le=a(l),Ws=t(l,"DIV",{class:!0});var kn=v(Ws);Ao=f(kn,!1),kn.forEach(k),re=a(l),$s=t(l,"P",{"data-svelte-h":!0}),i($s)!=="svelte-zqs3ji"&&($s.textContent=Da),ie=a(l),Ys=t(l,"DIV",{class:!0});var hn=v(Ys);Ro=f(hn,!1),hn.forEach(k),pe=a(l),Js=t(l,"UL",{"data-svelte-h":!0}),i(Js)!=="svelte-r7ba67"&&(Js.innerHTML=ja),ce=a(l),Qs=t(l,"P",{"data-svelte-h":!0}),i(Qs)!=="svelte-zk5k2k"&&(Qs.textContent=Ba),ke=a(l),Xs=t(l,"P",{"data-svelte-h":!0}),i(Xs)!=="svelte-my0jwi"&&(Xs.innerHTML=Fa),he=a(l),Zs=t(l,"DIV",{class:!0});var yn=v(Zs);Oo=f(yn,!1),yn.forEach(k),ye=a(l),Gs=t(l,"P",{"data-svelte-h":!0}),i(Gs)!=="svelte-1wmtj25"&&(Gs.textContent=Aa),ve=a(l),so=t(l,"DIV",{class:!0});var vn=v(so);zo=f(vn,!1),vn.forEach(k),de=a(l),oo=t(l,"P",{"data-svelte-h":!0}),i(oo)!=="svelte-aowgrb"&&(oo.innerHTML=Ra),ue=a(l),to=t(l,"P",{"data-svelte-h":!0}),i(to)!=="svelte-o0sczc"&&(to.innerHTML=Oa),xe=a(l),eo=t(l,"DIV",{class:!0});var dn=v(eo);Vo=f(dn,!1),dn.forEach(k),fe=a(l),ao=t(l,"P",{"data-svelte-h":!0}),i(ao)!=="svelte-z1zl88"&&(ao.innerHTML=za),me=a(l),no=t(l,"DIV",{class:!0});var un=v(no);No=f(un,!1),un.forEach(k),ge=a(l),lo=t(l,"P",{"data-svelte-h":!0}),i(lo)!=="svelte-ufhzuz"&&(lo.innerHTML=Va),we=a(l),ro=t(l,"DIV",{class:!0});var xn=v(ro);Uo=f(xn,!1),xn.forEach(k),be=a(l),io=t(l,"P",{"data-svelte-h":!0}),i(io)!=="svelte-o32s29"&&(io.textContent=Na),_e=a(l),po=t(l,"P",{"data-svelte-h":!0}),i(po)!=="svelte-hr08ak"&&(po.textContent=Ua),Ce=a(l),co=t(l,"P",{"data-svelte-h":!0}),i(co)!=="svelte-1ab1a16"&&(co.innerHTML=Ka),Te=a(l),ko=t(l,"DIV",{class:!0});var fn=v(ko);Ko=f(fn,!1),fn.forEach(k),Me=a(l),ho=t(l,"P",{"data-svelte-h":!0}),i(ho)!=="svelte-1fnzip8"&&(ho.innerHTML=Wa),He=a(l),yo=t(l,"DIV",{class:!0});var mn=v(yo);Wo=f(mn,!1),mn.forEach(k),Le=a(l),vo=t(l,"BLOCKQUOTE",{"data-svelte-h":!0}),i(vo)!=="svelte-dyac86"&&(vo.innerHTML=$a),l.forEach(k),$o=a(c),E=t(c,"SECTION",{"data-svelte-h":!0}),i(E)!=="svelte-1et8qjv"&&(E.innerHTML=Ya),Yo=a(c),S=t(c,"SECTION",{"data-svelte-h":!0}),i(S)!=="svelte-ttn8cb"&&(S.innerHTML=Ja),this.h()},h(){go.a=null,m(A,"class","code-section"),wo.a=null,m(O,"class","code-section"),bo.a=null,m(U,"class","code-section"),_o.a=null,m(W,"class","code-section"),To.a=null,m(ys,"class","code-section"),Mo.a=null,m(ds,"class","code-section"),Ho.a=null,m(fs,"class","code-section"),Lo.a=null,m(bs,"class","code-section"),So.a=null,m(Hs,"class","code-section"),qo.a=null,m(Is,"class","code-section"),Do.a=null,m(Es,"class","code-section"),jo.a=null,m(Ds,"class","code-section"),Bo.a=null,m(Rs,"class","code-section"),Fo.a=null,m(Us,"class","code-section"),Ao.a=null,m(Ws,"class","code-section"),Ro.a=null,m(Ys,"class","code-section"),Oo.a=null,m(Zs,"class","code-section"),zo.a=null,m(so,"class","code-section"),Vo.a=null,m(eo,"class","code-section"),No.a=null,m(no,"class","code-section"),Uo.a=null,m(ro,"class","code-section"),Ko.a=null,m(ko,"class","code-section"),Wo.a=null,m(yo,"class","code-section")},m(c,r){d(c,u,r),d(c,_,r),d(c,b,r),d(c,w,r),d(c,C,r),d(c,uo,r),d(c,M,r),d(c,xo,r),d(c,H,r),d(c,fo,r),d(c,L,r),d(c,mo,r),d(c,p,r),s(p,D),s(p,Jo),s(p,j),s(p,Qo),s(p,B),s(p,Xo),s(p,F),s(p,Zo),s(p,A),go.m(_n,A),s(p,Go),s(p,R),s(p,st),s(p,O),wo.m(Cn,O),s(p,ot),s(p,z),s(p,tt),s(p,V),s(p,et),s(p,N),s(p,at),s(p,U),bo.m(Tn,U),s(p,nt),s(p,K),s(p,lt),s(p,W),_o.m(Mn,W),s(p,rt),s(p,$),s(p,it),s(p,Y),s(p,pt),s(p,J),s(p,ct),s(p,Q),s(p,kt),s(p,X),s(p,ht),s(p,Z),s(p,yt),s(p,G),s(p,vt),s(p,ss),s(p,dt),s(p,os),s(p,ut),s(p,ts),s(p,xt),s(p,es),s(p,ft),s(p,as),s(p,mt),s(p,ns),s(p,gt),s(p,ls),s(p,wt),s(p,bt),s(p,_t),s(p,rs),s(p,Ct),s(p,is),d(c,Co,r),d(c,h,r),s(h,ps),s(h,Tt),s(h,cs),s(h,Mt),s(h,ks),s(h,Ht),s(h,hs),s(h,Lt),s(h,ys),To.m(Hn,ys),s(h,It),s(h,vs),s(h,Pt),s(h,ds),Mo.m(Ln,ds),s(h,Et),s(h,us),s(h,St),s(h,xs),s(h,qt),s(h,fs),Ho.m(In,fs),s(h,Dt),s(h,ms),s(h,jt),s(h,gs),s(h,Bt),s(h,ws),s(h,Ft),s(h,bs),Lo.m(Pn,bs),s(h,At),s(h,_s),d(c,Io,r),d(c,I,r),d(c,Po,r),d(c,P,r),d(c,Eo,r),d(c,n,r),s(n,Cs),s(n,Rt),s(n,Ts),s(n,Ot),s(n,Ms),s(n,zt),s(n,Hs),So.m(En,Hs),s(n,Vt),s(n,Ls),s(n,Nt),s(n,Is),qo.m(Sn,Is),s(n,Ut),s(n,Ps),s(n,Kt),s(n,Es),Do.m(qn,Es),s(n,Wt),s(n,Ss),s(n,$t),s(n,qs),s(n,Yt),s(n,Ds),jo.m(Dn,Ds),s(n,Jt),s(n,js),s(n,Qt),s(n,Bs),s(n,Xt),s(n,Fs),s(n,Zt),s(n,As),s(n,Gt),s(n,Rs),Bo.m(jn,Rs),s(n,se),s(n,Os),s(n,oe),s(n,zs),s(n,te),s(n,Vs),s(n,ee),s(n,Ns),s(n,ae),s(n,Us),Fo.m(Bn,Us),s(n,ne),s(n,Ks),s(n,le),s(n,Ws),Ao.m(Fn,Ws),s(n,re),s(n,$s),s(n,ie),s(n,Ys),Ro.m(An,Ys),s(n,pe),s(n,Js),s(n,ce),s(n,Qs),s(n,ke),s(n,Xs),s(n,he),s(n,Zs),Oo.m(Rn,Zs),s(n,ye),s(n,Gs),s(n,ve),s(n,so),zo.m(On,so),s(n,de),s(n,oo),s(n,ue),s(n,to),s(n,xe),s(n,eo),Vo.m(zn,eo),s(n,fe),s(n,ao),s(n,me),s(n,no),No.m(Vn,no),s(n,ge),s(n,lo),s(n,we),s(n,ro),Uo.m(Nn,ro),s(n,be),s(n,io),s(n,_e),s(n,po),s(n,Ce),s(n,co),s(n,Te),s(n,ko),Ko.m(Un,ko),s(n,Me),s(n,ho),s(n,He),s(n,yo),Wo.m(Kn,yo),s(n,Le),s(n,vo),d(c,$o,r),d(c,E,r),d(c,Yo,r),d(c,S,r)},p:Yn,d(c){c&&(k(u),k(_),k(b),k(w),k(C),k(uo),k(M),k(xo),k(H),k(fo),k(L),k(mo),k(p),k(Co),k(h),k(Io),k(I),k(Po),k(P),k(Eo),k(n),k($o),k(E),k(Yo),k(S))}}}function rl(q){let u,T;const _=[q[0],bn];let b={$$slots:{default:[ll]},$$scope:{ctx:q}};for(let g=0;g<_.length;g+=1)b=Ie(b,_[g]);return u=new al({props:b}),{c(){Xn(u.$$.fragment)},l(g){Zn(u.$$.fragment,g)},m(g,w){Gn(u,g,w),T=!0},p(g,[w]){const C=w&1?el(_,[w&1&&wn(g[0]),w&0&&wn(bn)]):{};w&2&&(C.$$scope={dirty:w,ctx:g}),u.$set(C)},i(g){T||(sl(u.$$.fragment,g),T=!0)},o(g){ol(u.$$.fragment,g),T=!1},d(g){tl(u,g)}}}const bn={title:"Babel macros",date:"2019-10-08T08:00:00Z",series:"Intermediate Babel",tags:["JavaScript","babel","AST","transform"],description:"Custom JavaScript syntax is hard to maintain, custom babel transform plugin is no better. That's why we need Babel macros.",tableOfContents:[{link:"motivation",title:"Motivation",nested:[{link:"documentation-and-community-support",title:"Documentation and community support"},{link:"tooling",title:"Tooling"},{link:"maintainability",title:"Maintainability"},{link:"consistency-of-the-syntax",title:"Consistency of the syntax"}]},{link:"compile-time-vs-runtime",title:"Compile-time vs Runtime"},{link:"babel-macros",title:"Babel macros",nested:[{link:"so-what-is-babel-macros-again",title:"So what is Babel macros again?"}]},{link:"how-to-write-babel-macros",title:"How to write Babel macros",nested:[{link:"mock-macro",title:"mock.macro"}]},{link:"summary",title:"Summary"},{link:"further-reading",title:"Further Reading"}]};function il(q,u,T){return $n("blog",{image:nl}),q.$$set=_=>{T(0,u=Ie(Ie({},u),gn(_)))},u=gn(u),[u]}class yl extends Jn{constructor(u){super(),Qn(this,u,il,rl,Wn,{})}}export{yl as component};
