import{s as gs,d as ft,e as _s,f as ls,n as ws}from"../chunks/scheduler.D6VJxl8L.js";import{S as xs,i as Ts,m as Ls,n as Ss,o as Cs,t as Hs,a as Ms,p as js,e as s,s as l,H as ke,c as n,q as i,h as r,d as y,r as be,g as o,u as ye,j as c,k as t}from"../chunks/index.CLAVN-Y5.js";import{g as Rs,a as rs}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Is}from"../chunks/BlogLayout.BPekX0dI.js";const Es=""+new URL("../assets/step-4.CtfjZeIT.webp",import.meta.url).href,Os=""+new URL("../assets/step-4.B_3oskXJ.webp",import.meta.url).href,$s=""+new URL("../assets/step-4.B0gip4j8.png",import.meta.url).href,is=""+new URL("../assets/step-4.Cp43jUJH.png",import.meta.url).href,Us=""+new URL("../assets/step-3.D0if-4bC.webp",import.meta.url).href,As=""+new URL("../assets/step-3.nNGeyG03.webp",import.meta.url).href,Ps=""+new URL("../assets/step-3.BQ7n2Tea.png",import.meta.url).href,cs=""+new URL("../assets/step-3.CGyKNQuB.png",import.meta.url).href,Ns=""+new URL("../assets/step-2.BfqrBdhN.webp",import.meta.url).href,Ds=""+new URL("../assets/step-2.DXzozrKG.webp",import.meta.url).href,Bs=""+new URL("../assets/step-2.BLav5H2f.png",import.meta.url).href,ps=""+new URL("../assets/step-2.DKaS_fje.png",import.meta.url).href,Ws=""+new URL("../assets/step-1.B7KUzUQp.webp",import.meta.url).href,zs=""+new URL("../assets/step-1.B4wRfU0g.webp",import.meta.url).href,qs=""+new URL("../assets/step-1.CLfe1vO3.png",import.meta.url).href,ds=""+new URL("../assets/step-1.CloCD8jh.png",import.meta.url).href,Js=""+new URL("../assets/overview.DIvoQI8a.webp",import.meta.url).href,Fs=""+new URL("../assets/overview.CMGOB7Sb.webp",import.meta.url).href,Gs=""+new URL("../assets/overview.CWcd_Tt-.png",import.meta.url).href,hs=""+new URL("../assets/overview.CO0-Obf1.png",import.meta.url).href,Vs=""+new URL("../assets/hero-twitter.DPwTB0SC.jpg",import.meta.url).href;function Ks(P){let d,w='<h2><a href="#who-is-this-for" id="who-is-this-for">Who is this for?</a></h2> <p>Anyone who</p> <ul><li>is interested in the Svelte compilation process</li> <li>wants to get started in reading Svelte source code</li></ul>',g,m,h,_='<a href="#overview" id="overview">Overview</a>',N,D,ut=`<span style="display: block; position: relative; padding-top: 17.512%; width: 100%;"><picture><source type="image/webp" srcset="${Fs}, ${Js} 2x"/><img src="${hs}" srcset="${hs}, ${Gs} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Overview"/></picture></span>`,ze,B,kt="The Svelte compilation process can be broken down into 4-steps",qe,W,bt="<li>Parsing source code into Abstract Syntax Tree (AST)</li> <li>Tracking references and dependencies</li> <li>Creating code blocks and fragments</li> <li>Generate code</li>",Je,z,yt="Which sums out by the following pseudocode:",Fe,q,ge,ms=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;App.svelte&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// parse source code into AST</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(source);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// tracking references and dependencies</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// creating code blocks and fragments</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.generate </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ssr&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SSRRenderer</span><span style="color: var(--shiki-color-text)">(component) </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DomRenderer</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Generate code</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;App.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> js);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;App.css&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> css);</span></span></code></pre>`,_e,p,J,gt='<a href="#1-parsing-source-code-into-ast" id="1-parsing-source-code-into-ast">1. Parsing source code into AST</a>',Ge,F,_t=`<span style="display: block; position: relative; padding-top: 45.065%; width: 100%;"><picture><source type="image/webp" srcset="${zs}, ${Ws} 2x"/><img src="${ds}" srcset="${ds}, ${qs} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Step 1"/></picture></span>`,Ve,G,we,fs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// parse source code into AST</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(source);</span></span></code></pre>`,Ke,V,wt="The Svelte syntax is a superset of HTML. Svelte implements its own parser for the Svelte syntax, which handles:",Qe,K,xt='<li>HTML syntax <code class="inline">&lt;div&gt;</code></li> <li>Curly brackets <code class="inline">{ data }</code></li> <li>Logic blocks <code class="inline">{#each list as item}</code></li>',Ye,Q,Tt='The Svelte parser handles specially for <code class="inline">&lt;script&gt;</code> and <code class="inline">&lt;style&gt;</code> tags.',Xe,Y,Lt='When the parser encounters a <code class="inline">&lt;script&gt;</code> tag, it uses <a href="https://www.npmjs.com/package/acorn" rel="nofollow">acorn</a> to parse the content within the tag. When the parser sees a <code class="inline">&lt;style&gt;</code> tag, it uses <a href="https://www.npmjs.com/package/css-tree" rel="nofollow">css-tree</a> to parse the CSS content.',Ze,X,St='Besides, the Svelte parser differentiates instance script, <code class="inline">&lt;script&gt;</code>, and module script, <code class="inline">&lt;script context=&quot;module&quot;&gt;</code>.',et,Z,Ct="The Svelte AST look like:",tt,ee,xe,us=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  html</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Fragment&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> children</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">] &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  css</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  instance</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123; context</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">&#125; &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  module</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123; context</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;context&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">&#125; &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,st,te,Ht='You can try out the Svelte parser in <a href="https://astexplorer.net/#/gist/828907dd1600c208a4e315962c635b4a/e1c895d49e8899a3be849a137fc557ba66eb2423" rel="nofollow">ASTExplorer</a>. You can find the Svelte parser under <strong>HTML &gt; Svelte</strong>.',Te,L,Mt='<h3><a href="#where-can-i-find-the-parser-in-the-source-code" id="where-can-i-find-the-parser-in-the-source-code">Where can I find the parser in the source code?</a></h3> <p>The parsing <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/index.ts#L79" rel="nofollow">starts here</a>, which the parser is implemented in <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/parse/index.ts" rel="nofollow">src/compiler/parse/index.ts</a>.</p>',Le,S,jt='<h3><a href="#where-can-i-learn-about-parsing-in-javascript" id="where-can-i-learn-about-parsing-in-javascript">Where can I learn about parsing in JavaScript?</a></h3> <p>My previous article, <a href="/json-parser-with-javascript">&quot;JSON Parser with JavaScript&quot;</a> introduces the terminology and guides you step-by-step on writing a parser for JSON in JavaScript.</p> <p>If this is the your first time learning about parser, I highly recommend you to read that.</p>',Se,k,se,Rt='<a href="#2-tracking-references-and-dependencies" id="2-tracking-references-and-dependencies">2. Tracking references and dependencies</a>',nt,ne,It=`<span style="display: block; position: relative; padding-top: 42.219%; width: 100%;"><picture><source type="image/webp" srcset="${Ds}, ${Ns} 2x"/><img src="${ps}" srcset="${ps}, ${Bs} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Step 2"/></picture></span>`,at,ae,Ce,ks=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// tracking references and dependencies</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)">(ast);</span></span></code></pre>`,ot,oe,Et="In this step, Svelte traverses through the AST to track all the variable declared and referenced and their depedencies.",He,C,Ot='<h3><a href="#a-svelte-creates-a-component-instance" id="a-svelte-creates-a-component-instance">a. Svelte creates a <code class="inline">Component</code> instance.</a></h3> <p>The <code class="inline">Component</code> class stores information of the Svelte component, which includes:</p> <ul><li>HTML fragment, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L52" rel="nofollow"><code class="inline">fragment</code></a></li> <li>instance script and module script AST and their lexical scopes, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L54" rel="nofollow"><code class="inline">instance_scope</code></a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L53" rel="nofollow"><code class="inline">module_scope</code></a></li> <li>instance variables, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L62" rel="nofollow"><code class="inline">vars</code></a></li> <li>reactive variables, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L71" rel="nofollow"><code class="inline">reactive_declarations</code></a></li> <li>slots, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L94" rel="nofollow"><code class="inline">slots</code></a></li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L351" rel="nofollow">used variable names</a> to prevent naming conflict when creating temporary variables</li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L43" rel="nofollow">warnings</a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L396" rel="nofollow">errors</a></li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L51" rel="nofollow">compile options</a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L44" rel="nofollow">ignored warnings</a></li></ul>',Me,H,$t='<h3><a href="#b-traverse-the-instance-script-and-module-script-ast" id="b-traverse-the-instance-script-and-module-script-ast">b. Traverse the instance script and module script AST</a></h3> <p><code class="inline">Component</code> traverses the instance script and module script AST to <strong>find out all the variables declared, referenced, and updated</strong> within the instance script and module script.</p> <p>Svelte identifies all the variables available before traversing the template. When encountering the variable during template traversal, Svelte will mark the variable as <code class="inline">referenced</code> from template.</p>',je,M,Ut='<h3><a href="#c-traverse-the-template" id="c-traverse-the-template">c. Traverse the template</a></h3> <p>Svelte traverses through the template AST and creates a <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Fragment.ts" rel="nofollow">Fragment</a> tree out of the template AST.</p> <p>Each fragment node contains information such as:</p> <p><strong>- expression and dependencies</strong></p> <p>Logic blocks, <code class="inline">{#if}</code>, and mustache tags, <code class="inline">{ data }</code>, contain expression and the dependencies of the expression.</p> <p><strong>- scope</strong></p> <p><code class="inline">{#each}</code> and <code class="inline">{#await}</code> logic block and <code class="inline">let:</code> binding create new variables for the children template.</p> <p>Svelte creates a different Fragment node for each type of node in the AST, as different kind of Fragment node handles things differently:</p> <ul><li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts" rel="nofollow">Element node</a> validates the <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts#L280" rel="nofollow">attribute</a>, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts#L461" rel="nofollow">bindings</a>, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts#L647" rel="nofollow">content</a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts#L658" rel="nofollow">event handlers</a>.</li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Slot.ts" rel="nofollow">Slot node</a> registers the slot name to the <code class="inline">Component</code>.</li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/EachBlock.ts" rel="nofollow">EachBlock node</a> creates a new scope and tracks the <code class="inline">key</code>, <code class="inline">index</code> and the name of the list to be iterated.</li> <li>...</li></ul>',Re,j,At='<h3><a href="#d-traverse-the-instance-script-ast" id="d-traverse-the-instance-script-ast">d. Traverse the instance script AST</a></h3> <p>After traversing through the template, Svelte now knows whether a variable is ever being updated or referenced in the component.</p> <p>With this information, Svelte tries make preparations for optimising the output, for example:</p> <ul><li>determine which variables or functions can be safely hoisted out of the <code class="inline">instance</code> function.</li> <li>determine reactive declarations that does not need to be reactive</li></ul>',Ie,R,Pt='<h3><a href="#e-update-css-selectors-to-make-style-declarations-component-scope" id="e-update-css-selectors-to-make-style-declarations-component-scope">e. Update CSS selectors to make style declarations component scope</a></h3> <p>Svelte updates the CSS selectors, by adding <code class="inline">.svelte-xxx</code> class to the selectors when necessary.</p> <p>At the end of this step, Svelte has enough information to generate the compiled code, which brings us to the next step.</p>',Ee,I,Nt='<h3><a href="#where-can-i-find-this-in-the-source-code" id="where-can-i-find-this-in-the-source-code">Where can I find this in the source code?</a></h3> <p>You can start reading <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/index.ts#L83-L90" rel="nofollow">from here</a>, which the <code class="inline">Component</code> is implemented in <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts" rel="nofollow">src/compiler/compile/Component.ts</a>.</p>',Oe,E,Dt='<h3><a href="#where-can-i-learn-about-traversing-in-javascript" id="where-can-i-learn-about-traversing-in-javascript">Where can I learn about traversing in JavaScript?</a></h3> <p>Bear with my shameless plug, my previous article, <a href="/manipulating-ast-with-javascript#traversing-an-ast">&quot;Manipulating AST with JavaScript&quot;</a> covers relevant knowledge you need to know about traversing AST in JavaScript.</p>',$e,b,le,Bt='<a href="#3-creating-code-blocks-and-fragments" id="3-creating-code-blocks-and-fragments">3. Creating code blocks and fragments</a>',lt,re,Wt=`<span style="display: block; position: relative; padding-top: 44.490%; width: 100%;"><picture><source type="image/webp" srcset="${As}, ${Us} 2x"/><img src="${cs}" srcset="${cs}, ${Ps} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Step 3"/></picture></span>`,rt,ie,Ue,bs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// creating code blocks and fragments</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.generate </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ssr&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SSRRenderer</span><span style="color: var(--shiki-color-text)">(component) </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DomRenderer</span><span style="color: var(--shiki-color-text)">(component);</span></span></code></pre>`,it,ce,zt='In this step, Svelte creates a <code class="inline">Renderer</code> instance which keeps track necessary information required to generate the compiled output. Depending on the whether to output DOM or SSR code <em>(<a href="https://svelte.dev/docs#svelte_compile" rel="nofollow">see <code class="inline">generate</code> in compile options</a>)</em>, Svelte instantiates different <code class="inline">Renderer</code> respectively.',Ae,O,qt='<h3><a href="#dom-renderer" id="dom-renderer">DOM Renderer</a></h3> <p>DOM Renderer keeps track of <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/Renderer.ts#L31" rel="nofollow">a list of blocks</a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/Renderer.ts#L28" rel="nofollow">context</a>.</p> <p>A <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/Block.ts" rel="nofollow">Block</a> contains code fragments for generate the <a href="/compile-svelte-in-your-head-part-1/#create_fragment"><code class="inline">create_fragment</code></a> function.</p> <p>Context tracks a list of <a href="/compile-svelte-in-your-head-part-2/#ctx">instance variables</a> which will be presented in the <code class="inline">$$.ctx</code> in the compiled output.</p> <p>In the renderer, Svelte creates a <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/wrappers/Fragment.ts" rel="nofollow">render tree</a> out of the Fragment tree.</p> <p>Each node in the render tree implements the <code class="inline">render</code> function which generate codes that create and update the DOM for the node.</p>',Pe,$,Jt='<h3><a href="#ssr-renderer" id="ssr-renderer">SSR Renderer</a></h3> <p>SSR Renderer provide helpers to generate <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow">template literals</a> in the compiled output, such as <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_ssr/Renderer.ts#L63" rel="nofollow"><code class="inline">add_string(str)</code></a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_ssr/Renderer.ts#L67" rel="nofollow"><code class="inline">add_expression(node)</code></a>.</p>',Ne,U,Ft='<h3><a href="#where-can-i-find-the-renderer-in-the-source-code" id="where-can-i-find-the-renderer-in-the-source-code">Where can I find the <code class="inline">Renderer</code> in the source code?</a></h3> <p>The DOM Renderer is implemented in <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/Renderer.ts" rel="nofollow">src/compiler/compile/render_dom/Renderer.ts</a>, and you can check out the SSR Renderer code in <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_ssr/Renderer.ts" rel="nofollow">src/compiler/compile/render_ssr/Renderer.ts</a>.</p>',De,f,pe,Gt='<a href="#4-generate-code" id="4-generate-code">4. Generate code</a>',ct,de,Vt=`<span style="display: block; position: relative; padding-top: 46.890%; width: 100%;"><picture><source type="image/webp" srcset="${Os}, ${Es} 2x"/><img src="${is}" srcset="${is}, ${$s} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Step 4"/></picture></span>`,pt,he,Be,ys=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Generate code</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,dt,ve,Kt="Different renderer renders differently.",ht,me,Qt='<strong>The DOM Renderer</strong> traverses through the render tree and calls the <code class="inline">render</code> function of each node along the way. The <code class="inline">Block</code> instance is passed into the <code class="inline">render</code> function, so that each node inserts the code into the appropriate <code class="inline">create_fragment</code> function.',vt,fe,Yt='<strong>The SSR Renderer</strong>, on the other hand, relies on different <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_ssr/Renderer.ts#L23-L40" rel="nofollow">node handlers</a> to insert strings or expressions into the final template literal.',mt,ue,Xt='The render function returns <code class="inline">js</code> and <code class="inline">css</code> which will be consumed by the bundler, via <a href="https://github.com/sveltejs/rollup-plugin-svelte" rel="nofollow">rollup-plugin-svelte</a> for rollup and <a href="https://github.com/sveltejs/svelte-loader" rel="nofollow">svelte-loader</a> for webpack respectively.',We,A,Zt='<h2><a href="#svelte-runtime" id="svelte-runtime">Svelte runtime</a></h2> <p>To remove duplicate code in the compiled output, Svelte provide util function which can be found in the <a href="https://github.com/sveltejs/svelte/tree/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/runtime/internal" rel="nofollow">src/runtime/internal</a>, such as:</p> <ul><li>dom related utils, eg: <code class="inline">append</code>, <code class="inline">insert</code>, <code class="inline">detach</code></li> <li>scheduling utils, eg: <code class="inline">schedule_update</code>, <code class="inline">flush</code></li> <li>lifecycle utils, eg: <code class="inline">onMount</code>, <code class="inline">beforeUpdate</code></li> <li>animation utils, eg: <code class="inline">create_animation</code></li></ul>';return{c(){d=s("section"),d.innerHTML=w,g=l(),m=s("section"),h=s("h2"),h.innerHTML=_,N=l(),D=s("p"),D.innerHTML=ut,ze=l(),B=s("p"),B.textContent=kt,qe=l(),W=s("ul"),W.innerHTML=bt,Je=l(),z=s("p"),z.textContent=yt,Fe=l(),q=s("div"),ge=new ke(!1),_e=l(),p=s("section"),J=s("h2"),J.innerHTML=gt,Ge=l(),F=s("p"),F.innerHTML=_t,Ve=l(),G=s("div"),we=new ke(!1),Ke=l(),V=s("p"),V.textContent=wt,Qe=l(),K=s("ul"),K.innerHTML=xt,Ye=l(),Q=s("p"),Q.innerHTML=Tt,Xe=l(),Y=s("p"),Y.innerHTML=Lt,Ze=l(),X=s("p"),X.innerHTML=St,et=l(),Z=s("p"),Z.textContent=Ct,tt=l(),ee=s("div"),xe=new ke(!1),st=l(),te=s("p"),te.innerHTML=Ht,Te=l(),L=s("section"),L.innerHTML=Mt,Le=l(),S=s("section"),S.innerHTML=jt,Se=l(),k=s("section"),se=s("h2"),se.innerHTML=Rt,nt=l(),ne=s("p"),ne.innerHTML=It,at=l(),ae=s("div"),Ce=new ke(!1),ot=l(),oe=s("p"),oe.textContent=Et,He=l(),C=s("section"),C.innerHTML=Ot,Me=l(),H=s("section"),H.innerHTML=$t,je=l(),M=s("section"),M.innerHTML=Ut,Re=l(),j=s("section"),j.innerHTML=At,Ie=l(),R=s("section"),R.innerHTML=Pt,Ee=l(),I=s("section"),I.innerHTML=Nt,Oe=l(),E=s("section"),E.innerHTML=Dt,$e=l(),b=s("section"),le=s("h2"),le.innerHTML=Bt,lt=l(),re=s("p"),re.innerHTML=Wt,rt=l(),ie=s("div"),Ue=new ke(!1),it=l(),ce=s("p"),ce.innerHTML=zt,Ae=l(),O=s("section"),O.innerHTML=qt,Pe=l(),$=s("section"),$.innerHTML=Jt,Ne=l(),U=s("section"),U.innerHTML=Ft,De=l(),f=s("section"),pe=s("h2"),pe.innerHTML=Gt,ct=l(),de=s("p"),de.innerHTML=Vt,pt=l(),he=s("div"),Be=new ke(!1),dt=l(),ve=s("p"),ve.textContent=Kt,ht=l(),me=s("p"),me.innerHTML=Qt,vt=l(),fe=s("p"),fe.innerHTML=Yt,mt=l(),ue=s("p"),ue.innerHTML=Xt,We=l(),A=s("section"),A.innerHTML=Zt,this.h()},l(e){d=n(e,"SECTION",{"data-svelte-h":!0}),i(d)!=="svelte-10grsw4"&&(d.innerHTML=w),g=r(e),m=n(e,"SECTION",{});var a=y(m);h=n(a,"H2",{"data-svelte-h":!0}),i(h)!=="svelte-1vu30zv"&&(h.innerHTML=_),N=r(a),D=n(a,"P",{"data-svelte-h":!0}),i(D)!=="svelte-1l40tl5"&&(D.innerHTML=ut),ze=r(a),B=n(a,"P",{"data-svelte-h":!0}),i(B)!=="svelte-odmqis"&&(B.textContent=kt),qe=r(a),W=n(a,"UL",{"data-svelte-h":!0}),i(W)!=="svelte-17ezotp"&&(W.innerHTML=bt),Je=r(a),z=n(a,"P",{"data-svelte-h":!0}),i(z)!=="svelte-1lgs3vb"&&(z.textContent=yt),Fe=r(a),q=n(a,"DIV",{class:!0});var es=y(q);ge=be(es,!1),es.forEach(o),a.forEach(o),_e=r(e),p=n(e,"SECTION",{});var v=y(p);J=n(v,"H2",{"data-svelte-h":!0}),i(J)!=="svelte-rhzckr"&&(J.innerHTML=gt),Ge=r(v),F=n(v,"P",{"data-svelte-h":!0}),i(F)!=="svelte-1fanpbc"&&(F.innerHTML=_t),Ve=r(v),G=n(v,"DIV",{class:!0});var ts=y(G);we=be(ts,!1),ts.forEach(o),Ke=r(v),V=n(v,"P",{"data-svelte-h":!0}),i(V)!=="svelte-1ikcduz"&&(V.textContent=wt),Qe=r(v),K=n(v,"UL",{"data-svelte-h":!0}),i(K)!=="svelte-1wsgkmr"&&(K.innerHTML=xt),Ye=r(v),Q=n(v,"P",{"data-svelte-h":!0}),i(Q)!=="svelte-1n47ugz"&&(Q.innerHTML=Tt),Xe=r(v),Y=n(v,"P",{"data-svelte-h":!0}),i(Y)!=="svelte-hjcqd7"&&(Y.innerHTML=Lt),Ze=r(v),X=n(v,"P",{"data-svelte-h":!0}),i(X)!=="svelte-17hq72x"&&(X.innerHTML=St),et=r(v),Z=n(v,"P",{"data-svelte-h":!0}),i(Z)!=="svelte-e25b3u"&&(Z.textContent=Ct),tt=r(v),ee=n(v,"DIV",{class:!0});var ss=y(ee);xe=be(ss,!1),ss.forEach(o),st=r(v),te=n(v,"P",{"data-svelte-h":!0}),i(te)!=="svelte-1g5y6bj"&&(te.innerHTML=Ht),v.forEach(o),Te=r(e),L=n(e,"SECTION",{"data-svelte-h":!0}),i(L)!=="svelte-1wv6md7"&&(L.innerHTML=Mt),Le=r(e),S=n(e,"SECTION",{"data-svelte-h":!0}),i(S)!=="svelte-1ajglc0"&&(S.innerHTML=jt),Se=r(e),k=n(e,"SECTION",{});var x=y(k);se=n(x,"H2",{"data-svelte-h":!0}),i(se)!=="svelte-vs0ntr"&&(se.innerHTML=Rt),nt=r(x),ne=n(x,"P",{"data-svelte-h":!0}),i(ne)!=="svelte-18xcmos"&&(ne.innerHTML=It),at=r(x),ae=n(x,"DIV",{class:!0});var ns=y(ae);Ce=be(ns,!1),ns.forEach(o),ot=r(x),oe=n(x,"P",{"data-svelte-h":!0}),i(oe)!=="svelte-1bsw2fh"&&(oe.textContent=Et),x.forEach(o),He=r(e),C=n(e,"SECTION",{"data-svelte-h":!0}),i(C)!=="svelte-14nnp27"&&(C.innerHTML=Ot),Me=r(e),H=n(e,"SECTION",{"data-svelte-h":!0}),i(H)!=="svelte-1gaxsez"&&(H.innerHTML=$t),je=r(e),M=n(e,"SECTION",{"data-svelte-h":!0}),i(M)!=="svelte-zklzrs"&&(M.innerHTML=Ut),Re=r(e),j=n(e,"SECTION",{"data-svelte-h":!0}),i(j)!=="svelte-1mqjph6"&&(j.innerHTML=At),Ie=r(e),R=n(e,"SECTION",{"data-svelte-h":!0}),i(R)!=="svelte-15e0bma"&&(R.innerHTML=Pt),Ee=r(e),I=n(e,"SECTION",{"data-svelte-h":!0}),i(I)!=="svelte-2v3xcc"&&(I.innerHTML=Nt),Oe=r(e),E=n(e,"SECTION",{"data-svelte-h":!0}),i(E)!=="svelte-1160pi5"&&(E.innerHTML=Dt),$e=r(e),b=n(e,"SECTION",{});var T=y(b);le=n(T,"H2",{"data-svelte-h":!0}),i(le)!=="svelte-hxhkh7"&&(le.innerHTML=Bt),lt=r(T),re=n(T,"P",{"data-svelte-h":!0}),i(re)!=="svelte-1kxh74p"&&(re.innerHTML=Wt),rt=r(T),ie=n(T,"DIV",{class:!0});var as=y(ie);Ue=be(as,!1),as.forEach(o),it=r(T),ce=n(T,"P",{"data-svelte-h":!0}),i(ce)!=="svelte-1veje48"&&(ce.innerHTML=zt),T.forEach(o),Ae=r(e),O=n(e,"SECTION",{"data-svelte-h":!0}),i(O)!=="svelte-k3o0pj"&&(O.innerHTML=qt),Pe=r(e),$=n(e,"SECTION",{"data-svelte-h":!0}),i($)!=="svelte-1cpdj56"&&($.innerHTML=Jt),Ne=r(e),U=n(e,"SECTION",{"data-svelte-h":!0}),i(U)!=="svelte-fdvht2"&&(U.innerHTML=Ft),De=r(e),f=n(e,"SECTION",{});var u=y(f);pe=n(u,"H2",{"data-svelte-h":!0}),i(pe)!=="svelte-apo812"&&(pe.innerHTML=Gt),ct=r(u),de=n(u,"P",{"data-svelte-h":!0}),i(de)!=="svelte-xemdj7"&&(de.innerHTML=Vt),pt=r(u),he=n(u,"DIV",{class:!0});var os=y(he);Be=be(os,!1),os.forEach(o),dt=r(u),ve=n(u,"P",{"data-svelte-h":!0}),i(ve)!=="svelte-rkq4yj"&&(ve.textContent=Kt),ht=r(u),me=n(u,"P",{"data-svelte-h":!0}),i(me)!=="svelte-1a9l1n5"&&(me.innerHTML=Qt),vt=r(u),fe=n(u,"P",{"data-svelte-h":!0}),i(fe)!=="svelte-1pzww0p"&&(fe.innerHTML=Yt),mt=r(u),ue=n(u,"P",{"data-svelte-h":!0}),i(ue)!=="svelte-hm8p56"&&(ue.innerHTML=Xt),u.forEach(o),We=r(e),A=n(e,"SECTION",{"data-svelte-h":!0}),i(A)!=="svelte-8ni4y2"&&(A.innerHTML=Zt),this.h()},h(){ge.a=null,ye(q,"class","code-section"),we.a=null,ye(G,"class","code-section"),xe.a=null,ye(ee,"class","code-section"),Ce.a=null,ye(ae,"class","code-section"),Ue.a=null,ye(ie,"class","code-section"),Be.a=null,ye(he,"class","code-section")},m(e,a){c(e,d,a),c(e,g,a),c(e,m,a),t(m,h),t(m,N),t(m,D),t(m,ze),t(m,B),t(m,qe),t(m,W),t(m,Je),t(m,z),t(m,Fe),t(m,q),ge.m(ms,q),c(e,_e,a),c(e,p,a),t(p,J),t(p,Ge),t(p,F),t(p,Ve),t(p,G),we.m(fs,G),t(p,Ke),t(p,V),t(p,Qe),t(p,K),t(p,Ye),t(p,Q),t(p,Xe),t(p,Y),t(p,Ze),t(p,X),t(p,et),t(p,Z),t(p,tt),t(p,ee),xe.m(us,ee),t(p,st),t(p,te),c(e,Te,a),c(e,L,a),c(e,Le,a),c(e,S,a),c(e,Se,a),c(e,k,a),t(k,se),t(k,nt),t(k,ne),t(k,at),t(k,ae),Ce.m(ks,ae),t(k,ot),t(k,oe),c(e,He,a),c(e,C,a),c(e,Me,a),c(e,H,a),c(e,je,a),c(e,M,a),c(e,Re,a),c(e,j,a),c(e,Ie,a),c(e,R,a),c(e,Ee,a),c(e,I,a),c(e,Oe,a),c(e,E,a),c(e,$e,a),c(e,b,a),t(b,le),t(b,lt),t(b,re),t(b,rt),t(b,ie),Ue.m(bs,ie),t(b,it),t(b,ce),c(e,Ae,a),c(e,O,a),c(e,Pe,a),c(e,$,a),c(e,Ne,a),c(e,U,a),c(e,De,a),c(e,f,a),t(f,pe),t(f,ct),t(f,de),t(f,pt),t(f,he),Be.m(ys,he),t(f,dt),t(f,ve),t(f,ht),t(f,me),t(f,vt),t(f,fe),t(f,mt),t(f,ue),c(e,We,a),c(e,A,a)},p:ws,d(e){e&&(o(d),o(g),o(m),o(_e),o(p),o(Te),o(L),o(Le),o(S),o(Se),o(k),o(He),o(C),o(Me),o(H),o(je),o(M),o(Re),o(j),o(Ie),o(R),o(Ee),o(I),o(Oe),o(E),o($e),o(b),o(Ae),o(O),o(Pe),o($),o(Ne),o(U),o(De),o(f),o(We),o(A))}}}function Qs(P){let d,w;const g=[P[0],vs];let m={$$slots:{default:[Ks]},$$scope:{ctx:P}};for(let h=0;h<g.length;h+=1)m=ft(m,g[h]);return d=new Is({props:m}),{c(){Ls(d.$$.fragment)},l(h){Ss(d.$$.fragment,h)},m(h,_){Cs(d,h,_),w=!0},p(h,[_]){const N=_&1?Rs(g,[_&1&&rs(h[0]),_&0&&rs(vs)]):{};_&2&&(N.$$scope={dirty:_,ctx:h}),d.$set(N)},i(h){w||(Hs(d.$$.fragment,h),w=!0)},o(h){Ms(d.$$.fragment,h),w=!1},d(h){js(d,h)}}}const vs={title:"The Svelte Compiler Handbook",date:"2020-04-05T08:00:00Z",tags:["Svelte","JavaScript","compiler"],description:"The Svelte compilation process can be broken down into 4-steps, 1) parsing source code into AST, 2) tracking references and dependencies, 3) creating code blocks and fragments, and 4) generate code.",label:"blog",tableOfContents:[{link:"who-is-this-for",title:"Who is this for?"},{link:"overview",title:"Overview"},{link:"1-parsing-source-code-into-ast",title:"1. Parsing source code into AST",nested:[{link:"where-can-i-find-the-parser-in-the-source-code",title:"Where can I find the parser in the source code?"},{link:"where-can-i-learn-about-parsing-in-javascript",title:"Where can I learn about parsing in JavaScript?"}]},{link:"2-tracking-references-and-dependencies",title:"2. Tracking references and dependencies",nested:[{link:"a-svelte-creates-a-component-instance",title:"a. Svelte creates a  `Component`  instance."},{link:"b-traverse-the-instance-script-and-module-script-ast",title:"b. Traverse the instance script and module script AST"},{link:"c-traverse-the-template",title:"c. Traverse the template"},{link:"d-traverse-the-instance-script-ast",title:"d. Traverse the instance script AST"},{link:"e-update-css-selectors-to-make-style-declarations-component-scope",title:"e. Update CSS selectors to make style declarations component scope"},{link:"where-can-i-find-this-in-the-source-code",title:"Where can I find this in the source code?"},{link:"where-can-i-learn-about-traversing-in-javascript",title:"Where can I learn about traversing in JavaScript?"}]},{link:"3-creating-code-blocks-and-fragments",title:"3. Creating code blocks and fragments",nested:[{link:"dom-renderer",title:"DOM Renderer"},{link:"ssr-renderer",title:"SSR Renderer"},{link:"where-can-i-find-the-renderer-in-the-source-code",title:"Where can I find the  `Renderer`  in the source code?"}]},{link:"4-generate-code",title:"4. Generate code"},{link:"svelte-runtime",title:"Svelte runtime"}]};function Ys(P,d,w){return _s("blog",{image:Vs}),P.$$set=g=>{w(0,d=ft(ft({},d),ls(g)))},d=ls(d),[d]}class sn extends xs{constructor(d){super(),Ts(this,d,Ys,Qs,gs,{})}}export{sn as component};
