import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as ht,b as is,f as rs,s as t,e as s,t as ls,a5 as r,al as M,a as ps,d as vt,r as o,a7 as O,n as w,g as Ut}from"../chunks/C2PHntuy.js";import{a as Io,h as a}from"../chunks/C3QlhiH-.js";import{r as D,s as e}from"../chunks/CEusTUg_.js";import{i as yt}from"../chunks/BQOOHHT8.js";import{l as $t,s as Ct}from"../chunks/gzNpScmH.js";import{B as Bt}from"../chunks/B1caYEk9.js";import{s as ut}from"../chunks/F79hK6eD.js";import{a as G,P as Wo}from"../chunks/CCUOd8XA.js";import{s as Ko}from"../chunks/DnM2s-CZ.js";const Vo=""+new URL("../assets/step-1.BVRll67R.png",import.meta.url).href,Mt=""+new URL("../assets/step-1.BTlRW2xF.png",import.meta.url).href,Ot=""+new URL("../assets/step-1.C0AGCmLA.webp",import.meta.url).href,Dt=""+new URL("../assets/step-1.D3a6k98V.webp",import.meta.url).href,jo=""+new URL("../assets/step-2.CWLGgKD7.png",import.meta.url).href,Gt=""+new URL("../assets/step-2.Bs8x4sDi.png",import.meta.url).href,St=""+new URL("../assets/step-2.D3_NZn9I.webp",import.meta.url).href,zt=""+new URL("../assets/step-2.DlYB_SVq.webp",import.meta.url).href,Xo=""+new URL("../assets/step-3.BJ8XLkVj.png",import.meta.url).href,At=""+new URL("../assets/step-3.CYrJNWLy.png",import.meta.url).href,Tt=""+new URL("../assets/step-3.IHwhOgBb.webp",import.meta.url).href,Ht=""+new URL("../assets/step-3.DhRofBrb.webp",import.meta.url).href,Yo=""+new URL("../assets/step-4.B2miWE_I.png",import.meta.url).href,Nt=""+new URL("../assets/step-4.Dh5zCBXF.png",import.meta.url).href,Ft=""+new URL("../assets/step-4.BGWqU8dk.webp",import.meta.url).href,Pt=""+new URL("../assets/step-4.CX3Su08F.webp",import.meta.url).href,Zo=""+new URL("../assets/default.0D9q1lXV.png",import.meta.url).href,Et=""+new URL("../assets/default.B1ZBhysU.png",import.meta.url).href,It=""+new URL("../assets/default.BfuxLRR6.webp",import.meta.url).href,Wt=""+new URL("../assets/default.CmVt0_zy.webp",import.meta.url).href,Jo=""+new URL("../assets/colorise-red.C5DegoKN.png",import.meta.url).href,Kt=""+new URL("../assets/colorise-red.DD__Pu_S.png",import.meta.url).href,Vt=""+new URL("../assets/colorise-red.CicXifAB.webp",import.meta.url).href,jt=""+new URL("../assets/colorise-red.DG9dIZmL.webp",import.meta.url).href,Qo=""+new URL("../assets/colorise-yellow.DtYn1Sx9.png",import.meta.url).href,Xt=""+new URL("../assets/colorise-yellow.CugmzNzG.png",import.meta.url).href,Yt=""+new URL("../assets/colorise-yellow.BnazCW3i.webp",import.meta.url).href,Zt=""+new URL("../assets/colorise-yellow.CMOGiKp6.webp",import.meta.url).href,st=""+new URL("../assets/red-filter.LNC6bCq3.png",import.meta.url).href,Jt=""+new URL("../assets/red-filter.BFVuT9hH.png",import.meta.url).href,Qt=""+new URL("../assets/red-filter.ln8jaHs-.webp",import.meta.url).href,se=""+new URL("../assets/red-filter.DurLF_1o.webp",import.meta.url).href,ot=""+new URL("../assets/yellow-filter.B9kXtbKg.png",import.meta.url).href,oe=""+new URL("../assets/yellow-filter.DmozZAz-.png",import.meta.url).href,te=""+new URL("../assets/yellow-filter.c9d2S_xn.webp",import.meta.url).href,ee=""+new URL("../assets/yellow-filter.BNpX9fah.webp",import.meta.url).href,tt=""+new URL("../assets/yellow-filter-2.BBtYQtNc.png",import.meta.url).href,ne=""+new URL("../assets/yellow-filter-2.BSMOrjDv.png",import.meta.url).href,ae=""+new URL("../assets/yellow-filter-2.BvX23qbq.webp",import.meta.url).href,ie=""+new URL("../assets/yellow-filter-2.DgqKnbV3.webp",import.meta.url).href,et=""+new URL("../assets/negative-alpha.CtEnqEHt.png",import.meta.url).href,re=""+new URL("../assets/negative-alpha.DyxcCkHh.png",import.meta.url).href,le=""+new URL("../assets/negative-alpha.Da1trRWj.webp",import.meta.url).href,pe=""+new URL("../assets/negative-alpha.CpjVmv-R.webp",import.meta.url).href,nt=""+new URL("../assets/blow-out-channel.CoI8hUTO.png",import.meta.url).href,ce=""+new URL("../assets/blow-out-channel.gxzOSxW4.png",import.meta.url).href,ke=""+new URL("../assets/blow-out-channel.C6u6MiL9.webp",import.meta.url).href,he=""+new URL("../assets/blow-out-channel.BKlydpEr.webp",import.meta.url).href,at=""+new URL("../assets/change-color.BExQ40dZ.png",import.meta.url).href,ve=""+new URL("../assets/change-color.CiwxUVLa.png",import.meta.url).href,ye=""+new URL("../assets/change-color.BemYRIJg.webp",import.meta.url).href,ue=""+new URL("../assets/change-color.GaptSIba.webp",import.meta.url).href,it=""+new URL("../assets/lighten.CYBEYN8p.png",import.meta.url).href,ge=""+new URL("../assets/lighten.5RtcW9uq.png",import.meta.url).href,de=""+new URL("../assets/lighten.HQOhvsfd.webp",import.meta.url).href,xe=""+new URL("../assets/lighten.CBf9E21K.webp",import.meta.url).href,rt=""+new URL("../assets/darken.Db-vZK50.png",import.meta.url).href,_e=""+new URL("../assets/darken.CZoly7DN.png",import.meta.url).href,fe=""+new URL("../assets/darken.CmmF96qM.webp",import.meta.url).href,me=""+new URL("../assets/darken.nThT6A9G.webp",import.meta.url).href,lt=""+new URL("../assets/grayscale.Dy0cwrz6.png",import.meta.url).href,we=""+new URL("../assets/grayscale.BQ-L6L3r.png",import.meta.url).href,be=""+new URL("../assets/grayscale.CVoULTyc.webp",import.meta.url).href,qe=""+new URL("../assets/grayscale.BHTIKz1T.webp",import.meta.url).href,pt=""+new URL("../assets/morphology.BS-xst2K.gif",import.meta.url).href,Re=""+new URL("../assets/morphology.BoSpkco8.gif",import.meta.url).href,ct=""+new URL("../assets/morphology-text.CzGtNM8y.gif",import.meta.url).href,Le=""+new URL("../assets/morphology-text.C90eQLOM.gif",import.meta.url).href,kt=""+new URL("../assets/morphology-knockout-text.C67ltxGC.gif",import.meta.url).href,Ue=""+new URL("../assets/morphology-knockout-text.CTMUeuIJ.gif",import.meta.url).href,$e=""+new URL("../assets/hero-twitter.Ds_J79EV.jpg",import.meta.url).href;var Ce=is('<div class="row svelte-16gcny3"><div class="container svelte-16gcny3"><img src="https://lihautan.com/03b36a9f76000493.png" alt="" class="svelte-16gcny3"/></div> <div class="container svelte-16gcny3"><img class="dilate svelte-16gcny3" src="https://lihautan.com/03b36a9f76000493.png" alt=""/> <div></div></div> <div class="container svelte-16gcny3"><img class="erode svelte-16gcny3" src="https://lihautan.com/03b36a9f76000493.png" alt=""/> <div></div></div> <svg class="svelte-16gcny3"><filter id="dilate"><feMorphology operator="dilate"></feMorphology></filter><filter id="erode"><feMorphology operator="erode"></feMorphology></filter></svg></div> <div class="input svelte-16gcny3"> <input type="range" min="0" max="20" step="1" class="svelte-16gcny3"/></div>',1);function Be(b,u){ht(u,!1);let n=M(0);function i(k,g){function R(m){k.innerHTML=Wo.highlight(m.trim(),Wo.languages.html).split(`
`).map(L=>L.replace(/^(\s+)/,(cs,U)=>'<span class="tab"></span>'.repeat(U.length))).join("<br />")}return R(g),{update(m){R(m)}}}yt();var d=Ce(),l=rs(d),p=t(s(l),2),x=t(s(p),2);Io(x,(k,g)=>i==null?void 0:i(k,g),()=>`
<filter>
	<feMorphology
		operator="dilate"
		radius="${r(n)}" />
</filter>`),o(p);var h=t(p,2),v=t(s(h),2);Io(v,(k,g)=>i==null?void 0:i(k,g),()=>`
<filter>
	<feMorphology
		operator="erode"
		radius="${r(n)}" />
</filter>`),o(h);var y=t(h,2),c=s(y),$=s(c);o(c);var C=t(c),q=s(C);o(C),o(y),o(l);var _=t(l,2),B=s(_),f=t(B);D(f),o(_),ls(()=>{e($,"radius",r(n)),e(q,"radius",r(n)),ut(B,`Radius: ${r(n)??""} `)}),G(f,()=>r(n),k=>O(n,k)),ps(b,d),vt()}var Me=is('<div class="canvas svelte-1foi548"><h1 class="svelte-1foi548"> </h1></div> <input/> <input type="color"/> <input type="color"/> <svg height="0" class="svelte-1foi548"><filter id="outline"><feMorphology result="THICK" operator="dilate" radius="4"></feMorphology><feComposite operator="out" in="THICK" in2="SourceGraphic"></feComposite></filter></svg>',1);function Oe(b){let u=M("Hello World"),n=M("#ff0000"),i=M("#ffff00");var d=Me(),l=rs(d),p=s(l),x=s(p,!0);o(p),o(l);var h=t(l,2);D(h);var v=t(h,2);D(v);var y=t(v,2);D(y),w(2),ls(()=>{Ko(l,`background: ${r(i)??""};`),Ko(p,`filter: url(#outline); color: ${r(n)??""};`),ut(x,r(u))}),G(h,()=>r(u),c=>O(u,c)),G(v,()=>r(n),c=>O(n,c)),G(y,()=>r(i),c=>O(i,c)),ps(b,d)}const gt={title:"SVG Filters",tags:["svg filters","filters","svg"],description:"SVG Filters 101[ Source ]defined in `&lt;filter&gt;` elementdefine a series of one or more filter primitives1 filter primitive performs 1 single fundamental graphic operation on one or more inputsfilter primitives...",tableOfContents:[{link:"svg-filters-101",title:"SVG Filters 101",nested:[{link:"filter-primitives",title:"filter primitives"},{link:"filter-region",title:"Filter region"},{link:"create-a-drop-shadow",title:"Create a drop shadow"}]},{link:"finessing-fecolormatrix",title:"Finessing  `feColorMatrix`",nested:[{link:"1-colorizing",title:"1. Colorizing"},{link:"2-alpha-values",title:"2. Alpha values"},{link:"3-blowing-out-channels",title:"3. Blowing out channels"},{link:"4-change-color",title:"4. Change color"},{link:"5-lighten-or-darken",title:"5. Lighten or darken"},{link:"6-grayscale",title:"6. Grayscale"}]},{link:"outline-text-with-lt-femorphology-gt",title:"Outline Text with  `&lt;feMorphology&gt;`",nested:[{link:"adding-colored-outline-to-text-with-lt-femorphology-gt",title:"Adding Colored Outline to Text with  `&lt;feMorphology /&gt;`"},{link:"knockout-text-with-lt-femorphology-gt",title:"Knockout text with  `&lt;feMorphology /&gt;`"}]}]},{title:We,tags:Ke,description:Ve,tableOfContents:je}=gt;var De=is('<section><h2><a href="#svg-filters-101" id="svg-filters-101">SVG Filters 101</a></h2> <p>[ <a href="https://tympanus.net/codrops/2019/01/15/svg-filters-101/" rel="nofollow">Source</a> ]</p> <ul><li>defined in <code class="inline">&lt;filter&gt;</code> element</li> <li>define a series of one or more filter primitives</li> <li>1 filter primitive performs <strong>1 single fundamental graphic operation</strong> on <strong>one or more</strong> inputs</li></ul></section> <section><h3><a href="#filter-primitives" id="filter-primitives">filter primitives</a></h3> <ul><li>filter primitives named start with <code class="inline">fe</code>, short for "filter effect"</li> <li>filter primitives take 1-2 inputs and output 1 result</li> <li><code class="inline">in</code> and <code class="inline">in2</code> attribute for input, <code class="inline">result</code> attribute for output</li> <li>input takes in result, <code class="inline">SourceGraphic</code> and <code class="inline">SourceAlpha</code></li></ul> <div class="code-section"><!></div></section> <section><h3><a href="#filter-region" id="filter-region">Filter region</a></h3> <ul><li>filter region is based on the bounding box of the element</li> <li>filter result beyond filter region will be clipped off</li> <li>default filter region extends 10% the width and height of bounding box in all 4 directions</li></ul> <div class="code-section"><!></div> <ul><li>use <code class="inline">&lt;feFlood&gt;</code> to figure out the filter region</li></ul> <div class="code-section"><!></div></section> <section><h3><a href="#create-a-drop-shadow" id="create-a-drop-shadow">Create a drop shadow</a></h3> <ol><li>Blur the silhouette of the layer</li></ol> <div class="code-section"><!></div> <p><span style="display: block; position: relative; padding-top: 97.450%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="step-1"/></picture></span></p> <ol start="2"><li>Composite the blur layer with a solid color layer to create a colored blur</li></ol> <ul><li>Learn compositing + blending in <a href="https://www.sarasoueidan.com/blog/compositing-and-blending-in-css/" rel="nofollow">https://www.sarasoueidan.com/blog/compositing-and-blending-in-css/</a></li></ul> <div class="code-section"><!></div> <p><span style="display: block; position: relative; padding-top: 96.866%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="step-2"/></picture></span></p> <ol start="3"><li>Shift the shadow bottom-right with <code class="inline">&lt;feOffset&gt;</code></li></ol> <div class="code-section"><!></div> <p><span style="display: block; position: relative; padding-top: 96.023%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="step-3"/></picture></span></p> <ol start="4"><li>Combine the shadow with the original image</li></ol> <ul><li>layer merge in order of declaration, latter layer stacks on top of previous layer</li></ul> <div class="code-section"><!></div> <p><span style="display: block; position: relative; padding-top: 97.443%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="step-4"/></picture></span></p></section> <section><h2><a href="#finessing-fecolormatrix" id="finessing-fecolormatrix">Finessing <code class="inline">feColorMatrix</code></a></h2> <p>[ <a href="https://alistapart.com/article/finessing-fecolormatrix/" rel="nofollow">Source</a> ]</p> <div class="code-section"><!></div> <div class="code-section"><!></div> <ul><li><a href="https://svelte.dev/repl/1fa3e758ef2442d1bcc1eba37a2bdd58" rel="nofollow">color matrix playground</a></li></ul></section> <section><h3><a href="#1-colorizing" id="1-colorizing">1. Colorizing</a></h3> <p><span style="display: block; position: relative; padding-top: 92.081%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="colorise default"/></picture></span></p> <ul><li>Removing other color to colorise image into the remaining color</li> <li>colorise red -> remove blue & green <span style="display: block; position: relative; padding-top: 91.403%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="colorise red"/></picture></span></li> <li>colorise yellow -> remove blue (red + green = yellow) <span style="display: block; position: relative; padding-top: 92.466%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="colorise yellow"/></picture></span></li></ul></section> <section><h3><a href="#2-alpha-values" id="2-alpha-values">2. Alpha values</a></h3> <ul><li><p>add opacity level to the red channel</p> <ul><li>any red remaining red</li> <li>green -> yellow (red + green = yellow)</li> <li>blue -> magenta (red + blue = magenta) <span style="display: block; position: relative; padding-top: 91.533%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="red filter"/></picture></span></li></ul></li> <li><p>hard yellow filter <span style="display: block; position: relative; padding-top: 90.639%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="yellow filter"/></picture></span></p></li> <li><p>have a value some where between 0-1 to see the mixture in the shadow <span style="display: block; position: relative; padding-top: 91.324%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="yellow filter 2"/></picture></span></p></li></ul> <ul><li>negative value could offset the channel by the amount of opacity <span style="display: block; position: relative; padding-top: 92.027%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="negative alpha"/></picture></span> <ul><li>the following 2 color matrix is identical</li></ul></li></ul> <div class="code-section"><!></div></section> <section><h3><a href="#3-blowing-out-channels" id="3-blowing-out-channels">3. Blowing out channels</a></h3> <ul><li>turn 1 color to white</li> <li>set the alpha channel to <code class="inline">-2</code> <span style="display: block; position: relative; padding-top: 92.466%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="blow-out-green"/></picture></span></li></ul></section> <section><h3><a href="#4-change-color" id="4-change-color">4. Change color</a></h3> <ul><li>No more green, any green looks like magenta now. (luminosity of green is lost) <span style="display: block; position: relative; padding-top: 90.868%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="change-color"/></picture></span></li></ul></section> <section><h3><a href="#5-lighten-or-darken" id="5-lighten-or-darken">5. Lighten or darken</a></h3> <ul><li>increase intensity to lighten, decrease to darken <span style="display: block; position: relative; padding-top: 92.220%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="lighten"/></picture></span> <span style="display: block; position: relative; padding-top: 92.184%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="darken"/></picture></span></li></ul></section> <section><h3><a href="#6-grayscale" id="6-grayscale">6. Grayscale</a></h3> <ul><li>make sure red, green, blue have the same value <span style="display: block; position: relative; padding-top: 91.264%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="grayscale"/></picture></span></li></ul></section> <section><h2><a href="#outline-text-with-lt-femorphology-gt" id="outline-text-with-lt-femorphology-gt">Outline Text with <code class="inline">&lt;feMorphology&gt;</code></a></h2> <p>[ <a href="https://tympanus.net/codrops/2019/01/22/svg-filter-effects-outline-text-with-femorphology/" rel="nofollow">Source</a> ]</p> <ul><li>🖼 image size gets smaller when <code class="inline">erode</code>, larger when <code class="inline">dilate</code></li> <li>🖼 image looks like painted with large brush 🖌</li> <li>📝 <code class="inline">erode</code> sets each pixel to the darkest / most transparent neighbor</li> <li>📝 <code class="inline">dilate</code> sets each pixel to the brightest / least transparent neighbor</li></ul> <div class="code-section"><!></div> <p><span style="display: block; position: relative; padding-top: 56.786%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="feMorphology"/></span></p> <!> <p><a href="https://svelte.dev/repl/1f0a2c16650541d082beeecc2a046c9f?version=3.29.0" rel="nofollow">REPL</a> to see effect with different radius.</p></section> <section><h3><a href="#adding-colored-outline-to-text-with-lt-femorphology-gt" id="adding-colored-outline-to-text-with-lt-femorphology-gt">Adding Colored Outline to Text with <code class="inline">&lt;feMorphology /&gt;</code></a></h3> <p>1️⃣ expand the text with <code class="inline">&lt;feMorphology operator="dilate" /&gt;</code> 2️⃣ colorize via <code class="inline">&lt;feFlood&gt;</code> with solid color and <code class="inline">&lt;feComposite /&gt;</code> 3️⃣ merge the expanded colored text with the original text</p> <div class="code-section"><!></div> <p><span style="display: block; position: relative; padding-top: 64.643%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="feMorphology outline text"/></span></p> <p><a href="https://svelte.dev/repl/a1a3aa1cc844476b9ca96fec3f0164ed?version=3.29.0" rel="nofollow">REPL</a> to visualise <code class="inline">&lt;feMorphology&gt;</code></p></section> <section><h3><a href="#knockout-text-with-lt-femorphology-gt" id="knockout-text-with-lt-femorphology-gt">Knockout text with <code class="inline">&lt;feMorphology /&gt;</code></a></h3> <p>1️⃣ expand the text with <code class="inline">&lt;feMorphology operator="dilate" /&gt;</code> 2️⃣ composite with the source with <code class="inline">&lt;feComposite /&gt;</code> using <code class="inline">out</code> operator</p> <div class="code-section"><!></div> <p><span style="display: block; position: relative; padding-top: 42.643%; width: 100%;"><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="feMorphology knockout text"/></span></p> <!> <p><a href="https://svelte.dev/repl/30153d68324d475189d34afa26a3186f?version=3.29.0" rel="nofollow">REPL</a> to visualise the build up the knock-out text.</p></section>',1);function Xe(b,u){const n=$t(u,["children","$$slots","$$events","$$legacy"]);ht(u,!1),Ut("blog",{image:$e}),yt(),Bt(b,Ct(()=>n,()=>gt,{children:(i,d)=>{var l=De(),p=t(rs(l),2),x=t(s(p),4),h=s(x);a(h,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- take in 1 input &#96;in&#96; --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;INPUT_NAME&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- take in 2 inputs &#96;in&#96; and &#96;in2&#96; --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;INPUT_NAME_1&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;INPUT_NAME_2&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- &#96;result&#96; defines the result name, </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">		which can be passed in as input for the next filter --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;OUTPUT_1&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;OUTPUT_1&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- use the source as input for the filter primitive --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- apply filter on the source element --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- apply filter on the alpha channel of the source element,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">		the silhouette of the source --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(x),o(p);var v=t(p,2),y=t(s(v),4),c=s(y);a(c,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- x, y, width, height sets the filter region --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-10%&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">y</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-10%&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">width</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;120%&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">height</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;120%&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">filterUnits</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;objectBoundingBox&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">&lt;!-- filter primitives here --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(y);var $=t(y,4),C=s($);a(C,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#EB0066&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-opacity</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;0.5&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flood&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flood&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o($),o(v);var q=t(v,2),_=t(s(q),4),B=s(_);a(B,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stdDeviation</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(_);var f=t(_,2),k=s(f),g=s(k),R=s(g),m=t(R);o(g),o(k),o(f);var L=t(f,6),cs=s(L);a(cs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stdDeviation</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#EB0066&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;in&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(L);var U=t(L,2),ks=s(U),hs=s(ks),vs=s(hs),ys=t(vs);o(hs),o(ks),o(U);var S=t(U,4),dt=s(S);a(dt,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stdDeviation</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#EB0066&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;in&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feOffset</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dx</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dy</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROPSHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(S);var z=t(S,2),us=s(z),gs=s(us),ds=s(gs),xs=t(ds);o(gs),o(us),o(z);var A=t(z,6),xt=s(A);a(xt,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stdDeviation</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#EB0066&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;in&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feOffset</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dx</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dy</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROPSHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROPSHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(A);var _s=t(A,2),fs=s(_s),ms=s(fs),ws=s(ms),bs=t(ws);o(ms),o(fs),o(_s),o(q);var T=t(q,2),H=t(s(T),4),_t=s(H);a(_t,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;linear&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feColorMatrix</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;matrix&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">values</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;R 0 0 0 0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0 G 0 0 0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0 0 B 0 0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0 0 0 A 0 &quot;</span><span style="color: var(--shiki-color-text)">/&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(H);var qs=t(H,2),ft=s(qs);a(ft,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* R G B A 1 */</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// R = 1*R + 0*G + 0*B + 0*A + 0</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// G = 0*R + 1*G + 0*B + 0*A + 0</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// B = 0*R + 0*G + 1*B + 0*A + 0</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// A = 0*R + 0*G + 0*B + 1*A + 0</span></span></code></pre>`),o(qs),w(2),o(T);var N=t(T,2),F=t(s(N),2),Rs=s(F),Ls=s(Rs),Us=s(Ls),$s=t(Us);o(Ls),o(Rs),o(F);var Cs=t(F,2),P=t(s(Cs),2),Bs=t(s(P)),Ms=s(Bs),Os=s(Ms),Ds=t(Os);o(Ms),o(Bs),o(P);var Gs=t(P,2),Ss=t(s(Gs)),zs=s(Ss),As=s(zs),Ts=t(As);o(zs),o(Ss),o(Gs),o(Cs),o(N);var E=t(N,2),I=t(s(E),2),W=s(I),Hs=t(s(W),2),Ns=t(s(Hs),4),Fs=t(s(Ns)),Ps=s(Fs),Es=s(Ps),Is=t(Es);o(Ps),o(Fs),o(Ns),o(Hs),o(W);var K=t(W,2),Ws=s(K),Ks=t(s(Ws)),Vs=s(Ks),js=s(Vs),Xs=t(js);o(Vs),o(Ks),o(Ws),o(K);var Ys=t(K,2),Zs=s(Ys),Js=t(s(Zs)),Qs=s(Js),so=s(Qs),oo=t(so);o(Qs),o(Js),o(Zs),o(Ys),o(I);var V=t(I,2),to=s(V),eo=t(s(to)),no=s(eo),ao=s(no),io=t(ao);o(no),o(eo),w(2),o(to),o(V);var ro=t(V,2),mt=s(ro);a(mt,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feColorMatrix</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;matrix&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">values</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;1  0  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  1  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  0  1 -1  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  0  0  1  0 &quot;</span><span style="color: var(--shiki-color-text)">/&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feColorMatrix</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;matrix&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">values</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;1  0  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  1  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  0  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  0  0  1  0 &quot;</span><span style="color: var(--shiki-color-text)">/&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(ro),o(E);var j=t(E,2),lo=t(s(j),2),po=t(s(lo),2),co=t(s(po),3),ko=s(co),ho=s(ko),vo=t(ho);o(ko),o(co),o(po),o(lo),o(j);var X=t(j,2),yo=t(s(X),2),uo=s(yo),go=t(s(uo)),xo=s(go),_o=s(xo),fo=t(_o);o(xo),o(go),o(uo),o(yo),o(X);var Y=t(X,2),mo=t(s(Y),2),wo=s(mo),Z=t(s(wo)),bo=s(Z),qo=s(bo),Ro=t(qo);o(bo),o(Z);var Lo=t(Z,2),Uo=s(Lo),$o=s(Uo),Co=t($o);o(Uo),o(Lo),o(wo),o(mo),o(Y);var J=t(Y,2),Bo=t(s(J),2),Mo=s(Bo),Oo=t(s(Mo)),Do=s(Oo),Go=s(Do),So=t(Go);o(Do),o(Oo),o(Mo),o(Bo),o(J);var Q=t(J,2),ss=t(s(Q),6),wt=s(ss);a(wt,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feMorphology</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;..&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;..&quot;</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;dilate || erode&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">radius</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(ss);var os=t(ss,2),zo=s(os),Ao=s(zo);o(zo),o(os);var bt=t(os,2);Be(bt,{}),w(2),o(Q);var ts=t(Q,2),es=t(s(ts),4),qt=s(es);a(qt,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;filter: url(#outline)&quot;</span><span style="color: var(--shiki-color-text)">&gt;Hello World&lt;/</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;outline&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feMorphology</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;THICK&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;dilate&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">radius</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;4&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#32DFEC&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-opacity</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;1&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;THICK&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;in&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;OUTLINE&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			&lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;OUTLINE&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			&lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;/</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(es);var To=t(es,2),Ho=s(To),No=s(Ho);o(Ho),o(To),w(2),o(ts);var Fo=t(ts,2),ns=t(s(Fo),4),Rt=s(ns);a(Rt,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;filter: url(#outline)&quot;</span><span style="color: var(--shiki-color-text)">&gt;Hello World&lt;/</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;outline&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feMorphology</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;THICK&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;dilate&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">radius</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;4&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;THICK&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;out&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`),o(ns);var as=t(ns,2),Po=s(as),Eo=s(Po);o(Po),o(as);var Lt=t(as,2);Oe(Lt),w(2),o(Fo),ls(()=>{e(R,"srcset",`${Ot}, ${Dt} 2x`),e(m,"src",Vo),e(m,"srcset",`${Vo}, ${Mt} 2x`),e(vs,"srcset",`${St}, ${zt} 2x`),e(ys,"src",jo),e(ys,"srcset",`${jo}, ${Gt} 2x`),e(ds,"srcset",`${Tt}, ${Ht} 2x`),e(xs,"src",Xo),e(xs,"srcset",`${Xo}, ${At} 2x`),e(ws,"srcset",`${Ft}, ${Pt} 2x`),e(bs,"src",Yo),e(bs,"srcset",`${Yo}, ${Nt} 2x`),e(Us,"srcset",`${It}, ${Wt} 2x`),e($s,"src",Zo),e($s,"srcset",`${Zo}, ${Et} 2x`),e(Os,"srcset",`${Vt}, ${jt} 2x`),e(Ds,"src",Jo),e(Ds,"srcset",`${Jo}, ${Kt} 2x`),e(As,"srcset",`${Yt}, ${Zt} 2x`),e(Ts,"src",Qo),e(Ts,"srcset",`${Qo}, ${Xt} 2x`),e(Es,"srcset",`${Qt}, ${se} 2x`),e(Is,"src",st),e(Is,"srcset",`${st}, ${Jt} 2x`),e(js,"srcset",`${te}, ${ee} 2x`),e(Xs,"src",ot),e(Xs,"srcset",`${ot}, ${oe} 2x`),e(so,"srcset",`${ae}, ${ie} 2x`),e(oo,"src",tt),e(oo,"srcset",`${tt}, ${ne} 2x`),e(ao,"srcset",`${le}, ${pe} 2x`),e(io,"src",et),e(io,"srcset",`${et}, ${re} 2x`),e(ho,"srcset",`${ke}, ${he} 2x`),e(vo,"src",nt),e(vo,"srcset",`${nt}, ${ce} 2x`),e(_o,"srcset",`${ye}, ${ue} 2x`),e(fo,"src",at),e(fo,"srcset",`${at}, ${ve} 2x`),e(qo,"srcset",`${de}, ${xe} 2x`),e(Ro,"src",it),e(Ro,"srcset",`${it}, ${ge} 2x`),e($o,"srcset",`${fe}, ${me} 2x`),e(Co,"src",rt),e(Co,"srcset",`${rt}, ${_e} 2x`),e(Go,"srcset",`${be}, ${qe} 2x`),e(So,"src",lt),e(So,"srcset",`${lt}, ${we} 2x`),e(Ao,"src",pt),e(Ao,"srcset",`${pt}, ${Re} 2x`),e(No,"src",ct),e(No,"srcset",`${ct}, ${Le} 2x`),e(Eo,"src",kt),e(Eo,"srcset",`${kt}, ${Ue} 2x`)}),ps(i,l)},$$slots:{default:!0}})),vt()}export{Xe as component};
