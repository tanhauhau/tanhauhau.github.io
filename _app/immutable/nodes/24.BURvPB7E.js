import{s as ml,d as Fe,e as wl,f as No,n as bl}from"../chunks/scheduler.D6VJxl8L.js";import{S as _l,i as Tl,m as Hl,n as Ll,o as Cl,t as Il,a as Ml,p as Pl,e,s as o,H as v,c as a,q as i,h as l,d as k,r as y,g as c,u as d,j as m,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as jl,a as zo}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Sl}from"../chunks/BlogLayout.BMJM32nZ.js";const $l=""+new URL("../assets/fixed.FqJuJ3lN.webp",import.meta.url).href,El=""+new URL("../assets/fixed.B2IwkBVx.webp",import.meta.url).href,ql=""+new URL("../assets/fixed.DmxDyUgL.png",import.meta.url).href,Bo=""+new URL("../assets/fixed.4ZDRTC6o.png",import.meta.url).href,Al=""+new URL("../assets/hero-twitter.W6MyYLTu.jpg",import.meta.url).href;function Dl(L){let x,_='<h2><a href="#background" id="background">Background</a></h2> <p>As Svelte gains more attention, I find that more and more people are interested in contributing to Svelte.</p> <p>Of course, contributing to Svelte, does not mean to contribute only in code, it could be:</p> <ul><li>answering questions about Svelte, on social media, Stack Overflow, or <a href="https://svelte.dev/chat" rel="nofollow">Discord</a></li> <li>improving Svelte docs, or write tutorials and articles about Svelte</li> <li>organising and speaking in meetups about Svelte</li></ul> <p>For those who want to contribute in code, most people are unsure where to start. So I wrote <a href="/the-svelte-compiler-handbook/">The Svelte Compiler Handbook</a> as an overview of the Svelte source code.</p> <p>However, today, I want to try a different tone.</p> <p>I am going to tell you an anecdote on how I investigated and fixed a bug in Svelte.</p> <p>I documented down my train of thoughts as detailed as possible.</p> <p>I hope this gives anyone who is reading, a glimpse on how to work on the Svelte source code.</p>',w,g,f,b='<a href="#the-story-begins" id="the-story-begins">The story begins</a>',C,I,Je='I was combing through <a href="https://github.com/sveltejs/svelte/issues?q=is%3Aopen+is%3Aissue+label%3Abug" rel="nofollow">bugs on GitHub</a>, and found this rather interesting bug:',Kt,Xt,sn,M,Ge='<strong>Select multiple value does not get set with spread props <a href="https://github.com/sveltejs/svelte/issues/4392" rel="nofollow">#4392</a></strong>',tn,P,Ye='Adding any type of spread, even an empty object <code class="inline">{...{}}</code>, causes the value not to be set:',nn,j,mt,Fo=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div></code></pre>`,en,S,Ze='To reproduce: <a href="https://svelte.dev/repl/99bd5ebecc464e328972252e287ab716?version=3.18.1" rel="nofollow">REPL</a>.',an,on,wt,T,Qe='<h2><a href="#verifying-the-bug" id="verifying-the-bug">Verifying the bug</a></h2> <p>I clicked into the REPL and tried to understand about the bug.</p> <p>I found that if the <code class="inline">&lt;select multiple&gt;</code> has spread attribute <code class="inline">{...any}</code>, the <code class="inline">value</code> attribute will not be reactive. Changes in the value of <code class="inline">value</code> will not be reflected to the <code class="inline">&lt;select&gt;</code>.</p> <p>I noticed the REPL link uses the version <code class="inline">3.18.1</code>, it&#39;s not the latest version of Svelte. At the point of writing, Svelte is at <strong>3.22.3</strong>. I tried removing the <code class="inline">?version=3.18.1</code> from the query params to verify whether the bug has fixed, and realised that the bug is still there. (Great! Something interesting to investigate into.)</p> <p>To understand the current status of the issue, I read through the comments. According to <a href="https://github.com/Conduitry" rel="nofollow">Conduitry</a>, the issue is related to <strong>Radio/checkbox input with bind:group and spread props makes variable undefined</strong> <a href="https://github.com/sveltejs/svelte/issues/3680" rel="nofollow">#3680</a> and can be fixed together. However, the issue <a href="https://github.com/sveltejs/svelte/issues/3680" rel="nofollow">#3680</a> was fixed and closed, yet this issue is still open.</p> <p>Nevertheless, I read through <a href="https://github.com/sveltejs/svelte/pull/4398" rel="nofollow">the PR</a> for the closed issue <a href="https://github.com/sveltejs/svelte/issues/3680" rel="nofollow">#3680</a>, roughly understand how it was fixed and hopefully it can give me some inspirations on this issue.</p>',bt,t,$,Ke='<a href="#investigating-the-bug" id="investigating-the-bug">Investigating the bug</a>',ln,E,Xe="Once I verified that the behavior described in the issue is unexpected and reproducible in the latest version of Svelte, I copied the REPL code into my local machine to investigate.",rn,q,sa='I have a <code class="inline">test-svelte</code> folder ready in my local machine, where I created using <a href="https://github.com/sveltejs/template" rel="nofollow">Svelte Template</a>. I have <code class="inline">npm link</code>ed my local Svelte clone to the <code class="inline">test-svelte</code> folder, so I can rebuild <code class="inline">test-svelte</code> anytime with the latest changes done to my Svelte clone.',pn,A,_t,Jo=`<pre class="prism language-"><code><span class="line">- /Projects</span>
<span class="line">  - svelte                &lt;-- cloned from https://github.com/sveltejs/svelte</span>
<span class="line">  - test-svelte           &lt;-- initialised with Svelte Template</span>
<span class="line">    - node_modules/svelte &lt;-- symlink to &#96;/Projects/svelte&#96;</span></code></pre>`,cn,D,ta='I have <code class="inline">yarn dev</code> running in the Svelte folder, so any changes I make gets compiled immediately.',kn,V,na='I prefer to <strong>build</strong> <code class="inline">test-svelte</code> and serve it with <a href="https://www.npmjs.com/package/http-server" rel="nofollow">http-server</a> rather than start a dev server <code class="inline">test-svelte</code> in watch mode. That allows me to',hn,W,ea='<li>Run the <code class="inline">http-server</code> in the background while tweaking the Svelte code or the <code class="inline">test-svelte</code> app.</li> <li>Not having to restart the dev server whenever I&#39;ve made changes to the Svelte code</li> <li>Able to inspect and modify <code class="inline">bundle.js</code> without worrying that accidentaly save in the <code class="inline">test-svelte</code> app will overwrite the <code class="inline">bundle.js</code></li>',vn,O,aa='Looking at the different <code class="inline">bundle.js</code> generated from with <code class="inline">{...spread}</code> attributes and without spread attributes',yn,R,Tt,Go=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- with spread --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- without spread --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div></code></pre>`,dn,N,oa="I found the following diffs in the bundled output:",un,z,Ht,Yo=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line inserted"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> select_levels </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [&#123; multiple</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;];</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> select_data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	</span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select_levels</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	  select_data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">assign</span><span style="color: var(--shiki-color-text)">(select_data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select_levels[i]);</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	&#125;</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> select_value_value;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">set_attributes</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select_data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">      select_value_value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-token-constant)">select_value_value</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">    p</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">       </span><span style="color: var(--shiki-token-function)">set_attributes</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get_spread_update</span><span style="color: var(--shiki-color-text)">(select_levels</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [&#123; multiple</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> &#123; value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;]));</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span></code></pre>`,xn,B,la='Well, I know I haven&#39;t cover how spread attribute works in any of my <a href="/compile-svelte-in-your-head-part-1/">&quot;Compile Svelte in your Head&quot;</a> articles, but the general idea is that, Svelte builds an array of attributes, and then apply it to the element / Component.',gn,U,ia="For example, if we write the following in Svelte",fn,F,Lt,Zo='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>bar<span class="token punctuation">&#125;</span></span> <span class="token attr-name">baz</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baz<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>qux<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',mn,J,ra="It gets compiled to something like this:",wn,G,Ct,Qo=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">levels</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [&#123; foo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; baz</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> qux];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// build the attribute maps</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">levels</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.assign</span><span style="color: var(--shiki-color-text)">(data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> levels[i]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// set attribute to element</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attributeName</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.setAttribute</span><span style="color: var(--shiki-color-text)">(attributeName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data[attributeName]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if &#96;bar&#96; changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">updates</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get_spread_update</span><span style="color: var(--shiki-color-text)">(levels</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// updates will return the updates needed to make, in this case, the diff in &#96;bar&#96;, eg: &#123; aa: &#39;1&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attributeName</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> updates) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.setAttribute</span><span style="color: var(--shiki-color-text)">(attributeName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> updates[attributeName]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bn,Y,pa='So, this roughly explains the additional code added into the <code class="inline">bundle.js</code> for handling spread attributes.',_n,Z,ca="However the code that is removed, is something I am not familiar with.",Tn,Q,It,Ko=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// in &#96;mount&#96; method</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-token-constant)">select_value_value</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Hn,K,ka='It seems like we are trying to set <code class="inline">option.selected</code> after we mount the <code class="inline">&lt;select&gt;</code> element. Not sure how important is that to us.',Ln,X,ha='To verify that the bug is because that the above code snippet is missing when having a spread attribute, I tried adding the code snippet into the <code class="inline">bundle.js</code> manually, and refresh the page.',Cn,ss,Mt,Xo=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-color-text)">ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,In,ts,va='Instead of <code class="inline">~select_value_value.indexOf(...)</code>, I changed it to <code class="inline">~ctx[0].indexOf(...)</code>, as <code class="inline">select_value_value</code> wasn&#39;t created when using spread attribute.',Mn,ns,ya="...and it works!",Pn,es,da=`<span style="display: block; position: relative; padding-top: 58.266%; width: 100%;"><picture><source type="image/webp" srcset="${El}, ${$l} 2x"/><img src="${Bo}" srcset="${Bo}, ${ql} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Fixed"/></picture></span>`,jn,as,ua='So, now we know that the bug is caused by missing setting <code class="inline">option.selected</code> on mount, now its time to figure out what the code snippet is not generated when there&#39;s a spread attribute.',Sn,os,xa="To quickly find out why something is not generated, I tried to look for where it is generated, figuring out probably whether certain condition was not set correctly to cause the Svelte compiler to omit out the code snippet.",$n,ls,ga="To find the right place to start looking is an art. Usually I try to global search a small snippet of code that is <strong>most likely static</strong>, something that has no variable name, for example:",En,is,fa='<li><code class="inline">.indexOf(option.__value)</code></li> <li><code class="inline">.options.length;</code></li> <li><code class="inline">.selected = ~</code></li>',qn,rs,ma='The only search result I got when searching for <code class="inline">.indexOf(option.__value)</code> is in <a href="https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/runtime/internal/dom.ts#L221-L226" rel="nofollow">src/runtime/internal/dom.ts</a>',An,ps,Pt,sl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_options</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Dn,cs,wa='Anything within <code class="inline">src/runtime/</code> are helper functions that are referenced from the output code, to reduce the output code size. Hmm... probably we should reuse the <code class="inline">select_options</code> helper function:',Vn,ks,jt,tl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-color-text)">ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">   &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">select_options</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select_value_value);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,Wn,hs,ba='Anyway, <code class="inline">src/runtime/internal/dom.ts</code> is not where I am looking for, so I tried searching <code class="inline">.options.length</code>',On,vs,St,nl=`<div class="filename">src/compiler/compile/render_dom/wrappers/Element/Attribute.ts</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  for (var </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = 0; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &lt; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.options.length; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> += 1) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    var </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">option</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.options[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">];</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">if_statement</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">updater</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Rn,ys,_a="Yes, this is most likely where it is.",Nn,ds,Ta='Firstly, let me update the <code class="inline">updater</code> to use the <code class="inline">src/runtime/</code> <code class="inline">select_options</code> helper instead:',zn,us,$t,el=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_multiple_select) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_option(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">updater</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Bn,xs,Ha='The <code class="inline">b`...`</code>, is called a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates" rel="nofollow">tagged template</a>, where the <code class="inline">b</code> is a function that takes in the template literal and return something. In this case, the <code class="inline">b</code> function returns an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow">Abstract Syntaxt Tree (AST)</a>.',Un,gs,La='The <code class="inline">b</code> function comes from <a href="https://www.npmjs.com/package/code-red" rel="nofollow">code-red</a>, a utility to generate a JavaScript AST node. Beside <code class="inline">b</code>, <code class="inline">code-red</code> provides a few helper functions:',Fn,fs,Ca='<li><code class="inline">b</code> returns a block node</li> <li><code class="inline">x</code> returns an expression node</li> <li><code class="inline">p</code> returns a object property node</li>',Jn,ms,Ia="These helper functions are useful in generating code in Svelte compiler, particularly because the placeholder itself can takes in another AST node:",Gn,ws,Et,al=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;const </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">node</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = 1;&#96;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// returns an AST node for &#96;const foo = 1;&#96;</span></span></code></pre>`,Yn,bs,Ma='<code class="inline">@</code> in front of <code class="inline">@select_option</code> is a convention in Svelte, where it will <a href="https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/compiler/compile/Component.ts#L245-L264" rel="nofollow">get replaced</a> to refer to helpr functions in <code class="inline">src/runtime/</code> before writing the generated AST out:',Zn,_s,qt,ol=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@foo(bar)&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// turns into</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// import &#123; foo &#125; from &#39;svelte/internal&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// foo(bar);</span></span></code></pre>`,Qn,Ts,Pa="Coming back to figure out why this piece of code is not executed when there's a spread attribute,",Kn,Hs,At,ll=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_legacy_input_type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_select_value_attribute) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_multiple_select) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_option(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">updater</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">  &#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_src) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xn,Ls,ja='I tried adding <code class="inline">console.log</code> before the if statement, to figure out the value for <code class="inline">is_legacy_input_type</code> and <code class="inline">is_select_value_attribute</code>:',se,Cs,Dt,il=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;is_legacy_input_type:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  is_legacy_input_type</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;is_select_value_attribute:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  is_select_value_attribute</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_legacy_input_type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,te,Is,Sa='To my surpise, there was no log. <code class="inline">AttributeWrapper#render</code> wasn&#39;t executed.',ne,Ms,$a='I tried removing the spread attribute, and verified from the log that the <code class="inline">AttributeWrapper#render</code> method was indeed executed when there&#39;s no spread attribute.',ee,Ps,Ea='To figure out the caller of the <code class="inline">AttributeWrapper#render</code> method, I added <code class="inline">console.trace</code> at the top of the method:',ae,js,Vt,rl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.trace</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;trace&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oe,Ss,Wt,pl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">Trace: trace</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  at AttributeWrapper.render (/Projects/svelte/compiler.js:8269:11)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at /Projects/svelte/compiler.js:10749:14</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at Array.forEach (&lt;anonymous&gt;)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  at ElementWrapper.add_attributes (/Projects/svelte/compiler.js:10748:19)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at ElementWrapper.render (/Projects/svelte/compiler.js:10472:8)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at /Projects/svelte/compiler.js:10454:11</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at Array.forEach (&lt;anonymous&gt;)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at ElementWrapper.render (/Projects/svelte/compiler.js:10453:24)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at FragmentWrapper.render (/Projects/svelte/compiler.js:13030:18)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at new Renderer (/Projects/svelte/compiler.js:13112:17)</span></span></code></pre>`,le,$s,qa='This brought me to <a href="https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/compiler/compile/render_dom/wrappers/Element/index.ts#L642-L659" rel="nofollow">src/compiler/compile/render_dom/wrappers/Element/index.ts</a>',ie,Es,Ot,cl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Get all the class dependencies first</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributes</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">((attribute) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">attribute</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;class&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attribute</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.get_dependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">class_dependencies</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">dependencies);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributes</span><span style="color: var(--shiki-token-function)">.some</span><span style="color: var(--shiki-color-text)">(attr </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attr</span><span style="color: var(--shiki-color-text)">.is_spread)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributes</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">((attribute) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">attribute</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,re,qs,Aa='If there&#39;s a spread attribute, it will call the <code class="inline">this.node.attributes.some(attr =&gt; attr.is_spread)</code> method instead of calling <code class="inline">attribute.render(block)</code>, so that&#39;s probably why <code class="inline">AttributeWrapper#render</code> wasn&#39;t called.',pe,As,Da='I looked into the method <code class="inline">add_spread_attributes</code>, found out it contain only the code about handling spread attributes as I explained earlier. It didn&#39;t have any code related to <code class="inline">select_options</code>, so I figured that, maybe <code class="inline">&lt;select multiple&gt;</code> with spread attribute is an edge case that wasn&#39;t handled currently at all.',ce,Ds,Va='So, I tried to add a special check for this case at the bottom of the <code class="inline">add_spread_attributes</code> method:',ke,Vs,Rt,kl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for &#96;&lt;select&gt;&#96; element only</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,he,Ws,Wa='As mentioned in the <a href="/the-svelte-compiler-handbook/#dom-renderer">The Svelte Compiler Handbook</a>, a <code class="inline">block</code> is where it keeps the code to generate the <a href="/compile-svelte-in-your-head-part-1/#create_fragment"><code class="inline">create_fragment</code></a> function. The return object of the <code class="inline">create_fragment</code> function contains various method as mentioned in <a href="/compile-svelte-in-your-head-part-1/#create_fragment">Compile Svelte in your Head</a>, such as <code class="inline">c()</code>, <code class="inline">m()</code> and <code class="inline">d()</code>. To add code into different method, you can push them into the array in <code class="inline">block.chunks</code>, for example:',ve,Os,Nt,hl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// push &#96;const foo = 1&#96; to &#96;m()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;const foo = 1&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// push &#96;const bar = 2&#96; to &#96;c()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">create</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;const bar = 2&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,ye,Rs,Oa='I tried adding <code class="inline">@select_options(...)</code> into the <code class="inline">m()</code> method and yup, the <code class="inline">&lt;select&gt;</code> element is pre-selected correctly!',zt,r,Ns,Ra='<a href="#fixing-the-bug" id="fixing-the-bug">Fixing the bug</a>',de,zs,Na="To ensure the bug is fixed, I need to come up with a test.",ue,Bs,za="Usually I come up with test cases that try to entail various scenario I can imagine.",xe,Us,Ba='In this example, we&#39;ve manually tested the case where the <code class="inline">&lt;select multiple {value} {...{}}&gt;</code>, the value is set correctly during initialisation. but have we check the case where:',ge,Fs,Ua='<li>we update the value of <code class="inline">value</code>, will the <code class="inline">&lt;select&gt;</code> get updated accordingly?</li> <li>if the value is overriden by the spreaded attribute, eg <code class="inline">&lt;select mutliple {value} { ...{value: []} }&gt;</code>?</li>',fe,Js,Fa="Ideally, the test cases come up should be failed before the fix, and passed after the fix.",me,Gs,Ja="So here's the test case I came up:",we,Ys,Bt,vl=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> spread <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>spread<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>World<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div></code></pre>`,be,Zs,Ga='I can check and uncheck the checkbox to change the value of <code class="inline">value</code> to verify the the <code class="inline">value</code> is reactive, and <code class="inline">&lt;select&gt;</code> will get updated accordingly.',_e,Qs,Ya='Besides that, I exported <code class="inline">spread</code>, so that I can change the object to something object to contain <code class="inline">value</code>, eg: <code class="inline">{ value: [] }</code>, and see how <code class="inline">&lt;select&gt;</code> will update accordingly. Make sure that our fix not just work with <code class="inline">value</code> attribute, and also when the <code class="inline">value</code> is spreaded into <code class="inline">&lt;select&gt;</code>.',Te,Ks,Za="You may think that we are familiar with our fix, we know what it will fix, what it will not fix, do we need think up and write all the edge cases?",He,Xs,Qa="Well, I think you should. Future you will thank the present you when he encounter a fail test, that just mean his change may have an unintentional regression change. If you don't have the test case, the future you will never know what edge case he didn't accounted for.",Le,st,Ka='Runtime test cases are added into <code class="inline">test/runtime/samples/</code>. Each folder represent 1 test case. Inside the folder, the component to be tested is named <code class="inline">App.svelte</code>, and the test case is written <code class="inline">_config.js</code>.',Ce,tt,Xa='<code class="inline">_config.js</code> default exports a object:',Ie,nt,Ut,yl=`<div class="filename">_config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// initial props to passed to the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  props</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// initial rendered html</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// test case</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)">(&#123; assert</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> target &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// you can test the behavior of the component here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Me,et,so='An example of test case of unchecking the checkbox, and verify <code class="inline">&lt;select&gt;</code> value get updated',Pe,at,Ft,dl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)">(&#123; assert</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> window &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// find the element</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">input1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input2</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.querySelectorAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;input&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;select&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">option1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">option2</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.childNodes;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// uncheck the checkbox</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">input1</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input1</span><span style="color: var(--shiki-token-function)">.dispatchEvent</span><span style="color: var(--shiki-color-text)">(event);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify the component updated correctly</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.selectedOptions);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.equal</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.ok</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-token-function)">.includes</span><span style="color: var(--shiki-color-text)">(option1));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.ok</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-token-function)">.includes</span><span style="color: var(--shiki-color-text)">(option2));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,je,ot,to='To run only this test, so that we can focus on ensuring the test case pass, we can set <code class="inline">solo: true</code>:',Se,lt,Jt,ul=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  solo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,$e,it,no='<strong>Quick tip:</strong> running <code class="inline">npm run test</code> will build Svelte code first before executing the test. If you are like me, running <code class="inline">npm run dev</code> on the background, Svelte code is build on every code change. So, <code class="inline">npm run quicktest</code> would allow you to skip the <code class="inline">pretest</code> build, and run the test suite immediately.',Ee,rt,eo='With the test, I realised that I didn&#39;t handle the case when the <code class="inline">value</code> is updated.',qe,pt,ao='So I guess what I needed to do is to add the same code in the <code class="inline">p()</code> (update) method too!',Ae,ct,Gt,xl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,De,kt,oo='Well, of course in this way, the <code class="inline">select_options</code> get executed unconditionally whenever any variable is updated.',Ve,ht,lo='I need to make sure that the <code class="inline">select_options(...)</code> inside the <code class="inline">p()</code> method get executed only when the value of <code class="inline">value</code> changes, and also probably when <code class="inline">spread</code> changes too, because it could potentially override the value of <code class="inline">value</code>.',We,vt,io='If you&#39;ve read <a href="/compile-svelte-in-your-head-part-2/#bitmask-in-svelte">Compile Svelte in your Head - Bitmask in Svelte</a>, you know that Svelte uses bitmask to check any variable changes.',Oe,yt,ro="How do I know what is the bitmask to use in this case, well I dont have to.",Re,dt,po='I can use <a href="https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/compiler/compile/render_dom/Renderer.ts#L206" rel="nofollow"><code class="inline">renderer.dirty(dependencies)</code></a> to help me with that:',Ne,ut,Yt,gl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// block.renderer.dirty(...) will give me &#96;dirty &amp; bitmask&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;if (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.dirty</span><span style="color: var(--shiki-color-text)">(dependencies)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">) @select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ze,xt,co="Next, I need to figure out what are the dependencies to be included. In this particular case, the dependencies of all attributes have to be taken consideration, because it is hard to tell which one would be eventually applied due to the spread attribute.",Be,gt,Zt,fl=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attr</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.attributes) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dep</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attr</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.dependencies) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(dep);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;if (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.dirty</span><span style="color: var(--shiki-color-text)">(dependencies)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">) @select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ue,ft,ko="After a few tweaks, finally I passed all my test cases, and its time to create a pull request!",Qt,H,ho='<h2><a href="#submitting-the-fix" id="submitting-the-fix">Submitting the fix</a></h2> <p>Before pushing the fix to remote, it is important to make sure that all the lints and typescript definitions are correct. You can run <code class="inline">npm run lint --fixed</code> for linting, and <code class="inline">npm run tsd</code> to generate typescript definition.</p> <p>If you are unsure on how to create a pull request, you can check out <a href="https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/" rel="nofollow">How to make your first pull request on GitHub</a>.</p> <p>I pushed my branch and created a <a href="https://github.com/sveltejs/svelte/pull/4894" rel="nofollow">Pull Request to Svelte</a>, and now I am waiting for feedback and for it to get merged.</p> <p>Svelte is not maintained by full-time maintainers, everyone has their full-time job, so please be patient and be nice.</p> <hr/> <p>If you wish to learn more about Svelte, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>If you have anything unclear about this article, find me on <a href="https://twitter.com/lihautan" rel="nofollow">Twitter</a> too!</p>';return{c(){x=e("section"),x.innerHTML=_,w=o(),g=e("section"),f=e("h2"),f.innerHTML=b,C=o(),I=e("p"),I.innerHTML=Je,Kt=o(),Xt=e("hr"),sn=o(),M=e("p"),M.innerHTML=Ge,tn=o(),P=e("p"),P.innerHTML=Ye,nn=o(),j=e("div"),mt=new v(!1),en=o(),S=e("p"),S.innerHTML=Ze,an=o(),on=e("hr"),wt=o(),T=e("section"),T.innerHTML=Qe,bt=o(),t=e("section"),$=e("h2"),$.innerHTML=Ke,ln=o(),E=e("p"),E.textContent=Xe,rn=o(),q=e("p"),q.innerHTML=sa,pn=o(),A=e("div"),_t=new v(!1),cn=o(),D=e("p"),D.innerHTML=ta,kn=o(),V=e("p"),V.innerHTML=na,hn=o(),W=e("ul"),W.innerHTML=ea,vn=o(),O=e("p"),O.innerHTML=aa,yn=o(),R=e("div"),Tt=new v(!1),dn=o(),N=e("p"),N.textContent=oa,un=o(),z=e("div"),Ht=new v(!1),xn=o(),B=e("p"),B.innerHTML=la,gn=o(),U=e("p"),U.textContent=ia,fn=o(),F=e("div"),Lt=new v(!1),mn=o(),J=e("p"),J.textContent=ra,wn=o(),G=e("div"),Ct=new v(!1),bn=o(),Y=e("p"),Y.innerHTML=pa,_n=o(),Z=e("p"),Z.textContent=ca,Tn=o(),Q=e("div"),It=new v(!1),Hn=o(),K=e("p"),K.innerHTML=ka,Ln=o(),X=e("p"),X.innerHTML=ha,Cn=o(),ss=e("div"),Mt=new v(!1),In=o(),ts=e("p"),ts.innerHTML=va,Mn=o(),ns=e("p"),ns.textContent=ya,Pn=o(),es=e("p"),es.innerHTML=da,jn=o(),as=e("p"),as.innerHTML=ua,Sn=o(),os=e("p"),os.textContent=xa,$n=o(),ls=e("p"),ls.innerHTML=ga,En=o(),is=e("ul"),is.innerHTML=fa,qn=o(),rs=e("p"),rs.innerHTML=ma,An=o(),ps=e("div"),Pt=new v(!1),Dn=o(),cs=e("p"),cs.innerHTML=wa,Vn=o(),ks=e("div"),jt=new v(!1),Wn=o(),hs=e("p"),hs.innerHTML=ba,On=o(),vs=e("div"),St=new v(!1),Rn=o(),ys=e("p"),ys.textContent=_a,Nn=o(),ds=e("p"),ds.innerHTML=Ta,zn=o(),us=e("div"),$t=new v(!1),Bn=o(),xs=e("p"),xs.innerHTML=Ha,Un=o(),gs=e("p"),gs.innerHTML=La,Fn=o(),fs=e("ul"),fs.innerHTML=Ca,Jn=o(),ms=e("p"),ms.textContent=Ia,Gn=o(),ws=e("div"),Et=new v(!1),Yn=o(),bs=e("p"),bs.innerHTML=Ma,Zn=o(),_s=e("div"),qt=new v(!1),Qn=o(),Ts=e("p"),Ts.textContent=Pa,Kn=o(),Hs=e("div"),At=new v(!1),Xn=o(),Ls=e("p"),Ls.innerHTML=ja,se=o(),Cs=e("div"),Dt=new v(!1),te=o(),Is=e("p"),Is.innerHTML=Sa,ne=o(),Ms=e("p"),Ms.innerHTML=$a,ee=o(),Ps=e("p"),Ps.innerHTML=Ea,ae=o(),js=e("div"),Vt=new v(!1),oe=o(),Ss=e("div"),Wt=new v(!1),le=o(),$s=e("p"),$s.innerHTML=qa,ie=o(),Es=e("div"),Ot=new v(!1),re=o(),qs=e("p"),qs.innerHTML=Aa,pe=o(),As=e("p"),As.innerHTML=Da,ce=o(),Ds=e("p"),Ds.innerHTML=Va,ke=o(),Vs=e("div"),Rt=new v(!1),he=o(),Ws=e("p"),Ws.innerHTML=Wa,ve=o(),Os=e("div"),Nt=new v(!1),ye=o(),Rs=e("p"),Rs.innerHTML=Oa,zt=o(),r=e("section"),Ns=e("h2"),Ns.innerHTML=Ra,de=o(),zs=e("p"),zs.textContent=Na,ue=o(),Bs=e("p"),Bs.textContent=za,xe=o(),Us=e("p"),Us.innerHTML=Ba,ge=o(),Fs=e("ul"),Fs.innerHTML=Ua,fe=o(),Js=e("p"),Js.textContent=Fa,me=o(),Gs=e("p"),Gs.textContent=Ja,we=o(),Ys=e("div"),Bt=new v(!1),be=o(),Zs=e("p"),Zs.innerHTML=Ga,_e=o(),Qs=e("p"),Qs.innerHTML=Ya,Te=o(),Ks=e("p"),Ks.textContent=Za,He=o(),Xs=e("p"),Xs.textContent=Qa,Le=o(),st=e("p"),st.innerHTML=Ka,Ce=o(),tt=e("p"),tt.innerHTML=Xa,Ie=o(),nt=e("div"),Ut=new v(!1),Me=o(),et=e("p"),et.innerHTML=so,Pe=o(),at=e("div"),Ft=new v(!1),je=o(),ot=e("p"),ot.innerHTML=to,Se=o(),lt=e("div"),Jt=new v(!1),$e=o(),it=e("p"),it.innerHTML=no,Ee=o(),rt=e("p"),rt.innerHTML=eo,qe=o(),pt=e("p"),pt.innerHTML=ao,Ae=o(),ct=e("div"),Gt=new v(!1),De=o(),kt=e("p"),kt.innerHTML=oo,Ve=o(),ht=e("p"),ht.innerHTML=lo,We=o(),vt=e("p"),vt.innerHTML=io,Oe=o(),yt=e("p"),yt.textContent=ro,Re=o(),dt=e("p"),dt.innerHTML=po,Ne=o(),ut=e("div"),Yt=new v(!1),ze=o(),xt=e("p"),xt.textContent=co,Be=o(),gt=e("div"),Zt=new v(!1),Ue=o(),ft=e("p"),ft.textContent=ko,Qt=o(),H=e("section"),H.innerHTML=ho,this.h()},l(u){x=a(u,"SECTION",{"data-svelte-h":!0}),i(x)!=="svelte-h32u2u"&&(x.innerHTML=_),w=l(u),g=a(u,"SECTION",{});var h=k(g);f=a(h,"H2",{"data-svelte-h":!0}),i(f)!=="svelte-1fvzygs"&&(f.innerHTML=b),C=l(h),I=a(h,"P",{"data-svelte-h":!0}),i(I)!=="svelte-wocoot"&&(I.innerHTML=Je),Kt=l(h),Xt=a(h,"HR",{}),sn=l(h),M=a(h,"P",{"data-svelte-h":!0}),i(M)!=="svelte-1xixvtr"&&(M.innerHTML=Ge),tn=l(h),P=a(h,"P",{"data-svelte-h":!0}),i(P)!=="svelte-181lbba"&&(P.innerHTML=Ye),nn=l(h),j=a(h,"DIV",{class:!0});var vo=k(j);mt=y(vo,!1),vo.forEach(c),en=l(h),S=a(h,"P",{"data-svelte-h":!0}),i(S)!=="svelte-uvo0qy"&&(S.innerHTML=Ze),an=l(h),on=a(h,"HR",{}),h.forEach(c),wt=l(u),T=a(u,"SECTION",{"data-svelte-h":!0}),i(T)!=="svelte-8wzn55"&&(T.innerHTML=Qe),bt=l(u),t=a(u,"SECTION",{});var n=k(t);$=a(n,"H2",{"data-svelte-h":!0}),i($)!=="svelte-q4yljl"&&($.innerHTML=Ke),ln=l(n),E=a(n,"P",{"data-svelte-h":!0}),i(E)!=="svelte-11uy26v"&&(E.textContent=Xe),rn=l(n),q=a(n,"P",{"data-svelte-h":!0}),i(q)!=="svelte-tjwywc"&&(q.innerHTML=sa),pn=l(n),A=a(n,"DIV",{class:!0});var yo=k(A);_t=y(yo,!1),yo.forEach(c),cn=l(n),D=a(n,"P",{"data-svelte-h":!0}),i(D)!=="svelte-plrwrx"&&(D.innerHTML=ta),kn=l(n),V=a(n,"P",{"data-svelte-h":!0}),i(V)!=="svelte-qogen3"&&(V.innerHTML=na),hn=l(n),W=a(n,"UL",{"data-svelte-h":!0}),i(W)!=="svelte-13141jm"&&(W.innerHTML=ea),vn=l(n),O=a(n,"P",{"data-svelte-h":!0}),i(O)!=="svelte-1uw149h"&&(O.innerHTML=aa),yn=l(n),R=a(n,"DIV",{class:!0});var uo=k(R);Tt=y(uo,!1),uo.forEach(c),dn=l(n),N=a(n,"P",{"data-svelte-h":!0}),i(N)!=="svelte-1mo93g4"&&(N.textContent=oa),un=l(n),z=a(n,"DIV",{class:!0});var xo=k(z);Ht=y(xo,!1),xo.forEach(c),xn=l(n),B=a(n,"P",{"data-svelte-h":!0}),i(B)!=="svelte-2awjct"&&(B.innerHTML=la),gn=l(n),U=a(n,"P",{"data-svelte-h":!0}),i(U)!=="svelte-ff77ol"&&(U.textContent=ia),fn=l(n),F=a(n,"DIV",{class:!0});var go=k(F);Lt=y(go,!1),go.forEach(c),mn=l(n),J=a(n,"P",{"data-svelte-h":!0}),i(J)!=="svelte-1x9z1w9"&&(J.textContent=ra),wn=l(n),G=a(n,"DIV",{class:!0});var fo=k(G);Ct=y(fo,!1),fo.forEach(c),bn=l(n),Y=a(n,"P",{"data-svelte-h":!0}),i(Y)!=="svelte-1i6297m"&&(Y.innerHTML=pa),_n=l(n),Z=a(n,"P",{"data-svelte-h":!0}),i(Z)!=="svelte-80pb1y"&&(Z.textContent=ca),Tn=l(n),Q=a(n,"DIV",{class:!0});var mo=k(Q);It=y(mo,!1),mo.forEach(c),Hn=l(n),K=a(n,"P",{"data-svelte-h":!0}),i(K)!=="svelte-ei6ccg"&&(K.innerHTML=ka),Ln=l(n),X=a(n,"P",{"data-svelte-h":!0}),i(X)!=="svelte-13zc21n"&&(X.innerHTML=ha),Cn=l(n),ss=a(n,"DIV",{class:!0});var wo=k(ss);Mt=y(wo,!1),wo.forEach(c),In=l(n),ts=a(n,"P",{"data-svelte-h":!0}),i(ts)!=="svelte-1bw08y5"&&(ts.innerHTML=va),Mn=l(n),ns=a(n,"P",{"data-svelte-h":!0}),i(ns)!=="svelte-1ufqplr"&&(ns.textContent=ya),Pn=l(n),es=a(n,"P",{"data-svelte-h":!0}),i(es)!=="svelte-kv58x"&&(es.innerHTML=da),jn=l(n),as=a(n,"P",{"data-svelte-h":!0}),i(as)!=="svelte-1s9vmwh"&&(as.innerHTML=ua),Sn=l(n),os=a(n,"P",{"data-svelte-h":!0}),i(os)!=="svelte-3ias5q"&&(os.textContent=xa),$n=l(n),ls=a(n,"P",{"data-svelte-h":!0}),i(ls)!=="svelte-1oruwch"&&(ls.innerHTML=ga),En=l(n),is=a(n,"UL",{"data-svelte-h":!0}),i(is)!=="svelte-1hdi9tx"&&(is.innerHTML=fa),qn=l(n),rs=a(n,"P",{"data-svelte-h":!0}),i(rs)!=="svelte-5ewpf3"&&(rs.innerHTML=ma),An=l(n),ps=a(n,"DIV",{class:!0});var bo=k(ps);Pt=y(bo,!1),bo.forEach(c),Dn=l(n),cs=a(n,"P",{"data-svelte-h":!0}),i(cs)!=="svelte-38l94i"&&(cs.innerHTML=wa),Vn=l(n),ks=a(n,"DIV",{class:!0});var _o=k(ks);jt=y(_o,!1),_o.forEach(c),Wn=l(n),hs=a(n,"P",{"data-svelte-h":!0}),i(hs)!=="svelte-1smhy0m"&&(hs.innerHTML=ba),On=l(n),vs=a(n,"DIV",{class:!0});var To=k(vs);St=y(To,!1),To.forEach(c),Rn=l(n),ys=a(n,"P",{"data-svelte-h":!0}),i(ys)!=="svelte-14u5tt6"&&(ys.textContent=_a),Nn=l(n),ds=a(n,"P",{"data-svelte-h":!0}),i(ds)!=="svelte-1vtr28i"&&(ds.innerHTML=Ta),zn=l(n),us=a(n,"DIV",{class:!0});var Ho=k(us);$t=y(Ho,!1),Ho.forEach(c),Bn=l(n),xs=a(n,"P",{"data-svelte-h":!0}),i(xs)!=="svelte-8prf4m"&&(xs.innerHTML=Ha),Un=l(n),gs=a(n,"P",{"data-svelte-h":!0}),i(gs)!=="svelte-zbh27l"&&(gs.innerHTML=La),Fn=l(n),fs=a(n,"UL",{"data-svelte-h":!0}),i(fs)!=="svelte-1bftza9"&&(fs.innerHTML=Ca),Jn=l(n),ms=a(n,"P",{"data-svelte-h":!0}),i(ms)!=="svelte-bkrroi"&&(ms.textContent=Ia),Gn=l(n),ws=a(n,"DIV",{class:!0});var Lo=k(ws);Et=y(Lo,!1),Lo.forEach(c),Yn=l(n),bs=a(n,"P",{"data-svelte-h":!0}),i(bs)!=="svelte-mvxvv4"&&(bs.innerHTML=Ma),Zn=l(n),_s=a(n,"DIV",{class:!0});var Co=k(_s);qt=y(Co,!1),Co.forEach(c),Qn=l(n),Ts=a(n,"P",{"data-svelte-h":!0}),i(Ts)!=="svelte-8hz43v"&&(Ts.textContent=Pa),Kn=l(n),Hs=a(n,"DIV",{class:!0});var Io=k(Hs);At=y(Io,!1),Io.forEach(c),Xn=l(n),Ls=a(n,"P",{"data-svelte-h":!0}),i(Ls)!=="svelte-142cqej"&&(Ls.innerHTML=ja),se=l(n),Cs=a(n,"DIV",{class:!0});var Mo=k(Cs);Dt=y(Mo,!1),Mo.forEach(c),te=l(n),Is=a(n,"P",{"data-svelte-h":!0}),i(Is)!=="svelte-dod3aa"&&(Is.innerHTML=Sa),ne=l(n),Ms=a(n,"P",{"data-svelte-h":!0}),i(Ms)!=="svelte-1t1ibfh"&&(Ms.innerHTML=$a),ee=l(n),Ps=a(n,"P",{"data-svelte-h":!0}),i(Ps)!=="svelte-sdyf7n"&&(Ps.innerHTML=Ea),ae=l(n),js=a(n,"DIV",{class:!0});var Po=k(js);Vt=y(Po,!1),Po.forEach(c),oe=l(n),Ss=a(n,"DIV",{class:!0});var jo=k(Ss);Wt=y(jo,!1),jo.forEach(c),le=l(n),$s=a(n,"P",{"data-svelte-h":!0}),i($s)!=="svelte-hf6dsc"&&($s.innerHTML=qa),ie=l(n),Es=a(n,"DIV",{class:!0});var So=k(Es);Ot=y(So,!1),So.forEach(c),re=l(n),qs=a(n,"P",{"data-svelte-h":!0}),i(qs)!=="svelte-5qwuk8"&&(qs.innerHTML=Aa),pe=l(n),As=a(n,"P",{"data-svelte-h":!0}),i(As)!=="svelte-1tlc9ct"&&(As.innerHTML=Da),ce=l(n),Ds=a(n,"P",{"data-svelte-h":!0}),i(Ds)!=="svelte-v43vbk"&&(Ds.innerHTML=Va),ke=l(n),Vs=a(n,"DIV",{class:!0});var $o=k(Vs);Rt=y($o,!1),$o.forEach(c),he=l(n),Ws=a(n,"P",{"data-svelte-h":!0}),i(Ws)!=="svelte-1stoc2f"&&(Ws.innerHTML=Wa),ve=l(n),Os=a(n,"DIV",{class:!0});var Eo=k(Os);Nt=y(Eo,!1),Eo.forEach(c),ye=l(n),Rs=a(n,"P",{"data-svelte-h":!0}),i(Rs)!=="svelte-1oj8zfb"&&(Rs.innerHTML=Oa),n.forEach(c),zt=l(u),r=a(u,"SECTION",{});var p=k(r);Ns=a(p,"H2",{"data-svelte-h":!0}),i(Ns)!=="svelte-tr1s70"&&(Ns.innerHTML=Ra),de=l(p),zs=a(p,"P",{"data-svelte-h":!0}),i(zs)!=="svelte-17h12ka"&&(zs.textContent=Na),ue=l(p),Bs=a(p,"P",{"data-svelte-h":!0}),i(Bs)!=="svelte-15upse2"&&(Bs.textContent=za),xe=l(p),Us=a(p,"P",{"data-svelte-h":!0}),i(Us)!=="svelte-1jfrfzf"&&(Us.innerHTML=Ba),ge=l(p),Fs=a(p,"UL",{"data-svelte-h":!0}),i(Fs)!=="svelte-yft6pu"&&(Fs.innerHTML=Ua),fe=l(p),Js=a(p,"P",{"data-svelte-h":!0}),i(Js)!=="svelte-gewg2c"&&(Js.textContent=Fa),me=l(p),Gs=a(p,"P",{"data-svelte-h":!0}),i(Gs)!=="svelte-46ye37"&&(Gs.textContent=Ja),we=l(p),Ys=a(p,"DIV",{class:!0});var qo=k(Ys);Bt=y(qo,!1),qo.forEach(c),be=l(p),Zs=a(p,"P",{"data-svelte-h":!0}),i(Zs)!=="svelte-1nndin5"&&(Zs.innerHTML=Ga),_e=l(p),Qs=a(p,"P",{"data-svelte-h":!0}),i(Qs)!=="svelte-u0bl7p"&&(Qs.innerHTML=Ya),Te=l(p),Ks=a(p,"P",{"data-svelte-h":!0}),i(Ks)!=="svelte-nnirhc"&&(Ks.textContent=Za),He=l(p),Xs=a(p,"P",{"data-svelte-h":!0}),i(Xs)!=="svelte-1d81rjs"&&(Xs.textContent=Qa),Le=l(p),st=a(p,"P",{"data-svelte-h":!0}),i(st)!=="svelte-1q6qvws"&&(st.innerHTML=Ka),Ce=l(p),tt=a(p,"P",{"data-svelte-h":!0}),i(tt)!=="svelte-jq80cj"&&(tt.innerHTML=Xa),Ie=l(p),nt=a(p,"DIV",{class:!0});var Ao=k(nt);Ut=y(Ao,!1),Ao.forEach(c),Me=l(p),et=a(p,"P",{"data-svelte-h":!0}),i(et)!=="svelte-1uief5o"&&(et.innerHTML=so),Pe=l(p),at=a(p,"DIV",{class:!0});var Do=k(at);Ft=y(Do,!1),Do.forEach(c),je=l(p),ot=a(p,"P",{"data-svelte-h":!0}),i(ot)!=="svelte-vlm2s5"&&(ot.innerHTML=to),Se=l(p),lt=a(p,"DIV",{class:!0});var Vo=k(lt);Jt=y(Vo,!1),Vo.forEach(c),$e=l(p),it=a(p,"P",{"data-svelte-h":!0}),i(it)!=="svelte-1vuomdn"&&(it.innerHTML=no),Ee=l(p),rt=a(p,"P",{"data-svelte-h":!0}),i(rt)!=="svelte-1d6yw0c"&&(rt.innerHTML=eo),qe=l(p),pt=a(p,"P",{"data-svelte-h":!0}),i(pt)!=="svelte-1om45lq"&&(pt.innerHTML=ao),Ae=l(p),ct=a(p,"DIV",{class:!0});var Wo=k(ct);Gt=y(Wo,!1),Wo.forEach(c),De=l(p),kt=a(p,"P",{"data-svelte-h":!0}),i(kt)!=="svelte-1io3d2b"&&(kt.innerHTML=oo),Ve=l(p),ht=a(p,"P",{"data-svelte-h":!0}),i(ht)!=="svelte-c3g71b"&&(ht.innerHTML=lo),We=l(p),vt=a(p,"P",{"data-svelte-h":!0}),i(vt)!=="svelte-2443p"&&(vt.innerHTML=io),Oe=l(p),yt=a(p,"P",{"data-svelte-h":!0}),i(yt)!=="svelte-13hcsx1"&&(yt.textContent=ro),Re=l(p),dt=a(p,"P",{"data-svelte-h":!0}),i(dt)!=="svelte-zmqm8p"&&(dt.innerHTML=po),Ne=l(p),ut=a(p,"DIV",{class:!0});var Oo=k(ut);Yt=y(Oo,!1),Oo.forEach(c),ze=l(p),xt=a(p,"P",{"data-svelte-h":!0}),i(xt)!=="svelte-63vbyt"&&(xt.textContent=co),Be=l(p),gt=a(p,"DIV",{class:!0});var Ro=k(gt);Zt=y(Ro,!1),Ro.forEach(c),Ue=l(p),ft=a(p,"P",{"data-svelte-h":!0}),i(ft)!=="svelte-6jvryj"&&(ft.textContent=ko),p.forEach(c),Qt=l(u),H=a(u,"SECTION",{"data-svelte-h":!0}),i(H)!=="svelte-1cr6ky7"&&(H.innerHTML=ho),this.h()},h(){mt.a=null,d(j,"class","code-section"),_t.a=null,d(A,"class","code-section"),Tt.a=null,d(R,"class","code-section"),Ht.a=null,d(z,"class","code-section"),Lt.a=null,d(F,"class","code-section"),Ct.a=null,d(G,"class","code-section"),It.a=null,d(Q,"class","code-section"),Mt.a=null,d(ss,"class","code-section"),Pt.a=null,d(ps,"class","code-section"),jt.a=null,d(ks,"class","code-section"),St.a=null,d(vs,"class","code-section"),$t.a=null,d(us,"class","code-section"),Et.a=null,d(ws,"class","code-section"),qt.a=null,d(_s,"class","code-section"),At.a=null,d(Hs,"class","code-section"),Dt.a=null,d(Cs,"class","code-section"),Vt.a=null,d(js,"class","code-section"),Wt.a=null,d(Ss,"class","code-section"),Ot.a=null,d(Es,"class","code-section"),Rt.a=null,d(Vs,"class","code-section"),Nt.a=null,d(Os,"class","code-section"),Bt.a=null,d(Ys,"class","code-section"),Ut.a=null,d(nt,"class","code-section"),Ft.a=null,d(at,"class","code-section"),Jt.a=null,d(lt,"class","code-section"),Gt.a=null,d(ct,"class","code-section"),Yt.a=null,d(ut,"class","code-section"),Zt.a=null,d(gt,"class","code-section")},m(u,h){m(u,x,h),m(u,w,h),m(u,g,h),s(g,f),s(g,C),s(g,I),s(g,Kt),s(g,Xt),s(g,sn),s(g,M),s(g,tn),s(g,P),s(g,nn),s(g,j),mt.m(Fo,j),s(g,en),s(g,S),s(g,an),s(g,on),m(u,wt,h),m(u,T,h),m(u,bt,h),m(u,t,h),s(t,$),s(t,ln),s(t,E),s(t,rn),s(t,q),s(t,pn),s(t,A),_t.m(Jo,A),s(t,cn),s(t,D),s(t,kn),s(t,V),s(t,hn),s(t,W),s(t,vn),s(t,O),s(t,yn),s(t,R),Tt.m(Go,R),s(t,dn),s(t,N),s(t,un),s(t,z),Ht.m(Yo,z),s(t,xn),s(t,B),s(t,gn),s(t,U),s(t,fn),s(t,F),Lt.m(Zo,F),s(t,mn),s(t,J),s(t,wn),s(t,G),Ct.m(Qo,G),s(t,bn),s(t,Y),s(t,_n),s(t,Z),s(t,Tn),s(t,Q),It.m(Ko,Q),s(t,Hn),s(t,K),s(t,Ln),s(t,X),s(t,Cn),s(t,ss),Mt.m(Xo,ss),s(t,In),s(t,ts),s(t,Mn),s(t,ns),s(t,Pn),s(t,es),s(t,jn),s(t,as),s(t,Sn),s(t,os),s(t,$n),s(t,ls),s(t,En),s(t,is),s(t,qn),s(t,rs),s(t,An),s(t,ps),Pt.m(sl,ps),s(t,Dn),s(t,cs),s(t,Vn),s(t,ks),jt.m(tl,ks),s(t,Wn),s(t,hs),s(t,On),s(t,vs),St.m(nl,vs),s(t,Rn),s(t,ys),s(t,Nn),s(t,ds),s(t,zn),s(t,us),$t.m(el,us),s(t,Bn),s(t,xs),s(t,Un),s(t,gs),s(t,Fn),s(t,fs),s(t,Jn),s(t,ms),s(t,Gn),s(t,ws),Et.m(al,ws),s(t,Yn),s(t,bs),s(t,Zn),s(t,_s),qt.m(ol,_s),s(t,Qn),s(t,Ts),s(t,Kn),s(t,Hs),At.m(ll,Hs),s(t,Xn),s(t,Ls),s(t,se),s(t,Cs),Dt.m(il,Cs),s(t,te),s(t,Is),s(t,ne),s(t,Ms),s(t,ee),s(t,Ps),s(t,ae),s(t,js),Vt.m(rl,js),s(t,oe),s(t,Ss),Wt.m(pl,Ss),s(t,le),s(t,$s),s(t,ie),s(t,Es),Ot.m(cl,Es),s(t,re),s(t,qs),s(t,pe),s(t,As),s(t,ce),s(t,Ds),s(t,ke),s(t,Vs),Rt.m(kl,Vs),s(t,he),s(t,Ws),s(t,ve),s(t,Os),Nt.m(hl,Os),s(t,ye),s(t,Rs),m(u,zt,h),m(u,r,h),s(r,Ns),s(r,de),s(r,zs),s(r,ue),s(r,Bs),s(r,xe),s(r,Us),s(r,ge),s(r,Fs),s(r,fe),s(r,Js),s(r,me),s(r,Gs),s(r,we),s(r,Ys),Bt.m(vl,Ys),s(r,be),s(r,Zs),s(r,_e),s(r,Qs),s(r,Te),s(r,Ks),s(r,He),s(r,Xs),s(r,Le),s(r,st),s(r,Ce),s(r,tt),s(r,Ie),s(r,nt),Ut.m(yl,nt),s(r,Me),s(r,et),s(r,Pe),s(r,at),Ft.m(dl,at),s(r,je),s(r,ot),s(r,Se),s(r,lt),Jt.m(ul,lt),s(r,$e),s(r,it),s(r,Ee),s(r,rt),s(r,qe),s(r,pt),s(r,Ae),s(r,ct),Gt.m(xl,ct),s(r,De),s(r,kt),s(r,Ve),s(r,ht),s(r,We),s(r,vt),s(r,Oe),s(r,yt),s(r,Re),s(r,dt),s(r,Ne),s(r,ut),Yt.m(gl,ut),s(r,ze),s(r,xt),s(r,Be),s(r,gt),Zt.m(fl,gt),s(r,Ue),s(r,ft),m(u,Qt,h),m(u,H,h)},p:bl,d(u){u&&(c(x),c(w),c(g),c(wt),c(T),c(bt),c(t),c(zt),c(r),c(Qt),c(H))}}}function Vl(L){let x,_;const w=[L[0],Uo];let g={$$slots:{default:[Dl]},$$scope:{ctx:L}};for(let f=0;f<w.length;f+=1)g=Fe(g,w[f]);return x=new Sl({props:g}),{c(){Hl(x.$$.fragment)},l(f){Ll(x.$$.fragment,f)},m(f,b){Cl(x,f,b),_=!0},p(f,[b]){const C=b&1?jl(w,[b&1&&zo(f[0]),b&0&&zo(Uo)]):{};b&2&&(C.$$scope={dirty:b,ctx:f}),x.$set(C)},i(f){_||(Il(x.$$.fragment,f),_=!0)},o(f){Ml(x.$$.fragment,f),_=!1},d(f){Pl(x,f)}}}const Uo={title:"Contributing to Svelte - Fixing issue #4392",date:"2020-05-23T08:00:00Z",tags:["Svelte","JavaScript","Open Source"],series:"Contributing to Svelte",description:"I am going to tell you an anecdote on how I investigated and fixed a bug in Svelte. I documented down my train of thoughts as detailed as possible. I hope this gives anyone who is reading, a glimpse on how to work on the Svelte source code.",label:"blog",tableOfContents:[{link:"background",title:"Background"},{link:"the-story-begins",title:"The story begins"},{link:"verifying-the-bug",title:"Verifying the bug"},{link:"investigating-the-bug",title:"Investigating the bug"},{link:"fixing-the-bug",title:"Fixing the bug"},{link:"submitting-the-fix",title:"Submitting the fix"}]};function Wl(L,x,_){return wl("blog",{image:Al}),L.$$set=w=>{_(0,x=Fe(Fe({},x),No(w)))},x=No(x),[x]}class Bl extends _l{constructor(x){super(),Tl(this,x,Wl,Vl,ml,{})}}export{Bl as component};
