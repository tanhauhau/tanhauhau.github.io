import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as H,g as Q,d as X,b as M,f as V,s as e,e as s,r as o,n as t,t as ss,a as os}from"../chunks/C2PHntuy.js";import{h as a}from"../chunks/C3QlhiH-.js";import{s as n}from"../chunks/CEusTUg_.js";import{i as es}from"../chunks/BQOOHHT8.js";import{l as ns,s as as}from"../chunks/gzNpScmH.js";import{B as ts}from"../chunks/B1caYEk9.js";const z=""+new URL("../assets/window-reference-error.BZaOH-Tl.png",import.meta.url).href,ls=""+new URL("../assets/window-reference-error.DtFdjupq.png",import.meta.url).href,is=""+new URL("../assets/window-reference-error.idKowLwW.webp",import.meta.url).href,rs=""+new URL("../assets/window-reference-error.CiO7XSIW.webp",import.meta.url).href,T=""+new URL("../assets/google-search.ZtBWFcLi.png",import.meta.url).href,ps=""+new URL("../assets/google-search.p50474kT.png",import.meta.url).href,cs=""+new URL("../assets/google-search.hvC0ZzkU.webp",import.meta.url).href,hs=""+new URL("../assets/google-search.BXs4x8xB.webp",import.meta.url).href,F=""+new URL("../assets/rollup-plugin-copy-usage.ETaSE_IP.png",import.meta.url).href,ks=""+new URL("../assets/rollup-plugin-copy-usage.C4Ue4kEO.png",import.meta.url).href,ds=""+new URL("../assets/rollup-plugin-copy-usage.BjzUT9E6.webp",import.meta.url).href,us=""+new URL("../assets/rollup-plugin-copy-usage.DiQCifQI.webp",import.meta.url).href,N=""+new URL("../assets/dependencies.CPUUiRt_.png",import.meta.url).href,vs=""+new URL("../assets/dependencies.ol4Fw-Jm.png",import.meta.url).href,ys=""+new URL("../assets/dependencies.DrzhCoj2.webp",import.meta.url).href,gs=""+new URL("../assets/dependencies.Cq84KB7a.webp",import.meta.url).href,ms=""+new URL("../assets/hero-twitter.BdhGu847.jpg",import.meta.url).href,D={title:"I wrote a 12-line Rollup plugin",date:"2019-11-30T08:00:00Z",description:"Why would I install a package with so many files and dependencies, just to do a something simple that can be done in 12 lines of code?",tags:["JavaScript","rollup","plugin"],label:"blog",tableOfContents:[{link:"background",title:"Background"},{link:"need-something-install-a-plugin",title:"Need something? Install a plugin!"},{link:"writing-a-rollup-plugin",title:"Writing a Rollup plugin"},{link:"closing-notes",title:"Closing Notes"}]},{title:Ls,date:Ss,description:Bs,tags:Ws,label:Cs,tableOfContents:qs}=D;var ws=M(`<section><h2><a href="#background" id="background">Background</a></h2> <p>I was building a web application using <a href="http://svelte.dev/" rel="nofollow">Svelte</a> and <a href="https://rollupjs.org/guide/en/" rel="nofollow">Rollup</a> this morning. I needed to use a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" rel="nofollow">web worker</a>, which the worker script has to be in another file:</p> <div class="code-section"><!></div> <p>So naturally, I was thinking of having 2 entries for my rollup application: <em>the main app</em> and <em>the worker</em>.</p> <p>It works fine, except the fact that the <a href="https://www.npmjs.com/package/rollup-plugin-livereload" rel="nofollow">rollup-plugin-livereload</a> injected a livereload script to every output file:</p> <div class="code-section"><!></div> <p>The livereload script includes a reference to <code class="inline">window</code>, which is not available to the worker script:</p> <p><span style="display: block; position: relative; padding-top: 10.306%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="window reference error" title="window is not defined"/></picture></span></p> <p>I looked into <a href="https://www.npmjs.com/package/rollup-plugin-livereload" rel="nofollow">the docs of the rollup-plugin-livereload</a>, it doesn't seemed to have a option to exclude files from adding the <em>livereload script</em>.</p> <p>At this point, I was thinking to myself, <em>"I just need to copy the worker.js into the 'build/' folder, I don't need anything else, how hard can that be?"</em></p> <p>It turns out harder than I imagined. ü§Æ</p></section> <section><h2><a href="#need-something-install-a-plugin" id="need-something-install-a-plugin">Need something? Install a plugin!</a></h2> <p>In todays JavaScript landscape, there's a <em>"node_module"</em> for everything.</p> <p>So I <a href="https://www.google.com/search?q=rollup+plugin+copy+files" rel="nofollow">googled</a> <em>"rollup plugin copy files"</em>, without a suprise, there are multiple rollup plugins published to npm:</p> <p><span style="display: block; position: relative; padding-top: 76.068%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="google search" title="Google result for &quot;rollup plugin copy files&quot;"/></picture></span></p> <p>So I decided to install the first plugin, because it has the highest weekly downloads:</p> <p><span style="display: block; position: relative; padding-top: 132.234%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="rollup-plugin-copy weekly downloads" title="17K weekly downloads"/></picture></span></p> <p>When I installed the plugin, I realise I was installing much more than I needed:</p> <p><span style="display: block; position: relative; padding-top: 161.983%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="rollup-plugin-copy dependencies"/></picture></span></p> <p>Remember, my use case is simple:</p> <blockquote><p><strong>I just need to copy the worker.js into the 'build/' folder.</strong></p></blockquote> <p>I <em>don't need any bells and whistles</em> this plugin is providing me. üôà</p> <p>So I uninstalled the plugin, thinking:</p> <blockquote><p>How hard is it to <strong>write a plugin</strong> that <strong>just</strong> copy the worker.js into the 'build/' folder?</p></blockquote></section> <section><h2><a href="#writing-a-rollup-plugin" id="writing-a-rollup-plugin">Writing a Rollup plugin</a></h2> <p>Senpai once told me, <em>"writing rollup plugins is very straightforward,"</em>, yet, no one told me how to get started writing it.</p> <p>So, I dug into <code class="inline">node_modules/</code>, and start skimming through the rollup plugins I have installed: <a href="https://github.com/sveltejs/rollup-plugin-svelte" rel="nofollow">rollup-plugin-svelte</a>, <a href="https://github.com/rollup/rollup-plugin-node-resolve" rel="nofollow">rollup-plugin-node-resolve</a>, <a href="https://github.com/TrySound/rollup-plugin-terser" rel="nofollow">rollup-plugin-terser</a>, ...</p> <p>And I noticed a common pattern:</p> <div class="code-section"><!></div> <p>So I guess, this is the general structure of a rollup plugin:</p> <ul><li>It's an object, ...</li> <li>with a property called <code class="inline">name</code> for the name of the plugin,</li> <li>and functions like <em>"load"</em>, <em>"load"</em>, ... that would be called by rollup when the time is right ü§î</li></ul> <p>OK. I know what I need, I need to copy my <code class="inline">worker.js</code> when rollup is generating a bundle:</p> <div class="code-section"><!></div> <p>Great! It works! üòé</p> <p>But, when I change the <code class="inline">worker.js</code> file, the <code class="inline">build/worker.js</code> is not updated. üòû</p> <p>That's because the <code class="inline">worker.js</code> is not watched!</p> <p>After much googling, I ended up reading through the official docs of <a href="https://rollupjs.org/guide/en/#plugin-development" rel="nofollow">Rollup</a>.</p> <p>I learned that the functions like <em>"load"</em>, <em>"generateBundle"</em>, ... are called <a href="https://rollupjs.org/guide/en/#hooks" rel="nofollow">"hooks"</a>, and the docs explained when these hooks will be called, the arguments and the expected return value.</p> <p>In the docs, I found <a href="https://rollupjs.org/guide/en/#thisaddwatchfileid-string--void" rel="nofollow"><code class="inline">this.addWatchFile(id: string)</code></a> under <a href="https://rollupjs.org/guide/en/#plugin-context" rel="nofollow">plugin context</a>, which according to the docs,</p> <blockquote><p>[...] can be used to add additional files to be monitored by watch mode.</p></blockquote> <p>Sounds exactly what I am looking for! üòÅ</p> <div class="code-section"><!></div> <p>Great! It works! üéâüéâ</p></section> <section><h2><a href="#closing-notes" id="closing-notes">Closing Notes</a></h2> <p>After some researching, I wrote simple rollup plugin in 12 lines of code, that copies the worker.js into "build/" folder.</p> <p>This is something custom and specific, and <strong>it works perfectly fine</strong>.</p> <p>So, why would I install a package that has so many files and dependencies, just to do a simple and specific task?</p> <p><strong>Am I going to publish my plugin to npm?</strong></p> <p>No. If you have a similar use case, you are free to copy these 12 lines of code.</p> <p>At the moment, I am having these 12 lines of code in my <code class="inline">rollup.config.js</code> and have no intention to extract it out into its own package.</p> <p><strong>What about DRY? What if you/someone else have the same use case, wouldn't it great to have it as a package?</strong></p> <p>Sorry. No. Before <strong>DRY (Dont Repeat Yourself)</strong>, there's <strong>YAGNI (You aren't gonna need it)</strong>.</p> <p>Abstract code only when you need to.</p></section>`,1);function As(E,u){const O=ns(u,["children","$$slots","$$events","$$legacy"]);H(u,!1),Q("blog",{image:ms}),es(),ts(E,as(()=>O,()=>D,{children:(G,xs)=>{var v=ws(),l=V(v),i=e(s(l),4),P=s(i);a(P,()=>'<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">worker</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Worker</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/build/worker.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>'),o(i);var r=e(i,6),Y=s(r);a(Y,()=>`<div class="filename">/build/worker.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(l</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> r) &#123; </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">l</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;livereloadscript&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">; r </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">l</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;script&#39;</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-constant)">r</span><span style="color: var(--shiki-color-text)">.async </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-constant)">r</span><span style="color: var(--shiki-color-text)">.src </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;//&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">location</span><span style="color: var(--shiki-color-text)">.host </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;localhost&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;:&#39;</span><span style="color: var(--shiki-color-text)">)[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;:35729/livereload.js?snipver=1&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-constant)">r</span><span style="color: var(--shiki-color-text)">.id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;livereloadscript&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-constant)">l</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">head</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(r) &#125;)(</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.document);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// worker code ...</span></span></code></pre>`),o(r);var y=e(r,4),g=s(y),m=s(g),w=s(m),x=e(w);o(m),o(g),o(y),t(6),o(l);var p=e(l,2),c=e(s(p),6),f=s(c),_=s(f),b=s(_),I=e(b);o(_),o(f),o(c);var h=e(c,4),j=s(h),R=s(j),$=s(R),U=e($);o(R),o(j),o(h);var L=e(h,4),S=s(L),B=s(S),W=s(B),C=e(W);o(B),o(S),o(L),t(10),o(p);var q=e(p,2),k=e(s(q),8),K=s(k);a(K,()=>`<div class="filename">rollup-plugin-xxx.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;plugin-name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">load</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">resolveId</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">generateBundle</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(k);var d=e(k,8),Z=s(d);a(Z,()=>`<div class="filename">rollup.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;copy-worker&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">generateBundle</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.copyFileSync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./src/worker.js&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./public/build/worker.js&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(d);var A=e(d,18),J=s(A);a(J,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;copy-worker&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">load</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.addWatchFile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./src/worker.js&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">generateBundle</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.copyFileSync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./src/worker.js&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./public/build/worker.js&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(A),t(2),o(q),t(2),ss(()=>{n(w,"srcset",`${is}, ${rs} 2x`),n(x,"src",z),n(x,"srcset",`${z}, ${ls} 2x`),n(b,"srcset",`${cs}, ${hs} 2x`),n(I,"src",T),n(I,"srcset",`${T}, ${ps} 2x`),n($,"srcset",`${ds}, ${us} 2x`),n(U,"src",F),n(U,"srcset",`${F}, ${ks} 2x`),n(W,"srcset",`${ys}, ${gs} 2x`),n(C,"src",N),n(C,"srcset",`${N}, ${vs} 2x`)}),os(G,v)},$$slots:{default:!0}})),X()}export{As as component};
