import{s as Et,d as no,e as At,f as ut,n as $t}from"../chunks/scheduler.D6VJxl8L.js";import{S as zt,i as Dt,m as Vt,n as Wt,o as Nt,t as Jt,a as Ot,p as Rt,e,s as t,H as f,c as o,d as u,q as r,h as a,r as m,g as c,u as w,j as b,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as Ut,a as xt}from"../chunks/code-snippet.Gym6WUAG.js";import{B as Bt}from"../chunks/BlogLayout.BMJM32nZ.js";import{t as Ft}from"../chunks/twitter-card-image.C3bQ3Oc7.js";const Gt=""+new URL("../assets/module-bundlers.C1xUHOtD.webp",import.meta.url).href,Yt=""+new URL("../assets/module-bundlers.DMlCqSq_.webp",import.meta.url).href,Zt=""+new URL("../assets/module-bundlers.CVVuxGmG.png",import.meta.url).href,ft=""+new URL("../assets/module-bundlers.3xCqBzHn.png",import.meta.url).href;function Kt(L){let n,g,q='<a href="#what-is-a-module-bundler" id="what-is-a-module-bundler">What is a Module Bundler?</a>',C,v,_=`<span style="display: block; position: relative; padding-top: 31.542%; width: 100%;"><picture><source type="image/webp" srcset="${Yt}, ${Gt} 2x"/><img src="${ft}" srcset="${ft}, ${Zt} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="module bundlers" title="Module Bundlers: (left to right) Rollup, FuseBox, webpack, parcel"/></picture></span>`,M,P,lo='Module bundlers are tools frontend developers used to bundle <a href="/javascript-modules/">JavaScript modules</a> into a single JavaScript files that can be executed in the browser.',oe,I,ro='Examples of modern module bundlers <em>(in no particular order)</em> are: <a href="https://webpack.js.org" rel="nofollow">webpack</a>, <a href="https://rollupjs.org" rel="nofollow">rollup</a>, <a href="https://fuse-box.org" rel="nofollow">fusebox</a>, <a href="https://parceljs.org" rel="nofollow">parcel</a>, etc.',te,j,io="Module bundler is required because:",ae,S,po='<li>Browser does not support module system, <a href="https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/" rel="nofollow">although this is not entirely true nowadays</a></li> <li>It helps you manage the dependency relationship of your code, it will load modules in dependency order for you.</li> <li>It helps you to load your assets in dependency order, image asset, css asset, etc.</li>',ne,E,co="To illustrate, imagine you are building a web application, which is made up of multiple JavaScript files. You add JavaScript files into html via script tags:",le,A,zs,wt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/src/foo.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/src/bar.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/src/baz.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/src/qux.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/src/quux.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,re,$,ko="Each file requires a separate http requests, which is 5 round trip requests in order to get your application started. So it would be better if you can combine all 5 files into 1:",ie,z,Ds,gt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/dist/bundle.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,pe,D,ho="(Although with [HTTP/2](https://developers.google.com/web/fundamentals/performance/http2/), this is much less of a case right now)",ce,V,vo='So how do we generate the <code class="inline">dist/bundle.js</code>?',ke,W,yo="Several challenges arise in the process:",he,N,uo="<li>How do we <strong>maintain the order</strong> of the &quot;files&quot; to be included?<ul><li>It would be great that it is some sort of dependency order amongst the &quot;files&quot;</li></ul></li> <li>How do we <strong>prevent naming conflicts</strong> between &quot;files&quot;?</li> <li>How do we determine any unused &quot;file&quot; within the bundle?</li>",ve,J,xo="All of these can be solved if we know the relationship amongst each files, such as:",ye,O,fo="<li>Which file is depended on another?</li> <li>What are the interface exposed from a file? and</li> <li>Which exposed interfaces are being used by another?</li>",de,R,mo='These information, granted, can solve the challenges brought up respectively. So, what we need is a declarative method to describe the relationship between files, which led us to the <a href="/javascript-modules/">JavaScript Module System</a>.',ue,U,wo='<a href="https://requirejs.org/docs/commonjs.html" rel="nofollow">CommonJS</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" rel="nofollow">ES6 Modules</a> provides way for us to specify what files we are dependening on, and which of their interface we are using in our file.',xe,B,Vs,bt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// CommonJS</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> bar;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ES Modules</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> bar;</span></span></code></pre>`,Ws,d,F,go='<a href="#how-do-we-bundle" id="how-do-we-bundle">How do we bundle?</a>',fe,G,bo="With the information gathered from the module system, how do we link the files together and generate the bundle file that encapsulates everything?",me,Y,_o='If you scrutinize the bundle generated by <a href="https://webpack.js.org" rel="nofollow">webpack</a> and <a href="https://rollupjs.org" rel="nofollow">rollup</a>, you would notice that the 2 most popular bundler takes a totally different approach in bundling, and here I coined them, the <em><strong>&quot;webpack way&quot;</strong></em> and the <em><strong>&quot;rollup way&quot;</strong></em>.',we,Z,qo="Let's illustrate this with an example:",ge,K,Co='Say you have 3 files, <code class="inline">circle.js</code>, <code class="inline">square.js</code> and <code class="inline">app.js</code>:',be,Q,Ns,_t=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_e,X,Js,qt=`<div class="filename">square.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qe,ss,Os,Ct=`<div class="filename">app.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Rs,k,es,To='<a href="#the-webpack-way" id="the-webpack-way">The &quot;webpack way&quot;</a>',Ce,os,Ho='What would be the "webpack way" bundle looks like?',Te,ts,Us,Tt=`<div class="filename">webpack-bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  modules</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,He,as,Lo="<em>I have made some slight modifications for easier illustration</em>",Le,ns,Mo="First thing you would notice is the <strong>&quot;module map&quot;</strong>. It is a dictionary that maps the module name to the module itself, which is wrapped by a function. The &quot;module map&quot; is like a registry, it makes it easy to register modules by adding entries.",Me,ls,Po="Secondly, <strong>each module is wrapped by a function</strong>. The function simulates the module scope, where everything declared within the module is scoped within itself. The function itself is called the &quot;module factory function&quot;. As you can see, it takes in a few parameters, to allow the module to exports its interface, as well as to require from other modules.",Pe,rs,Io='Thirdly, the application is start via <code class="inline">webpackStart</code>, which is <strong>a function that glues everything together</strong>. The function itself, often called as the <em>&quot;runtime&quot;</em>, is the most important piece of the bundle. It uses the &quot;module map&quot; and the entry module to start the application.',Ie,is,Bs,Ht=`<div class="filename">webpack-bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; modules</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entry &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleCache</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> moduleName </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// if in cache, return the cached version</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (moduleCache[moduleName]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> moduleCache[moduleName];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// this will prevent infinite &quot;require&quot; loop</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// from circular dependencies</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    moduleCache[moduleName] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// &quot;require&quot;-ing the module,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// exported stuff will assigned to &quot;exports&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    modules[moduleName](</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> moduleCache[moduleName];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// start the program</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entry);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,je,ps,jo="<em>I have made some slight modifications for easier illustration</em>",Se,cs,So='<code class="inline">webpackStart</code> defines 2 things, the &quot;require&quot; function and the module cache. The &quot;require&quot; function is not the same as the <code class="inline">require</code> from CommonJS. &quot;require&quot; takes in the module name, and returns the exported interface from a module, eg: for <code class="inline">circle.js</code> it would be <code class="inline">{ default: function area(radius){ ... } }</code>. The exported interface is cached in the module cache, so that if we call &quot;require&quot; of the same module name repeatedly, the &quot;module factory function&quot; will only be executed once.',Ee,ks,Eo='With "require" defined, starting the application would be just "require"ing the entry module.',Fs,l,hs,Ao='<a href="#the-rollup-way" id="the-rollup-way">The &quot;rollup way&quot;</a>',Ae,vs,$o=`Now you've seen how webpack bundle looked like, let's take a look at the "rollup way" bundle:`,$e,ys,Gs,Lt=`<div class="filename">rollup-bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,ze,ds,zo="<em>I have made some slight modifications for easier illustration</em>",De,us,Do="Firstly, the key difference in the rollup bundle, is that it is much smaller compared to the webpack bundle. There is <strong>no module map</strong>, as compared to the &quot;webpack way&quot;. All the modules are <strong>&quot;flatten&quot; into the bundle</strong>. There is no function wrapping of modules. All the variables/functions that were declared within the module, is now declared into the global scope.",Ve,xs,Vo="If everything declared in individual module scope is now declared into the global scope, <em>what happened if 2 modules declare variable/function of the same name?</em>",We,fs,Wo='Well, rollup will <strong>rename the variable/function name</strong>, such that name collision do not happen. In our example, both <code class="inline">circle.js</code> and <code class="inline">square.js</code> have declared <code class="inline">function area(){}</code> within the module, when bundled, you see that both functions and their usage were renamed to avoid collision.',Ne,ms,No='<p><em>One of the side effects of not wrapping module with a function is the behavior of <code class="inline">eval</code>, see <a href="http://rollupjs.org/guide/en/#avoiding-eval" rel="nofollow">here</a> for more in-depth explanation</em></p>',Je,ws,Jo='Secondly, <strong>the order of the modules within the bundle matters</strong>. Well you can argue that <code class="inline">circle$area</code> and <code class="inline">square$area</code> can come after <code class="inline">console.log</code> and it will still work, yet <code class="inline">PI</code> has to be declared before the <code class="inline">console.log</code>, because of <a href="https://wesbos.com/temporal-dead-zone/" rel="nofollow">temporal dead zone</a>. So, sorting modules in order of their dependency matters for the &quot;rollup way&quot;.',Oe,gs,Oo='All in all, the "rollup way" seemed to be better than the "webpack way". It has a smaller bundle and less runtime overhead by removing all the functions.',Re,bs,Ro="<em>Is there a drawback of the &quot;rollup way&quot;?</em>",Ue,_s,Uo="Well, sometimes it does not work well with circular dependency. Let's take a look at this contrived example:",Be,qs,Ys,Mt=`<div class="filename">shape.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circle</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./circle&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">circle</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Fe,Cs,Zs,Pt=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./shape&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> _PI </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ge,Ts,Bo="<em>I have made some slight modifications for easier illustration</em>",Ye,Hs,Fo='In this example <code class="inline">shape.js</code> is depending on <code class="inline">circle.js</code> and <code class="inline">circle.js</code> is depending on <code class="inline">shape.js</code>. So, for rollup to sort out which module to come first than another in the output bundle, there&#39;s no &quot;correct&quot; answer for it. Either <code class="inline">circle.js</code> then <code class="inline">shape.js</code> or <code class="inline">shape.js</code> then <code class="inline">circle.js</code> is reasonable. So, you could possibly get the following output bundle:',Ze,Ls,Ks,It=`<div class="filename">rollup-bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// cirlce.js first</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// throws ReferenceError: PI is not defined</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$Area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> _PI </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// shape.js later</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">circle$Area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Ke,Ms,Go="You can tell this will be problematic right?",Qe,Ps,Yo="Is there a solution for this? A short answer is <strong>no</strong>.",Xe,Is,Zo="A &quot;simple&quot; fix is to not use a circular dependency. Rollup will <strong>throw warnings at you</strong> if it encountered one.",so,js,Ko='Well, what makes the example &quot;works&quot; is that we have statements that are immediately evaluated within the module. If we change the evaluation of <code class="inline">_PI</code> to be lazy:',eo,Ss,Qs,jt=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./shape&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// to be lazily evaluated</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_PI</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oo,Es,Qo="the order of modules now does not really matter much:",to,As,Xs,St=`<div class="filename">rollup-bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// cirlce.js first</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$Area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_PI</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// shape.js later</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">circle$Area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// prints 78.525</span></span></code></pre>`,ao,$s,Xo='This is because at the time <code class="inline">_PI</code> is evaluated, <code class="inline">PI</code> has already been defined.',se,T,st='<h2><a href="#summary" id="summary">Summary</a></h2> <p>So, let&#39;s summarize what we&#39;ve learned so far:</p> <ul><li><em>Module bundler</em> helped us to combine multiple JavaScript modules into 1 JavaScript file.</li> <li>Different bundler bundles differently, and we&#39;ve looked into 2 of the modern bundler, <code class="inline">webpack</code> and <code class="inline">rollup</code></li> <li>the &quot;webpack way&quot;:<ul><li>uses module map</li> <li>uses function to wrap each module</li> <li>has a runtime code that glues the module together</li></ul></li> <li>the &quot;rollup way&quot;:<ul><li>flatter and smaller bundle</li> <li>does not use function to wrap module</li> <li>order matters, require sorting based on dependency</li> <li>circular dependency may not work</li></ul></li></ul>',ee,H,et='<h2><a href="#references" id="references">References</a></h2> <ul><li><a href="https://webpack.js.org" rel="nofollow">Webpack</a></li> <li><a href="http://rollupjs.org/guide/en/" rel="nofollow">Rollup</a></li></ul>';return{c(){n=e("section"),g=e("h2"),g.innerHTML=q,C=t(),v=e("p"),v.innerHTML=_,M=t(),P=e("p"),P.innerHTML=lo,oe=t(),I=e("p"),I.innerHTML=ro,te=t(),j=e("p"),j.textContent=io,ae=t(),S=e("ul"),S.innerHTML=po,ne=t(),E=e("p"),E.textContent=co,le=t(),A=e("div"),zs=new f(!1),re=t(),$=e("p"),$.textContent=ko,ie=t(),z=e("div"),Ds=new f(!1),pe=t(),D=e("i"),D.textContent=ho,ce=t(),V=e("p"),V.innerHTML=vo,ke=t(),W=e("p"),W.textContent=yo,he=t(),N=e("ul"),N.innerHTML=uo,ve=t(),J=e("p"),J.textContent=xo,ye=t(),O=e("ul"),O.innerHTML=fo,de=t(),R=e("p"),R.innerHTML=mo,ue=t(),U=e("p"),U.innerHTML=wo,xe=t(),B=e("div"),Vs=new f(!1),Ws=t(),d=e("section"),F=e("h2"),F.innerHTML=go,fe=t(),G=e("p"),G.textContent=bo,me=t(),Y=e("p"),Y.innerHTML=_o,we=t(),Z=e("p"),Z.textContent=qo,ge=t(),K=e("p"),K.innerHTML=Co,be=t(),Q=e("div"),Ns=new f(!1),_e=t(),X=e("div"),Js=new f(!1),qe=t(),ss=e("div"),Os=new f(!1),Rs=t(),k=e("section"),es=e("h3"),es.innerHTML=To,Ce=t(),os=e("p"),os.textContent=Ho,Te=t(),ts=e("div"),Us=new f(!1),He=t(),as=e("p"),as.innerHTML=Lo,Le=t(),ns=e("p"),ns.innerHTML=Mo,Me=t(),ls=e("p"),ls.innerHTML=Po,Pe=t(),rs=e("p"),rs.innerHTML=Io,Ie=t(),is=e("div"),Bs=new f(!1),je=t(),ps=e("p"),ps.innerHTML=jo,Se=t(),cs=e("p"),cs.innerHTML=So,Ee=t(),ks=e("p"),ks.textContent=Eo,Fs=t(),l=e("section"),hs=e("h3"),hs.innerHTML=Ao,Ae=t(),vs=e("p"),vs.textContent=$o,$e=t(),ys=e("div"),Gs=new f(!1),ze=t(),ds=e("p"),ds.innerHTML=zo,De=t(),us=e("p"),us.innerHTML=Do,Ve=t(),xs=e("p"),xs.innerHTML=Vo,We=t(),fs=e("p"),fs.innerHTML=Wo,Ne=t(),ms=e("blockquote"),ms.innerHTML=No,Je=t(),ws=e("p"),ws.innerHTML=Jo,Oe=t(),gs=e("p"),gs.textContent=Oo,Re=t(),bs=e("p"),bs.innerHTML=Ro,Ue=t(),_s=e("p"),_s.textContent=Uo,Be=t(),qs=e("div"),Ys=new f(!1),Fe=t(),Cs=e("div"),Zs=new f(!1),Ge=t(),Ts=e("p"),Ts.innerHTML=Bo,Ye=t(),Hs=e("p"),Hs.innerHTML=Fo,Ze=t(),Ls=e("div"),Ks=new f(!1),Ke=t(),Ms=e("p"),Ms.textContent=Go,Qe=t(),Ps=e("p"),Ps.innerHTML=Yo,Xe=t(),Is=e("p"),Is.innerHTML=Zo,so=t(),js=e("p"),js.innerHTML=Ko,eo=t(),Ss=e("div"),Qs=new f(!1),oo=t(),Es=e("p"),Es.textContent=Qo,to=t(),As=e("div"),Xs=new f(!1),ao=t(),$s=e("p"),$s.innerHTML=Xo,se=t(),T=e("section"),T.innerHTML=st,ee=t(),H=e("section"),H.innerHTML=et,this.h()},l(h){n=o(h,"SECTION",{});var i=u(n);g=o(i,"H2",{"data-svelte-h":!0}),r(g)!=="svelte-130joye"&&(g.innerHTML=q),C=a(i),v=o(i,"P",{"data-svelte-h":!0}),r(v)!=="svelte-p9ilm5"&&(v.innerHTML=_),M=a(i),P=o(i,"P",{"data-svelte-h":!0}),r(P)!=="svelte-1mne4gv"&&(P.innerHTML=lo),oe=a(i),I=o(i,"P",{"data-svelte-h":!0}),r(I)!=="svelte-eqrhtz"&&(I.innerHTML=ro),te=a(i),j=o(i,"P",{"data-svelte-h":!0}),r(j)!=="svelte-1ifiq3b"&&(j.textContent=io),ae=a(i),S=o(i,"UL",{"data-svelte-h":!0}),r(S)!=="svelte-1lav0jv"&&(S.innerHTML=po),ne=a(i),E=o(i,"P",{"data-svelte-h":!0}),r(E)!=="svelte-navaan"&&(E.textContent=co),le=a(i),A=o(i,"DIV",{class:!0});var ot=u(A);zs=m(ot,!1),ot.forEach(c),re=a(i),$=o(i,"P",{"data-svelte-h":!0}),r($)!=="svelte-1mzgwq2"&&($.textContent=ko),ie=a(i),z=o(i,"DIV",{class:!0});var tt=u(z);Ds=m(tt,!1),tt.forEach(c),pe=a(i),D=o(i,"I",{"data-svelte-h":!0}),r(D)!=="svelte-1a9r0ta"&&(D.textContent=ho),ce=a(i),V=o(i,"P",{"data-svelte-h":!0}),r(V)!=="svelte-euooxz"&&(V.innerHTML=vo),ke=a(i),W=o(i,"P",{"data-svelte-h":!0}),r(W)!=="svelte-1nwcnpj"&&(W.textContent=yo),he=a(i),N=o(i,"UL",{"data-svelte-h":!0}),r(N)!=="svelte-1d3ca6i"&&(N.innerHTML=uo),ve=a(i),J=o(i,"P",{"data-svelte-h":!0}),r(J)!=="svelte-4sdf8m"&&(J.textContent=xo),ye=a(i),O=o(i,"UL",{"data-svelte-h":!0}),r(O)!=="svelte-131vppj"&&(O.innerHTML=fo),de=a(i),R=o(i,"P",{"data-svelte-h":!0}),r(R)!=="svelte-ghrlxn"&&(R.innerHTML=mo),ue=a(i),U=o(i,"P",{"data-svelte-h":!0}),r(U)!=="svelte-1nk56xb"&&(U.innerHTML=wo),xe=a(i),B=o(i,"DIV",{class:!0});var at=u(B);Vs=m(at,!1),at.forEach(c),i.forEach(c),Ws=a(h),d=o(h,"SECTION",{});var x=u(d);F=o(x,"H2",{"data-svelte-h":!0}),r(F)!=="svelte-1075izk"&&(F.innerHTML=go),fe=a(x),G=o(x,"P",{"data-svelte-h":!0}),r(G)!=="svelte-ji9com"&&(G.textContent=bo),me=a(x),Y=o(x,"P",{"data-svelte-h":!0}),r(Y)!=="svelte-142kpqf"&&(Y.innerHTML=_o),we=a(x),Z=o(x,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-eninvp"&&(Z.textContent=qo),ge=a(x),K=o(x,"P",{"data-svelte-h":!0}),r(K)!=="svelte-y17l57"&&(K.innerHTML=Co),be=a(x),Q=o(x,"DIV",{class:!0});var nt=u(Q);Ns=m(nt,!1),nt.forEach(c),_e=a(x),X=o(x,"DIV",{class:!0});var lt=u(X);Js=m(lt,!1),lt.forEach(c),qe=a(x),ss=o(x,"DIV",{class:!0});var rt=u(ss);Os=m(rt,!1),rt.forEach(c),x.forEach(c),Rs=a(h),k=o(h,"SECTION",{});var y=u(k);es=o(y,"H3",{"data-svelte-h":!0}),r(es)!=="svelte-1hl8593"&&(es.innerHTML=To),Ce=a(y),os=o(y,"P",{"data-svelte-h":!0}),r(os)!=="svelte-sgontb"&&(os.textContent=Ho),Te=a(y),ts=o(y,"DIV",{class:!0});var it=u(ts);Us=m(it,!1),it.forEach(c),He=a(y),as=o(y,"P",{"data-svelte-h":!0}),r(as)!=="svelte-ewdh8h"&&(as.innerHTML=Lo),Le=a(y),ns=o(y,"P",{"data-svelte-h":!0}),r(ns)!=="svelte-knniep"&&(ns.innerHTML=Mo),Me=a(y),ls=o(y,"P",{"data-svelte-h":!0}),r(ls)!=="svelte-1xakdlb"&&(ls.innerHTML=Po),Pe=a(y),rs=o(y,"P",{"data-svelte-h":!0}),r(rs)!=="svelte-kgv6f7"&&(rs.innerHTML=Io),Ie=a(y),is=o(y,"DIV",{class:!0});var pt=u(is);Bs=m(pt,!1),pt.forEach(c),je=a(y),ps=o(y,"P",{"data-svelte-h":!0}),r(ps)!=="svelte-ewdh8h"&&(ps.innerHTML=jo),Se=a(y),cs=o(y,"P",{"data-svelte-h":!0}),r(cs)!=="svelte-alsu96"&&(cs.innerHTML=So),Ee=a(y),ks=o(y,"P",{"data-svelte-h":!0}),r(ks)!=="svelte-1sw79yd"&&(ks.textContent=Eo),y.forEach(c),Fs=a(h),l=o(h,"SECTION",{});var p=u(l);hs=o(p,"H3",{"data-svelte-h":!0}),r(hs)!=="svelte-xjchyc"&&(hs.innerHTML=Ao),Ae=a(p),vs=o(p,"P",{"data-svelte-h":!0}),r(vs)!=="svelte-qrq3x"&&(vs.textContent=$o),$e=a(p),ys=o(p,"DIV",{class:!0});var ct=u(ys);Gs=m(ct,!1),ct.forEach(c),ze=a(p),ds=o(p,"P",{"data-svelte-h":!0}),r(ds)!=="svelte-ewdh8h"&&(ds.innerHTML=zo),De=a(p),us=o(p,"P",{"data-svelte-h":!0}),r(us)!=="svelte-nwf9ex"&&(us.innerHTML=Do),Ve=a(p),xs=o(p,"P",{"data-svelte-h":!0}),r(xs)!=="svelte-q8oqjl"&&(xs.innerHTML=Vo),We=a(p),fs=o(p,"P",{"data-svelte-h":!0}),r(fs)!=="svelte-1xrruiq"&&(fs.innerHTML=Wo),Ne=a(p),ms=o(p,"BLOCKQUOTE",{"data-svelte-h":!0}),r(ms)!=="svelte-1csoi9d"&&(ms.innerHTML=No),Je=a(p),ws=o(p,"P",{"data-svelte-h":!0}),r(ws)!=="svelte-10q6vqh"&&(ws.innerHTML=Jo),Oe=a(p),gs=o(p,"P",{"data-svelte-h":!0}),r(gs)!=="svelte-ubq29h"&&(gs.textContent=Oo),Re=a(p),bs=o(p,"P",{"data-svelte-h":!0}),r(bs)!=="svelte-1i33wt7"&&(bs.innerHTML=Ro),Ue=a(p),_s=o(p,"P",{"data-svelte-h":!0}),r(_s)!=="svelte-b519xp"&&(_s.textContent=Uo),Be=a(p),qs=o(p,"DIV",{class:!0});var kt=u(qs);Ys=m(kt,!1),kt.forEach(c),Fe=a(p),Cs=o(p,"DIV",{class:!0});var ht=u(Cs);Zs=m(ht,!1),ht.forEach(c),Ge=a(p),Ts=o(p,"P",{"data-svelte-h":!0}),r(Ts)!=="svelte-ewdh8h"&&(Ts.innerHTML=Bo),Ye=a(p),Hs=o(p,"P",{"data-svelte-h":!0}),r(Hs)!=="svelte-1iz54qs"&&(Hs.innerHTML=Fo),Ze=a(p),Ls=o(p,"DIV",{class:!0});var vt=u(Ls);Ks=m(vt,!1),vt.forEach(c),Ke=a(p),Ms=o(p,"P",{"data-svelte-h":!0}),r(Ms)!=="svelte-fytsfm"&&(Ms.textContent=Go),Qe=a(p),Ps=o(p,"P",{"data-svelte-h":!0}),r(Ps)!=="svelte-39xhzz"&&(Ps.innerHTML=Yo),Xe=a(p),Is=o(p,"P",{"data-svelte-h":!0}),r(Is)!=="svelte-1upyd40"&&(Is.innerHTML=Zo),so=a(p),js=o(p,"P",{"data-svelte-h":!0}),r(js)!=="svelte-1deost9"&&(js.innerHTML=Ko),eo=a(p),Ss=o(p,"DIV",{class:!0});var yt=u(Ss);Qs=m(yt,!1),yt.forEach(c),oo=a(p),Es=o(p,"P",{"data-svelte-h":!0}),r(Es)!=="svelte-162h6iq"&&(Es.textContent=Qo),to=a(p),As=o(p,"DIV",{class:!0});var dt=u(As);Xs=m(dt,!1),dt.forEach(c),ao=a(p),$s=o(p,"P",{"data-svelte-h":!0}),r($s)!=="svelte-1fy3ojw"&&($s.innerHTML=Xo),p.forEach(c),se=a(h),T=o(h,"SECTION",{"data-svelte-h":!0}),r(T)!=="svelte-1n9zl8i"&&(T.innerHTML=st),ee=a(h),H=o(h,"SECTION",{"data-svelte-h":!0}),r(H)!=="svelte-vhn8jh"&&(H.innerHTML=et),this.h()},h(){zs.a=null,w(A,"class","code-section"),Ds.a=null,w(z,"class","code-section"),Vs.a=null,w(B,"class","code-section"),Ns.a=null,w(Q,"class","code-section"),Js.a=null,w(X,"class","code-section"),Os.a=null,w(ss,"class","code-section"),Us.a=null,w(ts,"class","code-section"),Bs.a=null,w(is,"class","code-section"),Gs.a=null,w(ys,"class","code-section"),Ys.a=null,w(qs,"class","code-section"),Zs.a=null,w(Cs,"class","code-section"),Ks.a=null,w(Ls,"class","code-section"),Qs.a=null,w(Ss,"class","code-section"),Xs.a=null,w(As,"class","code-section")},m(h,i){b(h,n,i),s(n,g),s(n,C),s(n,v),s(n,M),s(n,P),s(n,oe),s(n,I),s(n,te),s(n,j),s(n,ae),s(n,S),s(n,ne),s(n,E),s(n,le),s(n,A),zs.m(wt,A),s(n,re),s(n,$),s(n,ie),s(n,z),Ds.m(gt,z),s(n,pe),s(n,D),s(n,ce),s(n,V),s(n,ke),s(n,W),s(n,he),s(n,N),s(n,ve),s(n,J),s(n,ye),s(n,O),s(n,de),s(n,R),s(n,ue),s(n,U),s(n,xe),s(n,B),Vs.m(bt,B),b(h,Ws,i),b(h,d,i),s(d,F),s(d,fe),s(d,G),s(d,me),s(d,Y),s(d,we),s(d,Z),s(d,ge),s(d,K),s(d,be),s(d,Q),Ns.m(_t,Q),s(d,_e),s(d,X),Js.m(qt,X),s(d,qe),s(d,ss),Os.m(Ct,ss),b(h,Rs,i),b(h,k,i),s(k,es),s(k,Ce),s(k,os),s(k,Te),s(k,ts),Us.m(Tt,ts),s(k,He),s(k,as),s(k,Le),s(k,ns),s(k,Me),s(k,ls),s(k,Pe),s(k,rs),s(k,Ie),s(k,is),Bs.m(Ht,is),s(k,je),s(k,ps),s(k,Se),s(k,cs),s(k,Ee),s(k,ks),b(h,Fs,i),b(h,l,i),s(l,hs),s(l,Ae),s(l,vs),s(l,$e),s(l,ys),Gs.m(Lt,ys),s(l,ze),s(l,ds),s(l,De),s(l,us),s(l,Ve),s(l,xs),s(l,We),s(l,fs),s(l,Ne),s(l,ms),s(l,Je),s(l,ws),s(l,Oe),s(l,gs),s(l,Re),s(l,bs),s(l,Ue),s(l,_s),s(l,Be),s(l,qs),Ys.m(Mt,qs),s(l,Fe),s(l,Cs),Zs.m(Pt,Cs),s(l,Ge),s(l,Ts),s(l,Ye),s(l,Hs),s(l,Ze),s(l,Ls),Ks.m(It,Ls),s(l,Ke),s(l,Ms),s(l,Qe),s(l,Ps),s(l,Xe),s(l,Is),s(l,so),s(l,js),s(l,eo),s(l,Ss),Qs.m(jt,Ss),s(l,oo),s(l,Es),s(l,to),s(l,As),Xs.m(St,As),s(l,ao),s(l,$s),b(h,se,i),b(h,T,i),b(h,ee,i),b(h,H,i)},p:$t,d(h){h&&(c(n),c(Ws),c(d),c(Rs),c(k),c(Fs),c(l),c(se),c(T),c(ee),c(H))}}}function Qt(L){let n,g;const q=[L[0],mt];let C={$$slots:{default:[Kt]},$$scope:{ctx:L}};for(let v=0;v<q.length;v+=1)C=no(C,q[v]);return n=new Bt({props:C}),{c(){Vt(n.$$.fragment)},l(v){Wt(n.$$.fragment,v)},m(v,_){Nt(n,v,_),g=!0},p(v,[_]){const M=_&1?Ut(q,[_&1&&xt(v[0]),_&0&&xt(mt)]):{};_&2&&(M.$$scope={dirty:_,ctx:v}),n.$set(M)},i(v){g||(Jt(n.$$.fragment,v),g=!0)},o(v){Ot(n.$$.fragment,v),g=!1},d(v){Rt(n,v)}}}const mt={title:"What is module bundler and how does it work?",date:"2019-08-30T08:00:00Z",lastUpdated:"2019-08-30T15:05:00Z",description:"understand how module bundler works",tags:["JavaScript","module bundler","dev tool","webpack"],series:"Write a module bundler",label:"blog",tableOfContents:[{link:"what-is-a-module-bundler",title:"What is a Module Bundler?"},{link:"how-do-we-bundle",title:"How do we bundle?",nested:[{link:"the-webpack-way",title:'The "webpack way"'},{link:"the-rollup-way",title:'The "rollup way"'}]},{link:"summary",title:"Summary"},{link:"references",title:"References"}]};function Xt(L,n,g){return At("blog",{image:Ft}),L.$$set=q=>{g(0,n=no(no({},n),ut(q)))},n=ut(n),[n]}class na extends zt{constructor(n){super(),Dt(this,n,Xt,Qt,Et,{})}}export{na as component};
