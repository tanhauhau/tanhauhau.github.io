import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as bs,g as ms,d as fs,b as gs,s as a,f as ws,e as s,t as _s,a as Is,r as o,n as e}from"../chunks/C2PHntuy.js";import{h as n}from"../chunks/C3QlhiH-.js";import{s as t}from"../chunks/CEusTUg_.js";import{i as Ss}from"../chunks/BQOOHHT8.js";import{l as As,s as Ts}from"../chunks/gzNpScmH.js";import{B as Ls}from"../chunks/B1caYEk9.js";const O=""+new URL("../assets/targeting.C8IfpLql.png",import.meta.url).href,js=""+new URL("../assets/targeting.xaTVUejb.png",import.meta.url).href,Ws=""+new URL("../assets/targeting.BT4x3SXR.webp",import.meta.url).href,Rs=""+new URL("../assets/targeting.CRt36Eyk.webp",import.meta.url).href,q=""+new URL("../assets/output.Dyiu_jsn.png",import.meta.url).href,Cs=""+new URL("../assets/output.CiZmfq_T.png",import.meta.url).href,Js=""+new URL("../assets/output.Falurdcb.webp",import.meta.url).href,Vs=""+new URL("../assets/output.-8INH-8b.webp",import.meta.url).href,M=""+new URL("../assets/member-expression.CTwArwjN.png",import.meta.url).href,Zs=""+new URL("../assets/member-expression.ES7Eznqa.png",import.meta.url).href,Gs=""+new URL("../assets/member-expression.DKa29SwA.webp",import.meta.url).href,Hs=""+new URL("../assets/member-expression.B-KsuLeg.webp",import.meta.url).href,Us=""+new URL("../assets/hero-twitter.BXRmUEGO.jpg",import.meta.url).href,z={title:"Step-by-step guide for writing a custom babel transformation",date:"2019-09-12T08:00:00Z",tags:["JavaScript","babel","AST","transform"],description:"Writing your first babel plugin",series:"Intermediate Babel",label:"blog",tableOfContents:[{link:"what-is-babel",title:"What is babel?",nested:[{link:"what-is-abstract-syntax-tree-ast",title:"What is Abstract Syntax Tree (AST)?"}]},{link:"how-to-use-babel-to-transform-code",title:"How to use babel to transform code",nested:[{link:"1-have-in-mind-what-you-want-to-transform-from-and-transform-into",title:"1. Have in mind what you want to transform from and transform into"},{link:"2-know-what-to-target-on-the-ast",title:"2. Know what to target on the AST"},{link:"3-know-how-the-transformed-ast-looks-like",title:"3. Know how the transformed AST looks like"},{link:"4-write-code",title:"4. Write code",nested:[{link:"transforming-variable-name",title:"Transforming variable name"},{link:"transforming-strings",title:"Transforming strings"}]}]},{link:"summary",title:"Summary"},{link:"further-resources",title:"Further resources"},{link:"reference",title:"Reference"}]},{title:qs,date:Ms,tags:zs,description:Qs,series:Ds,label:so,tableOfContents:oo}=z;var Bs=gs(`<p>Today, I will share a step-by-step guide for writing a custom <a href="https://babeljs.io/docs/en/babel-core" rel="nofollow">babel</a> transformation. You can use this technique to write your own automated code modifications, refactoring and code generation.</p> <section><h2><a href="#what-is-babel" id="what-is-babel">What is babel?</a></h2> <p><a href="https://babeljs.io/docs/en/" rel="nofollow">Babel</a> is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a <a href="https://babeljs.io/docs/en/plugins" rel="nofollow">plugin system</a> to do code transformation, so anyone can write their own transformation plugin for babel.</p> <p>Before you get started writing a transformation plugin for babel, you would need to know what is an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow">Abstract Syntax Tree (AST)</a>.</p></section> <section><h3><a href="#what-is-abstract-syntax-tree-ast" id="what-is-abstract-syntax-tree-ast">What is Abstract Syntax Tree (AST)?</a></h3> <p>I am not sure I can explain this better than the amazing articles out there on the web:</p> <ul><li><a href="https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff" rel="nofollow">Leveling Up One‚Äôs Parsing Game With ASTs</a> by <a href="https://twitter.com/vaidehijoshi" rel="nofollow">Vaidehi Joshi</a> * <em>(Highly recommend this one! üëç)</em></li> <li>Wikipedia's <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow">Abstract syntax tree</a></li> <li><a href="https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27" rel="nofollow">What is an Abstract Syntax Tree</a> by <a href="https://twitter.com/ngArchangel" rel="nofollow">Chidume Nnamdi</a></li></ul> <p>To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the <a href="https://github.com/estree/estree" rel="nofollow">estree specification</a>.</p> <p>AST represents your code, the structure and the meaning of your code. So it allows the compiler like <a href="https://babeljs.io" rel="nofollow">babel</a> to understand the code and make specific meaningful transformation to it.</p> <p>So now you know what is AST, let's write a custom babel transformation to modify your code using AST.</p></section> <section><h2><a href="#how-to-use-babel-to-transform-code" id="how-to-use-babel-to-transform-code">How to use babel to transform code</a></h2> <p>The following is the general template of using babel to do code transformation:</p> <div class="code-section"><!></div> <blockquote><p>You would need to install <a href="https://www.npmjs.com/package/@babel/core" rel="nofollow">@babel/core</a> to run this. <code class="inline">@babel/parser</code>, <code class="inline">@babel/traverse</code>, <code class="inline">@babel/generator</code> are all dependencies of <code class="inline">@babel/core</code>, so installing <code class="inline">@babel/core</code> would suffice.</p></blockquote> <p>So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST.</p> <div class="code-section"><!></div> <p>However, we can use another API from <code class="inline">babel</code> to do all the above:</p> <div class="code-section"><!></div> <p>Now, you have written your first <a href="https://babeljs.io/docs/en/plugins" rel="nofollow">babel transform plugin</a> that replace all variable named <code class="inline">n</code> to <code class="inline">x</code>, how cool is that?!</p> <blockquote><p>Extract out the function <code class="inline">myCustomPlugin</code> to a new file and export it. <a href="https://medium.com/@bretcameron/how-to-publish-your-first-npm-package-b224296fc57b" rel="nofollow">Package and publish your file as a npm package</a> and you can proudly say you have published a babel plugin! üéâüéâ</p></blockquote> <p>At this point, you must have thought: <em>"Yes I've just written a babel plugin, but I have no idea how it works..."</em>, so fret not, let's dive in on how you can write the babel transformation plugin yourself!</p> <p>So, here is the step-by-step guide to do it:</p></section> <section><h3><a href="#1-have-in-mind-what-you-want-to-transform-from-and-transform-into" id="1-have-in-mind-what-you-want-to-transform-from-and-transform-into">1. Have in mind what you want to transform from and transform into</a></h3> <p>In this example, I want to prank my colleague by creating a babel plugin that will:</p> <ul><li>reverse all the variables' and functions' names</li> <li>split out string into individual characters</li></ul> <div class="code-section"><!></div> <p>into</p> <div class="code-section"><!></div> <p>Well, we have to keep the <code class="inline">console.log</code>, so that even the code is hardly readable, it is still working fine. <em>(I wouldn't want to break the production code!)</em></p></section> <section><h3><a href="#2-know-what-to-target-on-the-ast" id="2-know-what-to-target-on-the-ast">2. Know what to target on the AST</a></h3> <p>Head down to a <a href="https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0=" rel="nofollow">babel AST explorer</a>, click on different parts of the code and see where / how it is represented on the AST:</p> <p><span style="display: block; position: relative; padding-top: 15.703%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="targeting" title="Selecting the code on the left and see the corresponding part of the AST light up on the right"/></picture></span></p> <p>If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code.</p> <p>So, now we know that we need to target:</p> <ul><li><strong>Identifier</strong> for variable and function names</li> <li><strong>StringLiteral</strong> for the string.</li></ul></section> <section><h3><a href="#3-know-how-the-transformed-ast-looks-like" id="3-know-how-the-transformed-ast-looks-like">3. Know how the transformed AST looks like</a></h3> <p>Head down to the <a href="https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlLCJoaWRlQ29tbWVudHMiOnRydWV9LCJjb2RlIjoiZnVuY3Rpb24gdGVlcmcoZW1hbikge1xuICByZXR1cm4gXCJIXCIgKyBcImVcIiArIFwibFwiICsgXCJsXCIgKyBcIm9cIiArIFwiIFwiICsgZW1hbjtcbn1cblxuY29uc29sZS5sb2codGVlcmcoXCJ0XCIgKyBcImFcIiArIFwiblwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiKSk7IC8vIEhlbGxvIHRhbmhhdWhhdVxuIn0=" rel="nofollow">babel AST explorer</a> again, but this time around with the output code you want to generate.</p> <p><span style="display: block; position: relative; padding-top: 42.782%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="output" title="You can see that what used to be a StringLiteral is now a nested BinaryExpression"/></picture></span></p> <p>Play around and think how you can transform from the previous AST to the current AST.</p> <p>For example, you can see that <code class="inline">'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman</code> is formed by nested <code class="inline">BinaryExpression</code> with <code class="inline">StringLiteral</code>.</p></section> <section><h3><a href="#4-write-code" id="4-write-code">4. Write code</a></h3> <p>Now look at our code again:</p> <div class="code-section"><!></div> <p>The transformation uses <a href="https://en.wikipedia.org/wiki/Visitor_pattern" rel="nofollow">the visitor pattern</a>.</p> <p>During the traversal phase, babel will do a <a href="https://en.wikipedia.org/wiki/Depth-first_search" rel="nofollow">depth-first search traversal</a> and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting.</p> <p>In the visitor object, you can specify the name of the node you want to be <code class="inline">callback</code>ed:</p> <div class="code-section"><!></div> <p>Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:</p> <div class="code-section"><!></div> <hr/> <p>Before we continue, let's look at the parameter of <code class="inline">Identifer(path) &#123;&#125;</code>. It says <code class="inline">path</code> instead of <code class="inline">node</code>, what is the difference between <code class="inline">path</code> and <code class="inline">node</code>? ü§∑‚Äç</p> <p>In babel, <code class="inline">path</code> is an abstraction above <code class="inline">node</code>, it provides the link between nodes, ie the <code class="inline">parent</code> of the node, as well as information such as the <code class="inline">scope</code>, <code class="inline">context</code>, etc. Besides, the <code class="inline">path</code> provides method such as <code class="inline">replaceWith</code>, <code class="inline">insertBefore</code>, <code class="inline">remove</code>, etc that will update and reflect on the underlying AST node.</p> <blockquote><p>You can read more detail about <code class="inline">path</code> in <a href="https://jamie.build" rel="nofollow">Jamie Kyle</a>'s <a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#paths" rel="nofollow">babel handbook</a></p></blockquote> <hr/> <p>So let's continue writing our babel plugin.</p></section> <section><h4><a href="#transforming-variable-name" id="transforming-variable-name">Transforming variable name</a></h4> <p>As we can see from the <a href="https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0=" rel="nofollow">AST explorer</a>, the name of the <code class="inline">Identifier</code> is stored in the property called <code class="inline">name</code>, so what we will do is to reverse the <code class="inline">name</code>.</p> <div class="code-section"><!></div> <p>Run it and you will see:</p> <div class="code-section"><!></div> <p>We are almost there, except we've accidentally reversed <code class="inline">console.log</code> as well. How can we prevent that?</p> <p>Take a look at the AST again:</p> <p><span style="display: block; position: relative; padding-top: 18.570%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="member expression"/></picture></span></p> <p><code class="inline">console.log</code> is part of the <code class="inline">MemberExpression</code>, with the <code class="inline">object</code> as <code class="inline">"console"</code> and <code class="inline">property</code> as <code class="inline">"log"</code>.</p> <p>So let's check that if our current <code class="inline">Identifier</code> is within this <code class="inline">MemberExpression</code> and we will not reverse the name:</p> <div class="code-section"><!></div> <p>And yes, now you get it right!</p> <div class="code-section"><!></div> <p>So, why do we have to check whether the <code class="inline">Identifier</code>'s parent is not a <code class="inline">console.log</code> <code class="inline">MemberExpression</code>? Why don't we just compare whether the current <code class="inline">Identifier.name === 'console' || Identifier.name === 'log'</code>?</p> <p>You can do that, except that it will not reverse the variable name if it is named <code class="inline">console</code> or <code class="inline">log</code>:</p> <div class="code-section"><!></div> <blockquote><p>So, how do I know the method <code class="inline">isMemberExpression</code> and <code class="inline">isIdentifier</code>? Well, all the node types specified in the <a href="https://babeljs.io/docs/en/babel-types" rel="nofollow">@babel/types</a> have the <code class="inline">isXxxx</code> validator function counterpart, eg: <code class="inline">anyTypeAnnotation</code> function will have a <code class="inline">isAnyTypeAnnotation</code> validator. If you want to know the exhaustive list of the validator functions, you can head over <a href="https://github.com/babel/babel/blob/master/packages/babel-types/src/validators/generated/index.js" rel="nofollow">to the actual source code</a>.</p></blockquote></section> <section><h4><a href="#transforming-strings" id="transforming-strings">Transforming strings</a></h4> <p>The next step is to generate a nested <code class="inline">BinaryExpression</code> out of <code class="inline">StringLiteral</code>.</p> <p>To create an AST node, you can use the utility function from <a href="https://babeljs.io/docs/en/babel-types" rel="nofollow"><code class="inline">@babel/types</code></a>. <code class="inline">@babel/types</code> is also available via <code class="inline">babel.types</code> from <code class="inline">@babel/core</code>.</p> <div class="code-section"><!></div> <p>So, we split the content of the <code class="inline">StringLiteral</code>, which is in <code class="inline">path.node.value</code>, make each character a <code class="inline">StringLiteral</code>, and combine them with <code class="inline">BinaryExpression</code>. Finally, we replace the <code class="inline">StringLiteral</code> with the newly created node.</p> <p>...And that's it! Except, we ran into Stack Overflow üòÖ:</p> <div class="code-section"><!></div> <p>Why ü§∑‚Äç ?</p> <p>Well, that's because for each <code class="inline">StringLiteral</code> we created more <code class="inline">StringLiteral</code>, and in each of those <code class="inline">StringLiteral</code>, we are "creating" more <code class="inline">StringLiteral</code>. Although we will replace a <code class="inline">StringLiteral</code> with another <code class="inline">StringLiteral</code>, babel will treat it as a new node and will visit the newly created <code class="inline">StringLiteral</code>, thus the infinite recursive and stack overflow.</p> <p>So, how do we tell babel that once we replaced the <code class="inline">StringLiteral</code> with the <code class="inline">newNode</code>, babel can stop and don't have to go down and visit the newly created node anymore?</p> <p>We can use <code class="inline">path.skip()</code> to skip traversing the children of the current path:</p> <div class="code-section"><!></div> <p>...And yes it works now with now stack overflow!</p></section> <section><h2><a href="#summary" id="summary">Summary</a></h2> <p>So, here we have it, our first code transformation with babel:</p> <div class="code-section"><!></div> <p>A summary of the steps on how we get here:</p> <ol><li>Have in mind what you want to transform from and transform into</li> <li>Know what to target on the AST</li> <li>Know how the transformed AST looks like</li> <li>Write code</li></ol></section> <section><h2><a href="#further-resources" id="further-resources">Further resources</a></h2> <p>If you are interested to learn more, <a href="https://github.com/babel/babel/tree/master/packages" rel="nofollow">babel's Github repo</a> is always the best place to find out more code examples of writing a babel transformation.</p> <p>Head down to <a href="https://github.com/babel/babel/tree/master/packages" rel="nofollow">https://github.com/babel/babel</a>, and look for <code class="inline">babel-plugin-transform-*</code> or <code class="inline">babel-plugin-proposal-*</code> folders, they are all babel transformation plugin, where you can find code on how babel <a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-nullish-coalescing-operator" rel="nofollow">transform the nullish coalescing operator</a>, <a href="https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-optional-chaining" rel="nofollow">optional chaining</a> and many more.</p> <blockquote><p><strong>Manipulating AST with JavaScript using Babel</strong></p> <p>If you like what you've read so far, and want to learn how you could do it with Babel. I've created a <a href="https://gum.co/manipulating-ast-with-javascript" rel="nofollow">video course</a>, showing you step-by-step, how to write a babel plugin and codemod.</p> <p>In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals.</p> <p><strong><a href="https://gum.co/manipulating-ast-with-javascript" rel="nofollow">Sounds interesting, let's take a look at the video course</a></strong></p></blockquote></section> <section><h2><a href="#reference" id="reference">Reference</a></h2> <ul><li><a href="https://babeljs.io/docs/en/" rel="nofollow">Babel docs</a> & <a href="https://github.com/babel/babel" rel="nofollow">Github repo</a></li> <li><a href="https://github.com/jamiebuilds/babel-handbook" rel="nofollow">Babel Handbook</a> by <a href="https://jamie.build/" rel="nofollow">Jamie Kyle</a></li> <li><a href="https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff" rel="nofollow">Leveling Up One‚Äôs Parsing Game With ASTs</a> by <a href="https://twitter.com/vaidehijoshi" rel="nofollow">Vaidehi Joshi</a></li></ul></section>`,1);function ao(Q,S){const D=As(S,["children","$$slots","$$events","$$legacy"]);bs(S,!1),ms("blog",{image:Us}),Ss(),Ls(Q,Ts(()=>D,()=>z,{children:(ss,Fs)=>{var A=Bs(),l=a(ws(A),6),r=a(s(l),4),os=s(r);n(os,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; parse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/parser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> traverse </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/traverse&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> generate </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/generator&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// parse the code -&gt; ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// transform the ast</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">traverse</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">enter</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// generate code &lt;- ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generate</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> code);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`),o(r);var i=a(r,6),as=s(i);n(as,()=>'<pre class="prism language-"><code><span class="line">code -&gt; AST -&gt; transformed AST -&gt; transformed code</span></code></pre>'),o(i);var T=a(i,4),ns=s(T);n(ns,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> babel </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// your first babel plugin üòéüòé</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`),o(T),e(8),o(l);var p=a(l,2),c=a(s(p),6),es=s(c);n(es,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`),o(c);var L=a(c,4),ts=s(L);n(ts,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;H&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;e&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;o&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;t&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`),o(L),e(2),o(p);var k=a(p,2),j=a(s(k),4),W=s(j),R=s(W),C=s(R),J=a(C);o(R),o(W),o(j),e(6),o(k);var h=a(k,2),V=a(s(h),4),Z=s(V),G=s(Z),H=s(G),U=a(H);o(G),o(Z),o(V),e(4),o(h);var y=a(h,2),v=a(s(y),4),ls=s(v);n(ls,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(v);var d=a(v,8),rs=s(d);n(rs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;identifier&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;string literal&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(d);var B=a(d,4),is=s(B);n(is,()=>`<pre class="prism language-"><code><span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span></code></pre>`),o(B),e(12),o(y);var u=a(y,2),x=a(s(u),4),ps=s(x);n(ps,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(x);var b=a(x,4),cs=s(b);n(cs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">elosnoc</span><span style="color: var(--shiki-token-function)">.gol</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`),o(b);var m=a(b,6),F=s(m),X=s(F),E=s(X),$=a(E);o(X),o(F),o(m);var f=a(m,6),ks=s(f);n(ks,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(f);var g=a(f,4),hs=s(g);n(hs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`),o(g);var N=a(g,6),ys=s(N);n(ys,()=>'<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">log</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>'),o(N),e(2),o(u);var w=a(u,2),_=a(s(w),6),vs=s(_);n(vs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(_);var I=a(_,6),ds=s(I);n(ds,()=>'<pre class="prism language-"><code><span class="line">RangeError: Maximum call stack size exceeded</span></code></pre>'),o(I);var K=a(I,10),us=s(K);n(us,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),o(K),e(2),o(w);var Y=a(w,2),P=a(s(Y),4),xs=s(P);n(xs,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">function greet(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  return &#39;Hello &#39; + name;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">console.log(greet(&#39;tanhauhau&#39;)); // Hello tanhauhau</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">concat</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(concat);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code);</span></span></code></pre>`),o(P),e(4),o(Y),e(4),_s(()=>{t(C,"srcset",`${Ws}, ${Rs} 2x`),t(J,"src",O),t(J,"srcset",`${O}, ${js} 2x`),t(H,"srcset",`${Js}, ${Vs} 2x`),t(U,"src",q),t(U,"srcset",`${q}, ${Cs} 2x`),t(E,"srcset",`${Gs}, ${Hs} 2x`),t($,"src",M),t($,"srcset",`${M}, ${Zs} 2x`)}),Is(ss,A)},$$slots:{default:!0}})),fs()}export{ao as component};
