import{s as ts,d as we,e as as,f as ze,n as ns}from"../chunks/scheduler.D6VJxl8L.js";import{S as os,i as ls,m as rs,n as is,o as cs,t as ps,a as hs,p as ks,e as a,s as o,H as g,c as n,d as u,q as i,h as l,r as _,g as p,u as m,j as z,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as vs,a as Re}from"../chunks/code-snippet.Gym6WUAG.js";import{B as ds}from"../chunks/BlogLayout.BMJM32nZ.js";import{t as us}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function ys(w){let e,h,y='<a href="#define-plugin" id="define-plugin">Define Plugin</a>',f,r,d="a high level of define plugin, treeshake + minification happens in the following",b,C,be="for any module,",te,L,Ce='<li>webpack reads the source code</li> <li>apply all the loaders</li> <li>apply define plugin</li> <li>for the final code after loaders + define plugin, <ul><li>for code at <code class="inline">if (truthy)</code> or <code class="inline">truthy &amp;&amp; ...</code> or <code class="inline">truthy ? ... : ...</code>, webpack will try to collapse that conditional, meaning based on truthy / falsy value, remove unwanted code logic paths</li></ul></li> <li>find all the <code class="inline">imports</code> or <code class="inline">require</code> in the code</li> <li>traverse them and apply the same step for each module</li>',ae,H,Le="after creating the module map",ne,T,He="<li>create chunks based on dynamic import()</li> <li>apply graph based optimisation - such as mark unused exports and treeshake them away</li> <li>granular split chuks optimisation</li> <li>lastly, for each chunk<ul><li>run terser to minify the code, will remove any unused variables / functions within each chunk</li></ul></li>",oe,q,Te="which means, there's a difference between the following contrived code:",le,M,R,Qe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> __FLAG__;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,re,P,qe="and",ie,E,K,Je=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (__FLAG__) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ce,D,Me='after applying <code class="inline">new DefinePlugin({ __FLAG__: true })</code>, you get:',pe,I,Q,Xe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,he,$,Pe="and",ke,j,J,Ye=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ve,V,Ee="webpack's parser is able to collapse the conditional of the latter, but not the former.",de,O,De='<p>the collapse of conditional expression happens <a href="https://github.com/webpack/webpack/blob/master/lib/ConstPlugin.js#L133" rel="nofollow">here</a></p>',ue,S,X,Ze=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123; &#125;</span></span></code></pre>`,ye,A,Ie='so, the former case, will have both <code class="inline">foo</code> and <code class="inline">bar</code> in the bundled code ,but the latter will only have <code class="inline">foo</code>.',Y,c,B,$e='<a href="#what-about-terser" id="what-about-terser">What about terser?</a>',fe,F,je="terser runs on chunk level after all the bundling and chunking logic, so even though terser is smart enough to collapse",xe,G,Z,es=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(bar</span><span style="color: var(--shiki-token-string-expression)">&#39;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ge,N,Ve="into",_e,U,ee,ss='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>',me,W,Oe='the bundled code still have <code class="inline">foo</code> and <code class="inline">bar</code>&#39;s code.',se,x,Se='<h2><a href="#read-more" id="read-more">Read More</a></h2> <ul><li><a href="https://webpack.js.org/plugins/internal-plugins/#constplugin" rel="nofollow">https://webpack.js.org/plugins/internal-plugins/#constplugin</a></li></ul>';return{c(){e=a("section"),h=a("h2"),h.innerHTML=y,f=o(),r=a("p"),r.textContent=d,b=o(),C=a("p"),C.textContent=be,te=o(),L=a("ul"),L.innerHTML=Ce,ae=o(),H=a("p"),H.textContent=Le,ne=o(),T=a("ul"),T.innerHTML=He,oe=o(),q=a("p"),q.textContent=Te,le=o(),M=a("div"),R=new g(!1),re=o(),P=a("p"),P.textContent=qe,ie=o(),E=a("div"),K=new g(!1),ce=o(),D=a("p"),D.innerHTML=Me,pe=o(),I=a("div"),Q=new g(!1),he=o(),$=a("p"),$.textContent=Pe,ke=o(),j=a("div"),J=new g(!1),ve=o(),V=a("p"),V.textContent=Ee,de=o(),O=a("blockquote"),O.innerHTML=De,ue=o(),S=a("div"),X=new g(!1),ye=o(),A=a("p"),A.innerHTML=Ie,Y=o(),c=a("section"),B=a("h3"),B.innerHTML=$e,fe=o(),F=a("p"),F.textContent=je,xe=o(),G=a("div"),Z=new g(!1),ge=o(),N=a("p"),N.textContent=Ve,_e=o(),U=a("div"),ee=new g(!1),me=o(),W=a("p"),W.innerHTML=Oe,se=o(),x=a("section"),x.innerHTML=Se,this.h()},l(k){e=n(k,"SECTION",{});var t=u(e);h=n(t,"H2",{"data-svelte-h":!0}),i(h)!=="svelte-s2qkmc"&&(h.innerHTML=y),f=l(t),r=n(t,"P",{"data-svelte-h":!0}),i(r)!=="svelte-jbds33"&&(r.textContent=d),b=l(t),C=n(t,"P",{"data-svelte-h":!0}),i(C)!=="svelte-4ipaz1"&&(C.textContent=be),te=l(t),L=n(t,"UL",{"data-svelte-h":!0}),i(L)!=="svelte-1fzfhey"&&(L.innerHTML=Ce),ae=l(t),H=n(t,"P",{"data-svelte-h":!0}),i(H)!=="svelte-5jes0"&&(H.textContent=Le),ne=l(t),T=n(t,"UL",{"data-svelte-h":!0}),i(T)!=="svelte-1hs3x2m"&&(T.innerHTML=He),oe=l(t),q=n(t,"P",{"data-svelte-h":!0}),i(q)!=="svelte-1as1ylo"&&(q.textContent=Te),le=l(t),M=n(t,"DIV",{class:!0});var Ae=u(M);R=_(Ae,!1),Ae.forEach(p),re=l(t),P=n(t,"P",{"data-svelte-h":!0}),i(P)!=="svelte-1qlona5"&&(P.textContent=qe),ie=l(t),E=n(t,"DIV",{class:!0});var Be=u(E);K=_(Be,!1),Be.forEach(p),ce=l(t),D=n(t,"P",{"data-svelte-h":!0}),i(D)!=="svelte-ob8ftf"&&(D.innerHTML=Me),pe=l(t),I=n(t,"DIV",{class:!0});var Fe=u(I);Q=_(Fe,!1),Fe.forEach(p),he=l(t),$=n(t,"P",{"data-svelte-h":!0}),i($)!=="svelte-1qlona5"&&($.textContent=Pe),ke=l(t),j=n(t,"DIV",{class:!0});var Ge=u(j);J=_(Ge,!1),Ge.forEach(p),ve=l(t),V=n(t,"P",{"data-svelte-h":!0}),i(V)!=="svelte-1gmyggf"&&(V.textContent=Ee),de=l(t),O=n(t,"BLOCKQUOTE",{"data-svelte-h":!0}),i(O)!=="svelte-1gwh6uy"&&(O.innerHTML=De),ue=l(t),S=n(t,"DIV",{class:!0});var Ne=u(S);X=_(Ne,!1),Ne.forEach(p),ye=l(t),A=n(t,"P",{"data-svelte-h":!0}),i(A)!=="svelte-g7x10h"&&(A.innerHTML=Ie),t.forEach(p),Y=l(k),c=n(k,"SECTION",{});var v=u(c);B=n(v,"H3",{"data-svelte-h":!0}),i(B)!=="svelte-trjh55"&&(B.innerHTML=$e),fe=l(v),F=n(v,"P",{"data-svelte-h":!0}),i(F)!=="svelte-105h2it"&&(F.textContent=je),xe=l(v),G=n(v,"DIV",{class:!0});var Ue=u(G);Z=_(Ue,!1),Ue.forEach(p),ge=l(v),N=n(v,"P",{"data-svelte-h":!0}),i(N)!=="svelte-tqgc3y"&&(N.textContent=Ve),_e=l(v),U=n(v,"DIV",{class:!0});var We=u(U);ee=_(We,!1),We.forEach(p),me=l(v),W=n(v,"P",{"data-svelte-h":!0}),i(W)!=="svelte-120t6dx"&&(W.innerHTML=Oe),v.forEach(p),se=l(k),x=n(k,"SECTION",{"data-svelte-h":!0}),i(x)!=="svelte-3sgfqr"&&(x.innerHTML=Se),this.h()},h(){R.a=null,m(M,"class","code-section"),K.a=null,m(E,"class","code-section"),Q.a=null,m(I,"class","code-section"),J.a=null,m(j,"class","code-section"),X.a=null,m(S,"class","code-section"),Z.a=null,m(G,"class","code-section"),ee.a=null,m(U,"class","code-section")},m(k,t){z(k,e,t),s(e,h),s(e,f),s(e,r),s(e,b),s(e,C),s(e,te),s(e,L),s(e,ae),s(e,H),s(e,ne),s(e,T),s(e,oe),s(e,q),s(e,le),s(e,M),R.m(Qe,M),s(e,re),s(e,P),s(e,ie),s(e,E),K.m(Je,E),s(e,ce),s(e,D),s(e,pe),s(e,I),Q.m(Xe,I),s(e,he),s(e,$),s(e,ke),s(e,j),J.m(Ye,j),s(e,ve),s(e,V),s(e,de),s(e,O),s(e,ue),s(e,S),X.m(Ze,S),s(e,ye),s(e,A),z(k,Y,t),z(k,c,t),s(c,B),s(c,fe),s(c,F),s(c,xe),s(c,G),Z.m(es,G),s(c,ge),s(c,N),s(c,_e),s(c,U),ee.m(ss,U),s(c,me),s(c,W),z(k,se,t),z(k,x,t)},p:ns,d(k){k&&(p(e),p(Y),p(c),p(se),p(x))}}}function fs(w){let e,h;const y=[w[0],Ke];let f={$$slots:{default:[ys]},$$scope:{ctx:w}};for(let r=0;r<y.length;r+=1)f=we(f,y[r]);return e=new ds({props:f}),{c(){rs(e.$$.fragment)},l(r){is(e.$$.fragment,r)},m(r,d){cs(e,r,d),h=!0},p(r,[d]){const b=d&1?vs(y,[d&1&&Re(r[0]),d&0&&Re(Ke)]):{};d&2&&(b.$$scope={dirty:d,ctx:r}),e.$set(b)},i(r){h||(ps(e.$$.fragment,r),h=!0)},o(r){hs(e.$$.fragment,r),h=!1},d(r){ks(e,r)}}}const Ke={title:"Webpack Define Plugin",tags:["define plugin","feature flag"],description:"Define Plugina high level of define plugin, treeshake + minification happens in the followingfor any module, webpack reads the source codeapply all the loadersapply define pluginfor the final code after loaders + define plugin, ...",tableOfContents:[{link:"define-plugin",title:"Define Plugin",nested:[{link:"what-about-terser",title:"What about terser?"}]},{link:"read-more",title:"Read More"}]};function xs(w,e,h){return as("blog",{image:us}),w.$$set=y=>{h(0,e=we(we({},e),ze(y)))},e=ze(e),[e]}class Cs extends os{constructor(e){super(),ls(this,e,xs,fs,ts,{})}}export{Cs as component};
