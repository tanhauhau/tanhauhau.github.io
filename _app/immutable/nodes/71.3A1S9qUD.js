import{s as le,d as V,e as oe,f as F,n as se}from"../chunks/scheduler.D6VJxl8L.js";import{S as ne,i as ie,m as ae,n as re,o as ce,t as pe,a as de,p as he,e as r,s as h,H as K,c,q as v,h as u,d as O,r as Q,g as n,u as X,j as i,k as f}from"../chunks/index.CLAVN-Y5.js";import{g as ue,a as Y}from"../chunks/code-snippet.Gym6WUAG.js";import{B as me}from"../chunks/BlogLayout.BLHkC4CD.js";import{t as ve}from"../chunks/twitter-card-image.C3bQ3Oc7.js";function fe(x){let t,m='<h2><a href="#css-houdini" id="css-houdini">CSS Houdini</a></h2> <ul><li>Umbrella term that covers a set of low-level APIs that exposes parts of the CSS rendering engine</li> <li>Give developers access to CSS Object Model.</li> <li>Enable developers to extends CSS by hooking into the styling and layout processes</li> <li>No need to wait for browsers to implement CSS primitives</li> <li>Write your own painting and layout algorithm using worklet</li> <li>Write less JS dependencies and polyfills, allow users write true CSS polyfills that browser can better understand</li> <li>Allow more semantic CSS, allow performance optimisations in how the browser actually reads and parses CSS</li> <li>Allow typechecking CSS</li></ul>',d,p,o='<h2><a href="#properties-and-values-api" id="properties-and-values-api">Properties and Values API</a></h2> <ul><li>create rich and typed property</li> <li>error free, error gracefully, fallback to initial value</li> <li>provide semantic meaning to the variable</li> <li>custom property values are no longer a string</li> <li>allow you to interpolate the value as you transition from 1 value to another</li> <li>be known and passed to the function as accepted and identified parameter</li> <li>cascade still applies</li></ul>',a,s,w,$='<a href="#2-ways-to-register-houdini-custom-properties" id="2-ways-to-register-houdini-custom-properties">2 ways to register houdini custom properties</a>',I,_,j='<li><code class="inline">CSS.registerProperty</code> in JS</li> <li><code class="inline">@property</code> in CSS</li>',P,C,H,ee=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.registerProperty</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;--colorPrimary&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// start with &#96;--&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;color&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">       </span><span style="color: var(--shiki-token-comment)">// syntax value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  initialValue</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;magenta&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// initial value if not defined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">         </span><span style="color: var(--shiki-token-comment)">// inherit from parent</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,E,b,M,te=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* Included in Chromium 85 */</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">@property</span><span style="color: var(--shiki-color-text)"> --colorPrimary &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  syntax: &#39;&lt;color</span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)">&#39;;      </span><span style="color: var(--shiki-token-comment)">/* syntax value */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">initial-value</span><span style="color: var(--shiki-color-text)">: magenta; </span><span style="color: var(--shiki-token-comment)">/* does not need to be a string */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  inherits: false;        </span><span style="color: var(--shiki-token-comment)">/* inherit from parent */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,q,T,N='<li>enforces it the <code class="inline">--colorPrimary</code> to be a value of color</li> <li>if it is not a color, will error gracefully by fallback to its initial value</li> <li>trying to see the console, but haven&#39;t see it in the console yet</li>',L,y,A='<h2><a href="#syntax" id="syntax">Syntax</a></h2> <ul><li>CSS definition syntax <a href="https://web.dev/at-property/#syntax" rel="nofollow">https://web.dev/at-property/#syntax</a></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length" rel="nofollow"><code class="inline">&lt;length&gt;</code></a>, eg: 1px, 2rem, 3vw</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/percentage" rel="nofollow"><code class="inline">&lt;percentage&gt;</code></a>, eg: 4%<ul><li>in linear-gradient</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length-percentage" rel="nofollow"><code class="inline">&lt;length-percentage&gt;</code></a><ul><li>superset of length + percentage</li> <li>you can use <code class="inline">calc()</code> of mixing percentage and length, eg: <code class="inline">calc(100% - 35px)</code></li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/angle" rel="nofollow"><code class="inline">&lt;angle&gt;</code></a>, eg: 1deg<ul><li>in hsl, conic-gradient</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/time" rel="nofollow"><code class="inline">&lt;time&gt;</code></a>, eg: 1s<ul><li>in animation, transition</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/resolution" rel="nofollow"><code class="inline">&lt;resolution&gt;</code></a> , eg: 300dpi<ul><li>in media query</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/integer" rel="nofollow"><code class="inline">&lt;integer&gt;</code></a>, positive / negative whole number<ul><li>in z-index, grid-row</li></ul></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/number" rel="nofollow"><code class="inline">&lt;number&gt;</code></a></li> <li><code class="inline">&lt;color&gt;</code></li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function" rel="nofollow"><code class="inline">&lt;transform-function&gt;</code></a>, 2d / 3d transform function</li> <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident" rel="nofollow"><code class="inline">&lt;custom-ident&gt;</code></a><ul><li>eg: animation-name</li></ul></li></ul>',U,g,B='<h3><a href="#multipliers" id="multipliers">Multipliers</a></h3> <p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax#Component_value_multipliers" rel="nofollow">Component value multipliers</a></p> <ul><li><code class="inline">&lt;length&gt;+</code>, length can appear one or more times, eg: <code class="inline">&quot;1px 2px 3px&quot;</code></li> <li><code class="inline">&lt;length&gt;#</code>, length appear one or more times with comma separated, eg: <code class="inline">&quot;1px, 2px 3px&quot;</code></li></ul>',z,k,D='<h3><a href="#combinators" id="combinators">Combinators</a></h3> <p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax#Component_value_combinators" rel="nofollow">Component value combinators</a></p> <ul><li><code class="inline">|</code>, eg: <code class="inline">&lt;percentage&gt; | &lt;length&gt;</code>, must be either percentage or length, and appear only once</li></ul>',W,S,G='<h2><a href="#references" id="references">References</a></h2> <ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax" rel="nofollow">https://developer.mozilla.org/en-US/docs/Web/CSS/Value_definition_syntax</a></li> <li><a href="https://heyjiawei.com/how-to-read-css-specification-syntax" rel="nofollow">https://heyjiawei.com/how-to-read-css-specification-syntax</a></li> <li><a href="https://web.dev/at-property" rel="nofollow">https://web.dev/at-property</a></li></ul>';return{c(){t=r("section"),t.innerHTML=m,d=h(),p=r("section"),p.innerHTML=o,a=h(),s=r("section"),w=r("h2"),w.innerHTML=$,I=h(),_=r("ul"),_.innerHTML=j,P=h(),C=r("div"),H=new K(!1),E=h(),b=r("div"),M=new K(!1),q=h(),T=r("ul"),T.innerHTML=N,L=h(),y=r("section"),y.innerHTML=A,U=h(),g=r("section"),g.innerHTML=B,z=h(),k=r("section"),k.innerHTML=D,W=h(),S=r("section"),S.innerHTML=G,this.h()},l(e){t=c(e,"SECTION",{"data-svelte-h":!0}),v(t)!=="svelte-1tunkj3"&&(t.innerHTML=m),d=u(e),p=c(e,"SECTION",{"data-svelte-h":!0}),v(p)!=="svelte-wmbkk8"&&(p.innerHTML=o),a=u(e),s=c(e,"SECTION",{});var l=O(s);w=c(l,"H2",{"data-svelte-h":!0}),v(w)!=="svelte-1og721y"&&(w.innerHTML=$),I=u(l),_=c(l,"UL",{"data-svelte-h":!0}),v(_)!=="svelte-t2cfu"&&(_.innerHTML=j),P=u(l),C=c(l,"DIV",{class:!0});var J=O(C);H=Q(J,!1),J.forEach(n),E=u(l),b=c(l,"DIV",{class:!0});var R=O(b);M=Q(R,!1),R.forEach(n),q=u(l),T=c(l,"UL",{"data-svelte-h":!0}),v(T)!=="svelte-1e6qooq"&&(T.innerHTML=N),l.forEach(n),L=u(e),y=c(e,"SECTION",{"data-svelte-h":!0}),v(y)!=="svelte-ybjnep"&&(y.innerHTML=A),U=u(e),g=c(e,"SECTION",{"data-svelte-h":!0}),v(g)!=="svelte-9i0wqw"&&(g.innerHTML=B),z=u(e),k=c(e,"SECTION",{"data-svelte-h":!0}),v(k)!=="svelte-rcdzet"&&(k.innerHTML=D),W=u(e),S=c(e,"SECTION",{"data-svelte-h":!0}),v(S)!=="svelte-986xvk"&&(S.innerHTML=G),this.h()},h(){H.a=null,X(C,"class","code-section"),M.a=null,X(b,"class","code-section")},m(e,l){i(e,t,l),i(e,d,l),i(e,p,l),i(e,a,l),i(e,s,l),f(s,w),f(s,I),f(s,_),f(s,P),f(s,C),H.m(ee,C),f(s,E),f(s,b),M.m(te,b),f(s,q),f(s,T),i(e,L,l),i(e,y,l),i(e,U,l),i(e,g,l),i(e,z,l),i(e,k,l),i(e,W,l),i(e,S,l)},p:se,d(e){e&&(n(t),n(d),n(p),n(a),n(s),n(L),n(y),n(U),n(g),n(z),n(k),n(W),n(S))}}}function ye(x){let t,m;const d=[x[0],Z];let p={$$slots:{default:[fe]},$$scope:{ctx:x}};for(let o=0;o<d.length;o+=1)p=V(p,d[o]);return t=new me({props:p}),{c(){ae(t.$$.fragment)},l(o){re(t.$$.fragment,o)},m(o,a){ce(t,o,a),m=!0},p(o,[a]){const s=a&1?ue(d,[a&1&&Y(o[0]),a&0&&Y(Z)]):{};a&2&&(s.$$scope={dirty:a,ctx:o}),t.$set(s)},i(o){m||(pe(t.$$.fragment,o),m=!0)},o(o){de(t.$$.fragment,o),m=!1},d(o){he(t,o)}}}const Z={title:"The CSS Podcast: 026: Houdini Series: Properties & Values",tags:["css houdini","The CSS Podcast"],description:"CSS HoudiniUmbrella term that covers a set of low-level APIs that exposes parts of the CSS rendering engineGive developers access to CSS Object Model.Enable developers to extends CSS by hooking into the styling and layout processes...",tableOfContents:[{link:"css-houdini",title:"CSS Houdini"},{link:"properties-and-values-api",title:"Properties and Values API"},{link:"2-ways-to-register-houdini-custom-properties",title:"2 ways to register houdini custom properties"},{link:"syntax",title:"Syntax",nested:[{link:"multipliers",title:"Multipliers"},{link:"combinators",title:"Combinators"}]},{link:"references",title:"References"}]};function ge(x,t,m){return oe("blog",{image:ve}),x.$$set=d=>{m(0,t=V(V({},t),F(d)))},t=F(t),[t]}class Ce extends ne{constructor(t){super(),ie(this,t,ge,ye,le,{})}}export{Ce as component};
