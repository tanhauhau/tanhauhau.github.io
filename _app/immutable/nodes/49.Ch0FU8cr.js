import{s as Ne,d as wt,e as De,f as ne,n as ze}from"../chunks/scheduler.D6VJxl8L.js";import{S as qe,i as Oe,m as Ve,n as Re,o as Be,t as $e,a as Fe,p as Je,e as o,s as t,H as u,c as a,q as e,h as n,d as v,r as x,g as l,v as ee,u as f,j as g,k as s}from"../chunks/index.CLAVN-Y5.js";import{g as Ue,a as le}from"../chunks/code-snippet.Gym6WUAG.js";import{B as We}from"../chunks/BlogLayout.BLHkC4CD.js";const Ye=""+new URL("../assets/ast-html.CvPDJdOp.webp",import.meta.url).href,Ke=""+new URL("../assets/ast-html.C7Pun6E-.webp",import.meta.url).href,Qe=""+new URL("../assets/ast-html.DGCQuxgO.png",import.meta.url).href,re=""+new URL("../assets/ast-html.fXdcfTlu.png",import.meta.url).href,Ge=""+new URL("../assets/ast-explorer.Bw2PVb8O.gif",import.meta.url).href,ie=""+new URL("../assets/ast-explorer.DpdZI62u.gif",import.meta.url).href,Ze=""+new URL("../assets/hero-twitter.CwJlRhsy.jpg",import.meta.url).href;function Xe(q){let m,j='Previously, I&#39;ve talked about <a href="/step-by-step-guide-for-writing-a-babel-transformation">how to write a babel transformation</a>, and I went one step deeper into <a href="https://babeljs.io/" rel="nofollow">Babel</a>, by <a href="/creating-custom-javascript-syntax-with-babel">showing how you can create a custom JavaScript syntax</a>, I demonstrated how Babel parses your code into AST, transforms it and generates back into code.',A,S,_="Armed with the knowledge and experience of playing the JavaScript AST with Babel, let's take a look at how we can generalize this knowledge into other languages as well.",H,P,bt='<p>When I refer to &quot;other languages&quot;, I am actually referring to popular frontend languages, for example: <a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm" rel="nofollow">JavaScript</a>, <a href="http://typescriptlang.org/" rel="nofollow">TypeScript</a>, <a href="https://sass-lang.com/" rel="nofollow">Sass</a>, <a href="https://www.w3.org/Style/CSS/" rel="nofollow">CSS</a>, <a href="https://www.w3.org/html/" rel="nofollow">HTML</a>, <a href="https://en.wikipedia.org/wiki/Markdown" rel="nofollow">markdown</a>...</p> <p>Of course, it does not limit to just frontend languages. It&#39;s just that it&#39;s easier to find a parser for these languages written in JavaScript than other languages, say C++ or Java.</p>',uo,y,O,_t='<a href="#the-parsers" id="the-parsers">The parsers</a>',Go,V,Tt="Like how we use Babel to do parsing and generating JavaScript, there are other libraries out there to help us with parsing and generating our language.",Zo,R,Ct='One easy trick to find these libraries is through <a href="https://astexplorer.net/" rel="nofollow">https://astexplorer.net/</a>.',Xo,B,Mt=`<span style="display: block; position: relative; padding-top: 54.000%; width: 100%;"><img src="${ie}" srcset="${ie}, ${Ge} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="ast explorer"/></span>`,sa,$,Lt='After you choose a language, you would see a list of parsers you can use to parse your language. For example, if you choose <strong>HTML</strong>, there&#39;s <a href="https://github.com/fb55/htmlparser2" rel="nofollow">htmlparser2</a>, <a href="https://github.com/nik-garmash/hyntax" rel="nofollow">hyntax</a>, <a href="https://github.com/inikulin/parse5" rel="nofollow">parse5</a>... And when you choose one of the parsers, you can immediately see how the AST looks like on the right panel and the Github link to the parser on the top right.',oa,F,Ht=`<span style="display: block; position: relative; padding-top: 39.844%; width: 100%;"><picture><source type="image/webp" srcset="${Ke}, ${Ye} 2x"/><img src="${re}" srcset="${re}, ${Qe} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="ast explorer"/></picture></span>`,aa,J,St='Here is a un-exhaustive list of parsers, and it&#39;s <code class="inline">parse</code> and <code class="inline">generate</code> methods:',ta,E,At='<table><thead><tr><th>Language</th> <th>Parser</th> <th><code class="language-text">parse</code></th> <th><code class="language-text">generate</code></th></tr></thead> <tbody><tr><td>HTML</td> <td><a href="https://github.com/inikulin/parse5/tree/master/packages/parse5">parse5</a></td> <td><a href="https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#parse"><code class="language-text">parse5.parse(str)</code></a></td> <td><a href="https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#serialize"><code class="language-text">parse5.serialize(ast)</code></a></td></tr> <tr><td>Markdown</td> <td><a href="https://github.com/remarkjs/remark">remark</a></td> <td><a href="https://github.com/remarkjs/remark/tree/master/packages/remark-parse"><code class="language-text">unified().use(remarkParse)</code></a></td> <td><a href="https://github.com/remarkjs/remark/tree/master/packages/remark-stringify"><code class="language-text">unified().use(remarkStringify)</code></a></td></tr> <tr><td>CSS</td> <td><a href="https://github.com/csstree/csstree">css-tree</a></td> <td><a href="https://github.com/csstree/csstree/blob/master/docs/parsing.md"><code class="language-text">csstree.parse(str)</code></a></td> <td><a href="https://github.com/csstree/csstree/blob/master/docs/generate.md"><code class="language-text">csstree.generate(ast)</code></a></td></tr> <tr><td>Sass</td> <td><a href="https://github.com/shawnbot/sast">sast</a></td> <td><a href="https://github.com/shawnbot/sast#sastparsesource--options-"><code class="language-text">sast.parse(str)</code></a></td> <td><a href="https://github.com/shawnbot/sast#saststringifynode-"><code class="language-text">sast.stringify(ast)</code></a></td></tr> <tr><td>JavaScript</td> <td><a href="https://babeljs.io/">babel</a></td> <td><a href="https://babeljs.io/docs/en/babel-parser#babelparserparsecode-options"><code class="language-text">babel.parse(str)</code></a></td> <td><a href="https://babeljs.io/docs/en/babel-generator"><code class="language-text">babel.generate(ast)</code></a></td></tr> <tr><td>TypeScript</td> <td><a href="http://typescriptlang.org/">TypeScript</a></td> <td><a href="https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"><code class="language-text">ts.createSourceFile(str)</code></a></td> <td><a href="https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"><code class="language-text">ts.createPrinter().printFile(ast)</code></a></td></tr></tbody></table>',na,U,Pt="As you can see most parsers provide both parsing and generating methods.",ea,W,It="So in general, you can have the following as a template to write your code transformation code:",la,Y,xo,ce=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/code&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parserMethod</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the magical transform function</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// usually not a pure function</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transform</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generatorMethod</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/output&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> output</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,ra,K,jt="You can, of course, transforming AST of one language to AST of another language, for example: Sass ➡️ CSS, Markdown ➡️ HTML, and use the generator of another language to generate out the code.",ia,Q,fo,ke=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lang1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/code&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parserMethodLang1</span><span style="color: var(--shiki-color-text)">(lang1);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the magical transform function</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// usually not a pure function</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transformLang1ToLang2</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lang2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generatorMethodLang2</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/output&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> lang2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,pa,G,Et="Now armed with this template, let&#39;s talk about the more <em>magical</em> stuff, <em>the transform function</em>.",go,c,Z,Nt='<a href="#traversing-an-ast" id="traversing-an-ast">Traversing an AST</a>',ca,X,Dt="As the name AST suggests, AST uses a tree data structure. To hone the skills of manipulating AST, we need to recall our long distant memory of <em>&quot;Algorithm 101&quot;</em>, the <strong>depth-first search (DFS)</strong> tree traversal algorithm.",ka,ss,zt='<a href="https://twitter.com/vaidehijoshi" rel="nofollow">Vaidehi Joshi</a> wrote an amazing article on <a href="https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056" rel="nofollow">demystifying Depth-First Search</a>, I don&#39;t think I can explain any better, so if you want to recap on depth-first search, please go and read <a href="https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056" rel="nofollow">her article</a> before we continue.',ha,os,qt="Now you have a clearer idea of how depth-first search works, a depth-first search on an AST would look something like this:",ya,as,mo,he=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO: do something with this node</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// could be an array of nodes or just a node</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child[j]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// probably need more check,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for example,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if the node contains certain properties</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,va,ts,Ot='We can then fill up the <code class="inline">TODO</code> with our manipulation code.',da,ns,Vt="If we find ourselves needing to do multiple traversals, with different AST manipulation, we would soon realize that mixing AST manipulation code with the traversal code is <em>not clean enough</em>. Naturally, you would realize <em>it is cleaner</em> to pass in a callback function that gets called every time we visit a node:",ua,es,wo,ye=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast[key];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// probably need more check,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for example,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if the node contains certain properties</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xa,ls,Rt='The <code class="inline">visit</code> function is now generic enough that you can use it for any AST:',fa,rs,bo,ve=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(htmlAst</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlAstNode </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/*...*/</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(cssAst</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cssAstNode </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/*...*/</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,ga,is,Bt="Naturally, you would think that having the information of the parent node, and the key / index of the current node would be useful to have in the callback function:",ma,ps,_o,de=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(node);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> node[key];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wa,cs,$t='Now, we might think to ourselves, I dont want to get callback for every node visited, I just need callback for a certain node. You might be tempted to add a condition in the <code class="inline">visit</code> function:',ba,ks,To,ue=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">someCondition</span><span style="color: var(--shiki-color-text)">(node)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span></span></code></pre>`,_a,hs,Ft='But you think twice: <em>what if someone else wants to use <code class="inline">visit</code> but with a different condition for callback?</em>',Ta,ys,Jt="For most of the time, you want to callback only to a certain types of node. In that case, instead of passing in a callback function, you can pass in a map of node type to their respective callback functions:",Ca,vs,Co,xe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nodeType</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getNodeType</span><span style="color: var(--shiki-color-text)">(node);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nodeType </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      callbackMap[nodeType](node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)</span></span></code></pre>`,Ma,ds,Ut="At this point, you maybe realize, <em>hey, this looks so much like one of those AST traversing libraries!</em> And yes, this is how they get implemented.",La,us,Wt="Now we can traverse the AST, and find the node that we are interested in, so the next step is to manipulate them.",Mo,N,Yt='<h2><a href="#manipulating-ast" id="manipulating-ast">Manipulating AST</a></h2> <p>Manipulating the AST can be categorized into 3 different operations:</p> <ul><li>Adding a node</li> <li>Replacing a node</li> <li>Removing a node</li></ul>',Lo,T,xs,Kt='<a href="#adding-a-node" id="adding-a-node">Adding a node</a>',Ha,fs,Qt="To add a node, you can assign it to a keyed property of your node:",Sa,gs,Ho,fe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Aa,ms,Gt="or push the new node, if the keyed property is an array:",Pa,ws,So,ge=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ia,bs,Zt="To add a node as a sibling, you may need to access the node's parent:",ja,_s,Ao,me=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as first sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.unshift</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as last sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as next sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as prev sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Po,M,Ts,Xt='<a href="#replacing-a-node" id="replacing-a-node">Replacing a node</a>',Ea,Cs,sn="To replace the current node to another node, update the key property of the current node's parent:",Na,Ms,Io,we=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updatedNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Da,Ls,on="If the key property of the parent is an array:",za,Hs,jo,be=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key][index] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updatedNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Eo,p,Ss,an='<a href="#removing-a-node" id="removing-a-node">Removing a node</a>',qa,As,tn="To remove the current node, delete the key property of the current node's parent:",Oa,Ps,No,_e=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">delete</span><span style="color: var(--shiki-color-text)"> parent[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Va,Is,nn="If the key property of the parent is an array:",Ra,js,Do,Te=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ba,Es,en="<p>The operations of <strong>adding</strong>, <strong>replacing</strong>, and <strong>removing</strong> nodes are so common that, they are usually implemented as a util function.</p>",$a,Ns,ln="However, there&#39;s <strong>one important step</strong> that I did not cover: after you mutate the node, you need to make sure that the traversal still works fine.",Fa,Ds,rn="For a node that is a property of a key of its parent, adding, replacing and removing them are usually fine. Except for the replace operation, you might need to revisit the <em>&quot;current node&quot;</em>, which is the <em>new replacing node</em>.",Ja,zs,pn="However, for node that are in an array, you need to take special care to update the array index of the loop:",Ua,qs,zo,Ce=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">()) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// offset the index</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          j</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wa,Os,cn="But how do you know that the current node was removed?",Ya,Vs,kn='Well, knowing when a node got removed is sometimes a secret that lies within the <code class="inline">remove</code> util function from the tree traversal library.',Ka,Rs,hn='It could be as simple as setting a flag when you call <code class="inline">remove</code>:',Qa,Bs,qo,Me=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// proceed to remove current node</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> result </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _hasRemoved;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// reset back</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// function _visit(...) &#123; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">()) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...somewhere in your visitCallback</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ga,$s,yn='But sometimes, instead of having to import the <code class="inline">remove</code> util from the tree traversal library, the <code class="inline">remove</code> function is available in <code class="inline">this</code> of the <code class="inline">visitCallback</code>:',Za,Fs,Oo,Le=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// don&#39;t need to take in &#96;node&#96; and &#96;parent&#96;,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// because it know exactly what they are</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// proceed to remove current node</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nodeType </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      callbackMap[nodeType]</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(_this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...somewhere in your visitCallback</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.remove</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xa,Js,vn="Now you learned the 3 basic operations of manipulating the AST, you maybe wonder how exactly is to use these basic operations to write a codemod or an AST transform plugin?",st,Us,dn='Well, in my <a href="/step-by-step-guide-for-writing-a-babel-transformation">step-by-step guide</a>, I&#39;ve explained that, you can use AST explorer like <a href="http://astexplorer.net/" rel="nofollow">http://astexplorer.net/</a> or <a href="https://lihautan.com/babel-ast-explorer" rel="nofollow">Babel AST Explorer</a> to help you.',ot,Ws,un="You need to:",at,Ys,xn="<li><strong>Know how the part of the code you want to change look like in the AST</strong>, so you can target the specific type of the node, and</li> <li><strong>Know how does the final output you wish to see look like in the AST</strong>, so you know what nodes to create, update or remove.</li>",tt,Ks,fn="So we are going to elaborate more on these 2 steps specifically.",Vo,b,Qs,gn='<a href="#targeting-a-node" id="targeting-a-node">Targeting a node</a>',nt,Gs,mn='Node targeting, most of the times, is just a lot of <code class="inline">===</code>.',et,Zs,wn='For example, if you want to target a <code class="inline">&lt;figure&gt;</code> with a class <code class="inline">foo</code> that contains an <code class="inline">&lt;img&gt;</code> and a <code class="inline">&lt;figcaption&gt;</code> in <a href="https://github.com/fb55/htmlparser2" rel="nofollow">htmlparser2</a>:',lt,Xs,Ro,He=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">figure</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">img</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;foo&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">figcaption</span><span style="color: var(--shiki-color-text)">&gt;lorem ipsum&lt;/</span><span style="color: var(--shiki-token-string-expression)">figcaption</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">figure</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,rt,so,bn="You need to check:",it,oo,Bo,Se=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 1. is node &lt;figure&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figure&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 2. is node contain class &#96;foo&#96; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">attribs</span><span style="color: var(--shiki-color-text)">.class </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 3. is node children contain &lt;img&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;img&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 4. is node children contain &lt;figcaption&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figcaption&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pt,ao,_n="To make it less verbose, we can refactor each check into reusable functions:",ct,to,$o,Ae=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasAttr</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.attribs[key] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(fn) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 1. is node &lt;figure&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figure&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 2. is node contain class &#96;foo&#96; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasAttr</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;class&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 3. is node children contain &lt;img&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;img&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 4. is node children contain &lt;figcaption&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figcaption&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fo,d,no,Tn='<a href="#creating-a-node" id="creating-a-node">Creating a node</a>',kt,eo,Cn="There are a few ways you can create an AST node.",ht,lo,Mn="The simplest and crudest way is to <strong>manually create the node object</strong>. Most of the time, the node object is a JavaScript object. So you can just create them manually:",yt,ro,Jo,Pe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,vt,io,Ln='It may become unwieldy when creating large, complex AST nodes, so sometimes library decides to provide builder functions, like <a href="https://babeljs.io/docs/en/babel-types" rel="nofollow">@babel/types</a> to simplify node creation and provide default values:',dt,po,Uo,Ie=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.functionDeclaration</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">)]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.expressionStatement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.memberExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        [</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">)]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.returnStatement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,ut,co,Hn="It looked more concise and tidier, but it is hard to comprehend and grasp what node it is creating.",xt,ko,Sn='So, a better way of creating complex AST node, is to use the <code class="inline">parse</code> function + <code class="inline">string</code>:',ft,ho,Wo,je=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babelParser</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  function bar(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    console.log(foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return foo;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssTree</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  .foo &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    color: red;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#123; context</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;rule&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,gt,yo,An='For Babel, there&#39;s an amazing util called <a href="https://babeljs.io/docs/en/babel-template" rel="nofollow">@babel/template</a>, where you can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow">template literals</a> to create AST node:',mt,vo,Yo,Ee=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode4</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">statement</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  console.log(foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// placeholder can be an AST node or string</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode5</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">statement</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  function bar(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">newNode4</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    alert(&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-string-expression)">&#39;hello world&#39;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;)</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return foo;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Ko,D,Pn='<h2><a href="#summary" id="summary">Summary</a></h2> <p>We&#39;ve gone through:</p> <ul><li>How to traverse an AST, using depth-first search algorithm,</li> <li>The 3 basic AST manipulations, addition, replacement, and removal,</li> <li>How to target a node in AST, and</li> <li>How to create an AST node</li></ul> <blockquote><p><strong>Manipulating AST with JavaScript using Babel</strong></p> <p>If you like what you&#39;ve read so far, and want to learn how you could do it with Babel. I&#39;ve created a <a href="https://gum.co/manipulating-ast-with-javascript" rel="nofollow">video course</a>, showing you step-by-step, how to write a babel plugin and codemod.</p> <p>In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals.</p> <p><strong><a href="https://gum.co/manipulating-ast-with-javascript" rel="nofollow">Sounds interesting, let&#39;s take a look at the video course</a></strong></p></blockquote>',Qo,z,In='<h2><a href="#further-readings" id="further-readings">Further Readings</a></h2> <p><a href="https://twitter.com/flexdinesh" rel="nofollow">Dinesh (@flexdinesh)</a> <a href="https://twitter.com/flexdinesh/status/1196680010343432192" rel="nofollow">tweeted</a> his pocket collection of AST resources:</p> <ul><li><a href="https://frontendmasters.com/courses/linting-asts/" rel="nofollow">Code Transformation and Linting with ASTs</a></li> <li><a href="https://kentcdodds.com/blog/write-your-own-code-transform/" rel="nofollow">Write your own code transform for fun and profit</a></li> <li><a href="https://www.sitepoint.com/understanding-asts-building-babel-plugin/" rel="nofollow">Understanding ASTs by Building Your Own Babel Plugin</a></li> <li><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-writing-your-first-babel-plugin" rel="nofollow">Writing your first Babel Plugin</a></li> <li><a href="https://medium.com/the-guild/this-is-how-i-build-babel-plug-ins-b0a13dcd0352" rel="nofollow">This is how I build Babel plug-ins</a></li> <li><a href="https://varunzxzx.github.io/blog/writing-babel-plugin" rel="nofollow">Writing My First Babel Plugin</a></li></ul>';return{c(){m=o("p"),m.innerHTML=j,A=t(),S=o("p"),S.textContent=_,H=t(),P=o("blockquote"),P.innerHTML=bt,uo=t(),y=o("section"),O=o("h2"),O.innerHTML=_t,Go=t(),V=o("p"),V.textContent=Tt,Zo=t(),R=o("p"),R.innerHTML=Ct,Xo=t(),B=o("p"),B.innerHTML=Mt,sa=t(),$=o("p"),$.innerHTML=Lt,oa=t(),F=o("p"),F.innerHTML=Ht,aa=t(),J=o("p"),J.innerHTML=St,ta=t(),E=o("div"),E.innerHTML=At,na=t(),U=o("p"),U.textContent=Pt,ea=t(),W=o("p"),W.textContent=It,la=t(),Y=o("div"),xo=new u(!1),ra=t(),K=o("p"),K.textContent=jt,ia=t(),Q=o("div"),fo=new u(!1),pa=t(),G=o("p"),G.innerHTML=Et,go=t(),c=o("section"),Z=o("h2"),Z.innerHTML=Nt,ca=t(),X=o("p"),X.innerHTML=Dt,ka=t(),ss=o("p"),ss.innerHTML=zt,ha=t(),os=o("p"),os.textContent=qt,ya=t(),as=o("div"),mo=new u(!1),va=t(),ts=o("p"),ts.innerHTML=Ot,da=t(),ns=o("p"),ns.innerHTML=Vt,ua=t(),es=o("div"),wo=new u(!1),xa=t(),ls=o("p"),ls.innerHTML=Rt,fa=t(),rs=o("div"),bo=new u(!1),ga=t(),is=o("p"),is.textContent=Bt,ma=t(),ps=o("div"),_o=new u(!1),wa=t(),cs=o("p"),cs.innerHTML=$t,ba=t(),ks=o("div"),To=new u(!1),_a=t(),hs=o("p"),hs.innerHTML=Ft,Ta=t(),ys=o("p"),ys.textContent=Jt,Ca=t(),vs=o("div"),Co=new u(!1),Ma=t(),ds=o("p"),ds.innerHTML=Ut,La=t(),us=o("p"),us.textContent=Wt,Mo=t(),N=o("section"),N.innerHTML=Yt,Lo=t(),T=o("section"),xs=o("h3"),xs.innerHTML=Kt,Ha=t(),fs=o("p"),fs.textContent=Qt,Sa=t(),gs=o("div"),Ho=new u(!1),Aa=t(),ms=o("p"),ms.textContent=Gt,Pa=t(),ws=o("div"),So=new u(!1),Ia=t(),bs=o("p"),bs.textContent=Zt,ja=t(),_s=o("div"),Ao=new u(!1),Po=t(),M=o("section"),Ts=o("h3"),Ts.innerHTML=Xt,Ea=t(),Cs=o("p"),Cs.textContent=sn,Na=t(),Ms=o("div"),Io=new u(!1),Da=t(),Ls=o("p"),Ls.textContent=on,za=t(),Hs=o("div"),jo=new u(!1),Eo=t(),p=o("section"),Ss=o("h3"),Ss.innerHTML=an,qa=t(),As=o("p"),As.textContent=tn,Oa=t(),Ps=o("div"),No=new u(!1),Va=t(),Is=o("p"),Is.textContent=nn,Ra=t(),js=o("div"),Do=new u(!1),Ba=t(),Es=o("blockquote"),Es.innerHTML=en,$a=t(),Ns=o("p"),Ns.innerHTML=ln,Fa=t(),Ds=o("p"),Ds.innerHTML=rn,Ja=t(),zs=o("p"),zs.textContent=pn,Ua=t(),qs=o("div"),zo=new u(!1),Wa=t(),Os=o("p"),Os.textContent=cn,Ya=t(),Vs=o("p"),Vs.innerHTML=kn,Ka=t(),Rs=o("p"),Rs.innerHTML=hn,Qa=t(),Bs=o("div"),qo=new u(!1),Ga=t(),$s=o("p"),$s.innerHTML=yn,Za=t(),Fs=o("div"),Oo=new u(!1),Xa=t(),Js=o("p"),Js.textContent=vn,st=t(),Us=o("p"),Us.innerHTML=dn,ot=t(),Ws=o("p"),Ws.textContent=un,at=t(),Ys=o("ul"),Ys.innerHTML=xn,tt=t(),Ks=o("p"),Ks.textContent=fn,Vo=t(),b=o("section"),Qs=o("h2"),Qs.innerHTML=gn,nt=t(),Gs=o("p"),Gs.innerHTML=mn,et=t(),Zs=o("p"),Zs.innerHTML=wn,lt=t(),Xs=o("div"),Ro=new u(!1),rt=t(),so=o("p"),so.textContent=bn,it=t(),oo=o("div"),Bo=new u(!1),pt=t(),ao=o("p"),ao.textContent=_n,ct=t(),to=o("div"),$o=new u(!1),Fo=t(),d=o("section"),no=o("h2"),no.innerHTML=Tn,kt=t(),eo=o("p"),eo.textContent=Cn,ht=t(),lo=o("p"),lo.innerHTML=Mn,yt=t(),ro=o("div"),Jo=new u(!1),vt=t(),io=o("p"),io.innerHTML=Ln,dt=t(),po=o("div"),Uo=new u(!1),ut=t(),co=o("p"),co.textContent=Hn,xt=t(),ko=o("p"),ko.innerHTML=Sn,ft=t(),ho=o("div"),Wo=new u(!1),gt=t(),yo=o("p"),yo.innerHTML=An,mt=t(),vo=o("div"),Yo=new u(!1),Ko=t(),D=o("section"),D.innerHTML=Pn,Qo=t(),z=o("section"),z.innerHTML=In,this.h()},l(i){m=a(i,"P",{"data-svelte-h":!0}),e(m)!=="svelte-fpz8w2"&&(m.innerHTML=j),A=n(i),S=a(i,"P",{"data-svelte-h":!0}),e(S)!=="svelte-yeoma0"&&(S.textContent=_),H=n(i),P=a(i,"BLOCKQUOTE",{"data-svelte-h":!0}),e(P)!=="svelte-xp0ego"&&(P.innerHTML=bt),uo=n(i),y=a(i,"SECTION",{});var r=v(y);O=a(r,"H2",{"data-svelte-h":!0}),e(O)!=="svelte-17or7z5"&&(O.innerHTML=_t),Go=n(r),V=a(r,"P",{"data-svelte-h":!0}),e(V)!=="svelte-1n68f38"&&(V.textContent=Tt),Zo=n(r),R=a(r,"P",{"data-svelte-h":!0}),e(R)!=="svelte-1waqhlz"&&(R.innerHTML=Ct),Xo=n(r),B=a(r,"P",{"data-svelte-h":!0}),e(B)!=="svelte-18j6k9g"&&(B.innerHTML=Mt),sa=n(r),$=a(r,"P",{"data-svelte-h":!0}),e($)!=="svelte-1t4qq04"&&($.innerHTML=Lt),oa=n(r),F=a(r,"P",{"data-svelte-h":!0}),e(F)!=="svelte-1ptxp38"&&(F.innerHTML=Ht),aa=n(r),J=a(r,"P",{"data-svelte-h":!0}),e(J)!=="svelte-1qmt85t"&&(J.innerHTML=St),ta=n(r),E=a(r,"DIV",{style:!0,"data-svelte-h":!0}),e(E)!=="svelte-1e1er1t"&&(E.innerHTML=At),na=n(r),U=a(r,"P",{"data-svelte-h":!0}),e(U)!=="svelte-uviaoe"&&(U.textContent=Pt),ea=n(r),W=a(r,"P",{"data-svelte-h":!0}),e(W)!=="svelte-1nnhzpl"&&(W.textContent=It),la=n(r),Y=a(r,"DIV",{class:!0});var jn=v(Y);xo=x(jn,!1),jn.forEach(l),ra=n(r),K=a(r,"P",{"data-svelte-h":!0}),e(K)!=="svelte-1ivw2j7"&&(K.textContent=jt),ia=n(r),Q=a(r,"DIV",{class:!0});var En=v(Q);fo=x(En,!1),En.forEach(l),pa=n(r),G=a(r,"P",{"data-svelte-h":!0}),e(G)!=="svelte-15s2608"&&(G.innerHTML=Et),r.forEach(l),go=n(i),c=a(i,"SECTION",{});var h=v(c);Z=a(h,"H2",{"data-svelte-h":!0}),e(Z)!=="svelte-rcqq4g"&&(Z.innerHTML=Nt),ca=n(h),X=a(h,"P",{"data-svelte-h":!0}),e(X)!=="svelte-1xuczn1"&&(X.innerHTML=Dt),ka=n(h),ss=a(h,"P",{"data-svelte-h":!0}),e(ss)!=="svelte-3z46rr"&&(ss.innerHTML=zt),ha=n(h),os=a(h,"P",{"data-svelte-h":!0}),e(os)!=="svelte-1ug0pf2"&&(os.textContent=qt),ya=n(h),as=a(h,"DIV",{class:!0});var Nn=v(as);mo=x(Nn,!1),Nn.forEach(l),va=n(h),ts=a(h,"P",{"data-svelte-h":!0}),e(ts)!=="svelte-1ylr15n"&&(ts.innerHTML=Ot),da=n(h),ns=a(h,"P",{"data-svelte-h":!0}),e(ns)!=="svelte-1la2qzb"&&(ns.innerHTML=Vt),ua=n(h),es=a(h,"DIV",{class:!0});var Dn=v(es);wo=x(Dn,!1),Dn.forEach(l),xa=n(h),ls=a(h,"P",{"data-svelte-h":!0}),e(ls)!=="svelte-ofu7f"&&(ls.innerHTML=Rt),fa=n(h),rs=a(h,"DIV",{class:!0});var zn=v(rs);bo=x(zn,!1),zn.forEach(l),ga=n(h),is=a(h,"P",{"data-svelte-h":!0}),e(is)!=="svelte-hygdlg"&&(is.textContent=Bt),ma=n(h),ps=a(h,"DIV",{class:!0});var qn=v(ps);_o=x(qn,!1),qn.forEach(l),wa=n(h),cs=a(h,"P",{"data-svelte-h":!0}),e(cs)!=="svelte-1rh6wqo"&&(cs.innerHTML=$t),ba=n(h),ks=a(h,"DIV",{class:!0});var On=v(ks);To=x(On,!1),On.forEach(l),_a=n(h),hs=a(h,"P",{"data-svelte-h":!0}),e(hs)!=="svelte-l2v26x"&&(hs.innerHTML=Ft),Ta=n(h),ys=a(h,"P",{"data-svelte-h":!0}),e(ys)!=="svelte-v2z8yn"&&(ys.textContent=Jt),Ca=n(h),vs=a(h,"DIV",{class:!0});var Vn=v(vs);Co=x(Vn,!1),Vn.forEach(l),Ma=n(h),ds=a(h,"P",{"data-svelte-h":!0}),e(ds)!=="svelte-ei1bue"&&(ds.innerHTML=Ut),La=n(h),us=a(h,"P",{"data-svelte-h":!0}),e(us)!=="svelte-14xa8ny"&&(us.textContent=Wt),h.forEach(l),Mo=n(i),N=a(i,"SECTION",{"data-svelte-h":!0}),e(N)!=="svelte-3vivpl"&&(N.innerHTML=Yt),Lo=n(i),T=a(i,"SECTION",{});var L=v(T);xs=a(L,"H3",{"data-svelte-h":!0}),e(xs)!=="svelte-12dljle"&&(xs.innerHTML=Kt),Ha=n(L),fs=a(L,"P",{"data-svelte-h":!0}),e(fs)!=="svelte-edysu7"&&(fs.textContent=Qt),Sa=n(L),gs=a(L,"DIV",{class:!0});var Rn=v(gs);Ho=x(Rn,!1),Rn.forEach(l),Aa=n(L),ms=a(L,"P",{"data-svelte-h":!0}),e(ms)!=="svelte-ap69wd"&&(ms.textContent=Gt),Pa=n(L),ws=a(L,"DIV",{class:!0});var Bn=v(ws);So=x(Bn,!1),Bn.forEach(l),Ia=n(L),bs=a(L,"P",{"data-svelte-h":!0}),e(bs)!=="svelte-1bcrjh8"&&(bs.textContent=Zt),ja=n(L),_s=a(L,"DIV",{class:!0});var $n=v(_s);Ao=x($n,!1),$n.forEach(l),L.forEach(l),Po=n(i),M=a(i,"SECTION",{});var I=v(M);Ts=a(I,"H3",{"data-svelte-h":!0}),e(Ts)!=="svelte-12pylz2"&&(Ts.innerHTML=Xt),Ea=n(I),Cs=a(I,"P",{"data-svelte-h":!0}),e(Cs)!=="svelte-fnmldi"&&(Cs.textContent=sn),Na=n(I),Ms=a(I,"DIV",{class:!0});var Fn=v(Ms);Io=x(Fn,!1),Fn.forEach(l),Da=n(I),Ls=a(I,"P",{"data-svelte-h":!0}),e(Ls)!=="svelte-12ix6xy"&&(Ls.textContent=on),za=n(I),Hs=a(I,"DIV",{class:!0});var Jn=v(Hs);jo=x(Jn,!1),Jn.forEach(l),I.forEach(l),Eo=n(i),p=a(i,"SECTION",{});var k=v(p);Ss=a(k,"H3",{"data-svelte-h":!0}),e(Ss)!=="svelte-1j2da3g"&&(Ss.innerHTML=an),qa=n(k),As=a(k,"P",{"data-svelte-h":!0}),e(As)!=="svelte-12srk28"&&(As.textContent=tn),Oa=n(k),Ps=a(k,"DIV",{class:!0});var Un=v(Ps);No=x(Un,!1),Un.forEach(l),Va=n(k),Is=a(k,"P",{"data-svelte-h":!0}),e(Is)!=="svelte-12ix6xy"&&(Is.textContent=nn),Ra=n(k),js=a(k,"DIV",{class:!0});var Wn=v(js);Do=x(Wn,!1),Wn.forEach(l),Ba=n(k),Es=a(k,"BLOCKQUOTE",{"data-svelte-h":!0}),e(Es)!=="svelte-1gdjt3z"&&(Es.innerHTML=en),$a=n(k),Ns=a(k,"P",{"data-svelte-h":!0}),e(Ns)!=="svelte-f6m4gz"&&(Ns.innerHTML=ln),Fa=n(k),Ds=a(k,"P",{"data-svelte-h":!0}),e(Ds)!=="svelte-1hrcmo8"&&(Ds.innerHTML=rn),Ja=n(k),zs=a(k,"P",{"data-svelte-h":!0}),e(zs)!=="svelte-jwuy1e"&&(zs.textContent=pn),Ua=n(k),qs=a(k,"DIV",{class:!0});var Yn=v(qs);zo=x(Yn,!1),Yn.forEach(l),Wa=n(k),Os=a(k,"P",{"data-svelte-h":!0}),e(Os)!=="svelte-1aq0qfn"&&(Os.textContent=cn),Ya=n(k),Vs=a(k,"P",{"data-svelte-h":!0}),e(Vs)!=="svelte-1m44o4g"&&(Vs.innerHTML=kn),Ka=n(k),Rs=a(k,"P",{"data-svelte-h":!0}),e(Rs)!=="svelte-7b5ld6"&&(Rs.innerHTML=hn),Qa=n(k),Bs=a(k,"DIV",{class:!0});var Kn=v(Bs);qo=x(Kn,!1),Kn.forEach(l),Ga=n(k),$s=a(k,"P",{"data-svelte-h":!0}),e($s)!=="svelte-xkwlch"&&($s.innerHTML=yn),Za=n(k),Fs=a(k,"DIV",{class:!0});var Qn=v(Fs);Oo=x(Qn,!1),Qn.forEach(l),Xa=n(k),Js=a(k,"P",{"data-svelte-h":!0}),e(Js)!=="svelte-xp8bvu"&&(Js.textContent=vn),st=n(k),Us=a(k,"P",{"data-svelte-h":!0}),e(Us)!=="svelte-zub3ez"&&(Us.innerHTML=dn),ot=n(k),Ws=a(k,"P",{"data-svelte-h":!0}),e(Ws)!=="svelte-1co9x20"&&(Ws.textContent=un),at=n(k),Ys=a(k,"UL",{"data-svelte-h":!0}),e(Ys)!=="svelte-jtbufy"&&(Ys.innerHTML=xn),tt=n(k),Ks=a(k,"P",{"data-svelte-h":!0}),e(Ks)!=="svelte-zyfe6i"&&(Ks.textContent=fn),k.forEach(l),Vo=n(i),b=a(i,"SECTION",{});var C=v(b);Qs=a(C,"H2",{"data-svelte-h":!0}),e(Qs)!=="svelte-12kdk5o"&&(Qs.innerHTML=gn),nt=n(C),Gs=a(C,"P",{"data-svelte-h":!0}),e(Gs)!=="svelte-7alus3"&&(Gs.innerHTML=mn),et=n(C),Zs=a(C,"P",{"data-svelte-h":!0}),e(Zs)!=="svelte-1q94izz"&&(Zs.innerHTML=wn),lt=n(C),Xs=a(C,"DIV",{class:!0});var Gn=v(Xs);Ro=x(Gn,!1),Gn.forEach(l),rt=n(C),so=a(C,"P",{"data-svelte-h":!0}),e(so)!=="svelte-3cvsbg"&&(so.textContent=bn),it=n(C),oo=a(C,"DIV",{class:!0});var Zn=v(oo);Bo=x(Zn,!1),Zn.forEach(l),pt=n(C),ao=a(C,"P",{"data-svelte-h":!0}),e(ao)!=="svelte-xthx18"&&(ao.textContent=_n),ct=n(C),to=a(C,"DIV",{class:!0});var Xn=v(to);$o=x(Xn,!1),Xn.forEach(l),C.forEach(l),Fo=n(i),d=a(i,"SECTION",{});var w=v(d);no=a(w,"H2",{"data-svelte-h":!0}),e(no)!=="svelte-ioucm4"&&(no.innerHTML=Tn),kt=n(w),eo=a(w,"P",{"data-svelte-h":!0}),e(eo)!=="svelte-9bvm6x"&&(eo.textContent=Cn),ht=n(w),lo=a(w,"P",{"data-svelte-h":!0}),e(lo)!=="svelte-10hkzzi"&&(lo.innerHTML=Mn),yt=n(w),ro=a(w,"DIV",{class:!0});var se=v(ro);Jo=x(se,!1),se.forEach(l),vt=n(w),io=a(w,"P",{"data-svelte-h":!0}),e(io)!=="svelte-15kpac8"&&(io.innerHTML=Ln),dt=n(w),po=a(w,"DIV",{class:!0});var oe=v(po);Uo=x(oe,!1),oe.forEach(l),ut=n(w),co=a(w,"P",{"data-svelte-h":!0}),e(co)!=="svelte-1w71zeb"&&(co.textContent=Hn),xt=n(w),ko=a(w,"P",{"data-svelte-h":!0}),e(ko)!=="svelte-i3gtmm"&&(ko.innerHTML=Sn),ft=n(w),ho=a(w,"DIV",{class:!0});var ae=v(ho);Wo=x(ae,!1),ae.forEach(l),gt=n(w),yo=a(w,"P",{"data-svelte-h":!0}),e(yo)!=="svelte-1x3vslk"&&(yo.innerHTML=An),mt=n(w),vo=a(w,"DIV",{class:!0});var te=v(vo);Yo=x(te,!1),te.forEach(l),w.forEach(l),Ko=n(i),D=a(i,"SECTION",{"data-svelte-h":!0}),e(D)!=="svelte-vfk09w"&&(D.innerHTML=Pn),Qo=n(i),z=a(i,"SECTION",{"data-svelte-h":!0}),e(z)!=="svelte-lxa0hs"&&(z.innerHTML=In),this.h()},h(){ee(E,"overflow","auto"),ee(E,"margin-bottom","2em"),xo.a=null,f(Y,"class","code-section"),fo.a=null,f(Q,"class","code-section"),mo.a=null,f(as,"class","code-section"),wo.a=null,f(es,"class","code-section"),bo.a=null,f(rs,"class","code-section"),_o.a=null,f(ps,"class","code-section"),To.a=null,f(ks,"class","code-section"),Co.a=null,f(vs,"class","code-section"),Ho.a=null,f(gs,"class","code-section"),So.a=null,f(ws,"class","code-section"),Ao.a=null,f(_s,"class","code-section"),Io.a=null,f(Ms,"class","code-section"),jo.a=null,f(Hs,"class","code-section"),No.a=null,f(Ps,"class","code-section"),Do.a=null,f(js,"class","code-section"),zo.a=null,f(qs,"class","code-section"),qo.a=null,f(Bs,"class","code-section"),Oo.a=null,f(Fs,"class","code-section"),Ro.a=null,f(Xs,"class","code-section"),Bo.a=null,f(oo,"class","code-section"),$o.a=null,f(to,"class","code-section"),Jo.a=null,f(ro,"class","code-section"),Uo.a=null,f(po,"class","code-section"),Wo.a=null,f(ho,"class","code-section"),Yo.a=null,f(vo,"class","code-section")},m(i,r){g(i,m,r),g(i,A,r),g(i,S,r),g(i,H,r),g(i,P,r),g(i,uo,r),g(i,y,r),s(y,O),s(y,Go),s(y,V),s(y,Zo),s(y,R),s(y,Xo),s(y,B),s(y,sa),s(y,$),s(y,oa),s(y,F),s(y,aa),s(y,J),s(y,ta),s(y,E),s(y,na),s(y,U),s(y,ea),s(y,W),s(y,la),s(y,Y),xo.m(ce,Y),s(y,ra),s(y,K),s(y,ia),s(y,Q),fo.m(ke,Q),s(y,pa),s(y,G),g(i,go,r),g(i,c,r),s(c,Z),s(c,ca),s(c,X),s(c,ka),s(c,ss),s(c,ha),s(c,os),s(c,ya),s(c,as),mo.m(he,as),s(c,va),s(c,ts),s(c,da),s(c,ns),s(c,ua),s(c,es),wo.m(ye,es),s(c,xa),s(c,ls),s(c,fa),s(c,rs),bo.m(ve,rs),s(c,ga),s(c,is),s(c,ma),s(c,ps),_o.m(de,ps),s(c,wa),s(c,cs),s(c,ba),s(c,ks),To.m(ue,ks),s(c,_a),s(c,hs),s(c,Ta),s(c,ys),s(c,Ca),s(c,vs),Co.m(xe,vs),s(c,Ma),s(c,ds),s(c,La),s(c,us),g(i,Mo,r),g(i,N,r),g(i,Lo,r),g(i,T,r),s(T,xs),s(T,Ha),s(T,fs),s(T,Sa),s(T,gs),Ho.m(fe,gs),s(T,Aa),s(T,ms),s(T,Pa),s(T,ws),So.m(ge,ws),s(T,Ia),s(T,bs),s(T,ja),s(T,_s),Ao.m(me,_s),g(i,Po,r),g(i,M,r),s(M,Ts),s(M,Ea),s(M,Cs),s(M,Na),s(M,Ms),Io.m(we,Ms),s(M,Da),s(M,Ls),s(M,za),s(M,Hs),jo.m(be,Hs),g(i,Eo,r),g(i,p,r),s(p,Ss),s(p,qa),s(p,As),s(p,Oa),s(p,Ps),No.m(_e,Ps),s(p,Va),s(p,Is),s(p,Ra),s(p,js),Do.m(Te,js),s(p,Ba),s(p,Es),s(p,$a),s(p,Ns),s(p,Fa),s(p,Ds),s(p,Ja),s(p,zs),s(p,Ua),s(p,qs),zo.m(Ce,qs),s(p,Wa),s(p,Os),s(p,Ya),s(p,Vs),s(p,Ka),s(p,Rs),s(p,Qa),s(p,Bs),qo.m(Me,Bs),s(p,Ga),s(p,$s),s(p,Za),s(p,Fs),Oo.m(Le,Fs),s(p,Xa),s(p,Js),s(p,st),s(p,Us),s(p,ot),s(p,Ws),s(p,at),s(p,Ys),s(p,tt),s(p,Ks),g(i,Vo,r),g(i,b,r),s(b,Qs),s(b,nt),s(b,Gs),s(b,et),s(b,Zs),s(b,lt),s(b,Xs),Ro.m(He,Xs),s(b,rt),s(b,so),s(b,it),s(b,oo),Bo.m(Se,oo),s(b,pt),s(b,ao),s(b,ct),s(b,to),$o.m(Ae,to),g(i,Fo,r),g(i,d,r),s(d,no),s(d,kt),s(d,eo),s(d,ht),s(d,lo),s(d,yt),s(d,ro),Jo.m(Pe,ro),s(d,vt),s(d,io),s(d,dt),s(d,po),Uo.m(Ie,po),s(d,ut),s(d,co),s(d,xt),s(d,ko),s(d,ft),s(d,ho),Wo.m(je,ho),s(d,gt),s(d,yo),s(d,mt),s(d,vo),Yo.m(Ee,vo),g(i,Ko,r),g(i,D,r),g(i,Qo,r),g(i,z,r)},p:ze,d(i){i&&(l(m),l(A),l(S),l(H),l(P),l(uo),l(y),l(go),l(c),l(Mo),l(N),l(Lo),l(T),l(Po),l(M),l(Eo),l(p),l(Vo),l(b),l(Fo),l(d),l(Ko),l(D),l(Qo),l(z))}}}function sl(q){let m,j;const A=[q[0],pe];let S={$$slots:{default:[Xe]},$$scope:{ctx:q}};for(let _=0;_<A.length;_+=1)S=wt(S,A[_]);return m=new We({props:S}),{c(){Ve(m.$$.fragment)},l(_){Re(m.$$.fragment,_)},m(_,H){Be(m,_,H),j=!0},p(_,[H]){const P=H&1?Ue(A,[H&1&&le(_[0]),H&0&&le(pe)]):{};H&2&&(P.$$scope={dirty:H,ctx:_}),m.$set(P)},i(_){j||($e(m.$$.fragment,_),j=!0)},o(_){Fe(m.$$.fragment,_),j=!1},d(_){Je(m,_)}}}const pe={title:"Manipulating AST with JavaScript",date:"2019-11-22T08:00:00Z",description:"Manipulating AST is not that hard anyway",tags:["JavaScript","AST","transform","depth-first-search"],series:"AST",label:"blog",tableOfContents:[{link:"the-parsers",title:"The parsers"},{link:"traversing-an-ast",title:"Traversing an AST"},{link:"manipulating-ast",title:"Manipulating AST",nested:[{link:"adding-a-node",title:"Adding a node"},{link:"replacing-a-node",title:"Replacing a node"},{link:"removing-a-node",title:"Removing a node"}]},{link:"targeting-a-node",title:"Targeting a node"},{link:"creating-a-node",title:"Creating a node"},{link:"summary",title:"Summary"},{link:"further-readings",title:"Further Readings"}]};function ol(q,m,j){return De("blog",{image:Ze}),q.$$set=A=>{j(0,m=wt(wt({},m),ne(A)))},m=ne(m),[m]}class ll extends qe{constructor(m){super(),Oe(this,m,ol,sl,Ne,{})}}export{ll as component};
