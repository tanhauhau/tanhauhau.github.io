import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as z,g as Y,d as Z,b as H,s,f as J,e as o,a as K,r as a,n as e}from"../chunks/C2PHntuy.js";import{h as n}from"../chunks/C3QlhiH-.js";import{i as Q}from"../chunks/BQOOHHT8.js";import{l as X,s as ss}from"../chunks/gzNpScmH.js";import{B as os}from"../chunks/B1caYEk9.js";import{t as as}from"../chunks/C3bQ3Oc7.js";const P={title:"Webpack's TemplatePlugin",date:"2020-01-21T08:00:00Z",label:"blog",description:"If you are using webpack to bundle your library, you most likely will export something in your entry file:And if you build it with webpack just like that, out-of-the-box, you may be surprised that if you try to ...",tableOfContents:[{link:"webpack-s-output-library-options",title:"Webpack's output.library *  options",nested:[{link:"1-name-of-a-module-system-commonjs-commonjs2-amd-umd",title:'1. Name of a module system:  `"commonjs"` ,  `"commonjs2"` ,  `"amd"` ,  `"umd"` , ...'},{link:"2-name-of-a-variable-var-this-self-window-global",title:'2. Name of a variable:  `"var"` ,  `"this"` ,  `"self"` ,  `"window"` ,  `"global"`'}]},{link:"writing-a-webpack-plugin",title:"Writing a webpack plugin"},{link:"closing-note",title:"Closing Note"}]},{title:ys,date:vs,label:ds,description:us,tableOfContents:ms}=P;var ns=H(`<p>If you are using webpack to bundle your library, you most likely will export something in your entry file:</p> <div class="code-section"><!></div> <p>And if you build it with webpack just like that, out-of-the-box, you may be surprised that if you try to <code class="inline">require()</code> the built file, you would find that there's nothing being exported by the built file.</p> <div class="code-section"><!></div> <p>If you've read <a href="/i-wrote-my-module-bundler/">my previous article on writing a module bundler</a>, you can imagine that the output bundle looks something like this:</p> <div class="code-section"><!></div> <p><em>(Everything should be familiar, except the fact that instead of calling <code class="inline">webpackStart</code> in a separate statement, I made it into a IIFE (Immediately Invoked Function Expression) for reasons that will be apparent later)</em></p> <p>In order to build for a library, ie: to expose whatever is exported by the entry file, webpack provides 3 options that you can play with:</p> <ul><li><a href="https://webpack.js.org/configuration/output/#outputlibrary" rel="nofollow">output.library</a></li> <li><a href="https://webpack.js.org/configuration/output/#outputlibraryexport" rel="nofollow">output.libraryExport</a></li> <li><a href="https://webpack.js.org/configuration/output/#outputlibrarytarget" rel="nofollow">output.libraryTarget</a></li></ul> <section><h2><a href="#webpack-s-output-library-options" id="webpack-s-output-library-options">Webpack's output.library* options</a></h2> <p>To understand how each of them works, let's start with <code class="inline">output.libraryTarget</code>.</p> <p><code class="inline">output.libraryTarget</code> accepts <code class="inline">string</code> as value, there are 2 main groups of values that you can provide to the <code class="inline">output.libraryTarget</code> option:</p></section> <section><h3><a href="#1-name-of-a-module-system-commonjs-commonjs2-amd-umd" id="1-name-of-a-module-system-commonjs-commonjs2-amd-umd">1. Name of a module system: <code class="inline">"commonjs"</code>, <code class="inline">"commonjs2"</code>, <code class="inline">"amd"</code>, <code class="inline">"umd"</code>, ...</a></h3> <p>Webpack allows you to specify the name of the module system that you want to use to expose the exported values of the entry file.</p> <p>You can specify a module system that is different from the one that you are using in your library.</p> <p>Let's try <code class="inline">commonjs2</code> as an example:</p> <div class="code-section"><!></div> <p><code class="inline">commonjs2</code> uses <code class="inline">module.exports</code> to export values from a module. In this example, webpack assigns the return value of the IIFE to <code class="inline">module.exports</code>.</p> <p>If you look at the bundled code, it is not much different than the one without specifying <code class="inline">output.libraryTarget</code>. The only difference is that the bundled code is prefixed with <code class="inline">module.exports =</code>;</p> <blockquote><p>By the way, if you are curious about the difference between commonjs and commonjs2, you can follow the thread of <a href="https://github.com/webpack/webpack/issues/1114" rel="nofollow">this issue</a>.</p></blockquote></section> <section><h3><a href="#2-name-of-a-variable-var-this-self-window-global" id="2-name-of-a-variable-var-this-self-window-global">2. Name of a variable: <code class="inline">"var"</code>, <code class="inline">"this"</code>, <code class="inline">"self"</code>, <code class="inline">"window"</code>, <code class="inline">"global"</code></a></h3> <p>On the other hand, instead of exposing the library content through a module system, you can specify the variable name which the export object is assigned to.</p> <p>Let's take <code class="inline">self</code> as an example:</p> <div class="code-section"><!></div> <p>All the exported values are assigned to <code class="inline">self</code>.</p> <p>Again observe the bundled code, this time round we prefixed the bundled code with <code class="inline">Object.assign(self,</code> and suffixed it with <code class="inline">);</code>.</p> <p>Specifiying the <code class="inline">output.libraryTarget</code> as <code class="inline">var</code> on the other hand, allows you to assign it to a variable name, which you can provide in <code class="inline">output.library</code> option:</p> <div class="code-section"><!></div> <p>If you don't want <code class="inline">myApp</code> to contain all the exported value of the entry file, you can provide the key that you want to export only in the <code class="inline">output.libraryExport</code> option:</p> <div class="code-section"><!></div> <p>Again you can observe that by playing different option values of <code class="inline">output.library</code>, <code class="inline">output.libraryTarget</code>, <code class="inline">output.libraryExport</code>, webpack adds different prefix and suffix to the bundled code:</p> <div class="code-section"><!></div> <p>So, instead of using the webpack built-in library targets, what should we do if we want to support a custom library target that looks something like below:</p> <div class="code-section"><!></div> <p>I searched through the <a href="https://webpack.js.org/configuration/output/" rel="nofollow">webpack official docs</a> and found no options that allows that. So the only solution at the moment is to write a webpack plugin.</p></section> <section><h2><a href="#writing-a-webpack-plugin" id="writing-a-webpack-plugin">Writing a webpack plugin</a></h2> <p>After digging around the <a href="https://github.com/webpack/webpack" rel="nofollow">webpack source code</a>, I found out that <a href="https://github.com/webpack/webpack/blob/master/lib/LibraryTemplatePlugin.js" rel="nofollow">LibraryTemplatePlugin</a> instantiates different TemplatePlugins based on the value of the <code class="inline">output.libraryTarget</code> option:</p> <div class="code-section"><!></div> <p>I went to look into one of the TemplatePlugins, the <a href="https://github.com/webpack/webpack/blob/master/lib/SetVarTemplatePlugin.js" rel="nofollow">SetVarTemplatePlugin</a>:</p> <div class="code-section"><!></div> <p>I don't understand line-by-line everything that happened in the file, but I do know that the line highlighted above, is where webpack concats the <code class="inline">varExpression =</code> (in the case of <code class="inline">commonjs</code>, <code class="inline">varExpression</code> is <code class="inline">module.exports</code>, thus <code class="inline">module.exports =</code>) and the source (which in this case is the bundled code).</p> <p>So, to have the following:</p> <div class="code-section"><!></div> <p>we need:</p> <div class="code-section"><!></div> <p>So, I did the following:</p> <ol><li>Created a new file and pasted the entire source from <a href="https://github.com/webpack/webpack/blob/master/lib/SetVarTemplatePlugin.js" rel="nofollow">SetVarTemplatePlugin.js</a></li> <li>Searched + replaced to rename the plugin name to something more appropriate, (SetModuleTemplatePlugin)</li> <li>Replaced relative import, <code class="inline">require("./RuntimeGlobals")</code> to require from webpack, <code class="inline">require("webpack/lib/RuntimeGlobals")</code></li> <li>Replaced the line <code class="inline">return new ConcatSource(prefix, source);</code> to the following:</li></ol> <div class="code-section"><!></div> <ol><li>Removed <code class="inline">output.library</code>, <code class="inline">output.libraryTarget</code> from webpack config</li> <li>Added my new plugin:</li></ol> <div class="code-section"><!></div> <p>To my surprise, it worked! Almost.</p> <p>When I run the bundled code, the customRegistry registered an empty object, nothing is exported from the bundled code.</p> <p>I went into <a href="https://github.com/webpack/webpack/blob/master/lib/LibraryTemplatePlugin.js" rel="nofollow">LibraryTemplatePlugin.js</a> to look about, because that's the most obvious place to start looking, since I've copied line-by-line from <a href="https://github.com/webpack/webpack/blob/master/lib/SetVarTemplatePlugin.js" rel="nofollow">SetVarTemplatePlugin.js</a>.</p> <p>I found a pretty obvious line that says:</p> <div class="code-section"><!></div> <p>If I would have to guess, I think that what this line is doing is to mark the export of the entry file as used, so that webpack would not <em>treeshake them away</em>.</p> <blockquote><p>Which, <strong>treeshake</strong> is a cool word that means remove them.</p> <blockquote><p>Which you could argue that <strong>treeshake</strong> does way more that just remove the entry exports, it removes things that is only used by the entry exports, recursively.</p></blockquote></blockquote> <p>I added these 2 lines into my <code class="inline">SetModuleTemplatePlugin</code>, and it worked! Perfectly this time. 🎉</p> <p>I created <a href="https://gist.github.com/tanhauhau/b6b355fbbabe224c9242a5257baa4dec" rel="nofollow">a gist</a> for the complete code, if you are lazy.</p> <p>Lastly, if you noticed, this example is based on the latest master webpack source (at the time writing), which is <code class="inline">webpack@5.0.0-beta.12</code>.</p> <p>If you want a similar plugin with <code class="inline">webpack^4</code>, you can trust me that this article serves as a good enough entry point for you to write the plugin on your own.</p> <p><strong>And I trust you that you can do it. 😎</strong></p></section> <section><h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>Writing a webpack plugin is not impossible. It will especially be easier if you have a good understanding how webpack as a bundler works.</p> <p><em>(Plug: if you want to know more, you can read my <a href="/what-is-module-bundler-and-how-does-it-work/">"What is module bundler and how does it work?"</a>)</em></p></section>`,1);function xs(I,g){const S=X(g,["children","$$slots","$$events","$$legacy"]);z(g,!1),Y("blog",{image:as}),Q(),os(I,ss(()=>S,()=>P,{children:(q,es)=>{var w=ns(),t=s(J(w),2),E=o(t);n(E,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// weback.config.js</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./src/index.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// src/index.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`),a(t);var l=s(t,4),A=o(l);n(A,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/bundle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(foo); </span><span style="color: var(--shiki-token-comment)">// prints &#96;&#123;&#125;&#96; (empty object)</span></span></code></pre>`),a(l);var i=s(l,4),C=o(i);n(C,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`),a(i);var r=s(i,10),f=s(o(r),8),D=o(f);n(D,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryTarget</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;commonjs2&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`),a(f),e(6),a(r);var p=s(r,2),c=s(o(p),6),L=o(c);n(L,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryTarget</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;self&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.assign</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  self</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  (</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;)(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// self.default === &#39;foo&#39;</span></span></code></pre>`),a(c);var k=s(c,8),N=o(k);n(N,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  library</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;myApp&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryTarget</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;var&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> myApp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// myApp === &#123; default: &#39;foo&#39; &#125;</span></span></code></pre>`),a(k);var h=s(k,4),O=o(h);n(O,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  library</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;myApp&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryTarget</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;var&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  libraryExport</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// dist/bundle.js</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> myApp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123; moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(entryPoint);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;src/index.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;).default;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// myApp === &#39;foo&#39;</span></span></code></pre>`),a(h);var y=s(h,4),V=o(y);n(V,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// libraryTarget: &#39;commonjs2&#39;:</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// libraryTarget: &#39;self&#39;:</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.assign</span><span style="color: var(--shiki-color-text)">(self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// library: &#39;myApp&#39;, libraryTarget: &#39;var&#39;:</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> myApp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// library: &#39;myApp&#39;, libraryTarget: &#39;var&#39;, libraryExport: &#39;default&#39;:</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> myApp </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;.default;</span></span></code></pre>`),a(y);var j=s(y,4),W=o(j);n(W,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// libraryTarget: ???</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">customRegistry</span><span style="color: var(--shiki-token-function)">.register</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;my-app&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;);</span></span></code></pre>`),a(j),e(2),a(p);var T=s(p,2),v=s(o(T),4),$=o(v);n($,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// webpack/lib/LibraryTemplatePlugin.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">LibraryTemplatePlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)"> (compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.libraryTarget) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;amd&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;amd-require&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">AmdTemplatePlugin</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">break</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;var&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SetVarTemplatePlugin</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">break</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;this&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;self&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;window&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SetVarTemplatePlugin</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">break</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(v);var d=s(v,4),R=o(d);n(R,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">ConcatSource</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-sources&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SetVarTemplatePlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;SetVarTemplatePlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">render</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;SetVarTemplatePlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        (source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; chunk</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> chunkGraph &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">varExpression</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> =&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(prefix</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),a(d);var u=s(d,6),B=o(u);n(B,()=>'<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">customRegistry</span><span style="color: var(--shiki-token-function)">.register</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;my-app&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#123;BUNDLED_CODE&#125;&#125;);</span></span></code></pre>'),a(u);var m=s(u,4),U=o(m);n(U,()=>'<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;customRegistry.register(&#39;my-app&#39;, &#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>'),a(m);var x=s(m,6),M=o(x);n(M,()=>'<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;customRegistry.register(&#39;my-app&#39;, &#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>'),a(x);var b=s(x,4),F=o(b);n(F,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// webpack.config.js</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SetModuleTemplatePlugin</span><span style="color: var(--shiki-color-text)">()]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`),a(b);var _=s(b,10),G=o(_);n(G,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">FlagEntryExportAsUsedPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;./FlagEntryExportAsUsedPlugin&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FlagEntryExportAsUsedPlugin</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.libraryTarget </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;module&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;used a library export&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span></code></pre>`),a(_),e(14),a(T),e(2),K(q,w)},$$slots:{default:!0}})),Z()}export{xs as component};
