import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as ne,g as re,d as ie,b as ce,s as t,f as le,e,t as pe,a as de,r as s,n}from"../chunks/C2PHntuy.js";import{h as a}from"../chunks/C3QlhiH-.js";import{s as o}from"../chunks/CEusTUg_.js";import{i as he}from"../chunks/BQOOHHT8.js";import{l as ve,s as ke}from"../chunks/gzNpScmH.js";import{B as me}from"../chunks/B1caYEk9.js";const H=""+new URL("../assets/overview.CO0-Obf1.png",import.meta.url).href,fe=""+new URL("../assets/overview.CWcd_Tt-.png",import.meta.url).href,ue=""+new URL("../assets/overview.CMGOB7Sb.webp",import.meta.url).href,be=""+new URL("../assets/overview.DIvoQI8a.webp",import.meta.url).href,P=""+new URL("../assets/step-1.CloCD8jh.png",import.meta.url).href,ye=""+new URL("../assets/step-1.CLfe1vO3.png",import.meta.url).href,ge=""+new URL("../assets/step-1.B4wRfU0g.webp",import.meta.url).href,we=""+new URL("../assets/step-1.B7KUzUQp.webp",import.meta.url).href,N=""+new URL("../assets/step-2.DKaS_fje.png",import.meta.url).href,_e=""+new URL("../assets/step-2.BLav5H2f.png",import.meta.url).href,xe=""+new URL("../assets/step-2.DXzozrKG.webp",import.meta.url).href,Se=""+new URL("../assets/step-2.BfqrBdhN.webp",import.meta.url).href,K=""+new URL("../assets/step-3.CGyKNQuB.png",import.meta.url).href,Re=""+new URL("../assets/step-3.BQ7n2Tea.png",import.meta.url).href,je=""+new URL("../assets/step-3.nNGeyG03.webp",import.meta.url).href,Le=""+new URL("../assets/step-3.D0if-4bC.webp",import.meta.url).href,Q=""+new URL("../assets/step-4.Cp43jUJH.png",import.meta.url).href,Te=""+new URL("../assets/step-4.B0gip4j8.png",import.meta.url).href,Ce=""+new URL("../assets/step-4.B_3oskXJ.webp",import.meta.url).href,$e=""+new URL("../assets/step-4.CtfjZeIT.webp",import.meta.url).href,Ue=""+new URL("../assets/hero-twitter.DPwTB0SC.jpg",import.meta.url).href,Y={title:"The Svelte Compiler Handbook",date:"2020-04-05T08:00:00Z",tags:["Svelte","JavaScript","compiler"],description:"The Svelte compilation process can be broken down into 4-steps, 1) parsing source code into AST, 2) tracking references and dependencies, 3) creating code blocks and fragments, and 4) generate code.",label:"blog",tableOfContents:[{link:"who-is-this-for",title:"Who is this for?"},{link:"overview",title:"Overview"},{link:"1-parsing-source-code-into-ast",title:"1. Parsing source code into AST",nested:[{link:"where-can-i-find-the-parser-in-the-source-code",title:"Where can I find the parser in the source code?"},{link:"where-can-i-learn-about-parsing-in-javascript",title:"Where can I learn about parsing in JavaScript?"}]},{link:"2-tracking-references-and-dependencies",title:"2. Tracking references and dependencies",nested:[{link:"a-svelte-creates-a-component-instance",title:"a. Svelte creates a  `Component`  instance."},{link:"b-traverse-the-instance-script-and-module-script-ast",title:"b. Traverse the instance script and module script AST"},{link:"c-traverse-the-template",title:"c. Traverse the template"},{link:"d-traverse-the-instance-script-ast",title:"d. Traverse the instance script AST"},{link:"e-update-css-selectors-to-make-style-declarations-component-scope",title:"e. Update CSS selectors to make style declarations component scope"},{link:"where-can-i-find-this-in-the-source-code",title:"Where can I find this in the source code?"},{link:"where-can-i-learn-about-traversing-in-javascript",title:"Where can I learn about traversing in JavaScript?"}]},{link:"3-creating-code-blocks-and-fragments",title:"3. Creating code blocks and fragments",nested:[{link:"dom-renderer",title:"DOM Renderer"},{link:"ssr-renderer",title:"SSR Renderer"},{link:"where-can-i-find-the-renderer-in-the-source-code",title:"Where can I find the  `Renderer`  in the source code?"}]},{link:"4-generate-code",title:"4. Generate code"},{link:"svelte-runtime",title:"Svelte runtime"}]},{title:Fe,date:Ge,tags:He,description:Pe,label:Ne,tableOfContents:Ke}=Y;var Ae=ce('<section><h2><a href="#who-is-this-for" id="who-is-this-for">Who is this for?</a></h2> <p>Anyone who</p> <ul><li>is interested in the Svelte compilation process</li> <li>wants to get started in reading Svelte source code</li></ul></section> <section><h2><a href="#overview" id="overview">Overview</a></h2> <p><span style="display: block; position: relative; padding-top: 17.512%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Overview"/></picture></span></p> <p>The Svelte compilation process can be broken down into 4-steps</p> <ul><li>Parsing source code into Abstract Syntax Tree (AST)</li> <li>Tracking references and dependencies</li> <li>Creating code blocks and fragments</li> <li>Generate code</li></ul> <p>Which sums out by the following pseudocode:</p> <div class="code-section"><!></div></section> <section><h2><a href="#1-parsing-source-code-into-ast" id="1-parsing-source-code-into-ast">1. Parsing source code into AST</a></h2> <p><span style="display: block; position: relative; padding-top: 45.065%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Step 1"/></picture></span></p> <div class="code-section"><!></div> <p>The Svelte syntax is a superset of HTML. Svelte implements its own parser for the Svelte syntax, which handles:</p> <ul><li>HTML syntax <code class="inline">&lt;div&gt;</code></li> <li>Curly brackets <code class="inline">&#123; data &#125;</code></li> <li>Logic blocks <code class="inline">&#123;#each list as item&#125;</code></li></ul> <p>The Svelte parser handles specially for <code class="inline">&lt;script&gt;</code> and <code class="inline">&lt;style&gt;</code> tags.</p> <p>When the parser encounters a <code class="inline">&lt;script&gt;</code> tag, it uses <a href="https://www.npmjs.com/package/acorn" rel="nofollow">acorn</a> to parse the content within the tag. When the parser sees a <code class="inline">&lt;style&gt;</code> tag, it uses <a href="https://www.npmjs.com/package/css-tree" rel="nofollow">css-tree</a> to parse the CSS content.</p> <p>Besides, the Svelte parser differentiates instance script, <code class="inline">&lt;script&gt;</code>, and module script, <code class="inline">&lt;script context="module"&gt;</code>.</p> <p>The Svelte AST look like:</p> <div class="code-section"><!></div> <p>You can try out the Svelte parser in <a href="https://astexplorer.net/#/gist/828907dd1600c208a4e315962c635b4a/e1c895d49e8899a3be849a137fc557ba66eb2423" rel="nofollow">ASTExplorer</a>. You can find the Svelte parser under <strong>HTML > Svelte</strong>.</p></section> <section><h3><a href="#where-can-i-find-the-parser-in-the-source-code" id="where-can-i-find-the-parser-in-the-source-code">Where can I find the parser in the source code?</a></h3> <p>The parsing <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/index.ts#L79" rel="nofollow">starts here</a>, which the parser is implemented in <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/parse/index.ts" rel="nofollow">src/compiler/parse/index.ts</a>.</p></section> <section><h3><a href="#where-can-i-learn-about-parsing-in-javascript" id="where-can-i-learn-about-parsing-in-javascript">Where can I learn about parsing in JavaScript?</a></h3> <p>My previous article, <a href="/json-parser-with-javascript">"JSON Parser with JavaScript"</a> introduces the terminology and guides you step-by-step on writing a parser for JSON in JavaScript.</p> <p>If this is the your first time learning about parser, I highly recommend you to read that.</p></section> <section><h2><a href="#2-tracking-references-and-dependencies" id="2-tracking-references-and-dependencies">2. Tracking references and dependencies</a></h2> <p><span style="display: block; position: relative; padding-top: 42.219%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Step 2"/></picture></span></p> <div class="code-section"><!></div> <p>In this step, Svelte traverses through the AST to track all the variable declared and referenced and their depedencies.</p></section> <section><h3><a href="#a-svelte-creates-a-component-instance" id="a-svelte-creates-a-component-instance">a. Svelte creates a <code class="inline">Component</code> instance.</a></h3> <p>The <code class="inline">Component</code> class stores information of the Svelte component, which includes:</p> <ul><li>HTML fragment, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L52" rel="nofollow"><code class="inline">fragment</code></a></li> <li>instance script and module script AST and their lexical scopes, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L54" rel="nofollow"><code class="inline">instance_scope</code></a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L53" rel="nofollow"><code class="inline">module_scope</code></a></li> <li>instance variables, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L62" rel="nofollow"><code class="inline">vars</code></a></li> <li>reactive variables, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L71" rel="nofollow"><code class="inline">reactive_declarations</code></a></li> <li>slots, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L94" rel="nofollow"><code class="inline">slots</code></a></li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L351" rel="nofollow">used variable names</a> to prevent naming conflict when creating temporary variables</li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L43" rel="nofollow">warnings</a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L396" rel="nofollow">errors</a></li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L51" rel="nofollow">compile options</a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts#L44" rel="nofollow">ignored warnings</a></li></ul></section> <section><h3><a href="#b-traverse-the-instance-script-and-module-script-ast" id="b-traverse-the-instance-script-and-module-script-ast">b. Traverse the instance script and module script AST</a></h3> <p><code class="inline">Component</code> traverses the instance script and module script AST to <strong>find out all the variables declared, referenced, and updated</strong> within the instance script and module script.</p> <p>Svelte identifies all the variables available before traversing the template. When encountering the variable during template traversal, Svelte will mark the variable as <code class="inline">referenced</code> from template.</p></section> <section><h3><a href="#c-traverse-the-template" id="c-traverse-the-template">c. Traverse the template</a></h3> <p>Svelte traverses through the template AST and creates a <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Fragment.ts" rel="nofollow">Fragment</a> tree out of the template AST.</p> <p>Each fragment node contains information such as:</p> <p><strong>- expression and dependencies</strong></p> <p>Logic blocks, <code class="inline">&#123;#if&#125;</code>, and mustache tags, <code class="inline">&#123; data &#125;</code>, contain expression and the dependencies of the expression.</p> <p><strong>- scope</strong></p> <p><code class="inline">&#123;#each&#125;</code> and <code class="inline">&#123;#await&#125;</code> logic block and <code class="inline">let:</code> binding create new variables for the children template.</p> <p>Svelte creates a different Fragment node for each type of node in the AST, as different kind of Fragment node handles things differently:</p> <ul><li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts" rel="nofollow">Element node</a> validates the <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts#L280" rel="nofollow">attribute</a>, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts#L461" rel="nofollow">bindings</a>, <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts#L647" rel="nofollow">content</a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Element.ts#L658" rel="nofollow">event handlers</a>.</li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/Slot.ts" rel="nofollow">Slot node</a> registers the slot name to the <code class="inline">Component</code>.</li> <li><a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/nodes/EachBlock.ts" rel="nofollow">EachBlock node</a> creates a new scope and tracks the <code class="inline">key</code>, <code class="inline">index</code> and the name of the list to be iterated.</li> <li>...</li></ul></section> <section><h3><a href="#d-traverse-the-instance-script-ast" id="d-traverse-the-instance-script-ast">d. Traverse the instance script AST</a></h3> <p>After traversing through the template, Svelte now knows whether a variable is ever being updated or referenced in the component.</p> <p>With this information, Svelte tries make preparations for optimising the output, for example:</p> <ul><li>determine which variables or functions can be safely hoisted out of the <code class="inline">instance</code> function.</li> <li>determine reactive declarations that does not need to be reactive</li></ul></section> <section><h3><a href="#e-update-css-selectors-to-make-style-declarations-component-scope" id="e-update-css-selectors-to-make-style-declarations-component-scope">e. Update CSS selectors to make style declarations component scope</a></h3> <p>Svelte updates the CSS selectors, by adding <code class="inline">.svelte-xxx</code> class to the selectors when necessary.</p> <p>At the end of this step, Svelte has enough information to generate the compiled code, which brings us to the next step.</p></section> <section><h3><a href="#where-can-i-find-this-in-the-source-code" id="where-can-i-find-this-in-the-source-code">Where can I find this in the source code?</a></h3> <p>You can start reading <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/index.ts#L83-L90" rel="nofollow">from here</a>, which the <code class="inline">Component</code> is implemented in <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/Component.ts" rel="nofollow">src/compiler/compile/Component.ts</a>.</p></section> <section><h3><a href="#where-can-i-learn-about-traversing-in-javascript" id="where-can-i-learn-about-traversing-in-javascript">Where can I learn about traversing in JavaScript?</a></h3> <p>Bear with my shameless plug, my previous article, <a href="/manipulating-ast-with-javascript#traversing-an-ast">"Manipulating AST with JavaScript"</a> covers relevant knowledge you need to know about traversing AST in JavaScript.</p></section> <section><h2><a href="#3-creating-code-blocks-and-fragments" id="3-creating-code-blocks-and-fragments">3. Creating code blocks and fragments</a></h2> <p><span style="display: block; position: relative; padding-top: 44.490%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Step 3"/></picture></span></p> <div class="code-section"><!></div> <p>In this step, Svelte creates a <code class="inline">Renderer</code> instance which keeps track necessary information required to generate the compiled output. Depending on the whether to output DOM or SSR code <em>(<a href="https://svelte.dev/docs#svelte_compile" rel="nofollow">see <code class="inline">generate</code> in compile options</a>)</em>, Svelte instantiates different <code class="inline">Renderer</code> respectively.</p></section> <section><h3><a href="#dom-renderer" id="dom-renderer">DOM Renderer</a></h3> <p>DOM Renderer keeps track of <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/Renderer.ts#L31" rel="nofollow">a list of blocks</a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/Renderer.ts#L28" rel="nofollow">context</a>.</p> <p>A <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/Block.ts" rel="nofollow">Block</a> contains code fragments for generate the <a href="/compile-svelte-in-your-head-part-1/#create_fragment"><code class="inline">create_fragment</code></a> function.</p> <p>Context tracks a list of <a href="/compile-svelte-in-your-head-part-2/#ctx">instance variables</a> which will be presented in the <code class="inline">$$.ctx</code> in the compiled output.</p> <p>In the renderer, Svelte creates a <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/wrappers/Fragment.ts" rel="nofollow">render tree</a> out of the Fragment tree.</p> <p>Each node in the render tree implements the <code class="inline">render</code> function which generate codes that create and update the DOM for the node.</p></section> <section><h3><a href="#ssr-renderer" id="ssr-renderer">SSR Renderer</a></h3> <p>SSR Renderer provide helpers to generate <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" rel="nofollow">template literals</a> in the compiled output, such as <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_ssr/Renderer.ts#L63" rel="nofollow"><code class="inline">add_string(str)</code></a> and <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_ssr/Renderer.ts#L67" rel="nofollow"><code class="inline">add_expression(node)</code></a>.</p></section> <section><h3><a href="#where-can-i-find-the-renderer-in-the-source-code" id="where-can-i-find-the-renderer-in-the-source-code">Where can I find the <code class="inline">Renderer</code> in the source code?</a></h3> <p>The DOM Renderer is implemented in <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_dom/Renderer.ts" rel="nofollow">src/compiler/compile/render_dom/Renderer.ts</a>, and you can check out the SSR Renderer code in <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_ssr/Renderer.ts" rel="nofollow">src/compiler/compile/render_ssr/Renderer.ts</a>.</p></section> <section><h2><a href="#4-generate-code" id="4-generate-code">4. Generate code</a></h2> <p><span style="display: block; position: relative; padding-top: 46.890%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="Step 4"/></picture></span></p> <div class="code-section"><!></div> <p>Different renderer renders differently.</p> <p><strong>The DOM Renderer</strong> traverses through the render tree and calls the <code class="inline">render</code> function of each node along the way. The <code class="inline">Block</code> instance is passed into the <code class="inline">render</code> function, so that each node inserts the code into the appropriate <code class="inline">create_fragment</code> function.</p> <p><strong>The SSR Renderer</strong>, on the other hand, relies on different <a href="https://github.com/sveltejs/svelte/blob/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/compiler/compile/render_ssr/Renderer.ts#L23-L40" rel="nofollow">node handlers</a> to insert strings or expressions into the final template literal.</p> <p>The render function returns <code class="inline">js</code> and <code class="inline">css</code> which will be consumed by the bundler, via <a href="https://github.com/sveltejs/rollup-plugin-svelte" rel="nofollow">rollup-plugin-svelte</a> for rollup and <a href="https://github.com/sveltejs/svelte-loader" rel="nofollow">svelte-loader</a> for webpack respectively.</p></section> <section><h2><a href="#svelte-runtime" id="svelte-runtime">Svelte runtime</a></h2> <p>To remove duplicate code in the compiled output, Svelte provide util function which can be found in the <a href="https://github.com/sveltejs/svelte/tree/aa3dcc06d6b0fcb079ccd993fa6e3455242a2a96/src/runtime/internal" rel="nofollow">src/runtime/internal</a>, such as:</p> <ul><li>dom related utils, eg: <code class="inline">append</code>, <code class="inline">insert</code>, <code class="inline">detach</code></li> <li>scheduling utils, eg: <code class="inline">schedule_update</code>, <code class="inline">flush</code></li> <li>lifecycle utils, eg: <code class="inline">onMount</code>, <code class="inline">beforeUpdate</code></li> <li>animation utils, eg: <code class="inline">create_animation</code></li></ul></section>',1);function Qe(q,f){const X=ve(f,["children","$$slots","$$events","$$legacy"]);ne(f,!1),re("blog",{image:Ue}),he(),me(q,ke(()=>X,()=>Y,{children:(Z,Be)=>{var u=Ae(),r=t(le(u),2),i=t(e(r),2),b=e(i),y=e(b),g=e(y),w=t(g);s(y),s(b),s(i);var _=t(i,8),V=e(_);a(V,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;App.svelte&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// parse source code into AST</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(source);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// tracking references and dependencies</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// creating code blocks and fragments</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.generate </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ssr&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SSRRenderer</span><span style="color: var(--shiki-color-text)">(component) </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DomRenderer</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Generate code</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;App.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> js);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;App.css&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> css);</span></span></code></pre>`),s(_),s(r);var c=t(r,2),l=t(e(c),2),x=e(l),S=e(x),R=e(S),j=t(R);s(S),s(x),s(l);var p=t(l,2),ee=e(p);a(ee,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// parse source code into AST</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(source);</span></span></code></pre>`),s(p);var L=t(p,14),se=e(L);a(se,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  html</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Fragment&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> children</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">] &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  css</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  instance</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123; context</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">&#125; &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  module</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123; context</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;context&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">&#125; &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),s(L),n(2),s(c);var d=t(c,6),h=t(e(d),2),T=e(h),C=e(T),$=e(C),U=t($);s(C),s(T),s(h);var A=t(h,2),te=e(A);a(te,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// tracking references and dependencies</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)">(ast);</span></span></code></pre>`),s(A),n(2),s(d);var v=t(d,16),k=t(e(v),2),B=e(k),W=e(B),I=e(W),O=t(I);s(W),s(B),s(k);var D=t(k,2),oe=e(D);a(oe,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// creating code blocks and fragments</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.generate </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ssr&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SSRRenderer</span><span style="color: var(--shiki-color-text)">(component) </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DomRenderer</span><span style="color: var(--shiki-color-text)">(component);</span></span></code></pre>`),s(D),n(2),s(v);var M=t(v,8),m=t(e(M),2),J=e(m),E=e(J),z=e(E),F=t(z);s(E),s(J),s(m);var G=t(m,2),ae=e(G);a(ae,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Generate code</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`),s(G),n(8),s(M),n(2),pe(()=>{o(g,"srcset",`${ue}, ${be} 2x`),o(w,"src",H),o(w,"srcset",`${H}, ${fe} 2x`),o(R,"srcset",`${ge}, ${we} 2x`),o(j,"src",P),o(j,"srcset",`${P}, ${ye} 2x`),o($,"srcset",`${xe}, ${Se} 2x`),o(U,"src",N),o(U,"srcset",`${N}, ${_e} 2x`),o(I,"srcset",`${je}, ${Le} 2x`),o(O,"src",K),o(O,"srcset",`${K}, ${Re} 2x`),o(z,"srcset",`${Ce}, ${$e} 2x`),o(F,"src",Q),o(F,"srcset",`${Q}, ${Te} 2x`)}),de(Z,u)},$$slots:{default:!0}})),ie()}export{Qe as component};
