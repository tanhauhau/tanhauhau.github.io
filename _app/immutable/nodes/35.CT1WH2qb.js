import{s as Xe,d as fe,e as Oe,f as Se,n as Ye}from"../chunks/scheduler.D6VJxl8L.js";import{S as Ze,i as Ge,m as Ke,n as Qe,o as et,t as tt,a as st,p as lt,e as n,s as o,H as je,c as i,q as p,h as a,d as qe,r as De,g as s,u as ze,j as l}from"../chunks/index.CLAVN-Y5.js";import{g as nt,a as Ae}from"../chunks/code-snippet.Gym6WUAG.js";import{B as it}from"../chunks/BlogLayout.BPekX0dI.js";import{t as ot}from"../chunks/twitter-card-image.C3bQ3Oc7.js";const at=""+new URL("../assets/flow-ast.f7bUm6eq.webp",import.meta.url).href,rt=""+new URL("../assets/flow-ast.AtJjr9i6.webp",import.meta.url).href,pt=""+new URL("../assets/flow-ast.0mVXTJVH.png",import.meta.url).href,Be=""+new URL("../assets/flow-ast.D0rBzaD_.png",import.meta.url).href,ct=""+new URL("../assets/babel-eslint-8-ast.DP6U0ADl.webp",import.meta.url).href,ut=""+new URL("../assets/babel-eslint-8-ast.j_B8lCLF.webp",import.meta.url).href,dt=""+new URL("../assets/babel-eslint-8-ast.7XNrbKA0.png",import.meta.url).href,Ee=""+new URL("../assets/babel-eslint-8-ast.CTVD2_2p.png",import.meta.url).href,ft=""+new URL("../assets/flow-ast.f7bUm6eq.webp",import.meta.url).href,_t=""+new URL("../assets/flow-ast.AtJjr9i6.webp",import.meta.url).href,ht=""+new URL("../assets/flow-ast.0mVXTJVH.png",import.meta.url).href,Ve=""+new URL("../assets/flow-ast.D0rBzaD_.png",import.meta.url).href,mt=""+new URL("../assets/ast-explorer.BNNA6sF1.webp",import.meta.url).href,bt=""+new URL("../assets/ast-explorer.D_-aEESM.webp",import.meta.url).href,wt=""+new URL("../assets/ast-explorer.DSfXiE1T.png",import.meta.url).href,Fe=""+new URL("../assets/ast-explorer.DbZdyVuy.png",import.meta.url).href;function vt(q){let r,h='Today <a href="https://dev.wgao19.cc/" rel="nofollow">Wei Gao</a> posed an interesting question:',f,d,c='She was upgrading Flow to v0.85, <a href="https://medium.com/flow-type/asking-for-required-annotations-64d4f9c1edf8" rel="nofollow">which requires her to explicitly type the argument of the function call</a>. However, when she saved the file, our <a href="https://github.com/prettier/prettier" rel="nofollow">eslint-prettier</a> automatically format the code into a weird syntax:',u,_,_e="So, when she wrote:",D,m,z,Ne='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">fooFunction</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Bar</span><span style="color: var(--shiki-color-text)">&gt;(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>',A,b,he='With <a href="https://github.com/prettier/eslint-plugin-prettier" rel="nofollow">eslint-plugin-prettier</a>, eslint <em>‚Äúfixed‚Äù</em> the code into:',B,w,E,We='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">fooFunction</span><span style="color: var(--shiki-color-text)"> &lt; </span><span style="color: var(--shiki-token-function)">Bar</span><span style="color: var(--shiki-color-text)"> &gt; (</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>',V,v,me='It felt like eslint sees <code class="inline">&lt;</code> and <code class="inline">&gt;</code> as the comparison operator, rather than <code class="inline">&lt;Type&gt;</code> as a whole!',F,x,be='To confirm with my hypothesis, I opened up my favourite tool for inspecting <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow">AST</a>: <a href="https://astexplorer.net/" rel="nofollow">astexplorer.net</a>',J,N,W,y,we='You can paste your code into <a href="https://astexplorer.net/" rel="nofollow">astexplorer.net</a> and see how different parser ‚Äúsees‚Äù your code in terms of a AST (Abstract Syntax Tree).',X,g,ve=`<span style="display: block; position: relative; padding-top: 57.183%; width: 100%;"><picture><source type="image/webp" srcset="${bt}, ${mt} 2x"/><img src="${Fe}" srcset="${Fe}, ${wt} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="You can choose different a parser!"/></picture></span>`,O,k,xe="As you can see from the picture above, you can choose from different parsers:",Y,L,ye='<li><strong>acorn</strong>‚Ää‚Äî‚Ääthe parser used by webpack after the loaders, webpack uses acorn‚Äôs AST to find <code class="inline">import</code> and <code class="inline">require()</code> syntax to know generate the dependency tree of your project, as well as provide an entry for plugins like <a href="https://webpack.js.org/plugins/define-plugin/" rel="nofollow">DefinePlugin</a> to transform the transpiled code.</li> <li><strong>babylon</strong>‚Äî‚Ääthe <a href="https://github.com/babel/babel/" rel="nofollow">babel</a> parser, now it‚Äôs called <a href="https://babeljs.io/docs/en/babel-parser" rel="nofollow">@babel/parser</a>.</li> <li><strong>flow</strong>, <strong>typescript</strong>, <strong>uglify-js</strong>‚Äî‚Ääthe parsers that each of the library uses</li> <li><strong>esprima</strong>‚Ää‚Äî‚Ääthe default eslint parser</li> <li><strong>babel-eslint</strong>‚Ää‚Äî‚Ääa wrapper of babel parser for eslint, which is also the one we used, because we have a ton of babel plugins configured, so by using babel-eslint we don‚Äôt have to reconfigure the same plugins for eslint.</li>',Z,G,K,T,ge="So I copied our code into astexplorer, and selected the ‚Äúflow‚Äù parser:",Q,H,ke=`<span style="display: block; position: relative; padding-top: 28.927%; width: 100%;"><picture><source type="image/webp" srcset="${_t}, ${ft} 2x"/><img src="${Ve}" srcset="${Ve}, ${ht} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="flow ast"/></picture></span>`,ee,C,Le="I can see the type annotation is being parsed as ‚ÄúTypeParameterInstantiation‚Äù, however when I changed the parser to ‚Äúbabel-eslint8‚Äù,",te,M,Te=`<span style="display: block; position: relative; padding-top: 39.444%; width: 100%;"><picture><source type="image/webp" srcset="${ut}, ${ct} 2x"/><img src="${Ee}" srcset="${Ee}, ${dt} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="babel eslint 8 ast"/></picture></span>`,se,$,He="I get a Binary Expression and a SequenceExpression!",le,ne,ie,P,Ce='<strong>Binary Expression</strong> is a way to express logical expression and mathematical expression, eg: <code class="inline">a + b</code> , <code class="inline">a &amp;&amp; b</code> , <code class="inline">a &lt;= b</code>, etc.',oe,R,Me='<strong>Sequence Expression</strong> on the other hand is something you don‚Äôt see people write that often, you can look up how it works in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator" rel="nofollow">Comma operator (MDN)</a>, basically you can write expressions as a expression by joining them with a comma operator (<code class="inline">,</code>), and the expression returns the value of the last expression, eg: result = <code class="inline">(a++, b++, c -= 2, d.push(e), --f)</code>, you increment <code class="inline">a</code> , <code class="inline">b</code> , decrement <code class="inline">c</code> by 2, and pushed <code class="inline">e</code> into <code class="inline">d</code> and decrement <code class="inline">f</code> and set result to the new value of <code class="inline">f</code>. Wow, that‚Äôs a lot in one statement! It‚Äôs confusing to read, but you see this often in a minified code.',ae,re,pe,U,$e='Now this explains why prettier will try to add space in between <code class="inline">&lt;</code> and <code class="inline">&gt;</code> .',ce,I,Pe="I saw that there‚Äôs a babel-eslint9, and I gave it a try, and‚Ä¶",ue,S,Re=`<span style="display: block; position: relative; padding-top: 28.927%; width: 100%;"><picture><source type="image/webp" srcset="${rt}, ${at} 2x"/><img src="${Be}" srcset="${Be}, ${pt} 2x" loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="babel eslint 9 ast"/></picture></span>`,de,j,Ue='It seems like the bug was fixed on <code class="inline">babel-eslint9</code>, so I plowed through the release notes of babel-eslint, and I found this <a href="https://github.com/babel/babel-eslint/pull/444" rel="nofollow">merge commit</a>. So it seems like upgrading babel-eslint to v9 will solve the issue! üéâ';return{c(){r=n("p"),r.innerHTML=h,f=o(),d=n("p"),d.innerHTML=c,u=o(),_=n("p"),_.textContent=_e,D=o(),m=n("div"),z=new je(!1),A=o(),b=n("p"),b.innerHTML=he,B=o(),w=n("div"),E=new je(!1),V=o(),v=n("p"),v.innerHTML=me,F=o(),x=n("p"),x.innerHTML=be,J=o(),N=n("hr"),W=o(),y=n("p"),y.innerHTML=we,X=o(),g=n("p"),g.innerHTML=ve,O=o(),k=n("p"),k.textContent=xe,Y=o(),L=n("ul"),L.innerHTML=ye,Z=o(),G=n("hr"),K=o(),T=n("p"),T.textContent=ge,Q=o(),H=n("p"),H.innerHTML=ke,ee=o(),C=n("p"),C.textContent=Le,te=o(),M=n("p"),M.innerHTML=Te,se=o(),$=n("p"),$.textContent=He,le=o(),ne=n("hr"),ie=o(),P=n("p"),P.innerHTML=Ce,oe=o(),R=n("p"),R.innerHTML=Me,ae=o(),re=n("hr"),pe=o(),U=n("p"),U.innerHTML=$e,ce=o(),I=n("p"),I.textContent=Pe,ue=o(),S=n("p"),S.innerHTML=Re,de=o(),j=n("p"),j.innerHTML=Ue,this.h()},l(e){r=i(e,"P",{"data-svelte-h":!0}),p(r)!=="svelte-1xjxepp"&&(r.innerHTML=h),f=a(e),d=i(e,"P",{"data-svelte-h":!0}),p(d)!=="svelte-fem2qq"&&(d.innerHTML=c),u=a(e),_=i(e,"P",{"data-svelte-h":!0}),p(_)!=="svelte-1hz5r35"&&(_.textContent=_e),D=a(e),m=i(e,"DIV",{class:!0});var t=qe(m);z=De(t,!1),t.forEach(s),A=a(e),b=i(e,"P",{"data-svelte-h":!0}),p(b)!=="svelte-smcm8a"&&(b.innerHTML=he),B=a(e),w=i(e,"DIV",{class:!0});var Ie=qe(w);E=De(Ie,!1),Ie.forEach(s),V=a(e),v=i(e,"P",{"data-svelte-h":!0}),p(v)!=="svelte-1mx5gae"&&(v.innerHTML=me),F=a(e),x=i(e,"P",{"data-svelte-h":!0}),p(x)!=="svelte-14m4uj6"&&(x.innerHTML=be),J=a(e),N=i(e,"HR",{}),W=a(e),y=i(e,"P",{"data-svelte-h":!0}),p(y)!=="svelte-18jbsvy"&&(y.innerHTML=we),X=a(e),g=i(e,"P",{"data-svelte-h":!0}),p(g)!=="svelte-4bzsjs"&&(g.innerHTML=ve),O=a(e),k=i(e,"P",{"data-svelte-h":!0}),p(k)!=="svelte-1hetemh"&&(k.textContent=xe),Y=a(e),L=i(e,"UL",{"data-svelte-h":!0}),p(L)!=="svelte-1b0n8ly"&&(L.innerHTML=ye),Z=a(e),G=i(e,"HR",{}),K=a(e),T=i(e,"P",{"data-svelte-h":!0}),p(T)!=="svelte-18y3jdi"&&(T.textContent=ge),Q=a(e),H=i(e,"P",{"data-svelte-h":!0}),p(H)!=="svelte-x4ytzb"&&(H.innerHTML=ke),ee=a(e),C=i(e,"P",{"data-svelte-h":!0}),p(C)!=="svelte-nfwvl8"&&(C.textContent=Le),te=a(e),M=i(e,"P",{"data-svelte-h":!0}),p(M)!=="svelte-1grpo11"&&(M.innerHTML=Te),se=a(e),$=i(e,"P",{"data-svelte-h":!0}),p($)!=="svelte-an2hdx"&&($.textContent=He),le=a(e),ne=i(e,"HR",{}),ie=a(e),P=i(e,"P",{"data-svelte-h":!0}),p(P)!=="svelte-14v7v7s"&&(P.innerHTML=Ce),oe=a(e),R=i(e,"P",{"data-svelte-h":!0}),p(R)!=="svelte-1htqpwp"&&(R.innerHTML=Me),ae=a(e),re=i(e,"HR",{}),pe=a(e),U=i(e,"P",{"data-svelte-h":!0}),p(U)!=="svelte-1q56tr5"&&(U.innerHTML=$e),ce=a(e),I=i(e,"P",{"data-svelte-h":!0}),p(I)!=="svelte-1naux1u"&&(I.textContent=Pe),ue=a(e),S=i(e,"P",{"data-svelte-h":!0}),p(S)!=="svelte-1hepp1f"&&(S.innerHTML=Re),de=a(e),j=i(e,"P",{"data-svelte-h":!0}),p(j)!=="svelte-iqz6h2"&&(j.innerHTML=Ue),this.h()},h(){z.a=null,ze(m,"class","code-section"),E.a=null,ze(w,"class","code-section")},m(e,t){l(e,r,t),l(e,f,t),l(e,d,t),l(e,u,t),l(e,_,t),l(e,D,t),l(e,m,t),z.m(Ne,m),l(e,A,t),l(e,b,t),l(e,B,t),l(e,w,t),E.m(We,w),l(e,V,t),l(e,v,t),l(e,F,t),l(e,x,t),l(e,J,t),l(e,N,t),l(e,W,t),l(e,y,t),l(e,X,t),l(e,g,t),l(e,O,t),l(e,k,t),l(e,Y,t),l(e,L,t),l(e,Z,t),l(e,G,t),l(e,K,t),l(e,T,t),l(e,Q,t),l(e,H,t),l(e,ee,t),l(e,C,t),l(e,te,t),l(e,M,t),l(e,se,t),l(e,$,t),l(e,le,t),l(e,ne,t),l(e,ie,t),l(e,P,t),l(e,oe,t),l(e,R,t),l(e,ae,t),l(e,re,t),l(e,pe,t),l(e,U,t),l(e,ce,t),l(e,I,t),l(e,ue,t),l(e,S,t),l(e,de,t),l(e,j,t)},p:Ye,d(e){e&&(s(r),s(f),s(d),s(u),s(_),s(D),s(m),s(A),s(b),s(B),s(w),s(V),s(v),s(F),s(x),s(J),s(N),s(W),s(y),s(X),s(g),s(O),s(k),s(Y),s(L),s(Z),s(G),s(K),s(T),s(Q),s(H),s(ee),s(C),s(te),s(M),s(se),s($),s(le),s(ne),s(ie),s(P),s(oe),s(R),s(ae),s(re),s(pe),s(U),s(ce),s(I),s(ue),s(S),s(de),s(j))}}}function xt(q){let r,h;const f=[q[0],Je];let d={$$slots:{default:[vt]},$$scope:{ctx:q}};for(let c=0;c<f.length;c+=1)d=fe(d,f[c]);return r=new it({props:d}),{c(){Ke(r.$$.fragment)},l(c){Qe(r.$$.fragment,c)},m(c,u){et(r,c,u),h=!0},p(c,[u]){const _=u&1?nt(f,[u&1&&Ae(c[0]),u&0&&Ae(Je)]):{};u&2&&(_.$$scope={dirty:u,ctx:c}),r.$set(_)},i(c){h||(tt(r.$$.fragment,c),h=!0)},o(c){st(r.$$.fragment,c),h=!1},d(c){lt(r,c)}}}const Je={title:"My eslint doesn‚Äôt work with for flow 0.85‚Äôs explicit type argument syntax",date:"2019-01-17T08:00:00Z",description:"and how I figured out why.",label:"blog"};function yt(q,r,h){return Oe("blog",{image:ot}),q.$$set=f=>{h(0,r=fe(fe({},r),Se(f)))},r=Se(r),[r]}class Ct extends Ze{constructor(r){super(),Ge(this,r,yt,xt,Xe,{})}}export{Ct as component};
