import{s as M,d as g,e as E,f as H,n as P}from"../chunks/scheduler.85ImRbsk.js";import{S as W,i as j,m as A,n as I,o as N,t as S,a as D,p as O,e as h,s as f,H as V,c as y,q as m,h as w,d as T,r as B,g as v,u as G,j as _,k as d}from"../chunks/index.JMRAb4ib.js";import{g as J,a as $}from"../chunks/code-snippet.p32Anx_S.js";import{B as U}from"../chunks/BlogLayout.TadBQAnB.js";import{t as z}from"../chunks/twitter-card-image.6izpPI6I.js";function F(i){let s,l='<h2><a href="#module-children" id="module-children">module.children</a></h2> <ul><li><a href="https://nodejs.org/api/modules.html#modules_module_children" rel="nofollow">module.children</a> can give you a list of modules required by the current module.<ul><li>can use the dependency tree of current module</li></ul></li></ul>',n,o,a,t='<a href="#require-and-watch" id="require-and-watch">require and watch</a>',p,c,q="<li>requires a file, and pass a callback whenever the module + dependencies changed</li>",x,k,u,L=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">chokidar</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;chokidar&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getValueAndDependencies</span><span style="color: var(--shiki-color-text)">(requirePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(requirePath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">valueMod</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(mod </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">mod</span><span style="color: var(--shiki-color-text)">.id </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> requirePath);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">deps</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [valueMod];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-token-function)">.pop</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">deps</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.id);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(mod </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(mod));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; value</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> deps &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">requireAndWatch</span><span style="color: var(--shiki-color-text)">(requirePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">chokidar</span><span style="color: var(--shiki-token-function)">.watch</span><span style="color: var(--shiki-color-text)">([]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.on</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;ready&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.on</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">startWatch</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">startWatch</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.unwatch</span><span style="color: var(--shiki-color-text)">(dependencies);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dep </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">delete</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">require</span><span style="color: var(--shiki-color-text)">.cache[dep];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    (&#123; value</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> deps</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> dependencies &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getValueAndDependencies</span><span style="color: var(--shiki-color-text)">(requirePath));</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(dependencies);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">startWatch</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> requireAndWatch;</span></span></code></pre>`;return{c(){s=h("section"),s.innerHTML=l,n=f(),o=h("section"),a=h("h2"),a.innerHTML=t,p=f(),c=h("ul"),c.innerHTML=q,x=f(),k=h("div"),u=new V(!1),this.h()},l(r){s=y(r,"SECTION",{"data-svelte-h":!0}),m(s)!=="svelte-1pxx9f1"&&(s.innerHTML=l),n=w(r),o=y(r,"SECTION",{});var e=T(o);a=y(e,"H2",{"data-svelte-h":!0}),m(a)!=="svelte-rw4ti9"&&(a.innerHTML=t),p=w(e),c=y(e,"UL",{"data-svelte-h":!0}),m(c)!=="svelte-1qtp3pv"&&(c.innerHTML=q),x=w(e),k=y(e,"DIV",{class:!0});var b=T(k);u=B(b,!1),b.forEach(v),e.forEach(v),this.h()},h(){u.a=null,G(k,"class","code-section")},m(r,e){_(r,s,e),_(r,n,e),_(r,o,e),d(o,a),d(o,p),d(o,c),d(o,x),d(o,k),u.m(L,k)},p:P,d(r){r&&(v(s),v(n),v(o))}}}function K(i){let s,l;const n=[i[0],C];let o={$$slots:{default:[F]},$$scope:{ctx:i}};for(let a=0;a<n.length;a+=1)o=g(o,n[a]);return s=new U({props:o}),{c(){A(s.$$.fragment)},l(a){I(s.$$.fragment,a)},m(a,t){N(s,a,t),l=!0},p(a,[t]){const p=t&1?J(n,[t&1&&$(a[0]),t&0&&$(C)]):{};t&2&&(p.$$scope={dirty:t,ctx:a}),s.$set(p)},i(a){l||(S(s.$$.fragment,a),l=!0)},o(a){D(s.$$.fragment,a),l=!1},d(a){O(s,a)}}}const C={title:"Getting module dependency from Node.js",tags:["NodeJs"],description:"module.childrenmodule.children can give you a list of modules required by the current module.can use the dependency tree of current modulerequire and watchrequires a file, and pass a callback whenever the module + dependencies changed...",tableOfContents:[{link:"module-children",title:"module.children"},{link:"require-and-watch",title:"require and watch"}]};function Q(i,s,l){return E("blog",{image:z}),i.$$set=n=>{l(0,s=g(g({},s),H(n)))},s=H(s),[s]}class as extends W{constructor(s){super(),j(this,s,Q,K,M,{})}}export{as as component};
