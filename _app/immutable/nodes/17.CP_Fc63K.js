import{s as fr,d as sl,e as gr,f as qp,n as wr}from"../chunks/scheduler.85ImRbsk.js";import{S as _r,i as Hr,m as Tr,n as Cr,o as Lr,t as br,a as Mr,p as Er,e as t,s as n,H as h,c as e,q as o,h as a,d as c,r as u,g as i,u as y,j as r,k as s}from"../chunks/index.JMRAb4ib.js";import{g as Sr,a as Vp}from"../chunks/code-snippet.p32Anx_S.js";import{B as Pr}from"../chunks/BlogLayout.n3Egsk1p.js";const Ir=""+new URL("../assets/hero-twitter.cfrDtjFk.jpg",import.meta.url).href;function Nr(os){let _,K='<h2><a href="#background" id="background">Background</a></h2> <p>A while ago, <a href="https://twitter.com/swyx" rel="nofollow">@swyx</a> came back to Singapore and visited us in <a href="https://careers.shopee.sg/about/" rel="nofollow">Shopee Singapore</a> (<a href="https://grnh.se/32e5b3532" rel="nofollow">We&#39;re hiring!</a>).</p> <p>He gave an amazing sharing on <a href="https://www.swyx.io/speaking/svelte-compile-lightning/" rel="nofollow">Compile Svelte in Your Head</a> (<a href="https://www.youtube.com/watch?v=FNmvcswdjV8" rel="nofollow">video</a>) in the <a href="https://reactknowledgeable.org/" rel="nofollow">ReactKnowledgeable Originals</a>.</p> <p>I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript.</p>',R,W,S='<h2><a href="#introduction" id="introduction">Introduction</a></h2> <p>Lets refresh ourselves with how we write web app without any framework:</p>',A,U,tl='<h3><a href="#creating-an-element" id="creating-an-element">Creating an element</a></h3>',De,Y,ls,el='<a href="#updating-an-element" id="updating-an-element">Updating an element</a>',Vn,is,Oe,Wp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" cutLines="1"><div class="language-id">js</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// update the text of the h1 element</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Bye World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div></code></div></pre>`,Ae,F,ps,nl='<a href="#removing-an-element" id="removing-an-element">Removing an element</a>',Bn,rs,qe,Rp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" cutLines="1"><div class="language-id">js</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// finally, we remove the h1 element</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.removeChild&lt;HTMLHeadingElement>(child: HTMLHeadingElement): HTMLHeadingElement' >removeChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,Ve,Q,cs,al='<a href="#adding-style-to-an-element" id="adding-style-to-an-element">Adding style to an element</a>',Wn,vs,Be,Up=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js"><div class="language-id">js</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"h1">(tagName: "h1", options?: ElementCreationOptions | undefined): HTMLHeadingElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// add class name to the h1 element</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Element.setAttribute(qualifiedName: string, value: string): void' >setAttribute</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;class&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// ...and add a &lt;style&gt; tag to the head</span></div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"style">(tagName: "style", options?: ElementCreationOptions | undefined): HTMLStyleElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;style&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;.abc &#123; color: blue; &#125;&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.head: HTMLHeadElement' >head</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLStyleElement>(node: HTMLStyleElement): HTMLStyleElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLHeadingElement>(node: HTMLHeadingElement): HTMLHeadingElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,We,q,ds,ol='<a href="#listen-for-click-events-on-an-element" id="listen-for-click-events-on-an-element">Listen for click events on an element</a>',Rn,ks,Re,zp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js"><div class="language-id">js</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"button">(tagName: "button", options?: ElementCreationOptions | undefined): HTMLButtonElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;button&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Click Me!&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// listen to "click" events</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) HTMLButtonElement.addEventListener&lt;"click">(type: "click", listener: (this: HTMLButtonElement, ev: MouseEvent) => any, options?: boolean | AddEventListenerOptions | undefined): void (+1 overload)' >addEventListener</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;click&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='namespace console&#10;var console: Console' >console</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)' >log</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;Hi!&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">&#125;);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLButtonElement>(node: HTMLButtonElement): HTMLButtonElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp>);</span></div></code></div></pre>`,Un,hs,ll="These are code that you have to write, without using any framework or library.",zn,us,il="The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that I've shown above.",Ue,v,ys,pl='<a href="#svelte-syntax" id="svelte-syntax">Svelte syntax</a>',Jn,ms,rl="Here I'm going to show you some basics of the Svelte syntax.",Kn,xs,cl='<p>If you wish to learn more, I highly recommend trying <a href="https://svelte.dev/tutorial/basics" rel="nofollow">Svelte&#39;s interactive tutorial</a>.</p>',Yn,fs,vl="So here is a basic Svelte component:",Fn,gs,ze,Jp='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Qn,ws,dl='<a href="https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280" rel="nofollow">Svelte REPL</a>',Gn,_s,kl='To add style, you add a <code class="inline">&lt;style&gt;</code> tag:',Zn,Hs,Je,Kp='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></div><div class="line">  <span class="token selector">h1</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token property">color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Xn,Ts,hl='<a href="https://svelte.dev/repl/cf54441399864c0f9b0cb25710a5fe9b" rel="nofollow">Svelte REPL</a>',sa,Cs,ul="At this point, writing Svelte component just feels like writing HTML, that's because Svelte syntax is a super set of the HTML syntax.",ta,Ls,yl="Let's look at how we add a data to our component:",ea,bs,Ke,Yp=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,na,Ms,ml='<a href="https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3" rel="nofollow">Svelte REPL</a>',aa,Es,xl="We put JavaScript inside the curly brackets.",oa,Ss,fl='To add a click handler, we use the <code class="inline">on:</code> directive',la,Ps,Ye,Fp='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',ia,Is,gl='<a href="https://svelte.dev/repl/1da1dcaf51814ed09d2341ea7915f0a1" rel="nofollow">Svelte REPL</a>',pa,Ns,wl='To change the data, we use <a href="https://www.w3schools.com/js/js_assignment.asp" rel="nofollow">assignment operators</a>',ra,js,Fe,Qp='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',ca,$s,_l='<a href="https://svelte.dev/repl/7bff4b7746df4007a51155d2006ce724" rel="nofollow">Svelte REPL</a>',va,Ds,Hl="Let's move on to see how Svelte syntax is compiled into JavaScript that we've seen earlier",Qe,H,Os,Tl='<a href="#compile-svelte-in-your-head" id="compile-svelte-in-your-head">Compile Svelte in your Head</a>',da,As,Cl="The Svelte compiler analyses the code you write and generates an optimised JavaScript output.",ka,qs,Ll="To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes.",ha,Vs,bl="The first example that we are going to see is:",ua,Bs,Ge,Gp='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',ya,Ws,Ml='<a href="https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=3.19.1" rel="nofollow">Svelte REPL</a>',ma,Rs,El="The output code:",xa,Us,Ze,Zp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="2"><div class="language-id">js</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function create_fragment(ctx: any): &#123;&#10;    c(): void;&#10;    m(target: HTMLElement, anchor: HTMLElement): void;&#10;    d(detaching: boolean): void;&#10;&#125;' >create_fragment</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) ctx: any' >ctx</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) c(): void' >c</data-lsp></span><span style="color: var(--shiki-color-text)">() &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">			<data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='import element' >element</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello world&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">		&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) m(target: HTMLElement, anchor: HTMLElement): void' >m</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: HTMLElement' >anchor</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='import insert' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: HTMLElement' >anchor</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">		&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) d(detaching: boolean): void' >d</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) detaching: boolean' >detaching</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) detaching: boolean' >detaching</data-lsp>) </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='import detach' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">		&#125;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">	&#125;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class App' >App</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='import SvelteComponent' >SvelteComponent</data-lsp></span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) options: any' >options</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='import init' >init</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) options: any' >options</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='function create_fragment(ctx: any): &#123;&#10;    c(): void;&#10;    m(target: HTMLElement, anchor: HTMLElement): void;&#10;    d(detaching: boolean): void;&#10;&#125;' >create_fragment</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='import safe_not_equal' >safe_not_equal</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">	&#125;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,fa,zs,Sl="You can break down the output code into 2 sections:",ga,Js,Pl='<li><code class="inline">create_fragment</code></li> <li><code class="inline">class App extends SvelteComponent</code></li>',Xe,Z,Il='<h3><a href="#create-fragment" id="create-fragment">create_fragment</a></h3> <p>Svelte components are the building blocks of a Svelte application. Each Svelte component focuses on building its piece or fragment of the final DOM.</p> <p>The <code class="inline">create_fragment</code> function gives the Svelte component an instruction manual on how to build the DOM fragment.</p> <p>Look at the return object of the <code class="inline">create_fragment</code> function. It has methods, such as:</p>',sn,D,Ks,Nl='<a href="#c" id="c">- c()</a>',wa,Ys,jl="Short for <strong>create</strong>.",_a,Fs,$l="Contains instructions to create all the elements in the fragment.",Ha,Qs,Dl='In this example, it contains instructions to create the <code class="inline">h1</code> element',Ta,Gs,tn,Xp=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="3"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function element(name: string): HTMLHeadingElement' >element</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div></code></div></pre>`,en,O,Zs,Ol='<a href="#m-target-anchor" id="m-target-anchor">- m(target, anchor)</a>',Ca,Xs,Al="Short for <strong>mount</strong>.",La,st,ql="Contains instructions to mount the elements into the target.",ba,tt,Vl='In this example, it contains instructions to insert the <code class="inline">h1</code> element into the <code class="inline">target</code>.',Ma,et,nn,sr=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="5"><div class="language-id">js</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function insert(target: Node, node: Node, anchor?: Node | undefined): void' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let anchor: HTMLElement' >anchor</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function insert(target: Node, node: Node, anchor?: Node | undefined): void' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: Node' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: Node | undefined' >anchor</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) target: Node' >target</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.insertBefore&lt;Node>(node: Node, child: Node | null): Node' >insertBefore</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: Node | undefined' >anchor</data-lsp> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,an,N,nt,Bl='<a href="#d-detaching" id="d-detaching">- d(detaching)</a>',Ea,at,Wl="Short for <strong>destroy</strong>.",Sa,ot,Rl="Contains instructions to remove the elements from the target.",Pa,lt,Ul='In this example, we detach the <code class="inline">h1</code> element from the DOM',Ia,it,on,tr=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="1"><div class="language-id">js</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function detach(node: Node): void' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function detach(node: Node): void' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Node.parentNode: ParentNode | null' >parentNode</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.removeChild&lt;Node>(child: Node): Node' >removeChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp>);</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,Na,pt,zl='<p>The method names are short for better minification. <a href="https://alistapart.com/article/javascript-minification-part-ii/#section3" rel="nofollow">See what can&#39;t be minified here</a>.</p>',ln,m,rt,Jl='<a href="#export-default-class-app-extends-sveltecomponent" id="export-default-class-app-extends-sveltecomponent">export default class App extends SvelteComponent</a>',ja,ct,Kl='Each component is a class, which you can import and instantiate through <a href="https://svelte.dev/docs#Client-side_component_API" rel="nofollow">this API</a>.',$a,vt,Yl='And in the constructor, we initialize the component with information that made up the component such as <code class="inline">create_fragment</code>. Svelte will only pass information that it is needed and remove them whenever it is not necessary.',Da,dt,Fl='Try removing the <code class="inline">&lt;h1&gt;</code> tag and see what happens to the output:',Oa,kt,pn,er='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- empty --></span></div></code></pre>',Aa,ht,Ql='<a href="https://svelte.dev/repl/1f29ce52adf446fc9116bb957b7200ec?version=3.19.1" rel="nofollow">Svelte REPL</a>',qa,ut,rn,nr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Va,yt,Gl='Svelte will pass in <code class="inline">null</code> instead of <code class="inline">create_fragment</code>!',Ba,mt,Zl='The <code class="inline">init</code> function is where Svelte sets up most of the internals, such as:',Wa,xt,Xl='<li>component props, <code class="inline">ctx</code> (will explain what <code class="inline">ctx</code> is later) and context</li> <li>component lifecycle events</li> <li>component update mechanism</li>',Ra,ft,si='and at the very end, Svelte calls the <code class="inline">create_fragment</code> to create and mount elements into the DOM.',Ua,gt,ti='If you noticed, all the internal state and methods are attached to <code class="inline">this.$$</code>.',za,wt,ei='So if you ever access the <code class="inline">$$</code> property of the component, you are tapping into the internals. You&#39;ve been warned! 🙈🚨',cn,T,_t,ni='<a href="#adding-data" id="adding-data">Adding data</a>',Ja,Ht,ai="Now that we've looked at the bare minimum of a Svelte component, let's see how adding a data would change the compiled output:",Ka,Tt,vn,ar=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Ya,Ct,oi='<a href="https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3?version=3.19.1" rel="nofollow">Svelte REPL</a>',Fa,Lt,li="Notice the change in the output:",Qa,bt,dn,or=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Hello </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ga,Mt,ii="Some observations:",Za,Et,pi='<li>What you&#39;ve written in the <code class="inline">&lt;script&gt;</code> tag is moved into the top level of the code</li> <li><code class="inline">h1</code> element&#39;s text content is now a template literal</li>',Xa,St,ri="There's a lot of amazing things happening under the hood right now, but let's hold our horses for a while, because it's best explained when comparing with the next code change.",kn,k,Pt,ci='<a href="#updating-data" id="updating-data">Updating data</a>',so,It,vi='Let&#39;s add a function to update the <code class="inline">name</code>:',to,Nt,hn,lr=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,eo,jt,di='<a href="https://svelte.dev/repl/3841485f4d224774ba42617e4e964968?version=3.19.1" rel="nofollow">Svelte REPL</a>',no,$t,ki="...and observe the change in the compiled output:",ao,Dt,un,ir=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oo,Ot,hi="Some observations:",lo,At,ui='<li>the text content of <code class="inline">&lt;h1&gt;</code> element is now broken into 2 text nodes, created by the <code class="inline">text(...)</code> function</li> <li>the return object of the <code class="inline">create_fragment</code> has a new method, <code class="inline">p(ctx, dirty)</code></li> <li>a new function <code class="inline">instance</code> is created</li> <li>What you&#39;ve written in the <code class="inline">&lt;script&gt;</code> tag is now moved into the <code class="inline">instance</code> function</li> <li>for the sharp-eyed, the variable <code class="inline">name</code> that was used in the <code class="inline">create_fragment</code> is now replaced by <code class="inline">ctx[0]</code></li>',io,qt,yi="So, why the change?",po,Vt,mi='The Svelte compiler tracks all the variables declared in the <code class="inline">&lt;script&gt;</code> tag.',ro,Bt,xi="It tracks whether the variable:",co,Wt,fi='<li>can be mutated? eg: <code class="inline">count++</code>,</li> <li>can be reassigned? eg: <code class="inline">name = &#39;Svelte&#39;</code>,</li> <li>is referenced in the template? eg: <code class="inline">&lt;h1&gt;Hello {name}&lt;/h1&gt;</code></li> <li>is writable? eg: <code class="inline">const i = 1;</code> vs <code class="inline">let i = 1;</code></li> <li>... and many more</li>',vo,Rt,gi='When the Svelte compiler realises that the variable <code class="inline">name</code> can be reassigned, (due to <code class="inline">name = &#39;Svelte&#39;;</code> in <code class="inline">update</code>), it breaks down the text content of the <code class="inline">h1</code> into parts, so that it can dynamically update part of the text.',ko,Ut,wi='Indeed, you can see that there&#39;s a new method, <code class="inline">p</code>, to update the text node.',yn,X,_i='<h4><a href="#p-ctx-dirty" id="p-ctx-dirty">- p(ctx, dirty)</a></h4> <p>Short for <strong>u_p_date</strong>.</p> <p><strong>p(ctx, dirty)</strong> contains instructions to update the elements based on what has changed in the state (<code class="inline">dirty</code>) and the state (<code class="inline">ctx</code>) of the component.</p>',mn,j,zt,Hi='<a href="#instance-variable" id="instance-variable">instance variable</a>',ho,Jt,Ti='The compiler realises that the variable <code class="inline">name</code> cannot be shared across different instances of the <code class="inline">App</code> component. That&#39;s why it moves the declaration of the variable <code class="inline">name</code> into a function called <code class="inline">instance</code>.',uo,Kt,Ci='In the previous example, no matter how many instances of the <code class="inline">App</code> component, the value of the variable <code class="inline">name</code> is the same and unchanged across the instances:',yo,Yt,xn,pr='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- gives you --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',mo,Ft,Li='But, in this example, the variable <code class="inline">name</code> can be changed within 1 instance of the component, so the declaration of the variable <code class="inline">name</code> is now moved into the <code class="inline">instance</code> function:',xo,Qt,fn,rr='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"></div><div class="line dim"><span class="token comment">&lt;!-- could possibly be --></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello Svelte<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token comment">&lt;!-- depending on the inner state of the component --></span></div></code></pre>',gn,C,Gt,bi='<a href="#instance-self-props-invalidate" id="instance-self-props-invalidate">instance($$self, $$props, $$invalidate)</a>',fo,Zt,Mi='The <code class="inline">instance</code> function returns a list of <em>instance</em> variables, which are variables that are:',go,Xt,Ei="<li>referenced in the template</li> <li>mutated or reassigned, (can be changed within 1 instance of the component)</li>",wo,se,Si="In Svelte, we call this list of instance variables, <strong>ctx</strong>.",_o,te,Pi='In the <code class="inline">init</code> function, Svelte calls the <code class="inline">instance</code> function to create <strong>ctx</strong>, and uses it to create the fragment for the component:',Ho,ee,wn,cr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually,</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the fragment</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mount the fragment onto the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target);</span></span></code></pre>`,To,ne,Ii='Now, instead of accessing the variable <code class="inline">name</code> outside of the component, we refer to the variable <code class="inline">name</code> passed via the <strong>ctx</strong>:',Co,ae,_n,vr='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span></code></pre>',Lo,oe,Ni='The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see <a href="https://github.com/sveltejs/svelte/issues/1922" rel="nofollow">the discussion about it here</a>',Hn,M,le,ji='<a href="#invalidate" id="invalidate">$$invalidate</a>',bo,ie,$i='The secret behind the system of reactivity in Svelte is the <code class="inline">$$invalidate</code> function.',Mo,pe,Di="Every variable that has been",Eo,re,Oi="<li>reassigned or mutated</li> <li>referenced in the template</li>",So,ce,Ai='will have the <code class="inline">$$invalidate</code> function inserted right after the assignment or mutation:',Po,ve,Tn,dr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into something like</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* name */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* count */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* foo */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span></code></pre>`,Io,de,qi='The <code class="inline">$$invalidate</code> function marks the variable dirty and schedules an update for the component:',No,ke,Cn,kr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ln,f,he,Vi='<a href="#adding-event-listeners" id="adding-event-listeners">Adding event listeners</a>',jo,ue,Bi="Let's now add an event listener",$o,ye,bn,hr=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Do,me,Wi='<a href="https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.19.1" rel="nofollow">Svelte REPL</a>',Oo,xe,Ri="And observe the difference:",Ao,fe,Mn,ur=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,qo,ge,Ui="Some observations:",Vo,we,zi='<li><code class="inline">instance</code> function now returns 2 variables instead of 1</li> <li>Listen to click event during <strong>mount</strong> and dispose it in <strong>destroy</strong></li>',Bo,_e,Ji='As I&#39;ve mentioned earlier, <code class="inline">instance</code> function returns variables that are <strong>referenced in the template</strong> and that are <strong>mutated or reassigned</strong>.',Wo,He,Ki='Since we&#39;ve just referenced the <code class="inline">update</code> function in the template, it is now returned in the <code class="inline">instance</code> function as part of the <strong>ctx</strong>.',Ro,Te,Yi="Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary.",En,g,Ce,Fi='<a href="#listen-and-dispose" id="listen-and-dispose">listen and dispose</a>',Uo,Le,Qi='Whenever you add <a href="https://svelte.dev/tutorial/dom-events" rel="nofollow">an event listener</a> in Svelte, Svelte will inject code to add an <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener" rel="nofollow">event listener</a> and remove it when the DOM fragment is removed from the DOM.',zo,be,Gi="Try adding more event listeners,",Jo,Me,Sn,yr='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>mousedown=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>touchstart=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span>!</div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Ko,Ee,Zi='<a href="https://svelte.dev/repl/efde6f2aaf624e708767f1bd3e94e479?version=3.19.1" rel="nofollow">Svelte REPL</a>',Yo,Se,Xi="and observe the compiled output:",Fo,Pe,Pn,mr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(dispose);</span></span></code></pre>`,Qo,Ie,sp="Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:",Go,Ne,In,xr=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose1</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose2</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose3</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,Zo,je,tp="Minification can compact the variable name, but you can't remove the brackets.",Xo,$e,ep='Again, this is another great example of where Svelte tries to generate compact JavaScript output. Svelte does not create the <code class="inline">dispose</code> array when there&#39;s only 1 event listener.',Nn,ss,np='<h2><a href="#summary" id="summary">Summary</a></h2> <p>The Svelte syntax is a superset of HTML.</p> <p>When you write a Svelte component, the Svelte compiler analyses your code and generates optimised JavaScript code output.</p> <p>The output can be divided into 3 segments:</p>',jn,ts,ap='<h3><a href="#1-create-fragment" id="1-create-fragment">1. create_fragment</a></h3> <ul><li>Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component</li></ul>',$n,es,op='<h3><a href="#2-instance" id="2-instance">2. instance</a></h3> <ul><li>Most of the code written in the <code class="inline">&lt;script&gt;</code> tag is in here.</li> <li>Returns a list of instance variables that are referenced in the template</li> <li><code class="inline">$$invalidate</code> is inserted after every assignment and mutation of the instance variable</li></ul>',Dn,ns,lp='<h3><a href="#3-class-app-extends-sveltecomponent" id="3-class-app-extends-sveltecomponent">3. class App extends SvelteComponent</a></h3> <ul><li>Initialise the component with <code class="inline">create_fragment</code> and <code class="inline">instance</code> function</li> <li>Sets up the component internals</li> <li>Provides the <a href="https://svelte.dev/docs#Client-side_component_API" rel="nofollow">Component API</a></li></ul> <p>Svelte strives to generate as compact JavaScript as possible, for example:</p> <ul><li>Breaking text content of <code class="inline">h1</code> into separate text nodes only when part of the text can be updated</li> <li>Not defining <code class="inline">create_fragment</code> or <code class="inline">instance</code> function when it is not needed</li> <li>Generate <code class="inline">dispose</code> as an array or a function, depending on the number of event listeners.</li> <li>...</li></ul>',On,as,ip='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>We&#39;ve covered the basic structure of the Svelte&#39;s compiled output, and this is just the beginning.</p> <p>If you wish to know more, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>I&#39;ll post it on Twitter when the next part is ready, where I&#39;ll be covering <a href="https://svelte.dev/tutorial/if-blocks" rel="nofollow">logic blocks</a>, <a href="https://svelte.dev/tutorial/slots" rel="nofollow">slots</a>, <a href="https://svelte.dev/tutorial/context-api" rel="nofollow">context</a>, and many others.</p> <p><strong>➡ ➡ Continue reading on <a href="/compile-svelte-in-your-head-part-2/">Part 2</a>.</strong></p>';return{c(){_=t("section"),_.innerHTML=K,R=n(),W=t("section"),W.innerHTML=S,A=n(),U=t("section"),U.innerHTML=tl,De=n(),Y=t("section"),ls=t("h3"),ls.innerHTML=el,Vn=n(),is=t("div"),Oe=new h(!1),Ae=n(),F=t("section"),ps=t("h3"),ps.innerHTML=nl,Bn=n(),rs=t("div"),qe=new h(!1),Ve=n(),Q=t("section"),cs=t("h3"),cs.innerHTML=al,Wn=n(),vs=t("div"),Be=new h(!1),We=n(),q=t("section"),ds=t("h3"),ds.innerHTML=ol,Rn=n(),ks=t("div"),Re=new h(!1),Un=n(),hs=t("p"),hs.textContent=ll,zn=n(),us=t("p"),us.textContent=il,Ue=n(),v=t("section"),ys=t("h2"),ys.innerHTML=pl,Jn=n(),ms=t("p"),ms.textContent=rl,Kn=n(),xs=t("blockquote"),xs.innerHTML=cl,Yn=n(),fs=t("p"),fs.textContent=vl,Fn=n(),gs=t("div"),ze=new h(!1),Qn=n(),ws=t("p"),ws.innerHTML=dl,Gn=n(),_s=t("p"),_s.innerHTML=kl,Zn=n(),Hs=t("div"),Je=new h(!1),Xn=n(),Ts=t("p"),Ts.innerHTML=hl,sa=n(),Cs=t("p"),Cs.textContent=ul,ta=n(),Ls=t("p"),Ls.textContent=yl,ea=n(),bs=t("div"),Ke=new h(!1),na=n(),Ms=t("p"),Ms.innerHTML=ml,aa=n(),Es=t("p"),Es.textContent=xl,oa=n(),Ss=t("p"),Ss.innerHTML=fl,la=n(),Ps=t("div"),Ye=new h(!1),ia=n(),Is=t("p"),Is.innerHTML=gl,pa=n(),Ns=t("p"),Ns.innerHTML=wl,ra=n(),js=t("div"),Fe=new h(!1),ca=n(),$s=t("p"),$s.innerHTML=_l,va=n(),Ds=t("p"),Ds.textContent=Hl,Qe=n(),H=t("section"),Os=t("h2"),Os.innerHTML=Tl,da=n(),As=t("p"),As.textContent=Cl,ka=n(),qs=t("p"),qs.textContent=Ll,ha=n(),Vs=t("p"),Vs.textContent=bl,ua=n(),Bs=t("div"),Ge=new h(!1),ya=n(),Ws=t("p"),Ws.innerHTML=Ml,ma=n(),Rs=t("p"),Rs.textContent=El,xa=n(),Us=t("div"),Ze=new h(!1),fa=n(),zs=t("p"),zs.textContent=Sl,ga=n(),Js=t("ul"),Js.innerHTML=Pl,Xe=n(),Z=t("section"),Z.innerHTML=Il,sn=n(),D=t("section"),Ks=t("h4"),Ks.innerHTML=Nl,wa=n(),Ys=t("p"),Ys.innerHTML=jl,_a=n(),Fs=t("p"),Fs.textContent=$l,Ha=n(),Qs=t("p"),Qs.innerHTML=Dl,Ta=n(),Gs=t("div"),tn=new h(!1),en=n(),O=t("section"),Zs=t("h4"),Zs.innerHTML=Ol,Ca=n(),Xs=t("p"),Xs.innerHTML=Al,La=n(),st=t("p"),st.textContent=ql,ba=n(),tt=t("p"),tt.innerHTML=Vl,Ma=n(),et=t("div"),nn=new h(!1),an=n(),N=t("section"),nt=t("h4"),nt.innerHTML=Bl,Ea=n(),at=t("p"),at.innerHTML=Wl,Sa=n(),ot=t("p"),ot.textContent=Rl,Pa=n(),lt=t("p"),lt.innerHTML=Ul,Ia=n(),it=t("div"),on=new h(!1),Na=n(),pt=t("blockquote"),pt.innerHTML=zl,ln=n(),m=t("section"),rt=t("h3"),rt.innerHTML=Jl,ja=n(),ct=t("p"),ct.innerHTML=Kl,$a=n(),vt=t("p"),vt.innerHTML=Yl,Da=n(),dt=t("p"),dt.innerHTML=Fl,Oa=n(),kt=t("div"),pn=new h(!1),Aa=n(),ht=t("p"),ht.innerHTML=Ql,qa=n(),ut=t("div"),rn=new h(!1),Va=n(),yt=t("p"),yt.innerHTML=Gl,Ba=n(),mt=t("p"),mt.innerHTML=Zl,Wa=n(),xt=t("ul"),xt.innerHTML=Xl,Ra=n(),ft=t("p"),ft.innerHTML=si,Ua=n(),gt=t("p"),gt.innerHTML=ti,za=n(),wt=t("p"),wt.innerHTML=ei,cn=n(),T=t("section"),_t=t("h3"),_t.innerHTML=ni,Ja=n(),Ht=t("p"),Ht.textContent=ai,Ka=n(),Tt=t("div"),vn=new h(!1),Ya=n(),Ct=t("p"),Ct.innerHTML=oi,Fa=n(),Lt=t("p"),Lt.textContent=li,Qa=n(),bt=t("div"),dn=new h(!1),Ga=n(),Mt=t("p"),Mt.textContent=ii,Za=n(),Et=t("ul"),Et.innerHTML=pi,Xa=n(),St=t("p"),St.textContent=ri,kn=n(),k=t("section"),Pt=t("h3"),Pt.innerHTML=ci,so=n(),It=t("p"),It.innerHTML=vi,to=n(),Nt=t("div"),hn=new h(!1),eo=n(),jt=t("p"),jt.innerHTML=di,no=n(),$t=t("p"),$t.textContent=ki,ao=n(),Dt=t("div"),un=new h(!1),oo=n(),Ot=t("p"),Ot.textContent=hi,lo=n(),At=t("ul"),At.innerHTML=ui,io=n(),qt=t("p"),qt.textContent=yi,po=n(),Vt=t("p"),Vt.innerHTML=mi,ro=n(),Bt=t("p"),Bt.textContent=xi,co=n(),Wt=t("ul"),Wt.innerHTML=fi,vo=n(),Rt=t("p"),Rt.innerHTML=gi,ko=n(),Ut=t("p"),Ut.innerHTML=wi,yn=n(),X=t("section"),X.innerHTML=_i,mn=n(),j=t("section"),zt=t("h3"),zt.innerHTML=Hi,ho=n(),Jt=t("p"),Jt.innerHTML=Ti,uo=n(),Kt=t("p"),Kt.innerHTML=Ci,yo=n(),Yt=t("div"),xn=new h(!1),mo=n(),Ft=t("p"),Ft.innerHTML=Li,xo=n(),Qt=t("div"),fn=new h(!1),gn=n(),C=t("section"),Gt=t("h3"),Gt.innerHTML=bi,fo=n(),Zt=t("p"),Zt.innerHTML=Mi,go=n(),Xt=t("ul"),Xt.innerHTML=Ei,wo=n(),se=t("p"),se.innerHTML=Si,_o=n(),te=t("p"),te.innerHTML=Pi,Ho=n(),ee=t("div"),wn=new h(!1),To=n(),ne=t("p"),ne.innerHTML=Ii,Co=n(),ae=t("div"),_n=new h(!1),Lo=n(),oe=t("p"),oe.innerHTML=Ni,Hn=n(),M=t("section"),le=t("h3"),le.innerHTML=ji,bo=n(),ie=t("p"),ie.innerHTML=$i,Mo=n(),pe=t("p"),pe.textContent=Di,Eo=n(),re=t("ul"),re.innerHTML=Oi,So=n(),ce=t("p"),ce.innerHTML=Ai,Po=n(),ve=t("div"),Tn=new h(!1),Io=n(),de=t("p"),de.innerHTML=qi,No=n(),ke=t("div"),Cn=new h(!1),Ln=n(),f=t("section"),he=t("h3"),he.innerHTML=Vi,jo=n(),ue=t("p"),ue.textContent=Bi,$o=n(),ye=t("div"),bn=new h(!1),Do=n(),me=t("p"),me.innerHTML=Wi,Oo=n(),xe=t("p"),xe.textContent=Ri,Ao=n(),fe=t("div"),Mn=new h(!1),qo=n(),ge=t("p"),ge.textContent=Ui,Vo=n(),we=t("ul"),we.innerHTML=zi,Bo=n(),_e=t("p"),_e.innerHTML=Ji,Wo=n(),He=t("p"),He.innerHTML=Ki,Ro=n(),Te=t("p"),Te.textContent=Yi,En=n(),g=t("section"),Ce=t("h3"),Ce.innerHTML=Fi,Uo=n(),Le=t("p"),Le.innerHTML=Qi,zo=n(),be=t("p"),be.textContent=Gi,Jo=n(),Me=t("div"),Sn=new h(!1),Ko=n(),Ee=t("p"),Ee.innerHTML=Zi,Yo=n(),Se=t("p"),Se.textContent=Xi,Fo=n(),Pe=t("div"),Pn=new h(!1),Qo=n(),Ie=t("p"),Ie.textContent=sp,Go=n(),Ne=t("div"),In=new h(!1),Zo=n(),je=t("p"),je.textContent=tp,Xo=n(),$e=t("p"),$e.innerHTML=ep,Nn=n(),ss=t("section"),ss.innerHTML=np,jn=n(),ts=t("section"),ts.innerHTML=ap,$n=n(),es=t("section"),es.innerHTML=op,Dn=n(),ns=t("section"),ns.innerHTML=lp,On=n(),as=t("section"),as.innerHTML=ip,this.h()},l(l){_=e(l,"SECTION",{"data-svelte-h":!0}),o(_)!=="svelte-1ggfxfx"&&(_.innerHTML=K),R=a(l),W=e(l,"SECTION",{"data-svelte-h":!0}),o(W)!=="svelte-119gfcv"&&(W.innerHTML=S),A=a(l),U=e(l,"SECTION",{"data-svelte-h":!0}),o(U)!=="svelte-1vsh5q7"&&(U.innerHTML=tl),De=a(l),Y=e(l,"SECTION",{});var p=c(Y);ls=e(p,"H3",{"data-svelte-h":!0}),o(ls)!=="svelte-v6mpnt"&&(ls.innerHTML=el),Vn=a(p),is=e(p,"DIV",{class:!0});var pp=c(is);Oe=u(pp,!1),pp.forEach(i),p.forEach(i),Ae=a(l),F=e(l,"SECTION",{});var An=c(F);ps=e(An,"H3",{"data-svelte-h":!0}),o(ps)!=="svelte-b5cbpm"&&(ps.innerHTML=nl),Bn=a(An),rs=e(An,"DIV",{class:!0});var rp=c(rs);qe=u(rp,!1),rp.forEach(i),An.forEach(i),Ve=a(l),Q=e(l,"SECTION",{});var qn=c(Q);cs=e(qn,"H3",{"data-svelte-h":!0}),o(cs)!=="svelte-42quq6"&&(cs.innerHTML=al),Wn=a(qn),vs=e(qn,"DIV",{class:!0});var cp=c(vs);Be=u(cp,!1),cp.forEach(i),qn.forEach(i),We=a(l),q=e(l,"SECTION",{});var G=c(q);ds=e(G,"H3",{"data-svelte-h":!0}),o(ds)!=="svelte-o9pja5"&&(ds.innerHTML=ol),Rn=a(G),ks=e(G,"DIV",{class:!0});var vp=c(ks);Re=u(vp,!1),vp.forEach(i),Un=a(G),hs=e(G,"P",{"data-svelte-h":!0}),o(hs)!=="svelte-3h3o6"&&(hs.textContent=ll),zn=a(G),us=e(G,"P",{"data-svelte-h":!0}),o(us)!=="svelte-1dqjz5"&&(us.textContent=il),G.forEach(i),Ue=a(l),v=e(l,"SECTION",{});var d=c(v);ys=e(d,"H2",{"data-svelte-h":!0}),o(ys)!=="svelte-1rqrhl0"&&(ys.innerHTML=pl),Jn=a(d),ms=e(d,"P",{"data-svelte-h":!0}),o(ms)!=="svelte-1gsxe21"&&(ms.textContent=rl),Kn=a(d),xs=e(d,"BLOCKQUOTE",{"data-svelte-h":!0}),o(xs)!=="svelte-l807tx"&&(xs.innerHTML=cl),Yn=a(d),fs=e(d,"P",{"data-svelte-h":!0}),o(fs)!=="svelte-aqmmjp"&&(fs.textContent=vl),Fn=a(d),gs=e(d,"DIV",{class:!0});var dp=c(gs);ze=u(dp,!1),dp.forEach(i),Qn=a(d),ws=e(d,"P",{"data-svelte-h":!0}),o(ws)!=="svelte-6gpfip"&&(ws.innerHTML=dl),Gn=a(d),_s=e(d,"P",{"data-svelte-h":!0}),o(_s)!=="svelte-1hzp0hf"&&(_s.innerHTML=kl),Zn=a(d),Hs=e(d,"DIV",{class:!0});var kp=c(Hs);Je=u(kp,!1),kp.forEach(i),Xn=a(d),Ts=e(d,"P",{"data-svelte-h":!0}),o(Ts)!=="svelte-1rvjlp3"&&(Ts.innerHTML=hl),sa=a(d),Cs=e(d,"P",{"data-svelte-h":!0}),o(Cs)!=="svelte-1utreyn"&&(Cs.textContent=ul),ta=a(d),Ls=e(d,"P",{"data-svelte-h":!0}),o(Ls)!=="svelte-q5ornr"&&(Ls.textContent=yl),ea=a(d),bs=e(d,"DIV",{class:!0});var hp=c(bs);Ke=u(hp,!1),hp.forEach(i),na=a(d),Ms=e(d,"P",{"data-svelte-h":!0}),o(Ms)!=="svelte-il225x"&&(Ms.innerHTML=ml),aa=a(d),Es=e(d,"P",{"data-svelte-h":!0}),o(Es)!=="svelte-1jf1l5p"&&(Es.textContent=xl),oa=a(d),Ss=e(d,"P",{"data-svelte-h":!0}),o(Ss)!=="svelte-17f7y3m"&&(Ss.innerHTML=fl),la=a(d),Ps=e(d,"DIV",{class:!0});var up=c(Ps);Ye=u(up,!1),up.forEach(i),ia=a(d),Is=e(d,"P",{"data-svelte-h":!0}),o(Is)!=="svelte-9bg429"&&(Is.innerHTML=gl),pa=a(d),Ns=e(d,"P",{"data-svelte-h":!0}),o(Ns)!=="svelte-4yufp2"&&(Ns.innerHTML=wl),ra=a(d),js=e(d,"DIV",{class:!0});var yp=c(js);Fe=u(yp,!1),yp.forEach(i),ca=a(d),$s=e(d,"P",{"data-svelte-h":!0}),o($s)!=="svelte-1l6i9wa"&&($s.innerHTML=_l),va=a(d),Ds=e(d,"P",{"data-svelte-h":!0}),o(Ds)!=="svelte-1s82u5d"&&(Ds.textContent=Hl),d.forEach(i),Qe=a(l),H=e(l,"SECTION",{});var E=c(H);Os=e(E,"H2",{"data-svelte-h":!0}),o(Os)!=="svelte-1inxfp0"&&(Os.innerHTML=Tl),da=a(E),As=e(E,"P",{"data-svelte-h":!0}),o(As)!=="svelte-1hw9j3h"&&(As.textContent=Cl),ka=a(E),qs=e(E,"P",{"data-svelte-h":!0}),o(qs)!=="svelte-nmfqh0"&&(qs.textContent=Ll),ha=a(E),Vs=e(E,"P",{"data-svelte-h":!0}),o(Vs)!=="svelte-mn7j0o"&&(Vs.textContent=bl),ua=a(E),Bs=e(E,"DIV",{class:!0});var mp=c(Bs);Ge=u(mp,!1),mp.forEach(i),ya=a(E),Ws=e(E,"P",{"data-svelte-h":!0}),o(Ws)!=="svelte-j53zud"&&(Ws.innerHTML=Ml),ma=a(E),Rs=e(E,"P",{"data-svelte-h":!0}),o(Rs)!=="svelte-1qed6n7"&&(Rs.textContent=El),xa=a(E),Us=e(E,"DIV",{class:!0});var xp=c(Us);Ze=u(xp,!1),xp.forEach(i),fa=a(E),zs=e(E,"P",{"data-svelte-h":!0}),o(zs)!=="svelte-a788m7"&&(zs.textContent=Sl),ga=a(E),Js=e(E,"UL",{"data-svelte-h":!0}),o(Js)!=="svelte-16f9qz"&&(Js.innerHTML=Pl),E.forEach(i),Xe=a(l),Z=e(l,"SECTION",{"data-svelte-h":!0}),o(Z)!=="svelte-1nwfw65"&&(Z.innerHTML=Il),sn=a(l),D=e(l,"SECTION",{});var z=c(D);Ks=e(z,"H4",{"data-svelte-h":!0}),o(Ks)!=="svelte-1274u8t"&&(Ks.innerHTML=Nl),wa=a(z),Ys=e(z,"P",{"data-svelte-h":!0}),o(Ys)!=="svelte-l81siq"&&(Ys.innerHTML=jl),_a=a(z),Fs=e(z,"P",{"data-svelte-h":!0}),o(Fs)!=="svelte-1ybzyz4"&&(Fs.textContent=$l),Ha=a(z),Qs=e(z,"P",{"data-svelte-h":!0}),o(Qs)!=="svelte-w1qawm"&&(Qs.innerHTML=Dl),Ta=a(z),Gs=e(z,"DIV",{class:!0});var fp=c(Gs);tn=u(fp,!1),fp.forEach(i),z.forEach(i),en=a(l),O=e(l,"SECTION",{});var J=c(O);Zs=e(J,"H4",{"data-svelte-h":!0}),o(Zs)!=="svelte-14vhzfr"&&(Zs.innerHTML=Ol),Ca=a(J),Xs=e(J,"P",{"data-svelte-h":!0}),o(Xs)!=="svelte-154ku3"&&(Xs.innerHTML=Al),La=a(J),st=e(J,"P",{"data-svelte-h":!0}),o(st)!=="svelte-1ot7g6m"&&(st.textContent=ql),ba=a(J),tt=e(J,"P",{"data-svelte-h":!0}),o(tt)!=="svelte-1urbia0"&&(tt.innerHTML=Vl),Ma=a(J),et=e(J,"DIV",{class:!0});var gp=c(et);nn=u(gp,!1),gp.forEach(i),J.forEach(i),an=a(l),N=e(l,"SECTION",{});var V=c(N);nt=e(V,"H4",{"data-svelte-h":!0}),o(nt)!=="svelte-11olr15"&&(nt.innerHTML=Bl),Ea=a(V),at=e(V,"P",{"data-svelte-h":!0}),o(at)!=="svelte-1bdkvws"&&(at.innerHTML=Wl),Sa=a(V),ot=e(V,"P",{"data-svelte-h":!0}),o(ot)!=="svelte-1tiettn"&&(ot.textContent=Rl),Pa=a(V),lt=e(V,"P",{"data-svelte-h":!0}),o(lt)!=="svelte-3yr9og"&&(lt.innerHTML=Ul),Ia=a(V),it=e(V,"DIV",{class:!0});var wp=c(it);on=u(wp,!1),wp.forEach(i),Na=a(V),pt=e(V,"BLOCKQUOTE",{"data-svelte-h":!0}),o(pt)!=="svelte-birs01"&&(pt.innerHTML=zl),V.forEach(i),ln=a(l),m=e(l,"SECTION",{});var w=c(m);rt=e(w,"H3",{"data-svelte-h":!0}),o(rt)!=="svelte-87de0d"&&(rt.innerHTML=Jl),ja=a(w),ct=e(w,"P",{"data-svelte-h":!0}),o(ct)!=="svelte-1cw76kp"&&(ct.innerHTML=Kl),$a=a(w),vt=e(w,"P",{"data-svelte-h":!0}),o(vt)!=="svelte-1v4svuk"&&(vt.innerHTML=Yl),Da=a(w),dt=e(w,"P",{"data-svelte-h":!0}),o(dt)!=="svelte-4ijp0g"&&(dt.innerHTML=Fl),Oa=a(w),kt=e(w,"DIV",{class:!0});var _p=c(kt);pn=u(_p,!1),_p.forEach(i),Aa=a(w),ht=e(w,"P",{"data-svelte-h":!0}),o(ht)!=="svelte-ghsdxz"&&(ht.innerHTML=Ql),qa=a(w),ut=e(w,"DIV",{class:!0});var Hp=c(ut);rn=u(Hp,!1),Hp.forEach(i),Va=a(w),yt=e(w,"P",{"data-svelte-h":!0}),o(yt)!=="svelte-1c1jz7t"&&(yt.innerHTML=Gl),Ba=a(w),mt=e(w,"P",{"data-svelte-h":!0}),o(mt)!=="svelte-1a4qqm0"&&(mt.innerHTML=Zl),Wa=a(w),xt=e(w,"UL",{"data-svelte-h":!0}),o(xt)!=="svelte-ua1gc1"&&(xt.innerHTML=Xl),Ra=a(w),ft=e(w,"P",{"data-svelte-h":!0}),o(ft)!=="svelte-fd9fqi"&&(ft.innerHTML=si),Ua=a(w),gt=e(w,"P",{"data-svelte-h":!0}),o(gt)!=="svelte-ggug97"&&(gt.innerHTML=ti),za=a(w),wt=e(w,"P",{"data-svelte-h":!0}),o(wt)!=="svelte-cwd8au"&&(wt.innerHTML=ei),w.forEach(i),cn=a(l),T=e(l,"SECTION",{});var P=c(T);_t=e(P,"H3",{"data-svelte-h":!0}),o(_t)!=="svelte-1tv771p"&&(_t.innerHTML=ni),Ja=a(P),Ht=e(P,"P",{"data-svelte-h":!0}),o(Ht)!=="svelte-dpf1xn"&&(Ht.textContent=ai),Ka=a(P),Tt=e(P,"DIV",{class:!0});var Tp=c(Tt);vn=u(Tp,!1),Tp.forEach(i),Ya=a(P),Ct=e(P,"P",{"data-svelte-h":!0}),o(Ct)!=="svelte-t2qoht"&&(Ct.innerHTML=oi),Fa=a(P),Lt=e(P,"P",{"data-svelte-h":!0}),o(Lt)!=="svelte-1xbde8i"&&(Lt.textContent=li),Qa=a(P),bt=e(P,"DIV",{class:!0});var Cp=c(bt);dn=u(Cp,!1),Cp.forEach(i),Ga=a(P),Mt=e(P,"P",{"data-svelte-h":!0}),o(Mt)!=="svelte-yujbal"&&(Mt.textContent=ii),Za=a(P),Et=e(P,"UL",{"data-svelte-h":!0}),o(Et)!=="svelte-1buupz3"&&(Et.innerHTML=pi),Xa=a(P),St=e(P,"P",{"data-svelte-h":!0}),o(St)!=="svelte-12jhfaa"&&(St.textContent=ri),P.forEach(i),kn=a(l),k=e(l,"SECTION",{});var x=c(k);Pt=e(x,"H3",{"data-svelte-h":!0}),o(Pt)!=="svelte-ycnu0o"&&(Pt.innerHTML=ci),so=a(x),It=e(x,"P",{"data-svelte-h":!0}),o(It)!=="svelte-4tj4bc"&&(It.innerHTML=vi),to=a(x),Nt=e(x,"DIV",{class:!0});var Lp=c(Nt);hn=u(Lp,!1),Lp.forEach(i),eo=a(x),jt=e(x,"P",{"data-svelte-h":!0}),o(jt)!=="svelte-3u2mdx"&&(jt.innerHTML=di),no=a(x),$t=e(x,"P",{"data-svelte-h":!0}),o($t)!=="svelte-5rq8ou"&&($t.textContent=ki),ao=a(x),Dt=e(x,"DIV",{class:!0});var bp=c(Dt);un=u(bp,!1),bp.forEach(i),oo=a(x),Ot=e(x,"P",{"data-svelte-h":!0}),o(Ot)!=="svelte-yujbal"&&(Ot.textContent=hi),lo=a(x),At=e(x,"UL",{"data-svelte-h":!0}),o(At)!=="svelte-1mkd2xg"&&(At.innerHTML=ui),io=a(x),qt=e(x,"P",{"data-svelte-h":!0}),o(qt)!=="svelte-1cmpwwi"&&(qt.textContent=yi),po=a(x),Vt=e(x,"P",{"data-svelte-h":!0}),o(Vt)!=="svelte-1ggn1pl"&&(Vt.innerHTML=mi),ro=a(x),Bt=e(x,"P",{"data-svelte-h":!0}),o(Bt)!=="svelte-1he1iwr"&&(Bt.textContent=xi),co=a(x),Wt=e(x,"UL",{"data-svelte-h":!0}),o(Wt)!=="svelte-1gbsujy"&&(Wt.innerHTML=fi),vo=a(x),Rt=e(x,"P",{"data-svelte-h":!0}),o(Rt)!=="svelte-65hm5n"&&(Rt.innerHTML=gi),ko=a(x),Ut=e(x,"P",{"data-svelte-h":!0}),o(Ut)!=="svelte-17de0ld"&&(Ut.innerHTML=wi),x.forEach(i),yn=a(l),X=e(l,"SECTION",{"data-svelte-h":!0}),o(X)!=="svelte-1q4wqey"&&(X.innerHTML=_i),mn=a(l),j=e(l,"SECTION",{});var B=c(j);zt=e(B,"H3",{"data-svelte-h":!0}),o(zt)!=="svelte-1vmf2av"&&(zt.innerHTML=Hi),ho=a(B),Jt=e(B,"P",{"data-svelte-h":!0}),o(Jt)!=="svelte-mu1zrl"&&(Jt.innerHTML=Ti),uo=a(B),Kt=e(B,"P",{"data-svelte-h":!0}),o(Kt)!=="svelte-14itemo"&&(Kt.innerHTML=Ci),yo=a(B),Yt=e(B,"DIV",{class:!0});var Mp=c(Yt);xn=u(Mp,!1),Mp.forEach(i),mo=a(B),Ft=e(B,"P",{"data-svelte-h":!0}),o(Ft)!=="svelte-sr70st"&&(Ft.innerHTML=Li),xo=a(B),Qt=e(B,"DIV",{class:!0});var Ep=c(Qt);fn=u(Ep,!1),Ep.forEach(i),B.forEach(i),gn=a(l),C=e(l,"SECTION",{});var I=c(C);Gt=e(I,"H3",{"data-svelte-h":!0}),o(Gt)!=="svelte-s0htob"&&(Gt.innerHTML=bi),fo=a(I),Zt=e(I,"P",{"data-svelte-h":!0}),o(Zt)!=="svelte-sjtaak"&&(Zt.innerHTML=Mi),go=a(I),Xt=e(I,"UL",{"data-svelte-h":!0}),o(Xt)!=="svelte-327ea3"&&(Xt.innerHTML=Ei),wo=a(I),se=e(I,"P",{"data-svelte-h":!0}),o(se)!=="svelte-20hwr7"&&(se.innerHTML=Si),_o=a(I),te=e(I,"P",{"data-svelte-h":!0}),o(te)!=="svelte-1dvqnks"&&(te.innerHTML=Pi),Ho=a(I),ee=e(I,"DIV",{class:!0});var Sp=c(ee);wn=u(Sp,!1),Sp.forEach(i),To=a(I),ne=e(I,"P",{"data-svelte-h":!0}),o(ne)!=="svelte-y1dq7p"&&(ne.innerHTML=Ii),Co=a(I),ae=e(I,"DIV",{class:!0});var Pp=c(ae);_n=u(Pp,!1),Pp.forEach(i),Lo=a(I),oe=e(I,"P",{"data-svelte-h":!0}),o(oe)!=="svelte-ingsuf"&&(oe.innerHTML=Ni),I.forEach(i),Hn=a(l),M=e(l,"SECTION",{});var $=c(M);le=e($,"H3",{"data-svelte-h":!0}),o(le)!=="svelte-15luduv"&&(le.innerHTML=ji),bo=a($),ie=e($,"P",{"data-svelte-h":!0}),o(ie)!=="svelte-1lwcdgf"&&(ie.innerHTML=$i),Mo=a($),pe=e($,"P",{"data-svelte-h":!0}),o(pe)!=="svelte-8e1ru4"&&(pe.textContent=Di),Eo=a($),re=e($,"UL",{"data-svelte-h":!0}),o(re)!=="svelte-d5yri5"&&(re.innerHTML=Oi),So=a($),ce=e($,"P",{"data-svelte-h":!0}),o(ce)!=="svelte-kouh63"&&(ce.innerHTML=Ai),Po=a($),ve=e($,"DIV",{class:!0});var Ip=c(ve);Tn=u(Ip,!1),Ip.forEach(i),Io=a($),de=e($,"P",{"data-svelte-h":!0}),o(de)!=="svelte-16bpiug"&&(de.innerHTML=qi),No=a($),ke=e($,"DIV",{class:!0});var Np=c(ke);Cn=u(Np,!1),Np.forEach(i),$.forEach(i),Ln=a(l),f=e(l,"SECTION",{});var L=c(f);he=e(L,"H3",{"data-svelte-h":!0}),o(he)!=="svelte-d3b8iu"&&(he.innerHTML=Vi),jo=a(L),ue=e(L,"P",{"data-svelte-h":!0}),o(ue)!=="svelte-1h7dkrx"&&(ue.textContent=Bi),$o=a(L),ye=e(L,"DIV",{class:!0});var jp=c(ye);bn=u(jp,!1),jp.forEach(i),Do=a(L),me=e(L,"P",{"data-svelte-h":!0}),o(me)!=="svelte-144huvt"&&(me.innerHTML=Wi),Oo=a(L),xe=e(L,"P",{"data-svelte-h":!0}),o(xe)!=="svelte-1n3xk85"&&(xe.textContent=Ri),Ao=a(L),fe=e(L,"DIV",{class:!0});var $p=c(fe);Mn=u($p,!1),$p.forEach(i),qo=a(L),ge=e(L,"P",{"data-svelte-h":!0}),o(ge)!=="svelte-yujbal"&&(ge.textContent=Ui),Vo=a(L),we=e(L,"UL",{"data-svelte-h":!0}),o(we)!=="svelte-9aoyfe"&&(we.innerHTML=zi),Bo=a(L),_e=e(L,"P",{"data-svelte-h":!0}),o(_e)!=="svelte-11d73qe"&&(_e.innerHTML=Ji),Wo=a(L),He=e(L,"P",{"data-svelte-h":!0}),o(He)!=="svelte-1hgcktt"&&(He.innerHTML=Ki),Ro=a(L),Te=e(L,"P",{"data-svelte-h":!0}),o(Te)!=="svelte-1wsgn2n"&&(Te.textContent=Yi),L.forEach(i),En=a(l),g=e(l,"SECTION",{});var b=c(g);Ce=e(b,"H3",{"data-svelte-h":!0}),o(Ce)!=="svelte-13gkal1"&&(Ce.innerHTML=Fi),Uo=a(b),Le=e(b,"P",{"data-svelte-h":!0}),o(Le)!=="svelte-qr4dwl"&&(Le.innerHTML=Qi),zo=a(b),be=e(b,"P",{"data-svelte-h":!0}),o(be)!=="svelte-1ro7ip2"&&(be.textContent=Gi),Jo=a(b),Me=e(b,"DIV",{class:!0});var Dp=c(Me);Sn=u(Dp,!1),Dp.forEach(i),Ko=a(b),Ee=e(b,"P",{"data-svelte-h":!0}),o(Ee)!=="svelte-1akruj0"&&(Ee.innerHTML=Zi),Yo=a(b),Se=e(b,"P",{"data-svelte-h":!0}),o(Se)!=="svelte-1sjh8xc"&&(Se.textContent=Xi),Fo=a(b),Pe=e(b,"DIV",{class:!0});var Op=c(Pe);Pn=u(Op,!1),Op.forEach(i),Qo=a(b),Ie=e(b,"P",{"data-svelte-h":!0}),o(Ie)!=="svelte-wlrenv"&&(Ie.textContent=sp),Go=a(b),Ne=e(b,"DIV",{class:!0});var Ap=c(Ne);In=u(Ap,!1),Ap.forEach(i),Zo=a(b),je=e(b,"P",{"data-svelte-h":!0}),o(je)!=="svelte-ncob8m"&&(je.textContent=tp),Xo=a(b),$e=e(b,"P",{"data-svelte-h":!0}),o($e)!=="svelte-iz5t0f"&&($e.innerHTML=ep),b.forEach(i),Nn=a(l),ss=e(l,"SECTION",{"data-svelte-h":!0}),o(ss)!=="svelte-hivjae"&&(ss.innerHTML=np),jn=a(l),ts=e(l,"SECTION",{"data-svelte-h":!0}),o(ts)!=="svelte-1j85k39"&&(ts.innerHTML=ap),$n=a(l),es=e(l,"SECTION",{"data-svelte-h":!0}),o(es)!=="svelte-1gylvhj"&&(es.innerHTML=op),Dn=a(l),ns=e(l,"SECTION",{"data-svelte-h":!0}),o(ns)!=="svelte-jvv3ew"&&(ns.innerHTML=lp),On=a(l),as=e(l,"SECTION",{"data-svelte-h":!0}),o(as)!=="svelte-1u7mhig"&&(as.innerHTML=ip),this.h()},h(){Oe.a=null,y(is,"class","code-section"),qe.a=null,y(rs,"class","code-section"),Be.a=null,y(vs,"class","code-section"),Re.a=null,y(ks,"class","code-section"),ze.a=null,y(gs,"class","code-section"),Je.a=null,y(Hs,"class","code-section"),Ke.a=null,y(bs,"class","code-section"),Ye.a=null,y(Ps,"class","code-section"),Fe.a=null,y(js,"class","code-section"),Ge.a=null,y(Bs,"class","code-section"),Ze.a=null,y(Us,"class","code-section"),tn.a=null,y(Gs,"class","code-section"),nn.a=null,y(et,"class","code-section"),on.a=null,y(it,"class","code-section"),pn.a=null,y(kt,"class","code-section"),rn.a=null,y(ut,"class","code-section"),vn.a=null,y(Tt,"class","code-section"),dn.a=null,y(bt,"class","code-section"),hn.a=null,y(Nt,"class","code-section"),un.a=null,y(Dt,"class","code-section"),xn.a=null,y(Yt,"class","code-section"),fn.a=null,y(Qt,"class","code-section"),wn.a=null,y(ee,"class","code-section"),_n.a=null,y(ae,"class","code-section"),Tn.a=null,y(ve,"class","code-section"),Cn.a=null,y(ke,"class","code-section"),bn.a=null,y(ye,"class","code-section"),Mn.a=null,y(fe,"class","code-section"),Sn.a=null,y(Me,"class","code-section"),Pn.a=null,y(Pe,"class","code-section"),In.a=null,y(Ne,"class","code-section")},m(l,p){r(l,_,p),r(l,R,p),r(l,W,p),r(l,A,p),r(l,U,p),r(l,De,p),r(l,Y,p),s(Y,ls),s(Y,Vn),s(Y,is),Oe.m(Wp,is),r(l,Ae,p),r(l,F,p),s(F,ps),s(F,Bn),s(F,rs),qe.m(Rp,rs),r(l,Ve,p),r(l,Q,p),s(Q,cs),s(Q,Wn),s(Q,vs),Be.m(Up,vs),r(l,We,p),r(l,q,p),s(q,ds),s(q,Rn),s(q,ks),Re.m(zp,ks),s(q,Un),s(q,hs),s(q,zn),s(q,us),r(l,Ue,p),r(l,v,p),s(v,ys),s(v,Jn),s(v,ms),s(v,Kn),s(v,xs),s(v,Yn),s(v,fs),s(v,Fn),s(v,gs),ze.m(Jp,gs),s(v,Qn),s(v,ws),s(v,Gn),s(v,_s),s(v,Zn),s(v,Hs),Je.m(Kp,Hs),s(v,Xn),s(v,Ts),s(v,sa),s(v,Cs),s(v,ta),s(v,Ls),s(v,ea),s(v,bs),Ke.m(Yp,bs),s(v,na),s(v,Ms),s(v,aa),s(v,Es),s(v,oa),s(v,Ss),s(v,la),s(v,Ps),Ye.m(Fp,Ps),s(v,ia),s(v,Is),s(v,pa),s(v,Ns),s(v,ra),s(v,js),Fe.m(Qp,js),s(v,ca),s(v,$s),s(v,va),s(v,Ds),r(l,Qe,p),r(l,H,p),s(H,Os),s(H,da),s(H,As),s(H,ka),s(H,qs),s(H,ha),s(H,Vs),s(H,ua),s(H,Bs),Ge.m(Gp,Bs),s(H,ya),s(H,Ws),s(H,ma),s(H,Rs),s(H,xa),s(H,Us),Ze.m(Zp,Us),s(H,fa),s(H,zs),s(H,ga),s(H,Js),r(l,Xe,p),r(l,Z,p),r(l,sn,p),r(l,D,p),s(D,Ks),s(D,wa),s(D,Ys),s(D,_a),s(D,Fs),s(D,Ha),s(D,Qs),s(D,Ta),s(D,Gs),tn.m(Xp,Gs),r(l,en,p),r(l,O,p),s(O,Zs),s(O,Ca),s(O,Xs),s(O,La),s(O,st),s(O,ba),s(O,tt),s(O,Ma),s(O,et),nn.m(sr,et),r(l,an,p),r(l,N,p),s(N,nt),s(N,Ea),s(N,at),s(N,Sa),s(N,ot),s(N,Pa),s(N,lt),s(N,Ia),s(N,it),on.m(tr,it),s(N,Na),s(N,pt),r(l,ln,p),r(l,m,p),s(m,rt),s(m,ja),s(m,ct),s(m,$a),s(m,vt),s(m,Da),s(m,dt),s(m,Oa),s(m,kt),pn.m(er,kt),s(m,Aa),s(m,ht),s(m,qa),s(m,ut),rn.m(nr,ut),s(m,Va),s(m,yt),s(m,Ba),s(m,mt),s(m,Wa),s(m,xt),s(m,Ra),s(m,ft),s(m,Ua),s(m,gt),s(m,za),s(m,wt),r(l,cn,p),r(l,T,p),s(T,_t),s(T,Ja),s(T,Ht),s(T,Ka),s(T,Tt),vn.m(ar,Tt),s(T,Ya),s(T,Ct),s(T,Fa),s(T,Lt),s(T,Qa),s(T,bt),dn.m(or,bt),s(T,Ga),s(T,Mt),s(T,Za),s(T,Et),s(T,Xa),s(T,St),r(l,kn,p),r(l,k,p),s(k,Pt),s(k,so),s(k,It),s(k,to),s(k,Nt),hn.m(lr,Nt),s(k,eo),s(k,jt),s(k,no),s(k,$t),s(k,ao),s(k,Dt),un.m(ir,Dt),s(k,oo),s(k,Ot),s(k,lo),s(k,At),s(k,io),s(k,qt),s(k,po),s(k,Vt),s(k,ro),s(k,Bt),s(k,co),s(k,Wt),s(k,vo),s(k,Rt),s(k,ko),s(k,Ut),r(l,yn,p),r(l,X,p),r(l,mn,p),r(l,j,p),s(j,zt),s(j,ho),s(j,Jt),s(j,uo),s(j,Kt),s(j,yo),s(j,Yt),xn.m(pr,Yt),s(j,mo),s(j,Ft),s(j,xo),s(j,Qt),fn.m(rr,Qt),r(l,gn,p),r(l,C,p),s(C,Gt),s(C,fo),s(C,Zt),s(C,go),s(C,Xt),s(C,wo),s(C,se),s(C,_o),s(C,te),s(C,Ho),s(C,ee),wn.m(cr,ee),s(C,To),s(C,ne),s(C,Co),s(C,ae),_n.m(vr,ae),s(C,Lo),s(C,oe),r(l,Hn,p),r(l,M,p),s(M,le),s(M,bo),s(M,ie),s(M,Mo),s(M,pe),s(M,Eo),s(M,re),s(M,So),s(M,ce),s(M,Po),s(M,ve),Tn.m(dr,ve),s(M,Io),s(M,de),s(M,No),s(M,ke),Cn.m(kr,ke),r(l,Ln,p),r(l,f,p),s(f,he),s(f,jo),s(f,ue),s(f,$o),s(f,ye),bn.m(hr,ye),s(f,Do),s(f,me),s(f,Oo),s(f,xe),s(f,Ao),s(f,fe),Mn.m(ur,fe),s(f,qo),s(f,ge),s(f,Vo),s(f,we),s(f,Bo),s(f,_e),s(f,Wo),s(f,He),s(f,Ro),s(f,Te),r(l,En,p),r(l,g,p),s(g,Ce),s(g,Uo),s(g,Le),s(g,zo),s(g,be),s(g,Jo),s(g,Me),Sn.m(yr,Me),s(g,Ko),s(g,Ee),s(g,Yo),s(g,Se),s(g,Fo),s(g,Pe),Pn.m(mr,Pe),s(g,Qo),s(g,Ie),s(g,Go),s(g,Ne),In.m(xr,Ne),s(g,Zo),s(g,je),s(g,Xo),s(g,$e),r(l,Nn,p),r(l,ss,p),r(l,jn,p),r(l,ts,p),r(l,$n,p),r(l,es,p),r(l,Dn,p),r(l,ns,p),r(l,On,p),r(l,as,p)},p:wr,d(l){l&&(i(_),i(R),i(W),i(A),i(U),i(De),i(Y),i(Ae),i(F),i(Ve),i(Q),i(We),i(q),i(Ue),i(v),i(Qe),i(H),i(Xe),i(Z),i(sn),i(D),i(en),i(O),i(an),i(N),i(ln),i(m),i(cn),i(T),i(kn),i(k),i(yn),i(X),i(mn),i(j),i(gn),i(C),i(Hn),i(M),i(Ln),i(f),i(En),i(g),i(Nn),i(ss),i(jn),i(ts),i($n),i(es),i(Dn),i(ns),i(On),i(as))}}}function jr(os){let _,K;const R=[os[0],Bp];let W={$$slots:{default:[Nr]},$$scope:{ctx:os}};for(let S=0;S<R.length;S+=1)W=sl(W,R[S]);return _=new Pr({props:W}),{c(){Tr(_.$$.fragment)},l(S){Cr(_.$$.fragment,S)},m(S,A){Lr(_,S,A),K=!0},p(S,[A]){const U=A&1?Sr(R,[A&1&&Vp(S[0]),A&0&&Vp(Bp)]):{};A&2&&(U.$$scope={dirty:A,ctx:S}),_.$set(U)},i(S){K||(br(_.$$.fragment,S),K=!0)},o(S){Mr(_.$$.fragment,S),K=!1},d(S){Er(_,S)}}}const Bp={title:"Compile Svelte in your head (Part 1)",date:"2020-03-04T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"BackgroundA while ago, @swyx came back to Singapore and visited us in Shopee Singapore (We're hiring!).He gave an amazing sharing on Compile Svelte in Your Head (video) in the ReactKnowledgeable Originals...",tableOfContents:[{link:"background",title:"Background"},{link:"introduction",title:"Introduction",nested:[{link:"creating-an-element",title:"Creating an element"},{link:"updating-an-element",title:"Updating an element"},{link:"removing-an-element",title:"Removing an element"},{link:"adding-style-to-an-element",title:"Adding style to an element"},{link:"listen-for-click-events-on-an-element",title:"Listen for click events on an element"}]},{link:"svelte-syntax",title:"Svelte syntax"},{link:"compile-svelte-in-your-head",title:"Compile Svelte in your Head",nested:[{link:"create-fragment",title:"create_fragment",nested:[{link:"c",title:"- c()"},{link:"m-target-anchor",title:"- m(target, anchor)"},{link:"d-detaching",title:"- d(detaching)"}]},{link:"export-default-class-app-extends-sveltecomponent",title:"export default class App extends SvelteComponent"},{link:"adding-data",title:"Adding data"},{link:"updating-data",title:"Updating data",nested:[{link:"p-ctx-dirty",title:"- p(ctx, dirty)"}]},{link:"instance-variable",title:"instance variable"},{link:"instance-self-props-invalidate",title:"instance($self, $props, $invalidate)"},{link:"invalidate",title:"$invalidate"},{link:"adding-event-listeners",title:"Adding event listeners"},{link:"listen-and-dispose",title:"listen and dispose"}]},{link:"summary",title:"Summary",nested:[{link:"1-create-fragment",title:"1. create_fragment"},{link:"2-instance",title:"2. instance"},{link:"3-class-app-extends-sveltecomponent",title:"3. class App extends SvelteComponent"}]},{link:"closing-note",title:"Closing Note"}]};function $r(os,_,K){return gr("blog",{image:Ir}),os.$$set=R=>{K(0,_=sl(sl({},_),qp(R)))},_=qp(_),[_]}class Vr extends _r{constructor(_){super(),Hr(this,_,$r,jr,fr,{})}}export{Vr as component};
