import{s as H,d as T,e as P,f as L,n as S}from"../chunks/scheduler.85ImRbsk.js";import{S as $,i as I,m as j,n as q,o as N,t as E,a as O,p as B,e as f,s as b,c as _,q as d,h as w,j as c,g as p}from"../chunks/index.JMRAb4ib.js";import{g as J,a as y}from"../chunks/code-snippet.p32Anx_S.js";import{B as R}from"../chunks/BlogLayout.n3Egsk1p.js";const U=""+new URL("../assets/hero-twitter.jaM82fEL.jpg",import.meta.url).href;function Z(m){let e,i='<strong>⬅ ⬅ Previously in <a href="/compile-svelte-in-your-head-part-4/">Part 4</a>.</strong>',l,n,o="In this article, we are going to cover the 2nd logic block, the <strong>each block</strong>.",a,s,x='To make sure we are on the same page, let&#39;s first explain how <code class="inline">{#each}</code> block works.',g,h,k='<h2><a href="#the-123-each-125-block" id="the-123-each-125-block">The <code class="inline">{#each}</code> block</a></h2> <p><code class="inline">{#each}</code> block allow us to loop</p>',v,u,C='<h2><a href="#closing-note" id="closing-note">Closing Note</a></h2> <p>If you wish to learn more about Svelte, <a href="https://twitter.com/lihautan" rel="nofollow">follow me on Twitter</a>.</p> <p>I&#39;ll post it on Twitter when the next part is ready, the next post will be about <code class="inline">bind:group</code>.</p>';return{c(){e=f("p"),e.innerHTML=i,l=b(),n=f("p"),n.innerHTML=o,a=b(),s=f("p"),s.innerHTML=x,g=b(),h=f("section"),h.innerHTML=k,v=b(),u=f("section"),u.innerHTML=C},l(t){e=_(t,"P",{"data-svelte-h":!0}),d(e)!=="svelte-1xu8q5p"&&(e.innerHTML=i),l=w(t),n=_(t,"P",{"data-svelte-h":!0}),d(n)!=="svelte-i8xv6d"&&(n.innerHTML=o),a=w(t),s=_(t,"P",{"data-svelte-h":!0}),d(s)!=="svelte-1nhc5at"&&(s.innerHTML=x),g=w(t),h=_(t,"SECTION",{"data-svelte-h":!0}),d(h)!=="svelte-1658y9x"&&(h.innerHTML=k),v=w(t),u=_(t,"SECTION",{"data-svelte-h":!0}),d(u)!=="svelte-1qbsfed"&&(u.innerHTML=C)},m(t,r){c(t,e,r),c(t,l,r),c(t,n,r),c(t,a,r),c(t,s,r),c(t,g,r),c(t,h,r),c(t,v,r),c(t,u,r)},p:S,d(t){t&&(p(e),p(l),p(n),p(a),p(s),p(g),p(h),p(v),p(u))}}}function z(m){let e,i;const l=[m[0],M];let n={$$slots:{default:[Z]},$$scope:{ctx:m}};for(let o=0;o<l.length;o+=1)n=T(n,l[o]);return e=new R({props:n}),{c(){j(e.$$.fragment)},l(o){q(e.$$.fragment,o)},m(o,a){N(e,o,a),i=!0},p(o,[a]){const s=a&1?J(l,[a&1&&y(o[0]),a&0&&y(M)]):{};a&2&&(s.$$scope={dirty:a,ctx:o}),e.$set(s)},i(o){i||(E(e.$$.fragment,o),i=!0)},o(o){O(e.$$.fragment,o),i=!1},d(o){B(e,o)}}}const M={title:"Compile Svelte in your head (Part 5)",date:"2020-09-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",wip:!0,label:"blog",description:"⬅ ⬅ Previously in Part 4.In this article, we are going to cover the 2nd logic block, the each block.To make sure we are on the same page, let's first explain how `&#123;#each&#125;` block works.The `&#123;#each&#125;`...",tableOfContents:[{link:"the-123-each-125-block",title:"The  `&#123;#each&#125;`  block"},{link:"closing-note",title:"Closing Note"}]};function A(m,e,i){return P("blog",{image:U}),m.$$set=l=>{i(0,e=T(T({},e),L(l)))},e=L(e),[e]}class Q extends ${constructor(e){super(),I(this,e,A,z,H,{})}}export{Q as component};
