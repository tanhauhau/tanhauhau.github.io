import"../chunks/Bzak7iHL.js";import"../chunks/kfVmCPsV.js";import{p as ee,g as se,d as te,b as ie,s as i,f as oe,e,t as ae,a as ne,r as s,n as re}from"../chunks/C2PHntuy.js";import{h as le}from"../chunks/C3QlhiH-.js";import{s as t}from"../chunks/CEusTUg_.js";import{i as pe}from"../chunks/BQOOHHT8.js";import{l as ce,s as de}from"../chunks/gzNpScmH.js";import{B as he}from"../chunks/B1caYEk9.js";import{t as ue}from"../chunks/C3bQ3Oc7.js";const W=""+new URL("../assets/problem.Ca9ATvXM.png",import.meta.url).href,_e=""+new URL("../assets/problem.6AGZQAX2.png",import.meta.url).href,me=""+new URL("../assets/problem.B3S6ryCD.webp",import.meta.url).href,ge=""+new URL("../assets/problem.DPR3tCgW.webp",import.meta.url).href,X=""+new URL("../assets/problem-2.D1lE3WEg.png",import.meta.url).href,ye=""+new URL("../assets/problem-2.CRDHh_81.png",import.meta.url).href,be=""+new URL("../assets/problem-2.BO_6nV0_.webp",import.meta.url).href,we=""+new URL("../assets/problem-2.CfaAPSWj.webp",import.meta.url).href,G=""+new URL("../assets/source.ja6OfFAP.png",import.meta.url).href,ve=""+new URL("../assets/source.CvD3KDhq.png",import.meta.url).href,ke=""+new URL("../assets/source.DqXCM-fF.webp",import.meta.url).href,fe=""+new URL("../assets/source.uq4CKr5U.webp",import.meta.url).href,E=""+new URL("../assets/expectation.Jr-DeTMi.png",import.meta.url).href,xe=""+new URL("../assets/expectation.DV29Urib.png",import.meta.url).href,Ue=""+new URL("../assets/expectation.B1_iLUt6.webp",import.meta.url).href,$e=""+new URL("../assets/expectation.D9vxW10a.webp",import.meta.url).href,F=""+new URL("../assets/babel-issue.DhaO0EeX.png",import.meta.url).href,Le=""+new URL("../assets/babel-issue.xVQvc4R0.png",import.meta.url).href,Re=""+new URL("../assets/babel-issue.BDUqDobu.webp",import.meta.url).href,je=""+new URL("../assets/babel-issue.DeHXisGl.webp",import.meta.url).href,H=""+new URL("../assets/uglify.KH_F8sCy.png",import.meta.url).href,Ie=""+new URL("../assets/uglify.yDzNnAL8.png",import.meta.url).href,De=""+new URL("../assets/uglify.BdspYmfW.webp",import.meta.url).href,Se=""+new URL("../assets/uglify.q22znrfX.webp",import.meta.url).href,K=""+new URL("../assets/babel-issue-2.Q3SOogDY.png",import.meta.url).href,Ce=""+new URL("../assets/babel-issue-2.CS57ZuUq.png",import.meta.url).href,Te=""+new URL("../assets/babel-issue-2.B-P_rbvT.webp",import.meta.url).href,ze=""+new URL("../assets/babel-issue-2.8yqhMipG.webp",import.meta.url).href,Q={title:"The `ascii_only` option in uglify-js",date:"2018-10-27T08:00:00Z",description:"that get my emoji showing in my chrome extension",label:"blog",tableOfContents:[{link:"til-uglifyjs-ascii-only-option-use-it-when-you-want-to-escape-unicode-characters",title:"TIL: UglifyJs ascii_only option, use it when you want to escape Unicode characters."}]},{title:Fe,date:He,description:Ke,label:Qe,tableOfContents:Ve}=Q;var Ae=ie('<p>The background story</p> <p>I was working on a chrome extension, and trying to add some emojis üòçüòÄüòé into the extension, however I realised the üòçüòÄüòé are not rendered correctly!</p> <p><span style="display: block; position: relative; padding-top: 66.329%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="The üòçüòçüòÄüòÄisn‚Äôt rendered correctly in chrome extension"/></picture></span></p> <p>And so I inspect the source code loaded into the chrome extension, it wasn‚Äôt loaded correctly as well!</p> <p><span style="display: block; position: relative; padding-top: 52.052%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="problem with the source too"/></picture></span></p> <p>And so I think, probably the encoding issue was caused by the webpack compilation, but, my compiled code looks exactly fine!</p> <p><span style="display: block; position: relative; padding-top: 48.957%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="The compiled code seems okay!"/></picture></span></p> <p>So, most likely is a decoding issue when the emoji code get loaded into chrome extension. So I manually changed the emoji in the compiled code to <code class="inline">\\ud83d\\ude0d</code> (unicode for üòç). Guess what? The emoji is showing correctly in the chrome extension!</p> <p><span style="display: block; position: relative; padding-top: 53.374%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="üòç!"/></picture></span></p> <p>So I changed my source code to manually type in the unicode, and compiled it using webpack. To my surprise, the unicode was compiled back into the emoji (üòç) it represents!</p> <p>I googled around and I found <a href="https://github.com/babel/babel/pull/4478" rel="nofollow">this fix for babel-generator</a>:</p> <p><span style="display: block; position: relative; padding-top: 41.375%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="babel issue"/></picture></span></p> <p>I checked my babel version, and it had included this fix. So what went wrong?</p> <hr/> <p>My colleague reminded me that during webpack compilation, there are 2 phases, the <strong>transpilation</strong> (via babel) and the <strong>minification</strong> (via uglify plugin).</p> <p>So I disabled the optimisation in webpack config, and noticed that my compiled code contains the original unicode string (<code class="inline">\\ud83d\\ude0d</code>), instead of the emoji (üòç) string. So the unicode string was converted to emoji string during minification!</p> <p>So I went to my favourite <a href="https://skalman.github.io/UglifyJS-online/" rel="nofollow">Online JavaScript Minifier</a> (by <a href="https://github.com/skalman" rel="nofollow">skalman</a>) to try it out.</p> <p><span style="display: block; position: relative; padding-top: 21.195%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="online javasript minifier"/></picture></span></p> <p>After some googling, I <a href="https://github.com/mishoo/UglifyJS2/issues/490" rel="nofollow">found this issue</a> which described my scenario perfectly.</p> <p><span style="display: block; position: relative; padding-top: 42.304%; width: 100%;"><picture><source type="image/webp"/><img loading="lazy" style="position: absolute; top: 0; width: 100%; height: 100%" alt="why uglifyjs always compress unicode characters to utf8"/></picture></span></p> <p>Turned out there is a <code class="inline">ascii_only</code> for <a href="https://github.com/mishoo/UglifyJS2#output-options" rel="nofollow">output options</a>, and it is default to <code class="inline">false</code>. So I set <code class="inline">ascii_only</code> to <code class="inline">true</code>, ran webpack, and checked my compiled code, it contained the unicode string (<code class="inline">\\ud83d\\ude0d</code>)! And even when I wrote emoji string (üòç) in my source code, it got compiled to unicode as well.</p> <div class="code-section"><!></div> <hr/> <section><h2><a href="#til-uglifyjs-ascii-only-option-use-it-when-you-want-to-escape-unicode-characters" id="til-uglifyjs-ascii-only-option-use-it-when-you-want-to-escape-unicode-characters">TIL: UglifyJs ascii_only option, use it when you want to escape Unicode characters.</a></h2> <hr/> <p>Why is there a <code class="inline">ascii_only</code> option?</p> <p>My guess is that it takes less space for a unicode character (16‚Äì17bit) than the escaped ascii characters (6 <em>8 bit‚Ää‚Äî‚Ää12</em> bit), that‚Äôs why using unicode character is the default option (<code class="inline">ascii_only=false</code>).</p></section>',1);function Ze(V,d){const Z=ce(d,["children","$$slots","$$events","$$legacy"]);ee(d,!1),se("blog",{image:ue}),pe(),he(V,de(()=>Z,()=>Q,{children:(Y,Je)=>{var h=Ae(),o=i(oe(h),4),u=e(o),_=e(u),m=e(_),g=i(m);s(_),s(u),s(o);var a=i(o,4),y=e(a),b=e(y),w=e(b),v=i(w);s(b),s(y),s(a);var n=i(a,4),k=e(n),f=e(k),x=e(f),U=i(x);s(f),s(k),s(n);var r=i(n,4),$=e(r),L=e($),R=e(L),j=i(R);s(L),s($),s(r);var l=i(r,6),I=e(l),D=e(I),S=e(D),C=i(S);s(D),s(I),s(l);var p=i(l,12),T=e(p),z=e(T),A=e(z),J=i(A);s(z),s(T),s(p);var c=i(p,4),q=e(c),B=e(q),O=e(B),M=i(O);s(B),s(q),s(c);var P=i(c,4),N=e(P);le(N,()=>`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">UglifyJsPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;uglifyjs-webpack-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  optimization</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    minimizer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UglifyJsPlugin</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      uglifyOptions</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        output</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// true for &#96;ascii_only&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          ascii_only</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`),s(P),re(4),ae(()=>{t(m,"srcset",`${me}, ${ge} 2x`),t(g,"src",W),t(g,"srcset",`${W}, ${_e} 2x`),t(w,"srcset",`${be}, ${we} 2x`),t(v,"src",X),t(v,"srcset",`${X}, ${ye} 2x`),t(x,"srcset",`${ke}, ${fe} 2x`),t(U,"src",G),t(U,"srcset",`${G}, ${ve} 2x`),t(R,"srcset",`${Ue}, ${$e} 2x`),t(j,"src",E),t(j,"srcset",`${E}, ${xe} 2x`),t(S,"srcset",`${Re}, ${je} 2x`),t(C,"src",F),t(C,"srcset",`${F}, ${Le} 2x`),t(A,"srcset",`${De}, ${Se} 2x`),t(J,"src",H),t(J,"srcset",`${H}, ${Ie} 2x`),t(O,"srcset",`${Te}, ${ze} 2x`),t(M,"src",K),t(M,"srcset",`${K}, ${Ce} 2x`)}),ne(Y,h)},$$slots:{default:!0}})),te()}export{Ze as component};
